<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\win-capture\game-capture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-hotkey.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/sse-intrin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ipc-util/pipe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obfuscate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inject-library.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-hook-info.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-hook-ver.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window-helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor-capture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"app-helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nt-stuff.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[game-capture: '%s'] " format, obs_source_get_name(gc-&gt;source), ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_MODE</name></cpp:macro> <cpp:value>"capture_mode"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_CAPTURE_WINDOW</name></cpp:macro> <cpp:value>"window"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_ACTIVE_WINDOW</name></cpp:macro> <cpp:value>"active_window"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_WINDOW_PRIORITY</name></cpp:macro> <cpp:value>"priority"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_COMPATIBILITY</name></cpp:macro> <cpp:value>"sli_compatibility"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_FORCE_SCALING</name></cpp:macro> <cpp:value>"force_scaling"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_SCALE_RES</name></cpp:macro> <cpp:value>"scale_res"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_CURSOR</name></cpp:macro> <cpp:value>"capture_cursor"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_TRANSPARENCY</name></cpp:macro> <cpp:value>"allow_transparency"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_LIMIT_FRAMERATE</name></cpp:macro> <cpp:value>"limit_framerate"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_CAPTURE_OVERLAYS</name></cpp:macro> <cpp:value>"capture_overlays"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_ANTI_CHEAT_HOOK</name></cpp:macro> <cpp:value>"anti_cheat_hook"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_HOOK_RATE</name></cpp:macro> <cpp:value>"hook_rate"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_ANY_FULLSCREEN</name></cpp:macro> <cpp:value>"capture_any_fullscreen"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_MODE_ANY</name></cpp:macro> <cpp:value>"any_fullscreen"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_MODE_WINDOW</name></cpp:macro> <cpp:value>"window"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETTING_MODE_HOTKEY</name></cpp:macro> <cpp:value>"hotkey"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOTKEY_START</name></cpp:macro> <cpp:value>"hotkey_start"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOTKEY_STOP</name></cpp:macro> <cpp:value>"hotkey_stop"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MODE</name></cpp:macro> <cpp:value>obs_module_text("Mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_GAME_CAPTURE</name></cpp:macro> <cpp:value>obs_module_text("GameCapture")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_ANY_FULLSCREEN</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.AnyFullscreen")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_SLI_COMPATIBILITY</name></cpp:macro> <cpp:value>obs_module_text("SLIFix")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_ALLOW_TRANSPARENCY</name></cpp:macro> <cpp:value>obs_module_text("AllowTransparency")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_FORCE_SCALING</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.ForceScaling")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_SCALE_RES</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.ScaleRes")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_WINDOW</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Window")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_PRIORITY</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_TITLE</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority.Title")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_CLASS</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority.Class")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MATCH_EXE</name></cpp:macro> <cpp:value>obs_module_text("WindowCapture.Priority.Exe")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CAPTURE_CURSOR</name></cpp:macro> <cpp:value>obs_module_text("CaptureCursor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LIMIT_FRAMERATE</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.LimitFramerate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CAPTURE_OVERLAYS</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.CaptureOverlays")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_ANTI_CHEAT_HOOK</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.AntiCheatHook")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOOK_RATE</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HookRate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOOK_RATE_SLOW</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HookRate.Slow")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOOK_RATE_NORMAL</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HookRate.Normal")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOOK_RATE_FAST</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HookRate.Fast")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOOK_RATE_FASTEST</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HookRate.Fastest")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MODE_ANY</name></cpp:macro> <cpp:value>TEXT_ANY_FULLSCREEN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MODE_WINDOW</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.CaptureWindow")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MODE_HOTKEY</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.UseHotkey")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOTKEY_START</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HotkeyStart")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HOTKEY_STOP</name></cpp:macro> <cpp:value>obs_module_text("GameCapture.HotkeyStop")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RETRY_INTERVAL</name></cpp:macro> <cpp:value>2.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_RETRY_INTERVAL</name></cpp:macro> <cpp:value>4.0f</cpp:value></cpp:define>

<enum>enum <name>capture_mode</name> <block>{

<decl><name>CAPTURE_MODE_ANY</name></decl>,

<decl><name>CAPTURE_MODE_WINDOW</name></decl>,

<decl><name>CAPTURE_MODE_HOTKEY</name></decl>

}</block>;</enum>

<enum>enum <name>hook_rate</name> <block>{

<decl><name>HOOK_RATE_SLOW</name></decl>,

<decl><name>HOOK_RATE_NORMAL</name></decl>,

<decl><name>HOOK_RATE_FAST</name></decl>,

<decl><name>HOOK_RATE_FASTEST</name></decl>

}</block>;</enum>

<struct>struct <name>game_capture_config</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>executable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>capture_mode</name></name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scale_cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scale_cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_shmem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_scaling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>allow_transparency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>limit_framerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>capture_overlays</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>anticheat_hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>hook_rate</name></name></type> <name>hook_rate</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>game_capture</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cursor_data</name></name></type> <name>cursor_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>injector_process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>process_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>thread_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>next_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>retry_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fps_reset_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>retry_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>executable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>window_priority</name></name></type> <name>priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_id</name></type> <name>hotkey_pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>hotkey_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>deactivate_hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>activate_hook_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wait_for_target_startup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>showing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>capturing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>activate_hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>process_is_64bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error_acquiring</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dwm_capture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>initial_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>convert_16bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cursor_hidden</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture_config</name></name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ipc_pipe_server_t</name></type> <name>pipe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hook_info</name></name> <modifier>*</modifier></type><name>global_hook_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>keepalive_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_restart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_ready</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_exit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_data_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>global_hook_info_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>target_process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>texture_mutexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>app_sid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retrying</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cursor_check_time</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>shmem_data</name></name> <modifier>*</modifier></type><name>shmem_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>texture_buffers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>shtex_data</name></name> <modifier>*</modifier></type><name>shtex_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</union>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copy_texture</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>graphics_offsets</name></name></type> <name>offsets32</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>graphics_offsets</name></name></type> <name>offsets64</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>use_anticheat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>anticheat_hook</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_mutex_plus_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>new_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">L"%s%lu"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr> ?</condition><then> <expr><call><name>open_app_mutex</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>open_mutex</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_mutex_gc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>open_mutex_plus_id</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_event_plus_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>new_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">L"%s%lu"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr> ?</condition><then> <expr><call><name>open_app_event</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>open_event</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_event_gc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>open_event_plus_id</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_map_plus_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>new_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>swprintf</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">L"%s%lu"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"map id: %S"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr> ?</condition><then> <expr><call><name>open_app_map</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>OpenFileMappingW</name><argument_list>(<argument><expr><name>GC_MAPPING_FLAGS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_hook_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>open_map_plus_id</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SHMEM_HOOK_INFO</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>gs_color_format</name></name></type> <name>convert_format</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DXGI_FORMAT_R8G8B8A8_UNORM</name></expr>:</case>

<return>return <expr><name>GS_RGBA</name></expr>;</return>

<case>case <expr><name>DXGI_FORMAT_B8G8R8X8_UNORM</name></expr>:</case>

<return>return <expr><name>GS_BGRX</name></expr>;</return>

<case>case <expr><name>DXGI_FORMAT_B8G8R8A8_UNORM</name></expr>:</case>

<return>return <expr><name>GS_BGRA</name></expr>;</return>

<case>case <expr><name>DXGI_FORMAT_R10G10B10A2_UNORM</name></expr>:</case>

<return>return <expr><name>GS_R10G10B10A2</name></expr>;</return>

<case>case <expr><name>DXGI_FORMAT_R16G16B16A16_UNORM</name></expr>:</case>

<return>return <expr><name>GS_RGBA16</name></expr>;</return>

<case>case <expr><name>DXGI_FORMAT_R16G16B16A16_FLOAT</name></expr>:</case>

<return>return <expr><name>GS_RGBA16F</name></expr>;</return>

<case>case <expr><name>DXGI_FORMAT_R32G32B32A32_FLOAT</name></expr>:</case>

<return>return <expr><name>GS_RGBA32F</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>GS_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><operator>*</operator><name>p_handle</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HMODULE</name></type> <name>kernel32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>kernel32_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kernel32_handle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>kernel32_handle</name> <operator>=</operator> <call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"kernel32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>kernel32_handle</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HANDLE</name></type> <name>open_process</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>desired_access</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inherit_handle</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>process_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><specifier>static</specifier> <name>HANDLE</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>open_process_proc</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>open_process_proc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>open_process_proc</name> <operator>=</operator> <call><name>get_obfuscated_func</name><argument_list>(

<argument><expr><call><name>kernel32</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"NuagUykjcxr"</literal></expr></argument>, <argument><expr><literal type="number">0x1B694B59451ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>open_process_proc</name><argument_list>(<argument><expr><name>desired_access</name></expr></argument>, <argument><expr><name>inherit_handle</name></expr></argument>, <argument><expr><name>process_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>hook_rate_to_float</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>hook_rate</name></name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>rate</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HOOK_RATE_SLOW</name></expr>:</case>

<return>return <expr><literal type="number">2.0f</literal></expr>;</return>

<case>case <expr><name>HOOK_RATE_FAST</name></expr>:</case>

<return>return <expr><literal type="number">0.5f</literal></expr>;</return>

<case>case <expr><name>HOOK_RATE_FASTEST</name></expr>:</case>

<return>return <expr><literal type="number">0.1f</literal></expr>;</return>

<case>case <expr><name>HOOK_RATE_NORMAL</name></expr>:</case>

<default>default:</default>

<return>return <expr><literal type="number">1.0f</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ipc_pipe_server_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_data_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>keepalive_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"capture stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>copy_texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>capturing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>retrying</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retrying</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>game_capture_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>hotkey_pair</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_hotkey_pair_unregister</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hotkey_pair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>using_older_non_mode_format</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_has_user_value</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_ANY_FULLSCREEN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>obs_data_has_user_value</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_MODE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture_config</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scale_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_window_strings</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>using_older_non_mode_format</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>any</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_ANY_FULLSCREEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mode_str</name> <operator>=</operator> <ternary><condition><expr><name>any</name></expr> ?</condition><then> <expr><name>SETTING_MODE_ANY</name></expr> </then><else>: <expr><name>SETTING_MODE_WINDOW</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode_str</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode_str</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>, <argument><expr><name>SETTING_MODE_WINDOW</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CAPTURE_MODE_WINDOW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mode_str</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>, <argument><expr><name>SETTING_MODE_HOTKEY</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CAPTURE_MODE_HOTKEY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>CAPTURE_MODE_ANY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <operator>(</operator>enum <name>window_priority</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(

<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_WINDOW_PRIORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>force_shmem</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COMPATIBILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>allow_transparency</name></name> <operator>=</operator>

<call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_TRANSPARENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>force_scaling</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_FORCE_SCALING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>limit_framerate</name></name> <operator>=</operator>

<call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LIMIT_FRAMERATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>capture_overlays</name></name> <operator>=</operator>

<call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CAPTURE_OVERLAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>anticheat_hook</name></name> <operator>=</operator>

<call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_ANTI_CHEAT_HOOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>hook_rate</name></name> <operator>=</operator>

<operator>(</operator>enum <name>hook_rate</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_HOOK_RATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale_str</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_SCALE_RES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>scale_str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu32</name> <literal type="string">"x%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>scale_cx</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>scale_cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>scale_cx</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>scale_cy</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>force_scaling</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>cfg</name><operator>-&gt;</operator><name>scale_cx</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cfg</name><operator>-&gt;</operator><name>scale_cy</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>scale_cx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>scale_cy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>s_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str1</name> <operator>||</operator> <operator>!</operator><name>str2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>capture_needs_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture_config</name></name> <modifier>*</modifier></type><name>cfg1</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>game_capture_config</name></name> <modifier>*</modifier></type><name>cfg2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_WINDOW</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>s_cmp</name><argument_list>(<argument><expr><name><name>cfg1</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>cfg2</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>s_cmp</name><argument_list>(<argument><expr><name><name>cfg1</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>cfg2</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>s_cmp</name><argument_list>(<argument><expr><name><name>cfg1</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>, <argument><expr><name><name>cfg2</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>cfg1</name><operator>-&gt;</operator><name>priority</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>priority</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>force_scaling</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>force_scaling</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>force_scaling</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg1</name><operator>-&gt;</operator><name>scale_cx</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>scale_cx</name></name> <operator>||</operator>

<name><name>cfg1</name><operator>-&gt;</operator><name>scale_cy</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>scale_cy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>force_shmem</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>force_shmem</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>limit_framerate</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>limit_framerate</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg1</name><operator>-&gt;</operator><name>capture_overlays</name></name> <operator>!=</operator> <name><name>cfg2</name><operator>-&gt;</operator><name>capture_overlays</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hotkey_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_HOTKEY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Activate hotkey pressed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hotkey_window</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>GetForegroundWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>deactivate_hook</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>activate_hook_now</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hotkey_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_HOTKEY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"Deactivate hotkey pressed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>deactivate_hook</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>game_capture_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture_config</name></name></type> <name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reset_capture</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>window</name> <init>=

<expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CAPTURE_WINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset_capture</name> <operator>=</operator> <call><name>capture_needs_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>force_scaling</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg</name><operator>.</operator><name>scale_cx</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cfg</name><operator>.</operator><name>scale_cy</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>error_acquiring</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"error acquiring, scale is bad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>error_acquiring</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_HOTKEY</name> <operator>&amp;&amp;</operator>

<name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name>CAPTURE_MODE_HOTKEY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>activate_hook</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>activate_hook</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>window</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>window</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator> <name>DEFAULT_RETRY_INTERVAL</name> <operator>*</operator>

<call><name>hook_rate_to_float</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_WINDOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>priority</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>initial_config</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reset_capture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>initial_config</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>wait_for_hook_initialization</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>game_capture_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>gc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wait_for_hook_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>initial_config</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator> <name>DEFAULT_RETRY_INTERVAL</name> <operator>*</operator>

<call><name>hook_rate_to_float</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hotkey_pair</name></name> <operator>=</operator> <call><name>obs_hotkey_pair_register_source</name><argument_list>(

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>HOTKEY_START</name></expr></argument>, <argument><expr><name>TEXT_HOTKEY_START</name></expr></argument>, <argument><expr><name>HOTKEY_STOP</name></expr></argument>,

<argument><expr><name>TEXT_HOTKEY_STOP</name></expr></argument>, <argument><expr><name>hotkey_start</name></expr></argument>, <argument><expr><name>hotkey_stop</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>game_capture_update</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>gc</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP_BEING_BAD</name></cpp:macro> <cpp:value>" This is most likely due to security software. Please make sure " "that the OBS installation folder is excluded/ignored in the " "settings of the security software you are using."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_file_integrity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Game capture %s not found."</literal> <name>STOP_BEING_BAD</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Could not convert file name to wide string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>w_file</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_EXECUTE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>w_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Game capture file '%s' not found."</literal> <name>STOP_BEING_BAD</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Game capture file '%s' could not be loaded."</literal> <name>STOP_BEING_BAD</name></expr></argument>,

<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Game capture file '%s' could not be loaded: %lu."</literal> <name>STOP_BEING_BAD</name></expr></argument>,

<argument><expr><name>file</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_64bit_windows</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>true</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>BOOL</name></type> <name>x86</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>IsWow64Process</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>x86</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>success</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>x86</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_64bit_process</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>x86</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_64bit_windows</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>IsWow64Process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x86</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><name>x86</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>open_target_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name> <operator>=</operator> <call><name>open_process</name><argument_list>(

<argument><expr><name>PROCESS_QUERY_INFORMATION</name> <operator>|</operator> <name>SYNCHRONIZE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"could not open process: %s"</literal></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>process_is_64bit</name></name> <operator>=</operator> <call><name>is_64bit_process</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name> <operator>=</operator> <call><name>is_app</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name> <operator>=</operator> <call><name>get_app_sid</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_keepalive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>new_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>swprintf</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>WINDOW_HOOK_KEEPALIVE</name> <literal type="string">L"%lu"</literal></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>keepalive_mutex</name></name> <operator>=</operator> <ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr>

?</condition><then> <expr><call><name>create_app_mutex</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>CreateMutexW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>keepalive_mutex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to create keepalive mutex: %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_texture_mutexes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>open_mutex_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>MUTEX_TEXTURE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>open_mutex_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>MUTEX_TEXTURE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>retrying</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retrying</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"hook not loaded yet, retrying.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to open texture mutexes: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>attempt_existing_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_CAPTURE_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"existing hook found, signaling process: %s"</literal></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_frame_interval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name></type> <name>ovi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_get_video_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <name><name>ovi</name><operator>.</operator><name>fps_den</name></name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator> <name><name>ovi</name><operator>.</operator><name>fps_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>limit_framerate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>interval</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>frame_interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_hook_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info_map</name></name> <operator>=</operator> <call><name>open_hook_info</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info_map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_hook_info: get_hook_info failed: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name></name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info_map</name></name></expr></argument>,

<argument><expr><name>FILE_MAP_ALL_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_hook_info: failed to map data view: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>force_shmem</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_hook_info: user is forcing shared memory "</literal>

<literal type="string">"(multi-adapter compatibility mode)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>process_is_64bit</name></name></expr> ?</condition><then> <expr><name>offsets64</name></expr>

</then><else>: <expr><name>offsets32</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>capture_overlay</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>capture_overlays</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>force_shmem</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>force_shmem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>use_scale</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>force_scaling</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>scale_cx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>scale_cx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>scale_cy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>scale_cy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reset_frame_interval</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_shared_texture_available</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_hook_info: shared texture capture unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>force_shmem</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pipe_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_pipe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"%s%lu"</literal></expr></argument>, <argument><expr><name>PIPE_NAME</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ipc_pipe_server_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pipe_log</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_pipe: failed to start pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>inject_library</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>dll</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>inject_library_obf</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>dll</name></expr></argument>, <argument><expr><literal type="string">"D|hkqkW`kl{k\\osofj"</literal></expr></argument>,

<argument><expr><literal type="number">0xa178ef3655e5ade7</literal></expr></argument>, <argument><expr><literal type="string">"[uawaRzbhh{tIdkj~~"</literal></expr></argument>,

<argument><expr><literal type="number">0x561478dbd824387c</literal></expr></argument>, <argument><expr><literal type="string">"[fr}pboIe`dlN}"</literal></expr></argument>,

<argument><expr><literal type="number">0x395bfbc9833590fd</literal></expr></argument>, <argument><expr><literal type="string">"\\`zs}gmOzhhBq"</literal></expr></argument>,

<argument><expr><literal type="number">0x12897dd89168789a</literal></expr></argument>, <argument><expr><literal type="string">"GbfkDaezbp~X"</literal></expr></argument>,

<argument><expr><literal type="number">0x76aff7238788f7db</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>hook_direct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_path_rel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>hook_path_abs_w</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>hook_path_rel_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>hook_path_rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hook_path_rel_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hook_path_rel_w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"hook_direct: could not convert string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path_ret</name> <operator>=</operator> <call><name>_wfullpath</name><argument_list>(<argument><expr><name>hook_path_abs_w</name></expr></argument>, <argument><expr><name>hook_path_rel_w</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>hook_path_rel_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path_ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"hook_direct: could not make absolute path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>process</name> <operator>=</operator> <call><name>open_process</name><argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"hook_direct: could not open process: %s (%lu)"</literal></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>executable</name></name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inject_library</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>hook_path_abs_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"hook_direct: inject failed: %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>create_inject_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inject_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_dll</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>command_line_w</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4096</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>inject_path_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>hook_dll_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>anti_cheat</name> <init>= <expr><call><name>use_anticheat</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>inject_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>inject_path_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>hook_dll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hook_dll_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swprintf</name><argument_list>(<argument><expr><name>command_line_w</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="string">L"\"%s\" \"%s\" %lu %lu"</literal></expr></argument>, <argument><expr><name>inject_path_w</name></expr></argument>,

<argument><expr><name>hook_dll_w</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>anti_cheat</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>anti_cheat</name></expr> ?</condition><then> <expr><name><name>gc</name><operator>-&gt;</operator><name>thread_id</name></name></expr> </then><else>: <expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>CreateProcessW</name><argument_list>(<argument><expr><name>inject_path_w</name></expr></argument>, <argument><expr><name>command_line_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>CREATE_NO_WINDOW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>injector_process</name></name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to create inject helper process: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>command_line_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>inject_path_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>hook_dll_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>get_hook_path</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b64</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>inject_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>matching_architecture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inject_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hook_path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>process_is_64bit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inject_path</name> <operator>=</operator> <call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"inject-helper64.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>inject_path</name> <operator>=</operator> <call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"inject-helper32.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hook_path</name> <operator>=</operator> <call><name>get_hook_path</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_is_64bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_file_integrity</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>inject_path</name></expr></argument>, <argument><expr><literal type="string">"inject helper"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_file_integrity</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>hook_path</name></expr></argument>, <argument><expr><literal type="string">"graphics hook"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>matching_architecture</name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>process_is_64bit</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>matching_architecture</name> <operator>=</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>process_is_64bit</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>matching_architecture</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>use_anticheat</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"using direct hook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>hook_direct</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>hook_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"using helper (%s hook)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>use_anticheat</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"compatibility"</literal></expr> </then><else>: <expr><literal type="string">"direct"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>create_inject_process</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>inject_path</name></expr></argument>, <argument><expr><name>hook_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>inject_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>hook_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>blacklisted_exes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"explorer"</literal></expr>,

<expr><literal type="string">"steam"</literal></expr>,

<expr><literal type="string">"battle.net"</literal></expr>,

<expr><literal type="string">"galaxyclient"</literal></expr>,

<expr><literal type="string">"skype"</literal></expr>,

<expr><literal type="string">"uplay"</literal></expr>,

<expr><literal type="string">"origin"</literal></expr>,

<expr><literal type="string">"devenv"</literal></expr>,

<expr><literal type="string">"taskmgr"</literal></expr>,

<expr><literal type="string">"chrome"</literal></expr>,

<expr><literal type="string">"discord"</literal></expr>,

<expr><literal type="string">"firefox"</literal></expr>,

<expr><literal type="string">"systemsettings"</literal></expr>,

<expr><literal type="string">"applicationframehost"</literal></expr>,

<expr><literal type="string">"cmd"</literal></expr>,

<expr><literal type="string">"shellexperiencehost"</literal></expr>,

<expr><literal type="string">"winstore.app"</literal></expr>,

<expr><literal type="string">"searchui"</literal></expr>,

<expr><literal type="string">"lockapp"</literal></expr>,

<expr><literal type="string">"windowsinternal.composableshell.experiences.textinput.inputapp"</literal></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_blacklisted_exe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>cur_exe</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exe</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vals</name> <init>= <expr><name>blacklisted_exes</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>vals</name></expr>;</condition> <incr><expr><name>vals</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cur_exe</name></expr></argument>, <argument><expr><operator>*</operator><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>cur_exe</name></expr></argument>, <argument><expr><literal type="string">".exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmpi</name><argument_list>(<argument><expr><name>cur_exe</name></expr></argument>, <argument><expr><name>exe</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>target_suspended</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>thread_is_suspended</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>exe</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>blacklisted_process</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_ANY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_window_exe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"attempting to hook fullscreen process: %s"</literal></expr></argument>,

<argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_window_exe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"attempting to hook process: %s"</literal></expr></argument>, <argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>blacklisted_process</name> <operator>=</operator> <call><name>is_blacklisted_exe</name><argument_list>(<argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blacklisted_process</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"cannot capture %s due to being blacklisted"</literal></expr></argument>, <argument><expr><name><name>exe</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blacklisted_process</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>target_suspended</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>open_target_process</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_keepalive</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_pipe</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attempt_existing_hook</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inject_hook</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_texture_mutexes</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_hook_info</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_events</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retrying</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hook_restart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>process</name> <operator>=</operator> <call><name>open_process</name><argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>process</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name> <operator>=</operator> <call><name>is_app</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>is_app</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>app_sid</name></name> <operator>=</operator> <call><name>get_app_sid</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hook_restart</name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_CAPTURE_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hook_restart</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hook_restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator>

<literal type="number">3.0f</literal> <operator>*</operator> <call><name>hook_rate_to_float</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_fullscreen_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><call><name>GetForegroundWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMONITOR</name></type> <name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>styles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>styles</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>styles</name> <operator>&amp;</operator> <name>WS_MAXIMIZE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>styles</name> <operator>&amp;</operator> <name>WS_BORDER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <call><name>MonitorFromRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>monitor</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rect</name><operator>.</operator><name>left</name></name> <operator>==</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name> <operator>&amp;&amp;</operator>

<name><name>rect</name><operator>.</operator><name>right</name></name> <operator>==</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>right</name></name> <operator>&amp;&amp;</operator>

<name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>==</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>bottom</name></name> <operator>&amp;&amp;</operator>

<name><name>rect</name><operator>.</operator><name>top</name></name> <operator>==</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setup_window</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_selected_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dstr_cmpi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"dwm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>class_w</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>class</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>class_w</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>FindWindowW</name><argument_list>(<argument><expr><name>class_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>find_window</name><argument_list>(<argument><expr><name>INCLUDE_MINIMIZED</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>class</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>executable</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setup_window</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>wait_for_target_startup</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_ANY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_fullscreen_window</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>get_selected_window</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator> <call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>next_window</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name> <operator>==</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>&amp;&amp;</operator> <name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"error acquiring, failed to get window "</literal>

<literal type="string">"thread/process ids: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>error_acquiring</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_hook</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_CAPTURE_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_restart</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_events: failed to get hook_restart "</literal>

<literal type="string">"event: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_CAPTURE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_events: failed to get hook_stop event: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_init</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_HOOK_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_events: failed to get hook_init event: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_HOOK_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_events: failed to get hook_ready event: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_exit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_exit</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_HOOK_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_exit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_events: failed to get hook_exit event: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>capture_result</name> <block>{ <decl><name>CAPTURE_FAIL</name></decl>, <decl><name>CAPTURE_RETRY</name></decl>, <decl><name>CAPTURE_SUCCESS</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_data_map</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>swprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>SHMEM_TEXTURE</name> <literal type="string">"_%"</literal> <name>PRIu64</name> <literal type="string">"_"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_data_map</name></name> <operator>=</operator>

<call><name>open_map_plus_id</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>map_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_data_map</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>capture_result</name></name></type> <name>init_capture_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>cy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_data_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_data_map</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>retry_hwnd</name> <init>= <expr><operator>(</operator><name>HWND</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_data_map</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>retry_hwnd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_data_map</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CAPTURE_RETRY</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_capture_data: failed to open file "</literal>

<literal type="string">"mapping: %lu"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CAPTURE_FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_data_map</name></name></expr></argument>, <argument><expr><name>FILE_MAP_ALL_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_capture_data: failed to map data view: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CAPTURE_FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CAPTURE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_16BIT_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_32BIT_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>convert_5_to_8bit</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">255.0</literal> <operator>/</operator> <literal type="number">31.0</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>convert_6_to_8bit</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">255.0</literal> <operator>/</operator> <literal type="number">63.0</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_b5g6r5_tex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur_texture</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pitch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>texture_buffers</name><index>[<expr><name>cur_texture</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gc_cx</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>cx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gc_cy</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>cy</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gc_pitch</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>gc_cy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>input</name> <operator>+</operator> <operator>(</operator><name>gc_pitch</name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>data</name> <operator>+</operator> <operator>(</operator><name>pitch</name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>gc_cx</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_blue</name></decl>, <decl><type ref="prev"/><name>pixels_green</name></decl>, <decl><type ref="prev"/><name>pixels_red</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>pixels_dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>pixels_src</name> <init>=

<expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>row</name> <operator>+</operator> <name>x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><name>pixels_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>zero</name> <init>= <expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_low</name> <init>= <expr><call><name>_mm_unpacklo_epi16</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_high</name> <init>= <expr><call><name>_mm_unpackhi_epi16</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>blue_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x0000001F</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>blue_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00000003</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>green_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x000007E0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>green_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00000008</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>red_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x0000F800</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>red_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00000300</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>blue_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><name>blue_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>green_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><name>green_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>red_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><name>red_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator> <call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_green</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_dest</name> <operator>=</operator> <operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>out</name> <operator>+</operator> <name>x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><name>pixels_dest</name></expr></argument>, <argument><expr><name>pixels_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>blue_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><name>blue_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>green_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><name>green_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>red_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><name>red_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator> <call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_green</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_dest</name> <operator>=</operator>

<operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><name>pixels_dest</name></expr></argument>, <argument><expr><name>pixels_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_b5g5r5a1_tex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur_texture</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pitch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>texture_buffers</name><index>[<expr><name>cur_texture</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gc_cx</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>cx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gc_cy</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>cy</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gc_pitch</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>gc_cy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>input</name> <operator>+</operator> <operator>(</operator><name>gc_pitch</name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>data</name> <operator>+</operator> <operator>(</operator><name>pitch</name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>gc_cx</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_blue</name></decl>, <decl><type ref="prev"/><name>pixels_green</name></decl>, <decl><type ref="prev"/><name>pixels_red</name></decl>,

<decl><type ref="prev"/><name>pixels_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>pixels_dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>pixels_src</name> <init>=

<expr><operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>row</name> <operator>+</operator> <name>x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><name>pixels_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>zero</name> <init>= <expr><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_low</name> <init>= <expr><call><name>_mm_unpacklo_epi16</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>pixels_high</name> <init>= <expr><call><name>_mm_unpackhi_epi16</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>blue_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x0000001F</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>blue_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00000003</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>green_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x000003E0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>green_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x000000C</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>red_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00007C00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>red_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00000180</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>alpha_channel_mask</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00008000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>alpha_offset</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__m128i</name></type> <name>alpha_mask32</name> <init>= <expr><call><name>_mm_set1_epi32</name><argument_list>(<argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>blue_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><name>blue_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>green_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><name>green_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>red_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><name>red_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_low</name></expr></argument>, <argument><expr><name>alpha_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator> <call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>pixels_alpha</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator>

<call><name>_mm_sub_epi32</name><argument_list>(<argument><expr><name>pixels_alpha</name></expr></argument>, <argument><expr><name>alpha_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator>

<call><name>_mm_andnot_si128</name><argument_list>(<argument><expr><name>pixels_alpha</name></expr></argument>, <argument><expr><name>alpha_mask32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator> <name>pixels_red</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_green</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_dest</name> <operator>=</operator> <operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>out</name> <operator>+</operator> <name>x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><name>pixels_dest</name></expr></argument>, <argument><expr><name>pixels_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>blue_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_blue</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_blue</name></expr></argument>, <argument><expr><name>blue_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>green_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator>

<call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><name>green_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_green</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_green</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>red_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><name>red_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_red</name> <operator>=</operator> <call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>pixels_red</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator>

<call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>pixels_high</name></expr></argument>, <argument><expr><name>alpha_channel_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator> <call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>pixels_alpha</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator>

<call><name>_mm_sub_epi32</name><argument_list>(<argument><expr><name>pixels_alpha</name></expr></argument>, <argument><expr><name>alpha_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_alpha</name> <operator>=</operator>

<call><name>_mm_andnot_si128</name><argument_list>(<argument><expr><name>pixels_alpha</name></expr></argument>, <argument><expr><name>alpha_mask32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator> <name>pixels_red</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_result</name> <operator>=</operator>

<call><name>_mm_or_si128</name><argument_list>(<argument><expr><name>pixels_result</name></expr></argument>, <argument><expr><name>pixels_green</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels_dest</name> <operator>=</operator>

<operator>(</operator><name>__m128i</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><name>pixels_dest</name></expr></argument>, <argument><expr><name>pixels_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_16bit_tex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur_texture</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pitch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>DXGI_FORMAT_B5G5R5A1_UNORM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_b5g5r5a1_tex</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>cur_texture</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>DXGI_FORMAT_B5G6R5_UNORM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_b5g6r5_tex</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>cur_texture</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_shmem_tex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>shmem_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_texture</name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>shmem_data</name><operator>-&gt;</operator><name>last_tex</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_texture</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>cur_texture</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_texture</name> <operator>=</operator> <ternary><condition><expr><name>cur_texture</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>object_signalled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><name>cur_texture</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mutex</name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><name>cur_texture</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>object_signalled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><name>next_texture</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mutex</name> <operator>=</operator> <name><name>gc</name><operator>-&gt;</operator><name>texture_mutexes</name><index>[<expr><name>next_texture</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_texture</name> <operator>=</operator> <name>next_texture</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gs_texture_map</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>convert_16bit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_16bit_tex</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>cur_texture</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pitch</name> <operator>==</operator> <name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_buffers</name><index>[<expr><name>cur_texture</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>pitch</name> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>texture_buffers</name><index>[<expr><name>cur_texture</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>best_pitch</name> <init>= <expr><ternary><condition><expr><name>pitch</name> <operator>&lt;</operator> <name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name></expr> ?</condition><then> <expr><name>pitch</name></expr>

</then><else>: <expr><name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>gc</name><operator>-&gt;</operator><name>cy</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line_in</name> <init>= <expr><name>input</name> <operator>+</operator> <name><name>gc</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line_out</name> <init>= <expr><name>data</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>line_out</name></expr></argument>, <argument><expr><name>line_in</name></expr></argument>, <argument><expr><name>best_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gs_texture_unmap</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_16bit_format</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>format</name> <operator>==</operator> <name>DXGI_FORMAT_B5G5R5A1_UNORM</name> <operator>||</operator>

<name>format</name> <operator>==</operator> <name>DXGI_FORMAT_B5G6R5_UNORM</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_shmem_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>gc</name><operator>-&gt;</operator><name>shmem_data</name><operator>-&gt;</operator><name>tex1_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture_buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>gc</name><operator>-&gt;</operator><name>shmem_data</name><operator>-&gt;</operator><name>tex2_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>convert_16bit</name></name> <operator>=</operator> <call><name>is_16bit_format</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>convert_16bit</name></name></expr>

?</condition><then> <expr><name>GS_BGRA</name></expr>

</then><else>: <expr><call><name>convert_format</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator>

<call><name>gs_texture_create</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_shmem_capture: failed to create texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>copy_texture</name></name> <operator>=</operator> <name>copy_shmem_tex</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_shtex_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>gs_texture_open_shared</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>shtex_data</name><operator>-&gt;</operator><name>tex_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"init_shtex_capture: failed to open shared handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>start_capture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"Starting capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>hook_ver_major</name></name> <operator>&gt;</operator> <name>HOOK_VER_MAJOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"cannot initialize hook, DLL hook version is "</literal>

<literal type="string">"%"</literal> <name>PRIu32</name> <literal type="string">".%"</literal> <name>PRIu32</name>

<literal type="string">", current plugin hook major version is %d.%d"</literal></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>hook_ver_major</name></name></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>hook_ver_minor</name></name></expr></argument>, <argument><expr><name>HOOK_VER_MAJOR</name></expr></argument>,

<argument><expr><name>HOOK_VER_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CAPTURE_TYPE_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_shmem_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"memory capture successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_shtex_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"shared texture capture successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>capture_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>dwm_capture</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>object_signalled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>target_process</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_foreground_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cursor_check_time</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>cursor_check_time</name></name> <operator>&gt;=</operator> <literal type="number">0.1f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>foreground_process_id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><call><name>GetForegroundWindow</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>foreground_process_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name> <operator>!=</operator> <name>foreground_process_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cursor_hidden</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cursor_hidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cursor_check_time</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>game_capture_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>deactivate</name> <init>= <expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>deactivate_hook</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>activate_now</name> <init>= <expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>activate_hook_now</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>activate_now</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><operator>(</operator><name>HWND</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>os_atomic_load_long</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>hotkey_window</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_uwp_window</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>get_uwp_actual_window</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_window_exe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_window_title</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_window_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name>WINDOW_PRIORITY_CLASS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator> <literal type="number">10.0f</literal> <operator>*</operator> <call><name>hook_rate_to_float</name><argument_list>(

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>activate_hook</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>deactivate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>activate_now</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>deactivate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>activate_hook</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_showing</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>showing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator>

<literal type="number">10.0f</literal> <operator>*</operator> <call><name>hook_rate_to_float</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name> <operator>&amp;&amp;</operator> <call><name>object_signalled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_stop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"hook stop signal received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name>deactivate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name> <operator>&amp;&amp;</operator> <name><name>gc</name><operator>-&gt;</operator><name>process_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name> <operator>=</operator> <call><name>open_event_gc</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>EVENT_HOOK_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>injector_process</name></name> <operator>&amp;&amp;</operator> <call><name>object_signalled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>injector_process</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>exit_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>injector_process</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>injector_process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"inject process failed: %ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>error_acquiring</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>capturing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator>

<name>ERROR_RETRY_INTERVAL</name> <operator>*</operator>

<call><name>hook_rate_to_float</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name> <operator>&amp;&amp;</operator> <call><name>object_signalled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>hook_ready</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"capture initializing!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>capture_result</name></name></type> <name>result</name> <init>= <expr><call><name>init_capture_data</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>CAPTURE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>capturing</name></name> <operator>=</operator> <call><name>start_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"init_capture_data failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>CAPTURE_RETRY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>capturing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator>

<name>ERROR_RETRY_INTERVAL</name> <operator>*</operator>

<call><name>hook_rate_to_float</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hook_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>error_acquiring</name></name> <operator>&amp;&amp;</operator>

<name><name>gc</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>&gt;</operator> <name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>CAPTURE_MODE_ANY</name> <operator>||</operator>

<name><name>gc</name><operator>-&gt;</operator><name>activate_hook</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>try_hook</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>capture_valid</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>info</name><argument_list>(<argument><expr><literal type="string">"capture window no longer exists, "</literal>

<literal type="string">"terminating capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_capture</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>copy_texture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>gc</name><operator>-&gt;</operator><name>copy_texture</name></name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>check_foreground_window</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>fps_reset_time</name></name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>fps_reset_time</name></name> <operator>&gt;=</operator> <name><name>gc</name><operator>-&gt;</operator><name>retry_interval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_frame_interval</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>fps_reset_time</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>showing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>game_capture_render_cursor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>p</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>base_cx</name></name> <operator>||</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>base_cy</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>window</name></name></expr>

?</condition><then> <expr><operator>(</operator><name>HWND</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>window</name></name></expr>

</then><else>: <expr><name><name>gc</name><operator>-&gt;</operator><name>window</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x_scale</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>cx</name></name> <operator>/</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>base_cx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y_scale</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>cy</name></name> <operator>/</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>base_cy</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cursor_draw</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>x_scale</name></expr></argument>, <argument><expr><name>y_scale</name></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>base_cx</name></name></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>base_cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>game_capture_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name> <operator>||</operator> <operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>obs_get_base_effect</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>allow_transparency</name></name></expr>

?</condition><then> <expr><name>OBS_EFFECT_DEFAULT</name></expr>

</then><else>: <expr><name>OBS_EFFECT_OPAQUE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_draw</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>global_hook_info</name><operator>-&gt;</operator><name>flip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>allow_transparency</name></name> <operator>&amp;&amp;</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cursor</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>game_capture_render_cursor</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>allow_transparency</name></name> <operator>&amp;&amp;</operator> <name><name>gc</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cursor</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>gc</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>OBS_EFFECT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>game_capture_render_cursor</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>game_capture_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name></expr> ?</condition><then> <expr><name><name>gc</name><operator>-&gt;</operator><name>cx</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>game_capture_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>gc</name><operator>-&gt;</operator><name>active</name></name></expr> ?</condition><then> <expr><name><name>gc</name><operator>-&gt;</operator><name>cy</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>game_capture_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEXT_GAME_CAPTURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>game_capture_defaults</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_MODE</name></expr></argument>, <argument><expr><name>SETTING_MODE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_WINDOW_PRIORITY</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>WINDOW_PRIORITY_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_COMPATIBILITY</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_FORCE_SCALING</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CURSOR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_TRANSPARENCY</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_SCALE_RES</name></expr></argument>, <argument><expr><literal type="string">"0x0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_LIMIT_FRAMERATE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_CAPTURE_OVERLAYS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_ANTI_CHEAT_HOOK</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_HOOK_RATE</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>HOOK_RATE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mode_callback</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>capture_window</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>using_older_non_mode_format</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>capture_window</name> <operator>=</operator>

<operator>!</operator><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_ANY_FULLSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_MODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>capture_window</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>SETTING_MODE_WINDOW</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_CAPTURE_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>capture_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_WINDOW_PRIORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_visible</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>capture_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>use_scaling_callback</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>use_scale</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_FORCE_SCALING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_get</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_SCALE_RES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_enabled</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>use_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_preserved_val</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>executable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_window_strings</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>executable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><literal type="string">"[%s]: %s"</literal></expr></argument>, <argument><expr><name>executable</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_insert_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_item_disable</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>executable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>check_window_property_setting</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_val</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_val</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>obs_property_list_item_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>cur_val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cur_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur_val</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>insert_preserved_val</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cur_val</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>window_changed_callback</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>check_window_property_setting</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>,

<argument><expr><name>SETTING_CAPTURE_WINDOW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>default_scale_vals</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1.25</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.5</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_DEFAULT_SCALE_VALS</name></cpp:macro> <cpp:value>(sizeof(default_scale_vals) / sizeof(default_scale_vals[0]))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>EnumFirstMonitor</name><parameter_list>(<parameter><decl><type><name>HMONITOR</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>LPRECT</name></type> <name>rc</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>HMONITOR</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>window_not_blacklisted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>is_blacklisted_exe</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>game_capture_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HMONITOR</name></type> <name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><literal type="number">1920</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><literal type="number">1080</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>EnumDisplayMonitors</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EnumFirstMonitor</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>monitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>game_capture</name></name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_source_get_settings</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>using_older_non_mode_format</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>any</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>,

<argument><expr><name>SETTING_ANY_FULLSCREEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><ternary><condition><expr><name>any</name></expr> ?</condition><then> <expr><name>SETTING_MODE_ANY</name></expr>

</then><else>: <expr><name>SETTING_MODE_WINDOW</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>SETTING_MODE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>ppts</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_MODE</name></expr></argument>, <argument><expr><name>TEXT_MODE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MODE_ANY</name></expr></argument>, <argument><expr><name>SETTING_MODE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MODE_WINDOW</name></expr></argument>, <argument><expr><name>SETTING_MODE_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MODE_HOTKEY</name></expr></argument>, <argument><expr><name>SETTING_MODE_HOTKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mode_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_CAPTURE_WINDOW</name></expr></argument>, <argument><expr><name>TEXT_WINDOW</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_window_list</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>INCLUDE_MINIMIZED</name></expr></argument>, <argument><expr><name>window_not_blacklisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>window_changed_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_WINDOW_PRIORITY</name></expr></argument>,

<argument><expr><name>TEXT_MATCH_PRIORITY</name></expr></argument>, <argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MATCH_TITLE</name></expr></argument>, <argument><expr><name>WINDOW_PRIORITY_TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MATCH_CLASS</name></expr></argument>, <argument><expr><name>WINDOW_PRIORITY_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_MATCH_EXE</name></expr></argument>, <argument><expr><name>WINDOW_PRIORITY_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_COMPATIBILITY</name></expr></argument>,

<argument><expr><name>TEXT_SLI_COMPATIBILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_FORCE_SCALING</name></expr></argument>,

<argument><expr><name>TEXT_FORCE_SCALING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>use_scaling_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_SCALE_RES</name></expr></argument>, <argument><expr><name>TEXT_SCALE_RES</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_EDITABLE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_DEFAULT_SCALE_VALS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>scale_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cx</name> <init>=

<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>cx</name> <operator>/</operator> <name><name>default_scale_vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_cy</name> <init>=

<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>cy</name> <operator>/</operator> <name><name>default_scale_vals</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>scale_str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu32</name> <literal type="string">"x%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name>new_cx</name></expr></argument>, <argument><expr><name>new_cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>scale_str</name></expr></argument>, <argument><expr><name>scale_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>obs_property_set_enabled</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_TRANSPARENCY</name></expr></argument>,

<argument><expr><name>TEXT_ALLOW_TRANSPARENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_LIMIT_FRAMERATE</name></expr></argument>,

<argument><expr><name>TEXT_LIMIT_FRAMERATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_CURSOR</name></expr></argument>, <argument><expr><name>TEXT_CAPTURE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_ANTI_CHEAT_HOOK</name></expr></argument>,

<argument><expr><name>TEXT_ANTI_CHEAT_HOOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_CAPTURE_OVERLAYS</name></expr></argument>,

<argument><expr><name>TEXT_CAPTURE_OVERLAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_list</name><argument_list>(<argument><expr><name>ppts</name></expr></argument>, <argument><expr><name>SETTING_HOOK_RATE</name></expr></argument>, <argument><expr><name>TEXT_HOOK_RATE</name></expr></argument>,

<argument><expr><name>OBS_COMBO_TYPE_LIST</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_HOOK_RATE_SLOW</name></expr></argument>, <argument><expr><name>HOOK_RATE_SLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_HOOK_RATE_NORMAL</name></expr></argument>, <argument><expr><name>HOOK_RATE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_HOOK_RATE_FAST</name></expr></argument>, <argument><expr><name>HOOK_RATE_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_list_add_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TEXT_HOOK_RATE_FASTEST</name></expr></argument>, <argument><expr><name>HOOK_RATE_FASTEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ppts</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>game_capture_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"game_capture"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name> <operator>|</operator>

<name>OBS_SOURCE_DO_NOT_DUPLICATE</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>game_capture_name</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>game_capture_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>game_capture_destroy</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>game_capture_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>game_capture_height</name></expr>,

<expr><operator>.</operator><name>get_defaults</name> <operator>=</operator> <name>game_capture_defaults</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>game_capture_properties</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>game_capture_update</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>game_capture_tick</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>game_capture_render</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_GAME_CAPTURE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
