<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\mac-capture\audio-device-enum.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<struct>struct <name>device_item</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>device_item_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>device_list</name> <block>{

<macro><name>DARRAY</name><argument_list>(<argument>struct device_item</argument>)</argument_list></macro> <expr_stmt><expr><name>items</name></expr>;</expr_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>device_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>device_item_free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>device_list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>device_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>device_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>coreaudio_enum_devices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>coreaudio_get_device_id</name><parameter_list>(<parameter><decl><type><name>CFStringRef</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
