<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\device_directx9.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common_utils.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4201</name><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva2api.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_MAIN_FORMAT</name></cpp:macro> <cpp:value>D3DFMT_YUY2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>class</name></type> <name>IGFXS3DControl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CHWDevice</name> <block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>CHWDevice</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Init</name><argument_list>(<argument>mfxHDL hWindow</argument>, <argument>mfxU16 nViews</argument>,

<argument>mfxU32 nAdapterNum</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetHandle</name><parameter_list>(<parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>pHdl</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetHandle</name><parameter_list>(<parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name></type> <name>hdl</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>mfxStatus</name></type> <name>RenderFrame</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>pSurface</name></decl></parameter>,

<parameter><decl><type><name>mfxFrameAllocator</name> <modifier>*</modifier></type><name>pmfxAlloc</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>Close</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<enum>enum <block>{ <decl><name>MFX_HANDLE_GFXS3DCONTROL</name> <init>=

<expr><literal type="number">0x100</literal></expr></init></decl>, 

<decl><name>MFX_HANDLE_DEVICEWINDOW</name> <init>= <expr><literal type="number">0x101</literal></expr></init></decl> 

}</block>;</enum> 

<decl_stmt><decl><type><name>class</name></type> <name>CD3D9Device</name> <range>: <expr><name>public</name> <name>CHWDevice</name> <block>{

<expr><name>public</name><operator>:</operator>

<call><name>CD3D9Device</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>CD3D9Device</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>Init</name><argument_list>(<argument>mfxHDL hWindow</argument>, <argument>mfxU16 nViews</argument>,

<argument>mfxU32 nAdapterNum</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <call><name>Reset</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>GetHandle</name><argument_list>(<argument>mfxHandleType type</argument>, <argument>mfxHDL *pHdl</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>SetHandle</name><argument_list>(<argument>mfxHandleType type</argument>, <argument>mfxHDL hdl</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <call><name>RenderFrame</name><argument_list>(<argument><expr><name>mfxFrameSurface1</name> <operator>*</operator><name>pSurface</name></expr></argument>,

<argument><expr><name>mfxFrameAllocator</name> <operator>*</operator><name>pmfxAlloc</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>UpdateTitle</name><argument_list>(<argument>double</argument> )</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <call><name>Close</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>DefineFormat</name><argument_list>(<argument>bool isA2rgb10</argument>)</argument_list></macro>

<block>{

<expr><name>m_bIsA2rgb10</name> <operator>=</operator> <operator>(</operator><name>isA2rgb10</name><operator>)</operator> <operator>?</operator> <name>TRUE</name> <operator>:</operator> <name>FALSE</name></expr>;

}</block>

<name>protected</name><operator>:</operator>

<name>mfxStatus</name> <call><name>CreateVideoProcessors</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <call><name>CheckOverlaySupport</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>mfxStatus</name> <macro><name>FillD3DPP</name><argument_list>(<argument>mfxHDL hWindow</argument>, <argument>mfxU16 nViews</argument>,

<argument>D3DPRESENT_PARAMETERS &amp;D3DPP</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>

<name>IDirect3D9Ex</name> <operator>*</operator><name>m_pD3D9</name></expr>;

<expr><name>IDirect3DDevice9Ex</name> <operator>*</operator><name>m_pD3DD9</name></expr>;

<expr><name>IDirect3DDeviceManager9</name> <operator>*</operator><name>m_pDeviceManager9</name></expr>;

<expr><name>D3DPRESENT_PARAMETERS</name> <name>m_D3DPP</name></expr>;

<expr><name>UINT</name> <name>m_resetToken</name></expr>;

<expr><name>mfxU16</name> <name>m_nViews</name></expr>;

<expr><name>IGFXS3DControl</name> <operator>*</operator><name>m_pS3DControl</name></expr>;

<expr><name>D3DSURFACE_DESC</name> <name>m_backBufferDesc</name></expr>;

<expr><name>IDirectXVideoProcessorService</name> <operator>*</operator><name>m_pDXVAVPS</name></expr>;

<expr><name>IDirectXVideoProcessor</name> <operator>*</operator><name>m_pDXVAVP_Left</name></expr>;

<expr><name>IDirectXVideoProcessor</name> <operator>*</operator><name>m_pDXVAVP_Right</name></expr>;

<expr><name>RECT</name> <name>m_targetRect</name></expr>;

<expr><name>DXVA2_VideoDesc</name> <name>m_VideoDesc</name></expr>;

<expr><name>DXVA2_VideoProcessBltParams</name> <name>m_BltParams</name></expr>;

<expr><name>DXVA2_VideoSample</name> <name>m_Sample</name></expr>;

<expr><name>BOOL</name> <name>m_bIsA2rgb10</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
