<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_plugin_hive.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_dispatcher_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxplugin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_win_reg_key.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>MFX_DISP_HANDLE</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name> <block>{<block_content>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>mfxPluginUID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>mfxPluginUID</name> <operator>&amp;</operator> <name>rhs</name><operator>)</operator> 

<block>{

<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxPluginUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>mfxPluginUID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>mfxPluginUID</name> <operator>&amp;</operator> <name>rhs</name><operator>)</operator> 

<block>{

<return>return <expr><operator>!</operator><operator>(</operator><name>lhs</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return>

}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>4351</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>PluginDescriptionRecord</name> <range>: <expr><name>public</name> <name>mfxPluginParam</name> 

<block>{

<expr><name>public</name><operator>:</operator>

<name>msdk_disp_char</name> <name><name>sPath</name><index>[<expr><name>MAX_PLUGIN_PATH</name></expr>]</index></name></expr>;

<expr><name>char</name> <name><name>sName</name><index>[<expr><name>MAX_PLUGIN_NAME</name></expr>]</index></name></expr>;

<expr><name>bool</name> <name>onlyVersionRegistered</name></expr>;

<expr><name>bool</name> <name>Default</name></expr>;

<expr><call><name>PluginDescriptionRecord</name><argument_list>()</argument_list></call>

<operator>:</operator> <call><name>mfxPluginParam</name><argument_list>()</argument_list></call></expr>

, <expr><call><name>sPath</name><argument_list>()</argument_list></call></expr>

, <expr><call><name>sName</name><argument_list>()</argument_list></call></expr>

, <expr><call><name>onlyVersionRegistered</name><argument_list>()</argument_list></call></expr>

, <macro><name>Default</name><argument_list>()</argument_list></macro>

<expr><block>{

}</block></expr>

}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name><name>MFXVector</name><argument_list type="generic">&lt;<argument><expr><name>PluginDescriptionRecord</name></expr></argument>&gt;</argument_list></name></type> <name>MFXPluginStorage</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>MFXPluginStorageBase</name> <range>: <expr><name>public</name> <name>MFXPluginStorage</name> 

<block>{

<expr><name>protected</name><operator>:</operator>

<name>mfxVersion</name> <name>mCurrentAPIVersion</name></expr>;

<expr><name>protected</name><operator>:</operator>

<macro><name>MFXPluginStorageBase</name><argument_list>(<argument>mfxVersion currentAPIVersion</argument>)</argument_list></macro> 

<operator>:</operator> <macro><name>mCurrentAPIVersion</name><argument_list>(<argument>currentAPIVersion</argument>)</argument_list></macro>

<block>{

}</block>

<name>void</name> <macro><name>ConvertAPIVersion</name><argument_list>( <argument>mfxU32 APIVersion</argument>, <argument>PluginDescriptionRecord &amp;descriptionRecord</argument>)</argument_list></macro> <specifier>const</specifier>

<block>{

<expr><name><name>descriptionRecord</name><operator>.</operator><name>APIVersion</name><operator>.</operator><name>Minor</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>mfxU16</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>APIVersion</name> <operator>&amp;</operator> <literal type="number">0x0ff</literal></expr></argument>)</argument_list></call></expr>;

<expr><name><name>descriptionRecord</name><operator>.</operator><name>APIVersion</name><operator>.</operator><name>Major</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>mfxU16</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>APIVersion</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;

}</block></expr>

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXPluginsInHive</name> <range>: <expr><name>public</name> <name>MFXPluginStorageBase</name>

<block>{

<expr><name>public</name><operator>:</operator>

<macro><name>MFXPluginsInHive</name><argument_list>(<argument>int mfxStorageID</argument>, <argument>const msdk_disp_char *msdkLibSubKey</argument>, <argument>mfxVersion currentAPIVersion</argument>)</argument_list></macro></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_USE_CFGFILES</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_LOADER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_PROCTABLE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>MFXPluginsInFS</name> <range>: <expr><name>public</name> <name>MFXPluginStorageBase</name>

<block>{

<expr><name>bool</name> <name>mIsVersionParsed</name></expr>;

<expr><name>bool</name> <name>mIsAPIVersionParsed</name></expr>;

<expr><name>public</name><operator>:</operator>

<macro><name>MFXPluginsInFS</name><argument_list>(<argument>mfxVersion currentAPIVersion</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>

<name>bool</name> <call><name>ParseFile</name><argument_list>(<argument><expr><name>FILE</name> <operator>*</operator> <name>f</name></expr></argument>, <argument><expr><name>PluginDescriptionRecord</name> <operator>&amp;</operator> <name>des</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>ParseKVPair</name><argument_list>( <argument><expr><name>msdk_disp_char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>msdk_disp_char</name> <operator>*</operator> <name>value</name></expr></argument>, <argument><expr><name>PluginDescriptionRecord</name> <operator>&amp;</operator> <name>des</name></expr></argument>)</argument_list></call></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>class</name></type> <name>MFXDefaultPlugins</name> <range>: <expr><name>public</name> <name>MFXPluginStorageBase</name>

<block>{

<expr><name>public</name><operator>:</operator>

<macro><name>MFXDefaultPlugins</name><argument_list>(<argument>mfxVersion currentAPIVersion</argument>, <argument>MFX_DISP_HANDLE * hdl</argument>, <argument>int implType</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator></expr>

}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
