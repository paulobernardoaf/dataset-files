<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\libmfx\include\mfxaudio_exposed_functions_list.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{8, 1}}</cpp:value></cpp:define>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioCORE_SyncOperation</argument>, <argument>(mfxSession session, mfxSyncPoint syncp, mfxU32 wait)</argument>, <argument>(session, syncp, wait)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_Query</argument>, <argument>(mfxSession session, mfxAudioParam *in, mfxAudioParam *out)</argument>, <argument>(session, in, out)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_QueryIOSize</argument>, <argument>(mfxSession session, mfxAudioParam *par, mfxAudioAllocRequest *request)</argument>, <argument>(session, par, request)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_Init</argument>, <argument>(mfxSession session, mfxAudioParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_Reset</argument>, <argument>(mfxSession session, mfxAudioParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_Close</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_GetAudioParam</argument>, <argument>(mfxSession session, mfxAudioParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioENCODE_EncodeFrameAsync</argument>, <argument>(mfxSession session, mfxAudioFrame *frame, mfxBitstream *buffer_out, mfxSyncPoint *syncp)</argument>, <argument>(session, frame, buffer_out, syncp)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_Query</argument>, <argument>(mfxSession session, mfxAudioParam *in, mfxAudioParam *out)</argument>, <argument>(session, in, out)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_DecodeHeader</argument>, <argument>(mfxSession session, mfxBitstream *bs, mfxAudioParam *par)</argument>, <argument>(session, bs, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_Init</argument>, <argument>(mfxSession session, mfxAudioParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_Reset</argument>, <argument>(mfxSession session, mfxAudioParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_Close</argument>, <argument>(mfxSession session)</argument>, <argument>(session)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_QueryIOSize</argument>, <argument>(mfxSession session, mfxAudioParam *par, mfxAudioAllocRequest *request)</argument>, <argument>(session, par, request)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_GetAudioParam</argument>, <argument>(mfxSession session, mfxAudioParam *par)</argument>, <argument>(session, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioDECODE_DecodeFrameAsync</argument>, <argument>(mfxSession session, mfxBitstream *bs, mfxAudioFrame *frame_out, mfxSyncPoint *syncp)</argument>, <argument>(session, bs, frame_out, syncp)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_VERSION</name></cpp:macro> <cpp:value>{{9, 1}}</cpp:value></cpp:define>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioUSER_Register</argument>, <argument>(mfxSession session, mfxU32 type, const mfxPlugin *par)</argument>, <argument>(session, type, par)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioUSER_Unregister</argument>, <argument>(mfxSession session, mfxU32 type)</argument>, <argument>(session, type)</argument>)</argument_list></macro>

<macro><name>FUNCTION</name><argument_list>(<argument>mfxStatus</argument>, <argument>MFXAudioUSER_ProcessFrameAsync</argument>, <argument>(mfxSession session, const mfxHDL *in, mfxU32 in_num, const mfxHDL *out, mfxU32 out_num, mfxSyncPoint *syncp)</argument>, <argument>(session, in, in_num, out, out_num, syncp)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>API_VERSION</name></cpp:undef>

</unit>
