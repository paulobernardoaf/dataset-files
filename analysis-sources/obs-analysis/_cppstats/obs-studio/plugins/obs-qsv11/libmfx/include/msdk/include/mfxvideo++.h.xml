<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxvideo++.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxpak.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoSession</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>MFXVideoSession</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <operator>(</operator><name>mfxSession</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVideoSession</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Init</name><argument_list>(<argument>mfxIMPL impl</argument>, <argument>mfxVersion *ver</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXInit</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>InitEx</name><parameter_list>(<parameter><decl><type><name>mfxInitParam</name></type> <name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXInitEx</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>mfxRes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mfxRes</name> <operator>=</operator> <call><name>MFXClose</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <operator>(</operator><name>mfxSession</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>mfxRes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIMPL</name><parameter_list>(<parameter><decl><type><name>mfxIMPL</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryVersion</name><parameter_list>(<parameter><decl><type><name>mfxVersion</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>JoinSession</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>child_session</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXJoinSession</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>child_session</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DisjoinSession</name><parameter_list>( )</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXDisjoinSession</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>CloneSession</name><parameter_list>( <parameter><decl><type><name>mfxSession</name> <modifier>*</modifier></type><name>clone</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXCloneSession</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetPriority</name><parameter_list>( <parameter><decl><type><name>mfxPriority</name></type> <name>priority</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXSetPriority</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetPriority</name><parameter_list>( <parameter><decl><type><name>mfxPriority</name> <modifier>*</modifier></type><name>priority</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXGetPriority</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetBufferAllocator</name><parameter_list>(<parameter><decl><type><name>mfxBufferAllocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoCORE_SetBufferAllocator</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetFrameAllocator</name><parameter_list>(<parameter><decl><type><name>mfxFrameAllocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoCORE_SetFrameAllocator</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetHandle</name><parameter_list>(<parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name></type> <name>hdl</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>hdl</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetHandle</name><parameter_list>(<parameter><decl><type><name>mfxHandleType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>hdl</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoCORE_GetHandle</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>hdl</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryPlatform</name><parameter_list>(<parameter><decl><type><name>mfxPlatform</name><modifier>*</modifier></type> <name>platform</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoCORE_QueryPlatform</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SyncOperation</name><parameter_list>(<parameter><decl><type><name>mfxSyncPoint</name></type> <name>syncp</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DoWork</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXDoWork</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>operator</name></type> <name>mfxSession</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>m_session</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>MFXVideoSession</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXVideoSession</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><name>MFXVideoSession</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoENCODE</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>MFXVideoENCODE</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVideoENCODE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxVideoParam *in</argument>, <argument>mfxVideoParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXVideoENCODE_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSurf</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_QueryIOSurf</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetVideoParam</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_GetVideoParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetEncodeStat</name><parameter_list>(<parameter><decl><type><name>mfxEncodeStat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_GetEncodeStat</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>EncodeFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxEncodeCtrl</name> <modifier>*</modifier></type><name>ctrl</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENCODE_EncodeFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoDECODE</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>MFXVideoDECODE</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVideoDECODE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxVideoParam *in</argument>, <argument>mfxVideoParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXVideoDECODE_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DecodeHeader</name><parameter_list>(<parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_DecodeHeader</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSurf</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_QueryIOSurf</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetVideoParam</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_GetVideoParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetDecodeStat</name><parameter_list>(<parameter><decl><type><name>mfxDecodeStat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_GetDecodeStat</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetPayload</name><parameter_list>(<parameter><decl><type><name>mfxU64</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>mfxPayload</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>MFXVideoDECODE_GetPayload</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>SetSkipMode</name><parameter_list>(<parameter><decl><type><name>mfxSkipMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_SetSkipMode</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>DecodeFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface_work</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_out</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoDECODE_DecodeFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>surface_work</name></expr></argument>, <argument><expr><name>surface_out</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoVPP</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>MFXVideoVPP</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVideoVPP</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxVideoParam *in</argument>, <argument>mfxVideoParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXVideoVPP_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSurf</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name></type> <name><name>request</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_QueryIOSurf</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetVideoParam</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_GetVideoParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetVPPStat</name><parameter_list>(<parameter><decl><type><name>mfxVPPStat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_GetVPPStat</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>RunFrameVPPAsync</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxExtVppAuxData</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoVPP_RunFrameVPPAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>RunFrameVPPAsyncEx</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>MFXVideoVPP_RunFrameVPPAsyncEx</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoENC</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>MFXVideoENC</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVideoENC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxVideoParam *in</argument>, <argument>mfxVideoParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXVideoENC_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSurf</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENC_QueryIOSurf</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENC_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENC_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENC_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetVideoParam</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENC_GetVideoParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>ProcessFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxENCInput</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxENCOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoENC_ProcessFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXVideoPAK</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>MFXVideoPAK</name><argument_list>(<argument>mfxSession session</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>m_session</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MFXVideoPAK</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>virtual</name> <name>mfxStatus</name> <macro><name>Query</name><argument_list>(<argument>mfxVideoParam *in</argument>, <argument>mfxVideoParam *out</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>MFXVideoPAK_Query</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>QueryIOSurf</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoPAK_QueryIOSurf</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoPAK_Init</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoPAK_Reset</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoPAK_Close</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>GetVideoParam</name><parameter_list>(<parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoPAK_GetVideoParam</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>mfxStatus</name></type> <name>ProcessFrameAsync</name><parameter_list>(<parameter><decl><type><name>mfxPAKInput</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>mfxPAKOutput</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MFXVideoPAK_ProcessFrameAsync</name><argument_list>(<argument><expr><name>m_session</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>syncp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>m_session</name></decl>;</decl_stmt> 

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</unit>
