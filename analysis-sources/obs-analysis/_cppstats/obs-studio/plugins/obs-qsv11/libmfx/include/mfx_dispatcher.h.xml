<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_dispatcher.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfxaudio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfxplugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_dispatcher_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_load_plugin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxpak.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEL_VENDOR_ID</name></cpp:macro> <cpp:value>0x8086</cpp:value></cpp:define>

<function_decl><type><name>mfxStatus</name></type> <name>MFXQueryVersion</name><parameter_list>(<parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>mfxVersion</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum

<block>{

<decl><name>DEFAULT_API_VERSION_MAJOR</name> <init>= <expr><name>MFX_VERSION_MAJOR</name></expr></init></decl>,

<decl><name>DEFAULT_API_VERSION_MINOR</name> <init>= <expr><name>MFX_VERSION_MINOR</name></expr></init></decl>

}</block>;</enum>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNCTION</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION</name><parameter_list>(<parameter><type><name>return_value</name></type></parameter>, <parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>formal_param_list</name></type></parameter>, <parameter><type><name>actual_param_list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>e##func_name,</cpp:value></cpp:define>

<enum>enum <name>eFunc</name>

<block>{

<decl><name>eMFXInit</name></decl>,

<decl><name>eMFXClose</name></decl>,

<decl><name>eMFXQueryIMPL</name></decl>,

<decl><name>eMFXQueryVersion</name></decl>,

<decl><name>eMFXJoinSession</name></decl>,

<decl><name>eMFXDisjoinSession</name></decl>,

<decl><name>eMFXCloneSession</name></decl>,

<decl><name>eMFXSetPriority</name></decl>,

<decl><name>eMFXGetPriority</name></decl>,

<decl><name>eMFXInitEx</name></decl>,

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_exposed_functions_list.h"</cpp:file></cpp:include>

<decl><name>eVideoFuncTotal</name></decl>

}</block>;</enum>

<enum>enum <name>ePluginFunc</name>

<block>{

<decl><name>eMFXVideoUSER_Load</name></decl>,

<decl><name>eMFXVideoUSER_LoadByPath</name></decl>,

<decl><name>eMFXVideoUSER_UnLoad</name></decl>,

<decl><name>eMFXAudioUSER_Load</name></decl>,

<decl><name>eMFXAudioUSER_UnLoad</name></decl>,

<decl><name>ePluginFuncTotal</name></decl>

}</block>;</enum>

<enum>enum <name>eAudioFunc</name>

<block>{

<decl><name>eFakeAudioEnum</name> <init>= <expr><name>eMFXGetPriority</name></expr></init></decl>,

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxaudio_exposed_functions_list.h"</cpp:file></cpp:include>

<decl><name>eAudioFuncTotal</name></decl>

}</block>;</enum>

<enum>enum

<block>{

<decl><name>MFX_MAX_REGISTRY_KEY_NAME</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>

}</block>;</enum>

<enum>enum

<block>{

<decl><name>MFX_MAX_DLL_PATH</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <name>eMfxImplType</name>

<block>{

<decl><name>MFX_LIB_HARDWARE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MFX_LIB_SOFTWARE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_LIB_PSEUDO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>MFX_LIB_IMPL_TYPES</name></decl>

}</block>;</enum>

<enum>enum

<block>{

<decl><name>MFX_DISPATCHER_VERSION_MAJOR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_DISPATCHER_VERSION_MINOR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<struct>struct <name>_mfxSession</name>

<block>{

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFunctionPointer</name></type> <name><name>callTable</name><index>[<expr><name>eVideoFuncTotal</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFunctionPointer</name></type> <name><name>callPlugInsTable</name><index>[<expr><name>ePluginFuncTotal</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFunctionPointer</name></type> <name><name>callAudioTable</name><index>[<expr><name>eAudioFuncTotal</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>MFX_DISP_HANDLE</name></name></type> <range>: <expr><name>public</name> <name>_mfxSession</name>

<block>{

<macro><name>MFX_DISP_HANDLE</name><argument_list>(<argument>const mfxVersion requiredVersion</argument>)</argument_list></macro>;

<expr><operator>~</operator><call><name>MFX_DISP_HANDLE</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>mfxStatus</name> <macro><name>LoadSelectedDLL</name><argument_list>(<argument>const msdk_disp_char *pPath</argument>, <argument>eMfxImplType implType</argument>, <argument>mfxIMPL impl</argument>, <argument>mfxIMPL implInterface</argument>, <argument>mfxInitParam &amp;par</argument>)</argument_list></macro></expr>;

<expr><name>mfxStatus</name> <call><name>UnLoadSelectedDLL</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>mfxStatus</name> <call><name>Close</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

<expr><name>eMfxImplType</name> <name>implType</name></expr>;

<expr><name>mfxIMPL</name> <name>implInterface</name></expr>;

<expr><name>mfxVersion</name> <name>dispVersion</name></expr>;

<expr><specifier>const</specifier> <name>mfxVersion</name> <name>apiVersion</name></expr>;

<expr><name>mfxVersion</name> <name>actualApiVersion</name></expr>;

<expr><name>mfxStatus</name> <name>loadStatus</name></expr>;

<expr><name>msdk_disp_char</name> <name><name>subkeyName</name><index>[<expr><name>MFX_MAX_REGISTRY_KEY_NAME</name></expr>]</index></name></expr>;

<expr><name>int</name> <name>storageID</name></expr>;

<expr><name>mfxModuleHandle</name> <name>hModule</name></expr>;

<expr><name>MFX</name><operator>::</operator><name>MFXPluginStorage</name> <name>pluginHive</name></expr>;

<expr><name>MFX</name><operator>::</operator><name>MFXPluginFactory</name> <name>pluginFactory</name></expr>;

<expr><name>private</name><operator>:</operator>

<call><name>MFX_DISP_HANDLE</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFX_DISP_HANDLE</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>MFX_DISP_HANDLE</name> <operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>MFX_DISP_HANDLE</name> <operator>&amp;</operator><operator>)</operator></expr>;

}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier>

<name>bool</name> <name>operator</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>mfxVersion</name> <operator>&amp;</operator><name>one</name><operator>,</operator> <specifier>const</specifier> <name>mfxVersion</name> <operator>&amp;</operator><name>two</name><operator>)</operator>

<block>{

<return>return <expr><operator>(</operator><name><name>one</name><operator>.</operator><name>Version</name></name> <operator>==</operator> <name><name>two</name><operator>.</operator><name>Version</name></name><operator>)</operator></expr>;</return>

}</block></expr></expr_stmt> 

<expr_stmt><expr><specifier>inline</specifier>

<name>bool</name> <name>operator</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>mfxVersion</name> <operator>&amp;</operator><name>one</name><operator>,</operator> <specifier>const</specifier> <name>mfxVersion</name> <operator>&amp;</operator><name>two</name><operator>)</operator>

<block>{

<return>return <expr><operator>(</operator><name><name>one</name><operator>.</operator><name>Major</name></name> <operator>==</operator> <name><name>two</name><operator>.</operator><name>Major</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>one</name><operator>.</operator><name>Minor</name></name> <operator>&lt;</operator> <name><name>two</name><operator>.</operator><name>Minor</name></name><operator>)</operator></expr>;</return>

}</block></expr></expr_stmt> 

<expr_stmt><expr><specifier>inline</specifier>

<name>bool</name> <name>operator</name> <operator>&lt;=</operator> <operator>(</operator><specifier>const</specifier> <name>mfxVersion</name> <operator>&amp;</operator><name>one</name><operator>,</operator> <specifier>const</specifier> <name>mfxVersion</name> <operator>&amp;</operator><name>two</name><operator>)</operator>

<block>{

<return>return <expr><operator>(</operator><name>one</name> <operator>==</operator> <name>two</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>one</name> <operator>&lt;</operator> <name>two</name><operator>)</operator></expr>;</return>

}</block></expr></expr_stmt> 

<typedef>typedef

<type><struct>struct <name>FUNCTION_DESCRIPTION</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>apiVersion</name></decl>;</decl_stmt>

}</block></struct></type> <name>FUNCTION_DESCRIPTION</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier>

<name>FUNCTION_DESCRIPTION</name></type> <name><name>APIFunc</name><index>[<expr><name>eVideoFuncTotal</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier>

<name>FUNCTION_DESCRIPTION</name></type> <name><name>APIAudioFunc</name><index>[<expr><name>eAudioFuncTotal</name></expr>]</index></name></decl>;</decl_stmt>

</unit>
