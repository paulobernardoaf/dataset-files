<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\libmfx\include\msdk\include\mfxcommon.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name> <name>4201</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_MAKEFOURCC</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((int)A))+(((int)B)&lt;&lt;8)+(((int)C)&lt;&lt;16)+(((int)D)&lt;&lt;24))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mfxU32</name></type> <name>BufferId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>BufferSz</name></decl>;</decl_stmt>

}</block></struct></type> <name>mfxExtBuffer</name>;</typedef>

<typedef>typedef <type><name>mfxI32</name></type> <name>mfxIMPL</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_IMPL_BASETYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x00ff &amp; (x))</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>MFX_IMPL_AUTO</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_SOFTWARE</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_HARDWARE</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_AUTO_ANY</name> <init>= <expr><literal type="number">0x0003</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_HARDWARE_ANY</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_HARDWARE2</name> <init>= <expr><literal type="number">0x0005</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_HARDWARE3</name> <init>= <expr><literal type="number">0x0006</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_HARDWARE4</name> <init>= <expr><literal type="number">0x0007</literal></expr></init></decl>, 

<decl><name>MFX_IMPL_RUNTIME</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,

<decl><name>MFX_IMPL_VIA_ANY</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,

<decl><name>MFX_IMPL_VIA_D3D9</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,

<decl><name>MFX_IMPL_VIA_D3D11</name> <init>= <expr><literal type="number">0x0300</literal></expr></init></decl>,

<decl><name>MFX_IMPL_VIA_VAAPI</name> <init>= <expr><literal type="number">0x0400</literal></expr></init></decl>,

<decl><name>MFX_IMPL_AUDIO</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>,

<decl><name>MFX_IMPL_UNSUPPORTED</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>Major</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>Version</name></decl>;</decl_stmt>

}</block></union></type> <name>mfxVersion</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>MFX_PRIORITY_LOW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MFX_PRIORITY_NORMAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_PRIORITY_HIGH</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>mfxPriority</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>_mfxEncryptedData</name></name></type> <name>mfxEncryptedData</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>mfxEncryptedData</name><modifier>*</modifier></type> <name>EncryptedData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExtParam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>mfxU32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>mfxI64</name></type> <name>DecodeTimeStamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU64</name></type> <name>TimeStamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU8</name><modifier>*</modifier></type> <name>Data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>DataOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>DataLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>MaxLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>PicStruct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>FrameType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>DataFlag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>reserved2</name></decl>;</decl_stmt>

}</block></struct></type> <name>mfxBitstream</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>_mfxSyncPoint</name></name> <modifier>*</modifier></type><name>mfxSyncPoint</name>;</typedef>

<enum>enum <block>{

<decl><name>MFX_GPUCOPY_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MFX_GPUCOPY_ON</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_GPUCOPY_OFF</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>Implementation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>Version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>ExternalThreads</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExtParam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumExtParam</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>GPUCopy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mfxInitParam</name>;</typedef>

<enum>enum <block>{

<decl><name>MFX_EXTBUFF_THREADS_PARAM</name> <init>= <macro><name>MFX_MAKEFOURCC</name><argument_list>(<argument><literal type="char">'T'</literal></argument>,<argument><literal type="char">'H'</literal></argument>,<argument><literal type="char">'D'</literal></argument>,<argument><literal type="char">'P'</literal></argument>)</argument_list></macro></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mfxExtBuffer</name></type> <name>Header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>NumThread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxI32</name></type> <name>SchedulingType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxI32</name></type> <name>Priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mfxExtThreadsParam</name>;</typedef>

<enum>enum <block>{

<decl><name>MFX_PLATFORM_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_SANDYBRIDGE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_IVYBRIDGE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_HASWELL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_BAYTRAIL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_BROADWELL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_CHERRYTRAIL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_SKYLAKE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_APOLLOLAKE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_KABYLAKE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_GEMINILAKE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_COFFEELAKE</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_CANNONLAKE</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>MFX_PLATFORM_ICELAKE</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mfxU16</name></type> <name>CodeName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name>DeviceId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mfxPlatform</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
