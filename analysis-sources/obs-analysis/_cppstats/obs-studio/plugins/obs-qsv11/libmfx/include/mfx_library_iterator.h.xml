<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\libmfx\include\mfx_library_iterator.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_LOADER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_PROCTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_win_reg_key.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfx_dispatcher.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>mfx_disp_adapters</name>

<block>{

<decl_stmt><decl><type><name>mfxU32</name></type> <name>vendor_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>device_id</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_SO_BASE_NAME_LEN</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_SO_BASE_NAME_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_MIN_REAL_LIBNAME</name></cpp:macro> <cpp:value>MFX_SO_BASE_NAME_LEN + 4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFX_MAX_REAL_LIBNAME</name></cpp:macro> <cpp:value>MFX_MIN_REAL_LIBNAME + 8</cpp:value></cpp:define> 

<struct>struct <name>mfx_libs</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MFX_MAX_REAL_LIBNAME</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>version</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>MFX</name>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<enum>enum

<block>{

<decl><name>MFX_UNKNOWN_KEY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_CURRENT_USER_KEY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MFX_LOCAL_MACHINE_KEY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_APP_FOLDER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_USE_REGISTRY</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_LOADER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_PROCTABLE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<decl><name>MFX_PATH_MSDK_FOLDER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_FIRST</name> <init>= <expr><name>MFX_CURRENT_USER_KEY</name></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_LAST</name> <init>= <expr><name>MFX_PATH_MSDK_FOLDER</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>MFX_PATH_MSDK_FOLDER</name> <operator>=</operator> <literal type="number">3</literal></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_FIRST</name> <init>= <expr><name>MFX_PATH_MSDK_FOLDER</name></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_LAST</name> <init>= <expr><name>MFX_PATH_MSDK_FOLDER</name></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block>;</enum>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<enum>enum

<block>{

<decl><name>MFX_UNKNOWN_KEY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_OPT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>MFX_APP_FOLDER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_FIRST</name> <init>= <expr><name>MFX_STORAGE_ID_OPT</name></expr></init></decl>,

<decl><name>MFX_STORAGE_ID_LAST</name> <init>= <expr><name>MFX_STORAGE_ID_OPT</name></expr></init></decl>

}</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>mfxStatus</name></type> <name>SelectImplementationType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>, <parameter><decl><type><name>mfxIMPL</name> <modifier>*</modifier></type><name>pImplInterface</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name> <modifier>*</modifier></type><name>pVendorID</name></decl></parameter>, <parameter><decl><type><name>mfxU32</name> <modifier>*</modifier></type><name>pDeviceID</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>msdk_disp_path_len</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MFXLibraryIterator</name>

<block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>MFXLibraryIterator</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>MFXLibraryIterator</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>mfxStatus</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>eMfxImplType</name></type> <name>implType</name></decl></parameter>, <parameter><decl><type><name>mfxIMPL</name></type> <name>implInterface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>storageID</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>SelectDLLVersion</name><parameter_list>(<parameter><decl><type><name>msdk_disp_char</name> <modifier>*</modifier></type><name>pPath</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pathSize</name></decl></parameter>,

<parameter><decl><type><name>eMfxImplType</name> <modifier>*</modifier></type><name>pImplType</name></decl></parameter>, <parameter><decl><type><name>mfxVersion</name></type> <name>minVersion</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxIMPL</name></type> <name>GetImplementationType</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetSubKeyName</name><argument_list>(<argument><expr><name>msdk_disp_char</name> <operator>*</operator><name>subKeyName</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>int</name> <macro><name>GetStorageID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_StorageID</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>

<function_decl><type><name>void</name></type> <name>Release</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>InitRegistry</name><parameter_list>(<parameter><decl><type><name>eMfxImplType</name></type> <name>implType</name></decl></parameter>, <parameter><decl><type><name>mfxIMPL</name></type> <name>implInterface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>storageID</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>InitFolder</name><parameter_list>(<parameter><decl><type><name>eMfxImplType</name></type> <name>implType</name></decl></parameter>, <parameter><decl><type><name>mfxIMPL</name></type> <name>implInterface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mfxU32</name></type> <name>adapterNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>msdk_disp_char</name> <modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>eMfxImplType</name></type> <name>m_implType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>m_implInterface</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_vendorID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_deviceID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>m_bIsSubKeyValid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>m_SubKeyName</name><index>[<expr><name>MFX_MAX_REGISTRY_KEY_NAME</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_StorageID</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_USE_REGISTRY</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_LOADER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEDIASDK_UWP_PROCTABLE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>WinRegKey</name></type> <name>m_baseRegKey</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_lastLibIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_lastLibMerit</name></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>m_lastLibIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_adapters_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mfx_disp_adapters</name></name><modifier>*</modifier></type> <name>m_adapters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_selected_adapter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU32</name></type> <name>m_libs_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mfx_libs</name></name><modifier>*</modifier></type> <name>m_libs</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>msdk_disp_char</name></type> <name><name>m_path</name><index>[<expr><name>msdk_disp_path_len</name></expr>]</index></name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>MFXLibraryIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MFXLibraryIterator</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MFXLibraryIterator</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt> 

</unit>
