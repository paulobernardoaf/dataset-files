<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\obs-qsv11\common_utils.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mfxvideo++.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/windows_defs.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/linux_defs.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_PRINT_RET_MSG</name><parameter_list>(<parameter><type><name>ERR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PrintErrString(ERR, __FILE__, __LINE__); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_CHECK_RESULT</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>ERR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((X) &gt; (P)) { MSDK_PRINT_RET_MSG(ERR); return ERR; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_CHECK_POINTER</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>ERR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(P)) { MSDK_PRINT_RET_MSG(ERR); return ERR; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_CHECK_ERROR</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>ERR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((X) == (P)) { MSDK_PRINT_RET_MSG(ERR); return ERR; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_IGNORE_MFX_STS</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((X) == (P)) { P = MFX_ERR_NONE; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_BREAK_ON_ERROR</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (MFX_ERR_NONE != (P)) break; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_SAFE_DELETE_ARRAY</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (P) { delete[] P; P = NULL; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_ALIGN32</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((mfxU32)((X) + 31)) &amp; (~(mfxU32)31))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_ALIGN16</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((value + 15) &gt;&gt; 4) &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_SAFE_RELEASE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (X) { X-&gt;Release(); X = NULL; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSDK_MAX</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((A) &gt; (B)) ? (A) : (B))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILL_READ</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILL_WRITE</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<function_decl><type><name>mfxStatus</name></type> <name>simple_alloc</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,

<parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>simple_lock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>simple_unlock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>simple_gethdl</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>simple_free</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintErrString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filestr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>LoadRawFrame</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>pSurface</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fSource</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>LoadRawRGBFrame</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>pSurface</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fSource</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>WriteRawFrame</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>pSurface</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fSink</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>WriteBitStreamFrame</name><parameter_list>(<parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>pMfxBitstream</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fSink</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>ReadBitStreamData</name><parameter_list>(<parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>pBS</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fSource</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearYUVSurfaceSysMem</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>pSfc</name></decl></parameter>, <parameter><decl><type><name>mfxU16</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>mfxU16</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearYUVSurfaceVMem</name><parameter_list>(<parameter><decl><type><name>mfxMemId</name></type> <name>memId</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearRGBSurfaceVMem</name><parameter_list>(<parameter><decl><type><name>mfxMemId</name></type> <name>memId</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetFreeSurfaceIndex</name><parameter_list>(<parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>pSurfacesPool</name></decl></parameter>, <parameter><decl><type><name>mfxU16</name></type> <name>nPoolSize</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mfxBitstream</name></type> <name>mfxBS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSyncPoint</name></type> <name>syncp</name></decl>;</decl_stmt>

}</block></struct></type> <name>Task</name>;</typedef>

<function_decl><type><name>int</name></type> <name>GetFreeTaskIndex</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>pTaskPool</name></decl></parameter>, <parameter><decl><type><name>mfxU16</name></type> <name>nPoolSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>mfxStatus</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl></parameter>, <parameter><decl><type><name>mfxVersion</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>MFXVideoSession</name> <modifier>*</modifier></type><name>pSession</name></decl></parameter>,

<parameter><decl><type><name>mfxFrameAllocator</name> <modifier>*</modifier></type><name>pmfxAllocator</name></decl></parameter>,

<parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>deviceHandle</name> <init>= <expr><name>NULL</name></expr></init></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>bCreateSharedHandles</name> <init>= <expr><name>false</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dx9hack</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Release</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>char</name></type> <name>mfxFrameTypeString</name><parameter_list>(<parameter><decl><type><name>mfxU16</name></type> <name>FrameType</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mfxGetTime</name><parameter_list>(<parameter><decl><type><name>mfxTime</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> <name>TimeDiffMsec</name><parameter_list>(<parameter><decl><type><name>mfxTime</name></type> <name>tfinish</name></decl></parameter>, <parameter><decl><type><name>mfxTime</name></type> <name>tstart</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
