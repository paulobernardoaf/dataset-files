<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\text-freetype2\obs-convenience.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec4.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-convenience.h"</cpp:file></cpp:include>

<function><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>create_uv_vbuffer</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>num_verts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add_color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>vrect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vrect</name> <operator>=</operator> <call><name>gs_vbdata_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>num_verts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <operator>(</operator>struct <name>vec3</name> <operator>*</operator><operator>)</operator><call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>num_tex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>=</operator>

<operator>(</operator>struct <name>gs_tvertarray</name> <operator>*</operator><operator>)</operator><call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_tvertarray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vrect</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator>

<operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vrect</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vrect</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vrect</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gs_vertexbuffer_create</name><argument_list>(<argument><expr><name>vrect</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create UV vertex buffer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>draw_uv_vbuffer</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>,

<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_verts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><name>tex</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vbuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_vertexbuffer_flush</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_vertexbuffer</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_indexbuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passes</name> <operator>=</operator> <call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>GS_TRIS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
