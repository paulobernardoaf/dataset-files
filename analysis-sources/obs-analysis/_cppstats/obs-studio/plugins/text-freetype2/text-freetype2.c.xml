<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\plugins\text-freetype2\text-freetype2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-module.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text-freetype2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-convenience.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"find-font.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>FT_Library</name></type> <name>ft2_lib</name></decl>;</decl_stmt>

<macro><name>OBS_DECLARE_MODULE</name><argument_list>()</argument_list></macro>

<macro><name>OBS_MODULE_USE_DEFAULT_LOCALE</name><argument_list>(<argument><literal type="string">"text-freetype2"</literal></argument>, <argument><literal type="string">"en-US"</literal></argument>)</argument_list></macro>

<function><type><name>MODULE_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_module_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="string">"FreeType2 text source"</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>texbuf_w</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>, <decl><type ref="prev"/><name>texbuf_h</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>freetype2_source_info_v1</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"text_ft2_source"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CAP_OBSOLETE</name> <operator>|</operator>

<name>OBS_SOURCE_CUSTOM_DRAW</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>ft2_source_get_name</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>ft2_source_create_v1</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>ft2_source_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>ft2_source_update</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>ft2_source_get_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>ft2_source_get_height</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>ft2_source_render</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>ft2_video_tick</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>ft2_source_properties</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_TEXT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>freetype2_source_info_v2</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"text_ft2_source"</literal></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>OBS_SOURCE_DEPRECATED</name> <operator>|</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>OBS_SOURCE_CUSTOM_DRAW</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>ft2_source_get_name</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>ft2_source_create_v2</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>ft2_source_destroy</name></expr>,

<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>ft2_source_update</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>ft2_source_get_width</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>ft2_source_get_height</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>ft2_source_render</name></expr>,

<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>ft2_video_tick</name></expr>,

<expr><operator>.</operator><name>get_properties</name> <operator>=</operator> <name>ft2_source_properties</name></expr>,

<expr><operator>.</operator><name>icon_type</name> <operator>=</operator> <name>OBS_ICON_TYPE_TEXT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>plugin_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_plugin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>plugin_initialized</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FT_Init_FreeType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft2_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ft2_lib</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FT2-text: Failed to initialize FT2."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_cached_os_font_list</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_os_font_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plugin_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_module_load</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_dir</name> <init>= <expr><call><name>obs_module_config_path</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>config_dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_mkdirs</name><argument_list>(<argument><expr><name>config_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>config_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freetype2_source_info_v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_register_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freetype2_source_info_v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_module_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>plugin_initialized</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_os_font_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_FreeType</name><argument_list>(<argument><expr><name>ft2_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ft2_source_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TextFreetype2"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ft2_source_get_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>srcdata</name><operator>-&gt;</operator><name>cx</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ft2_source_get_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>srcdata</name><operator>-&gt;</operator><name>cy</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>ft2_source_properties</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_add_font</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Font"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_text</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Text"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_TEXT_MULTILINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"from_file"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ReadFromFile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"log_mode"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ChatLogMode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"log_lines"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"ChatLogLines"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_path</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"text_file"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TextFile"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>OBS_PATH_FILE</name></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"TextFileFilter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_color</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"color1"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Color1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_color</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"color2"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Color2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"outline"</literal></expr></argument>, <argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"Outline"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"drop_shadow"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"DropShadow"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"custom_width"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"CustomWidth"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_add_bool</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="string">"word_wrap"</literal></expr></argument>,

<argument><expr><call><name>obs_module_text</name><argument_list>(<argument><expr><literal type="string">"WordWrap"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ft2_source_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_cache_slots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>cacheglyphs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cacheglyphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>cacheglyphs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>colorbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_vertexbuffer_destroy</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_effect_destroy</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ft2_source_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>srcdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_reset_blend_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>outline_text</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_outlines</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>drop_shadow</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_drop_shadow</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>draw_uv_vbuffer</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>tex</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ft2_video_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>srcdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>from_file</name></name> <operator>||</operator> <operator>!</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>last_checked</name></name> <operator>&gt;=</operator> <literal type="number">1000000000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>get_modified_timestamp</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>last_checked</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>update_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>log_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_from_end</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_text_from_file</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>,

<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>cache_glyphs</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_up_vertex_buffer</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>update_file</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>m_timestamp</name></name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>m_timestamp</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>update_file</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_font</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Long</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>get_font_path</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_size</name></name></expr></argument>,

<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument>,

<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>FT_New_Face</name><argument_list>(<argument><expr><name>ft2_lib</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ft2_source_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>font_obj</name> <init>= <expr><call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vbuf_needs_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>word_wrap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>custom_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>font_name</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>, <argument><expr><literal type="string">"face"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>font_style</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>, <argument><expr><literal type="string">"style"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>font_size</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>font_flags</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>drop_shadow</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"drop_shadow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>outline_text</name></name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"outline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>word_wrap</name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"word_wrap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"color1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"color2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>custom_width</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"custom_width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>custom_width</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>custom_width</name> <operator>!=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name> <operator>=</operator> <name>custom_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>custom_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>word_wrap</name> <operator>!=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>word_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>word_wrap</name></name> <operator>=</operator> <name>word_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>from_file</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"from_file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>chat_log_mode</name> <init>= <expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"log_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>log_lines</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"log_lines"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>log_lines</name></name> <operator>!=</operator> <name>log_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>log_lines</name></name> <operator>=</operator> <name>log_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>log_mode</name></name> <operator>=</operator> <name>chat_log_mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ft2_lib</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effect_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>effect_file</name> <operator>=</operator> <call><name>obs_module_file</name><argument_list>(<argument><expr><literal type="string">"text_default.effect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>effect_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>draw_effect</name></name> <operator>=</operator> <call><name>gs_effect_create_from_file</name><argument_list>(

<argument><expr><name>effect_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>effect_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_size</name></name> <operator>!=</operator> <name>font_size</name> <operator>||</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>from_file</name></name> <operator>!=</operator> <name>from_file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>file_load_failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>from_file</name></name> <operator>=</operator> <name>from_file</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name>font_style</name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>font_flags</name> <operator>==</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>font_flags</name></name> <operator>&amp;&amp;</operator>

<name>font_size</name> <operator>==</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>font_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip_font_load</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>max_h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vbuf_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_style</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>font_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_size</name></name> <operator>=</operator> <name>font_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_flags</name></name> <operator>=</operator> <name>font_flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_font</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FT2-text: Failed to load font %s"</literal></expr></argument>,

<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>FT_Set_Pixel_Sizes</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Select_Charmap</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr></argument>, <argument><expr><name>FT_ENCODING_UNICODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>texbuf</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>texbuf_w</name> <operator>*</operator> <name>texbuf_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cache_standard_glyphs</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>skip_font_load</name>:</label>

<if_stmt><if>if <condition>(<expr><name>from_file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"text_file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>tmp</name> <operator>||</operator> <operator>!</operator><call><name>os_file_exists</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>emptystr</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>emptystr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>emptystr</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"FT2-text: Failed to open %s for "</literal>

<literal type="string">"reading"</literal></expr></argument>,

<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><name>vbuf_needs_update</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text_file</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chat_log_mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_from_end</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_text_from_file</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>last_checked</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_utf8_to_wcs_ptr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_face</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cache_glyphs</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><name><name>srcdata</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_up_vertex_buffer</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FACE</name></cpp:macro> <cpp:value>"Arial"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FACE</name></cpp:macro> <cpp:value>"Helvetica"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FACE</name></cpp:macro> <cpp:value>"Sans Serif"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ft2_source_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ft2_source</name></name> <modifier>*</modifier></type><name>srcdata</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ft2_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>font_obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_plugin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>font_size</name> <init>= <expr><ternary><condition><expr><name>ver</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>srcdata</name><operator>-&gt;</operator><name>font_size</name></name> <operator>=</operator> <name>font_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_string</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>, <argument><expr><literal type="string">"face"</literal></expr></argument>, <argument><expr><name>DEFAULT_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>font_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_obj</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name>font_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"log_lines"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"color1"</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"color2"</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ft2_source_update</name><argument_list>(<argument><expr><name>srcdata</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>font_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcdata</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ft2_source_create_v1</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ft2_source_create</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ft2_source_create_v2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ft2_source_create</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
