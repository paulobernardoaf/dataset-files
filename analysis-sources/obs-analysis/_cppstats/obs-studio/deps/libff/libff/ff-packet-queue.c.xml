<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libff\libff\ff-packet-queue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-packet-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-compat.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>packet_queue_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_packet_queue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>flush_packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>flush_packet</name><operator>.</operator><name>base</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><literal type="string">"FLUSH"</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail1</name>:</label>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>packet_queue_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>packet_queue_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>flush_packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>packet_queue_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ff_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet_list</name></name> <modifier>*</modifier></type><name>new_packet</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_packet</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_packet_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_packet</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FF_PACKET_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_packet</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <operator>*</operator><name>packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_packet</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>last_packet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <name>new_packet</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_packet</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_packet</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_packet</name></name> <operator>=</operator> <name>new_packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+=</operator> <name><name>new_packet</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>base</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FF_PACKET_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>packet_queue_put_flush_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>flush_packet</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>packet_queue_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ff_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet_list</name></name> <modifier>*</modifier></type><name>potential_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>return_status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>potential_packet</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>potential_packet</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <name><name>potential_packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>total_size</name></name> <operator>-=</operator> <name><name>potential_packet</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>base</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>packet</name> <operator>=</operator> <name><name>potential_packet</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>potential_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>return_status</name> <operator>=</operator> <name>FF_PACKET_SUCCESS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_status</name> <operator>=</operator> <name>FF_PACKET_EMPTY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_status</name> <operator>=</operator> <name>FF_PACKET_FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>return_status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>packet_queue_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_packet_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet_list</name></name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>packet</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name></expr>;</init> <condition><expr><name>packet</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>packet</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>clock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_packet</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
