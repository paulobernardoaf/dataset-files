<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libff\libff\ff-circular-queue.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/mem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ff_circular_queue</name> <block>{

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ff_circular_queue</name></name></type> <name>ff_circular_queue_t</name>;</typedef>

<function_decl><type><name>bool</name></type> <name>ff_circular_queue_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_circular_queue_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_circular_queue_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_circular_queue_wait_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ff_circular_queue_peek_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_circular_queue_advance_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ff_circular_queue_peek_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_circular_queue_advance_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_circular_queue</name></name> <modifier>*</modifier></type><name>cq</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
