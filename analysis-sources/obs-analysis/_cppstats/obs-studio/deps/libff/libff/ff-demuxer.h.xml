<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libff\libff\ff-demuxer.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-circular-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-decoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-packet-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEMUXER_FAIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEMUXER_SUCCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-callbacks.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ff_demuxer_options</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>audio_packet_queue_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_packet_queue_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_frame_queue_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_frame_queue_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_hw_decoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_looping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVDiscard</name></name></type> <name>frame_drop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>custom_options</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ff_demuxer_options</name></name></type> <name>ff_demuxer_options_t</name>;</typedef>

<struct>struct <name>ff_demuxer</name> <block>{

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>io_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>format_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_clock</name></name></type> <name>clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_demuxer_options</name></name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_decoder</name></name> <modifier>*</modifier></type><name>audio_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_callbacks</name></name></type> <name>audio_callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_decoder</name></name> <modifier>*</modifier></type><name>video_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_callbacks</name></name></type> <name>video_callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>demuxer_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>seek_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>seek_flush</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_format</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ff_demuxer</name></name></type> <name>ff_demuxer_t</name>;</typedef>

<function_decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>ff_demuxer_init</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ff_demuxer_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input_format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_demuxer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_demuxer_set_callbacks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,

<parameter><decl><type><name>ff_callback_frame</name></type> <name>frame</name></decl></parameter>,

<parameter><decl><type><name>ff_callback_format</name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name>ff_callback_initialize</name></type> <name>initialize</name></decl></parameter>,

<parameter><decl><type><name>ff_callback_frame</name></type> <name>frame_initialize</name></decl></parameter>,

<parameter><decl><type><name>ff_callback_frame</name></type> <name>frame_free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_demuxer_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_demuxer</name></name> <modifier>*</modifier></type><name>demuxer</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
