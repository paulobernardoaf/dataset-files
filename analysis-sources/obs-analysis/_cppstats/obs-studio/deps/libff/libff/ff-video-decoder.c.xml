<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libff\libff\ff-video-decoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-callbacks.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-circular-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-clock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-decoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-packet-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswscale/swscale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-compat.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>queue_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_decoder</name></name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>best_effort_pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_frame</name></name> <modifier>*</modifier></type><name>queue_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>call_initialize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_circular_queue_wait_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>queue_frame</name> <operator>=</operator> <call><name>ff_circular_queue_peek_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>decoder</name><operator>-&gt;</operator><name>codec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>call_initialize</name> <operator>=</operator> <operator>(</operator><name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>codec</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>codec</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>codec</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>queue_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue_frame</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <call><name>ff_clock_retain</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>call_initialize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_callbacks_frame_initialize</name><argument_list>(<argument><expr><name>queue_frame</name></expr></argument>, <argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>queue_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>best_effort_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_circular_queue_advance_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>, <argument><expr><name>queue_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ff_video_decoder_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque_video_decoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_decoder</name></name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator>struct <name>ff_decoder</name> <operator>*</operator><operator>)</operator><name>opaque_video_decoder</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_packet</name></name></type> <name>packet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>complete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>key_frame</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>decoder</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>packet_queue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>packet_queue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FF_PACKET_EMPTY</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>FF_PACKET_FAIL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>base</name><operator>.</operator><name>data</name></name> <operator>==</operator>

<name><name>decoder</name><operator>-&gt;</operator><name>packet_queue</name><operator>.</operator><name>flush_packet</name><operator>.</operator><name>base</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>.</operator><name>clock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <call><name>ff_clock_move</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><call><name>ff_clock_start_time</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>key_frame</name> <operator>=</operator> <name><name>packet</name><operator>.</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>frame_drop_check</name> <init>= <expr><name>key_frame</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>frame_drop_check</name> <operator>&amp;=</operator> <name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_drop_check</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_decoder_set_frame_drop_state</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>start_time</name></expr></argument>,

<argument><expr><name><name>packet</name><operator>.</operator><name>base</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avcodec_decode_video2</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>complete</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>best_effort_pts</name> <init>=

<expr><call><name>ff_decoder_get_best_effort_pts</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>queue_frame</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>best_effort_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
