<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libff\libff\ff-clock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-clock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ff-threading.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/avutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_START_CHECK_INTERVAL</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><name>double</name></type> <name>ff_get_sync_clock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>clock</name><operator>-&gt;</operator><name>sync_clock</name></name><argument_list>(<argument><expr><name><name>clock</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ff_clock_start_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clock</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>clock</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>start_time</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ff_clock_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ff_av_sync_type</name></name></type> <name>sync_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>abort</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>release</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>aborted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clock</name><operator>-&gt;</operator><name>sync_type</name></name> <operator>==</operator> <name>sync_type</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>clock</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clock</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>clock</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>current_time</name> <init>=

<expr><call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>+</operator> <name>CLOCK_START_CHECK_INTERVAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>sleep_time</name> <init>= <expr><block>{

<expr><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>current_time</name> <operator>/</operator> <name>AV_TIME_BASE</name></expr>,

<expr><operator>.</operator><name>tv_nsec</name> <operator>=</operator>

<operator>(</operator><name>current_time</name> <operator>%</operator> <name>AV_TIME_BASE</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sleep_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aborted</name> <operator>=</operator> <operator>*</operator><name>abort</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clock</name><operator>-&gt;</operator><name>retain</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>release</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aborted</name> <operator>||</operator> <name>release</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"could not start "</literal>

<literal type="string">"slave clock as master clock "</literal>

<literal type="string">"was never started before "</literal>

<literal type="string">"being released or aborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>release</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><name>release</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aborted</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>ff_clock_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_clock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>clock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>clock</name></expr>;</return>

<label><name>fail1</name>:</label>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>ff_clock_retain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clock</name><operator>-&gt;</operator><name>retain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>clock</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>ff_clock_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier></type><name>retained_clock</name> <init>= <expr><call><name>ff_clock_retain</name><argument_list>(<argument><expr><operator>*</operator><name>clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_clock_release</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retained_clock</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_clock_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ff_clock</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>clock</name><operator>)</operator><operator>-&gt;</operator><name>retain</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>clock</name><operator>)</operator><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>clock</name><operator>)</operator><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>*</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>clock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
