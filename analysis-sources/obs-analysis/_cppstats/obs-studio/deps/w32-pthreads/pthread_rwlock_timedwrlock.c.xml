<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_rwlock_timedwrlock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_rwlock_timedwrlock</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type> <name>rwlock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>rwl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rwlock</name> <operator>==</operator> <name>PTHREAD_RWLOCK_INITIALIZER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ptw32_rwlock_check_need_init</name> <argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>EBUSY</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rwl</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rwl</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>PTW32_RWLOCK_MAGIC</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator>

<call><name>pthread_mutex_timedlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxExclusiveAccess</name></name><operator>)</operator></expr></argument>, <argument><expr><name>abstime</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator>

<call><name>pthread_mutex_timedlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>abstime</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxExclusiveAccess</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rwl</name><operator>-&gt;</operator><name>nExclusiveAccessCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nSharedAccessCount</name></name> <operator>-=</operator> <name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rwl</name><operator>-&gt;</operator><name>nSharedAccessCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name> <operator>=</operator> <operator>-</operator><name><name>rwl</name><operator>-&gt;</operator><name>nSharedAccessCount</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>inline_depth</name><name>(</name><name>0</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pthread_cleanup_push</name> <argument_list>(<argument><expr><name>ptw32_rwlock_cancelwrwait</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>rwl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator>

<call><name>pthread_cond_timedwait</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>cndSharedAccessCompleted</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>abstime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>pthread_cleanup_pop</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>result</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>inline_depth</name><name>(</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nSharedAccessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nExclusiveAccessCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
