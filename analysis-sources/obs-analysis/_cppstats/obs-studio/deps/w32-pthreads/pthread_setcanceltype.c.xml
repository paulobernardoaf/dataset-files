<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_setcanceltype.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_setcanceltype</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>oldtype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name> <init>= <expr><call><name>pthread_self</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>PTHREAD_CANCEL_DEFERRED</name>

<operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>PTHREAD_CANCEL_ASYNCHRONOUS</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldtype</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>oldtype</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>cancelType</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>==</operator> <name>PTHREAD_CANCEL_ENABLE</name>

<operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>PTHREAD_CANCEL_ASYNCHRONOUS</name>

<operator>&amp;&amp;</operator> <call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelEvent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateCanceling</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_DISABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResetEvent</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_throw</name> <argument_list>(<argument><expr><name>PTW32_EPS_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 

</unit>
