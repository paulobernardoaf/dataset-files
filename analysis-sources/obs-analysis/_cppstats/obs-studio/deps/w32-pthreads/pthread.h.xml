<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>PTHREAD_H</name></expr></argument> )</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_VERSION</name></cpp:macro> <cpp:value>2,9,1,0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_VERSION_STRING</name></cpp:macro> <cpp:value>"2, 9, 1, 0\0"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__CLEANUP_SEH</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__CLEANUP_CXX</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__CLEANUP_C</name></expr></argument> )</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLEANUP_C</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__CLEANUP_SEH</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>_MSC_VER</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_RC_MSC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> ERROR [__FILE__, line __LINE__]: SEH is not supported for this compiler.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RC_INVOKED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_LEVEL</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_LEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_C_SOURCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_POSIX_C_SOURCE</name> <operator>&gt;=</operator> <literal type="number">199309</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_LEVEL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_LEVEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_NP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_LEVEL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_LEVEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_LEVEL_MAX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_C_SOURCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_POSIX_C_SOURCE</name> <operator>&gt;=</operator> <literal type="number">200112</literal> <operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_LEVEL</name></cpp:macro> <cpp:value>PTW32_LEVEL_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRUCT_TIMESPEC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SIGNAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_PTW32_CONFIG_H</name></cpp:undef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"pthread"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INCLUDE_WINDOWS_H</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_INCLUDE_WINDOWS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>DWORD_PTR</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ULONG_PTR</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRUCT_TIMESPEC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTW32_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NEED_FTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>PTW32_FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PTW32_TRUE</name> <init>= <expr><operator>(</operator><operator>!</operator> <name>PTW32_FALSE</name><operator>)</operator></expr></init></decl>

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_ERRNO</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_SEM</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRUCT_TIMESPEC</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MODE_T</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MODE_T</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PTW32_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_LEVEL_MAX</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"need_errno.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTSUP</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETIMEDOUT</name></cpp:macro> <cpp:value>10060</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOSYS</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EDEADLK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDEADLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDEADLK</name></cpp:macro> <cpp:value>EDEADLOCK</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDEADLK</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EOWNERDEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOWNERDEAD</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENOTRECOVERABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTRECOVERABLE</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_INCLUDE_WINDOWS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32__HANDLE_DEF</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32__DWORD_DEF</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWORD</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TIMESPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_STRUCT_TIMESPEC</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_TIMESPEC_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TIMESPEC_DEFINED</name></cpp:macro></cpp:define>

<struct>struct <name>timespec</name> <block>{

<decl_stmt><decl><type><name>time_t</name></type> <name>tv_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>tv_nsec</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_BLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIG_UNBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_UNBLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_SETMASK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREADS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREADS</name></cpp:macro> <cpp:value>200809L</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_READER_WRITER_LOCKS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_READER_WRITER_LOCKS</name></cpp:macro> <cpp:value>200809L</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_SPIN_LOCKS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_SPIN_LOCKS</name></cpp:macro> <cpp:value>200809L</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_BARRIERS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_BARRIERS</name></cpp:macro> <cpp:value>200809L</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_SAFE_FUNCTIONS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_SAFE_FUNCTIONS</name></cpp:macro> <cpp:value>200809L</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_ATTR_STACKSIZE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_ATTR_STACKSIZE</name></cpp:macro> <cpp:value>200809L</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_ATTR_STACKADDR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_ATTR_STACKADDR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_PRIO_INHERIT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_PRIO_INHERIT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_PRIO_PROTECT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_PRIO_PROTECT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_PRIORITY_SCHEDULING</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_PRIORITY_SCHEDULING</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_PROCESS_SHARED</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_PROCESS_SHARED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_DESTRUCTOR_ITERATIONS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_DESTRUCTOR_ITERATIONS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTHREAD_DESTRUCTOR_ITERATIONS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_DESTRUCTOR_ITERATIONS</name></cpp:macro> <cpp:value>_POSIX_THREAD_DESTRUCTOR_ITERATIONS</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_KEYS_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_KEYS_MAX</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTHREAD_KEYS_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_KEYS_MAX</name></cpp:macro> <cpp:value>_POSIX_THREAD_KEYS_MAX</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTHREAD_STACK_MIN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_STACK_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_THREADS_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_THREAD_THREADS_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTHREAD_THREADS_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_THREADS_MAX</name></cpp:macro> <cpp:value>2019</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_SEM_NSEMS_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_SEM_NSEMS_MAX</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEM_NSEMS_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEM_NSEMS_MAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_SEM_VALUE_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_SEM_VALUE_MAX</name></cpp:macro> <cpp:value>32767</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEM_VALUE_MAX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEM_VALUE_MAX</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__declspec</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> Please upgrade your GNU compiler to one that supports __declspec.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_DLLPORT</name></cpp:macro> <cpp:value>__declspec (dllexport)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_DLLPORT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_DLLPORT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_CDECL</name></cpp:macro> <cpp:value>__cdecl</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PTW32_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_LEVEL_MAX</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ptw32_handle_t</name>;</typedef>

<typedef>typedef <type><name>ptw32_handle_t</name></type> <name>pthread_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_attr_t_</name></name> <modifier>*</modifier></type> <name>pthread_attr_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_once_t_</name></name></type> <name>pthread_once_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_key_t_</name></name> <modifier>*</modifier></type> <name>pthread_key_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_mutex_t_</name></name> <modifier>*</modifier></type> <name>pthread_mutex_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_mutexattr_t_</name></name> <modifier>*</modifier></type> <name>pthread_mutexattr_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_cond_t_</name></name> <modifier>*</modifier></type> <name>pthread_cond_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_condattr_t_</name></name> <modifier>*</modifier></type> <name>pthread_condattr_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>pthread_rwlock_t_</name></name> <modifier>*</modifier></type> <name>pthread_rwlock_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_rwlockattr_t_</name></name> <modifier>*</modifier></type> <name>pthread_rwlockattr_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_spinlock_t_</name></name> <modifier>*</modifier></type> <name>pthread_spinlock_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_barrier_t_</name></name> <modifier>*</modifier></type> <name>pthread_barrier_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>pthread_barrierattr_t_</name></name> <modifier>*</modifier></type> <name>pthread_barrierattr_t</name>;</typedef>

<enum>enum <block>{

<decl><name>PTHREAD_CREATE_JOINABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>PTHREAD_CREATE_DETACHED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PTHREAD_INHERIT_SCHED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PTHREAD_EXPLICIT_SCHED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>PTHREAD_SCOPE_PROCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PTHREAD_SCOPE_SYSTEM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>PTHREAD_CANCEL_ENABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>PTHREAD_CANCEL_DISABLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PTHREAD_CANCEL_ASYNCHRONOUS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PTHREAD_CANCEL_DEFERRED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>PTHREAD_PROCESS_PRIVATE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PTHREAD_PROCESS_SHARED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PTHREAD_MUTEX_STALLED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>PTHREAD_MUTEX_ROBUST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PTHREAD_BARRIER_SERIAL_THREAD</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_CANCELED</name></cpp:macro> <cpp:value>((void *)(size_t) -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_ONCE_INIT</name></cpp:macro> <cpp:value>{ PTW32_FALSE, 0, 0, 0}</cpp:value></cpp:define>

<struct>struct <name>pthread_once_t_</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reserved2</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>((pthread_mutex_t)(size_t) -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_RECURSIVE_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>((pthread_mutex_t)(size_t) -2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_ERRORCHECK_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>((pthread_mutex_t)(size_t) -3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP</name></cpp:macro> <cpp:value>PTHREAD_RECURSIVE_MUTEX_INITIALIZER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP</name></cpp:macro> <cpp:value>PTHREAD_ERRORCHECK_MUTEX_INITIALIZER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_COND_INITIALIZER</name></cpp:macro> <cpp:value>((pthread_cond_t)(size_t) -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_RWLOCK_INITIALIZER</name></cpp:macro> <cpp:value>((pthread_rwlock_t)(size_t) -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_SPINLOCK_INITIALIZER</name></cpp:macro> <cpp:value>((pthread_spinlock_t)(size_t) -1)</cpp:value></cpp:define>

<enum>enum

<block>{

<decl><name>PTHREAD_MUTEX_FAST_NP</name></decl>,

<decl><name>PTHREAD_MUTEX_RECURSIVE_NP</name></decl>,

<decl><name>PTHREAD_MUTEX_ERRORCHECK_NP</name></decl>,

<decl><name>PTHREAD_MUTEX_TIMED_NP</name> <init>= <expr><name>PTHREAD_MUTEX_FAST_NP</name></expr></init></decl>,

<decl><name>PTHREAD_MUTEX_ADAPTIVE_NP</name> <init>= <expr><name>PTHREAD_MUTEX_FAST_NP</name></expr></init></decl>,

<decl><name>PTHREAD_MUTEX_NORMAL</name> <init>= <expr><name>PTHREAD_MUTEX_FAST_NP</name></expr></init></decl>,

<decl><name>PTHREAD_MUTEX_RECURSIVE</name> <init>= <expr><name>PTHREAD_MUTEX_RECURSIVE_NP</name></expr></init></decl>,

<decl><name>PTHREAD_MUTEX_ERRORCHECK</name> <init>= <expr><name>PTHREAD_MUTEX_ERRORCHECK_NP</name></expr></init></decl>,

<decl><name>PTHREAD_MUTEX_DEFAULT</name> <init>= <expr><name>PTHREAD_MUTEX_NORMAL</name></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>ptw32_cleanup_t</name></name></type> <name>ptw32_cleanup_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>disable</name> <name>:</name> <name>4229</name> <name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>PTW32_CDECL</name> <name>ptw32_cleanup_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>default</name> <name>:</name> <name>4229</name> <name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ptw32_cleanup_t</name>

<block>{

<decl_stmt><decl><type><name>ptw32_cleanup_callback_t</name></type> <name>routine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ptw32_cleanup_t</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cleanup_push</name><parameter_list>( <parameter><type><name>_rout</name></type></parameter>, <parameter><type><name>_arg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ ptw32_cleanup_t _cleanup; _cleanup.routine = (ptw32_cleanup_callback_t)(_rout); _cleanup.arg = (_arg); __try {</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cleanup_pop</name><parameter_list>( <parameter><type><name>_execute</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>} __finally { if( _execute || AbnormalTermination()) { (*(_cleanup.routine))( _cleanup.arg ); } } }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cleanup_push</name><parameter_list>( <parameter><type><name>_rout</name></type></parameter>, <parameter><type><name>_arg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ ptw32_cleanup_t _cleanup; ptw32_push_cleanup( &amp;_cleanup, (ptw32_cleanup_callback_t) (_rout), (_arg) );</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cleanup_pop</name><parameter_list>( <parameter><type><name>_execute</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(void) ptw32_pop_cleanup( _execute ); }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>PThreadCleanup</name> <block>{<block_content>

<decl_stmt><decl><type><name>ptw32_cleanup_callback_t</name></type> <name>cleanUpRout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>executeIt</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>PThreadCleanup</name><argument_list>()</argument_list></call> <operator>:</operator>

<call><name>cleanUpRout</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr><operator>,</operator>

<expr><call><name>obj</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr><operator>,</operator>

<macro><name>executeIt</name><argument_list>( <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<expr><block>{

}</block>

<macro><name>PThreadCleanup</name><argument_list>(

<argument>ptw32_cleanup_callback_t routine</argument>,

<argument>void * arg</argument> )</argument_list></macro> <operator>:</operator>

<call><name>cleanUpRout</name><argument_list>( <argument><expr><name>routine</name></expr></argument> )</argument_list></call></expr><operator>,</operator>

<expr><call><name>obj</name><argument_list>( <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr><operator>,</operator>

<macro><name>executeIt</name><argument_list>( <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<expr><block>{

}</block>

<operator>~</operator><macro><name>PThreadCleanup</name><argument_list>()</argument_list></macro>

<block>{

<if_stmt><if>if <condition>( <expr><name>executeIt</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cleanUpRout</name> <operator>!=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call>(<modifier>*</modifier><name>cleanUpRout</name>)<argument_list>( <argument><expr><name>obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt/>}</block_content>

}

void execute( int exec</block></if></if_stmt> )

<block>{

<expr><name>executeIt</name> <operator>=</operator> <name>exec</name></expr>;

}</block></block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cleanup_push</name><parameter_list>( <parameter><type><name>_rout</name></type></parameter>, <parameter><type><name>_arg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ PThreadCleanup cleanup((ptw32_cleanup_callback_t)(_rout), (void *) (_arg) );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cleanup_pop</name><parameter_list>( <parameter><type><name>_execute</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>cleanup.execute( _execute ); }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> ERROR [__FILE__, line __LINE__]: Cleanup type undefined.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_init</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getdetachstate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>detachstate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getstackaddr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>stackaddr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getstacksize</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type> <name>stacksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setdetachstate</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>detachstate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setstackaddr</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stackaddr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setstacksize</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getschedparam</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setschedparam</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setschedpolicy</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getschedpolicy</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setinheritsched</name><parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>inheritsched</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getinheritsched</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>inheritsched</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_setscope</name> <parameter_list>(<parameter><decl><type><name>pthread_attr_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_attr_getscope</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_create</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type> <name>tid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>PTW32_CDECL</name> <modifier>*</modifier><name>start</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_detach</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_equal</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>t1</name></decl></parameter>,

<parameter><decl><type><name>pthread_t</name></type> <name>t2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>void</name> <name>PTW32_CDECL</name></type> <name>pthread_exit</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_join</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>pthread_t</name> <name>PTW32_CDECL</name></type> <name>pthread_self</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cancel</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_setcancelstate</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>oldstate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_setcanceltype</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>oldtype</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>void</name> <name>PTW32_CDECL</name></type> <name>pthread_testcancel</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_once</name> <parameter_list>(<parameter><decl><type><name>pthread_once_t</name> <modifier>*</modifier></type> <name>once_control</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<name>PTW32_CDECL</name> <modifier>*</modifier><name>init_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PTW32_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_LEVEL_MAX</name></expr></cpp:if>

<function_decl><type><name>PTW32_DLLPORT</name> <name>ptw32_cleanup_t</name> <modifier>*</modifier> <name>PTW32_CDECL</name></type> <name>ptw32_pop_cleanup</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>execute</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>void</name> <name>PTW32_CDECL</name></type> <name>ptw32_push_cleanup</name> <parameter_list>(<parameter><decl><type><name>ptw32_cleanup_t</name> <modifier>*</modifier></type> <name>cleanup</name></decl></parameter>,

<parameter><decl><type><name>ptw32_cleanup_callback_t</name></type> <name>routine</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_key_create</name> <parameter_list>(<parameter><decl><type><name>pthread_key_t</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<name>PTW32_CDECL</name> <modifier>*</modifier><name>destructor</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_key_delete</name> <parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_setspecific</name> <parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>void</name> <modifier>*</modifier> <name>PTW32_CDECL</name></type> <name>pthread_getspecific</name> <parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_init</name> <parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_getpshared</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name>

<modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_setpshared</name> <parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_settype</name> <parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_gettype</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_setrobust</name><parameter_list>(

<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>robust</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_getrobust</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>robust</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrierattr_init</name> <parameter_list>(<parameter><decl><type><name>pthread_barrierattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrierattr_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_barrierattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrierattr_getpshared</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_barrierattr_t</name>

<modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrierattr_setpshared</name> <parameter_list>(<parameter><decl><type><name>pthread_barrierattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_init</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_lock</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_timedlock</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_trylock</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_unlock</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutex_consistent</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_spin_init</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_spin_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_spin_lock</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_spin_trylock</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_spin_unlock</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrier_init</name> <parameter_list>(<parameter><decl><type><name>pthread_barrier_t</name> <modifier>*</modifier></type> <name>barrier</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_barrierattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrier_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_barrier_t</name> <modifier>*</modifier></type> <name>barrier</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_barrier_wait</name> <parameter_list>(<parameter><decl><type><name>pthread_barrier_t</name> <modifier>*</modifier></type> <name>barrier</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_condattr_init</name> <parameter_list>(<parameter><decl><type><name>pthread_condattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_condattr_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_condattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_condattr_getpshared</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_condattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_condattr_setpshared</name> <parameter_list>(<parameter><decl><type><name>pthread_condattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cond_init</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_condattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cond_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cond_wait</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>,

<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cond_timedwait</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>,

<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cond_signal</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_cond_broadcast</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_setschedparam</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>policy</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_getschedparam</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>policy</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_setconcurrency</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_getconcurrency</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_init</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_rwlockattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_tryrdlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_trywrlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_rdlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_timedrdlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_wrlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_timedwrlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlock_unlock</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlockattr_init</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlockattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlockattr_destroy</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlockattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlockattr_getpshared</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_rwlockattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_rwlockattr_setpshared</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlockattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PTW32_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_LEVEL_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></cpp:if>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_kill</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_setkind_np</name><parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_mutexattr_getkind_np</name><parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_delay_np</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type> <name>interval</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_num_processors_np</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>unsigned</name> <name>__int64</name> <name>PTW32_CDECL</name></type> <name>pthread_getunique_np</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_win32_process_attach_np</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_win32_process_detach_np</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_win32_thread_attach_np</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_win32_thread_detach_np</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthread_win32_test_features_np</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>ptw32_features</name> <block>{

<decl><name>PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>, 

<decl><name>PTW32_ALERTABLE_ASYNC_CANCEL</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl> 

}</block>;</enum>

<function_decl><type><name>PTW32_DLLPORT</name> <name>void</name> <modifier>*</modifier> <name>PTW32_CDECL</name></type> <name>pthread_timechange_handler_np</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PTW32_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_LEVEL_MAX</name></expr></cpp:if>

<function_decl><type><name>PTW32_DLLPORT</name> <name>HANDLE</name> <name>PTW32_CDECL</name></type> <name>pthread_getw32threadhandle_np</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>DWORD</name> <name>PTW32_CDECL</name></type> <name>pthread_getw32threadid_np</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthreadCancelableWait</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>waitHandle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <name>PTW32_CDECL</name></type> <name>pthreadCancelableTimedWait</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>waitHandle</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>PTW32_DLLPORT</name> <name>int</name> <modifier>*</modifier> <name>PTW32_CDECL</name></type> <name>_errno</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<macro><name>__declspec</name><argument_list>(<argument>dllimport</argument>)</argument_list></macro> <function_decl><type><specifier>extern</specifier> <name>int</name> <modifier>*</modifier> <name>__cdecl</name></type> <name>_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errno</name></cpp:macro> <cpp:value>(*_errno())</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ftime</name></cpp:macro> <cpp:value>ftime</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_timeb</name></cpp:macro> <cpp:value>timeb</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>ptw32_exception</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ptw32_exception_cancel</name> <range>: <expr><name>public</name> <name>ptw32_exception</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ptw32_exception_exit</name> <range>: <expr><name>public</name> <name>ptw32_exception</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PTW32_LEVEL</name> <operator>&gt;=</operator> <name>PTW32_LEVEL_MAX</name></expr></cpp:if>

<function_decl><type><name>PTW32_DLLPORT</name> <name>DWORD</name> <name>PTW32_CDECL</name></type> <name>ptw32_get_exception_services_code</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__except</name><parameter_list>( <parameter><type><name>E</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__except( ( GetExceptionCode() == ptw32_get_exception_services_code() ) ? EXCEPTION_CONTINUE_SEARCH : ( E ) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PtW32NoCatchWarn</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"Specify \"/DPtW32NoCatchWarn\" compiler flag to skip this message."</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"------------------------------------------------------------------"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"When compiling applications with MSVC++ and C++ exception handling:"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" Replace any 'catch( ... )' in routines called from POSIX threads"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" with 'PtW32CatchAll' or 'CATCHALL' if you want POSIX thread"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" cancelation and pthread_exit to work. For example:"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>""</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" #if defined(PtW32CatchAll)"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" PtW32CatchAll"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" #else"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" catch(...)"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" #endif"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" {"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" /* Catchall block processing */"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>" }"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"------------------------------------------------------------------"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PtW32CatchAll</name></cpp:macro> <cpp:value>catch( ptw32_exception &amp; ) { throw; } catch( ... )</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>catch</name><parameter_list>( <parameter><type><name>E</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>catch( ptw32_exception &amp; ) { throw; } catch( E )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32__HANDLE_DEF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HANDLE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32__DWORD_DEF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DWORD</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_LEVEL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTW32_LEVEL_MAX</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
