<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_self.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>pthread_t</name></type>

<name>pthread_self</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>nil</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptw32_selfThreadKey</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nil</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>ptw32_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>implicit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>detachState</name></name> <operator>=</operator> <name>PTHREAD_CREATE_DETACHED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_DUPLICATEHANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>threadH</name></name> <operator>=</operator> <call><name>GetCurrentThread</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DuplicateHandle</name> <argument_list>(<argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>,

<argument><expr><call><name>GetCurrentThread</name> <argument_list>()</argument_list></call></expr></argument>,

<argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>threadH</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_threadReusePush</name> <argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sched_priority</name></name> <operator>=</operator> <call><name>GetThreadPriority</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>threadH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_setspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 

</unit>
