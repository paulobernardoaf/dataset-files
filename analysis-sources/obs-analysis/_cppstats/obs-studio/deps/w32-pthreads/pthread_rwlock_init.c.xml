<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_rwlock_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_rwlock_init</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type> <name>rwlock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_rwlockattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>rwl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> 

<goto>goto <name>DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rwl</name> <operator>=</operator> <operator>(</operator><name>pthread_rwlock_t</name><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>rwl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rwl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nSharedAccessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nExclusiveAccessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nCompletedSharedAccessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxExclusiveAccess</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>FAIL0</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>FAIL1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_cond_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rwl</name><operator>-&gt;</operator><name>cndSharedAccessCompleted</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>FAIL2</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rwl</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>PTW32_RWLOCK_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>DONE</name>;</goto>

<label><name>FAIL2</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxSharedAccessCompleted</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>FAIL1</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rwl</name><operator>-&gt;</operator><name>mtxExclusiveAccess</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>FAIL0</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>free</name> <argument_list>(<argument><expr><name>rwl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rwl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>DONE</name>:</label>

<expr_stmt><expr><operator>*</operator><name>rwlock</name> <operator>=</operator> <name>rwl</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
