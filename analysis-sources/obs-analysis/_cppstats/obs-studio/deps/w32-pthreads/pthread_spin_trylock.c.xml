<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_spin_trylock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_spin_trylock</name> <parameter_list>(<parameter><decl><type><name>pthread_spinlock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>pthread_spinlock_t</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>lock</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>lock</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lock</name> <operator>==</operator> <name>PTHREAD_SPINLOCK_INITIALIZER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>ptw32_spinlock_check_need_init</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>lock</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator>

<call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name> <argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interlock</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <name>PTW32_SPIN_LOCKED</name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <name>PTW32_SPIN_UNLOCKED</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PTW32_SPIN_UNLOCKED</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>PTW32_SPIN_LOCKED</name></expr>:</case>

<return>return <expr><name>EBUSY</name></expr>;</return>

<case>case <expr><name>PTW32_SPIN_USE_MUTEX</name></expr>:</case>

<return>return <expr><call><name>pthread_mutex_trylock</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></function>

</unit>
