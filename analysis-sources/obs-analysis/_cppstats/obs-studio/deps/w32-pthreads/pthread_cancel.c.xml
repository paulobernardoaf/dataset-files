<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_cancel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"context.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ptw32_cancel_self</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_throw</name> <argument_list>(<argument><expr><name>PTW32_EPS_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type>

<name>ptw32_cancel_callback</name> <parameter_list>(<parameter><decl><type><name>ULONG_PTR</name></type> <name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_throw</name> <argument_list>(<argument><expr><name>PTW32_EPS_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>DWORD</name></type>

<name>ptw32_RegisterCancelation</name> <parameter_list>(<parameter><decl><type><name>PAPCFUNC</name></type> <name>unused1</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>threadH</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>unused2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>context</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ContextFlags</name></name> <operator>=</operator> <name>CONTEXT_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetThreadContext</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PTW32_PROGCTR</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>DWORD_PTR</name><operator>)</operator> <name>ptw32_cancel_self</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetThreadContext</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>pthread_cancel</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cancel_self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_kill</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>result</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>self</name> <operator>=</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>cancel_self</name> <operator>=</operator> <call><name>pthread_equal</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>cancelType</name></name> <operator>==</operator> <name>PTHREAD_CANCEL_ASYNCHRONOUS</name>

<operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>==</operator> <name>PTHREAD_CANCEL_ENABLE</name>

<operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>PThreadStateCanceling</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cancel_self</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateCanceling</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_DISABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_throw</name> <argument_list>(<argument><expr><name>PTW32_EPS_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>threadH</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>threadH</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SuspendThread</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateCanceling</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_DISABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_register_cancelation</name> <argument_list>(<argument><expr><operator>(</operator><name>PAPCFUNC</name><operator>)</operator><name>ptw32_cancel_callback</name></expr></argument>, <argument><expr><name>threadH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResumeThread</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>PThreadStateCancelPending</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateCancelPending</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEvent</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>cancelEvent</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;=</operator> <name>PThreadStateCanceling</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
