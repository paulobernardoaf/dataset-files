<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\ptw32_new.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>pthread_t</name></type>

<name>ptw32_new</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>nil</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ptw32_threadReusePop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>t</name><operator>.</operator><name>p</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>t</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptw32_thread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>nil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>seqNumber</name></name> <operator>=</operator> <operator>++</operator><name>ptw32_threadSeqNumber</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>sched_priority</name></name> <operator>=</operator> <name>THREAD_PRIORITY_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>detachState</name></name> <operator>=</operator> <name>PTHREAD_CREATE_JOINABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_ENABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>cancelType</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_DEFERRED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>stateLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>threadLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>robustMxListLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>robustMxList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>cancelEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>PTW32_TRUE</name></expr></argument>, 

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>PTW32_FALSE</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>cancelEvent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_threadReusePush</name> <argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

</unit>
