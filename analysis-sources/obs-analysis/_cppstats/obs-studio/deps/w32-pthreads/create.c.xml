<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\create.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>pthread_create</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type> <name>tid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,

<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>PTW32_CDECL</name> <modifier>*</modifier><name>start</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>pthread_attr_t</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>threadH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>EAGAIN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><name>PTW32_TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadParms</name> <modifier>*</modifier></type><name>parms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stackSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tid</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>attr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>thread</name> <operator>=</operator> <call><name>ptw32_new</name> <argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<goto>goto <name>FAIL0</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>thread</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>priority</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>sched_priority</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parms</name> <operator>=</operator> <operator>(</operator><name>ThreadParms</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>parms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<goto>goto <name>FAIL0</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>thread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSET_T</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>sigmask</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>.</operator><name>p</name></name><operator>)</operator><operator>-&gt;</operator><name>sigmask</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>stackSize</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>stacksize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>detachState</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>detachstate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>priority</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>sched_priority</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>THREAD_PRIORITY_LOWEST</name> <operator>&gt;</operator> <name>THREAD_PRIORITY_NORMAL</name><operator>)</operator></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>PTHREAD_INHERIT_SCHED</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>inheritsched</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSET_T</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>priority</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name><operator>)</operator><operator>-&gt;</operator><name>sched_priority</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>stackSize</name> <operator>=</operator> <name>PTHREAD_STACK_MIN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <ternary><condition><expr><name>run</name></expr> ?</condition><then> <expr><name>PThreadStateInitial</name></expr> </then><else>: <expr><name>PThreadStateSuspended</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>threadH</name></name> <operator>=</operator>

<name>threadH</name> <operator>=</operator>

<operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, 

<argument><expr><name>stackSize</name></expr></argument>, 

<argument><expr><name>ptw32_threadStart</name></expr></argument>,

<argument><expr><name>parms</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator>

<name>CREATE_SUSPENDED</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>thread</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>threadH</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ptw32_setthreadpriority</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>SCHED_OTHER</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ResumeThread</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>threadH</name></name> <operator>=</operator>

<name>threadH</name> <operator>=</operator>

<operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthread</name> <argument_list>(<argument><expr><name>ptw32_threadStart</name></expr></argument>, <argument><expr><name>stackSize</name></expr></argument>, 

<argument><expr><name>parms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>threadH</name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <operator>-</operator> <literal type="number">1L</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>threadH</name></name> <operator>=</operator> <name>threadH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SuspendThread</name> <argument_list>(<argument><expr><name>threadH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ptw32_setthreadpriority</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>SCHED_OTHER</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>threadH</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>EAGAIN</name></expr></else></ternary></expr>;</expr_stmt>

<label><name>FAIL0</name>:</label>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_threadDestroy</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parms</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>parms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tid</name> <operator>=</operator> <name>thread</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pthread_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 

</unit>
