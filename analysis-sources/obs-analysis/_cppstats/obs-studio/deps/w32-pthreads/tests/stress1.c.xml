<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\tests\stress1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>ITERATIONS</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_t</name></type> <name>master</name></decl>, <decl><type ref="prev"/><name>slave</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

}</block></struct></type> <name>mysig_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>allExit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>mysig_t</name></type> <name>control</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>PTHREAD_COND_INITIALIZER</name></expr>, <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_barrier_t</name></type> <name>startBarrier</name></decl>, <decl><type ref="prev"/><name>readyBarrier</name></decl>, <decl><type ref="prev"/><name>holdBarrier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timeoutCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>signalsTakenCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>signalsSent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>CTL_STOP</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<function><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type>

<name>millisecondsFromNow</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>millisecs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PTW32_STRUCT_TIMEB</name></type> <name>currSysTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>nanosecs</name></decl>, <decl><type ref="prev"/><name>secs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>NANOSEC_PER_MILLISEC</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>NANOSEC_PER_SEC</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PTW32_FTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>currSysTime</name><operator>.</operator><name>time</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>millisecs</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nanosecs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>millisecs</name><operator>%</operator><literal type="number">1000</literal> <operator>+</operator> <name><name>currSysTime</name><operator>.</operator><name>millitm</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>NANOSEC_PER_MILLISEC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nanosecs</name> <operator>&gt;=</operator> <name>NANOSEC_PER_SEC</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>secs</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nanosecs</name> <operator>-=</operator> <name>NANOSEC_PER_SEC</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nanosecs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>secs</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nanosecs</name> <operator>+=</operator> <name>NANOSEC_PER_SEC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>nanosecs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>secs</name></expr>;</expr_stmt>

<return>return <expr><name>time</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>masterThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dither</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sleepTime</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>mx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>control</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>mx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>signalsSent</name> <operator>%</operator> <name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timeoutCount</name> <operator>&gt;</operator> <name>signalsTakenCount</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bias</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>timeoutCount</name> <operator>&lt;</operator> <name>signalsTakenCount</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bias</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bias</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>timeout</name> <operator>||</operator> <name>bias</name></expr></argument> &gt;</argument_list></name> <name>timeout</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>timeout</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dither</name> <operator>=</operator> <operator>(</operator><name>dither</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <operator>(</operator><name>timeout</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sleepTime</name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>-</operator> <name>bias</name> <operator>+</operator> <name>dither</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>cv</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>signalsSent</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holdBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readyBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>!</operator><name>allExit</name></expr>)</condition>;</do>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>slaveThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>mx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>cv</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>mx</name></name></expr></argument>,

<argument><expr><call><name>millisecondsFromNow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><name><name>control</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ETIMEDOUT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>timeoutCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>signalsTakenCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>mx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holdBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readyBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>!</operator><name>allExit</name></expr>)</condition>;</do>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startBarrier</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readyBarrier</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holdBarrier</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>master</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>masterThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>slaveThread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>allExit</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>!</operator><name>allExit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holdBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>ITERATIONS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>allExit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readyBarrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>slave</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Signals sent = %d\nWait timeouts = %d\nSignals taken = %d\nBias = %d\nTimeout = %d\n"</literal></expr></argument>,

<argument><expr><name>signalsSent</name></expr></argument>,

<argument><expr><name>timeoutCount</name></expr></argument>,

<argument><expr><name>signalsTakenCount</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>bias</name></expr></argument>,

<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holdBarrier</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readyBarrier</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startBarrier</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>cv</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>.</operator><name>mx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
