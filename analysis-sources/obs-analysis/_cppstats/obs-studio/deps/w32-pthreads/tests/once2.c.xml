<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\tests\once2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_THREADS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ONCE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>pthread_once_t</name></type> <name>o</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_once_t</name></type> <name><name>once</name><index>[<expr><name>NUM_ONCE</name></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>cs</name></decl>;</decl_stmt>

}</block></struct></type> <name>sharedInt_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sharedInt_t</name></type> <name>numOnce</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sharedInt_t</name></type> <name>numThreads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>myfunc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numOnce</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>numOnce</name><operator>.</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numOnce</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>mythread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><name>myfunc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numThreads</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>numThreads</name><operator>.</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numThreads</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>t</name><index>[<expr><name>NUM_THREADS</name></expr>]</index><index>[<expr><name>NUM_ONCE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numThreads</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numOnce</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_ONCE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>once</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mythread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_ONCE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Join failed for [thread,once] = [%d,%d]\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>numOnce</name><operator>.</operator><name>i</name></name> <operator>==</operator> <name>NUM_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>numThreads</name><operator>.</operator><name>i</name></name> <operator>==</operator> <name>NUM_THREADS</name> <operator>*</operator> <name>NUM_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numOnce</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>numThreads</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
