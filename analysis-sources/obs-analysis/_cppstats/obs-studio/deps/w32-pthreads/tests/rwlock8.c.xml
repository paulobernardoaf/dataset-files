<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\tests\rwlock8.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATASIZE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERATIONS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>thread_tag</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>thread_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>updates</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seed</name></decl>;</decl_stmt>

}</block></struct></type> <name>thread_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>data_tag</name> <block>{

<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>updates</name></decl>;</decl_stmt>

}</block></struct></type> <name>data_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>thread_t</name></type> <name><name>threads</name><index>[<expr><name>THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>data_t</name></type> <name><name>data</name><index>[<expr><name>DATASIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>thread_routine</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>thread_t</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>thread_t</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iteration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>element</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seed</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>seed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>rand_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">71</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iteration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iteration</name> <operator>&lt;</operator> <name>ITERATIONS</name></expr>;</condition> <incr><expr><name>iteration</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iteration</name> <operator>%</operator> <operator>(</operator><name>ITERATIONS</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>iteration</name> <operator>%</operator> <name>interval</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_wrlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>thread_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>updates</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>updates</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>rand_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">71</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_rdlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>reads</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>thread_num</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>changed</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>changed</name></name> <operator>%</operator> <literal type="number">71</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>element</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>element</name> <operator>=</operator> <operator>(</operator><name>element</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>DATASIZE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thread_updates</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_updates</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTW32_STRUCT_TIMEB</name></type> <name>currSysTime1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTW32_STRUCT_TIMEB</name></type> <name>currSysTime2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>data_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>data_count</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>data_count</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>updates</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PTW32_FTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>THREADS</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>thread_num</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>updates</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>reads</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>seed</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>rand_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">71</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>thread_id</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>thread_routine</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>THREADS</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name> <argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>thread_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>THREADS</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>changed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Thread %d found changed elements %d times\n"</literal></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>THREADS</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>thread_updates</name> <operator>+=</operator> <name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>updates</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02d: seed %d, updates %d, reads %d\n"</literal></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>seed</name></expr></argument>,

<argument><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>updates</name></expr></argument>, <argument><expr><name><name>threads</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>reads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>data_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>data_count</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>data_count</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>data_updates</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>updates</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"data %02d: value %d, %d updates\n"</literal></expr></argument>,

<argument><expr><name>data_count</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>data_count</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d thread updates, %d data updates\n"</literal></expr></argument>,

<argument><expr><name>thread_updates</name></expr></argument>, <argument><expr><name>data_updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PTW32_FTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currSysTime2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"\nstart: %ld/%d, stop: %ld/%d, duration:%ld\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>currSysTime1</name><operator>.</operator><name>time</name></name></expr></argument>,<argument><expr><name><name>currSysTime1</name><operator>.</operator><name>millitm</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>currSysTime2</name><operator>.</operator><name>time</name></name></expr></argument>,<argument><expr><name><name>currSysTime2</name><operator>.</operator><name>millitm</name></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>currSysTime2</name><operator>.</operator><name>time</name></name><operator>*</operator><literal type="number">1000</literal><operator>+</operator><name><name>currSysTime2</name><operator>.</operator><name>millitm</name></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name><name>currSysTime1</name><operator>.</operator><name>time</name></name><operator>*</operator><literal type="number">1000</literal><operator>+</operator><name><name>currSysTime1</name><operator>.</operator><name>millitm</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
