<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\tests\priority1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>PTW32TEST_THREAD_INIT_PRIO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PTW32TEST_MAXPRIORITIES</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>minPrio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxPrio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>validPriorities</name><index>[<expr><name>PTW32TEST_MAXPRIORITIES</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>policy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sched_param</name></name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>threadID</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_getschedparam</name><argument_list>(<argument><expr><name>threadID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>policy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>policy</name> <operator>==</operator> <name>SCHED_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>param</name><operator>.</operator><name>sched_priority</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>getValidPriorities</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prioSet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>threadID</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>threadH</name> <init>= <expr><call><name>pthread_getw32threadhandle_np</name><argument_list>(<argument><expr><name>threadID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Using GetThreadPriority\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%10s %10s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Set value"</literal></expr></argument>, <argument><expr><literal type="string">"Get value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>prioSet</name> <operator>=</operator> <name>minPrio</name></expr>;</init>

<condition><expr><name>prioSet</name> <operator>&lt;=</operator> <name>maxPrio</name></expr>;</condition>

<incr><expr><name>prioSet</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prioSet</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetThreadPriority</name><argument_list>(<argument><expr><name>threadH</name></expr></argument>, <argument><expr><name>THREAD_PRIORITY_LOWEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetThreadPriority</name><argument_list>(<argument><expr><name>threadH</name></expr></argument>, <argument><expr><name>THREAD_PRIORITY_HIGHEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetThreadPriority</name><argument_list>(<argument><expr><name>threadH</name></expr></argument>, <argument><expr><name>prioSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>validPriorities</name><index>[<expr><name>prioSet</name><operator>+</operator><operator>(</operator><name>PTW32TEST_MAXPRIORITIES</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>GetThreadPriority</name><argument_list>(<argument><expr><name>threadH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%10d %10d\n"</literal></expr></argument>, <argument><expr><name>prioSet</name></expr></argument>, <argument><expr><name><name>validPriorities</name><index>[<expr><name>prioSet</name><operator>+</operator><operator>(</operator><name>PTW32TEST_MAXPRIORITIES</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sched_param</name></name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>maxPrio</name> <operator>=</operator> <call><name>sched_get_priority_max</name><argument_list>(<argument><expr><name>SCHED_OTHER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>minPrio</name> <operator>=</operator> <call><name>sched_get_priority_min</name><argument_list>(<argument><expr><name>SCHED_OTHER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>getValidPriorities</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_attr_setinheritsched</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_EXPLICIT_SCHED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetThreadPriority</name><argument_list>(<argument><expr><call><name>pthread_getw32threadhandle_np</name><argument_list>(<argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PTW32TEST_THREAD_INIT_PRIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Using pthread_getschedparam\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%10s %10s %10s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Set value"</literal></expr></argument>, <argument><expr><literal type="string">"Get value"</literal></expr></argument>, <argument><expr><literal type="string">"Win priority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>param</name><operator>.</operator><name>sched_priority</name></name> <operator>=</operator> <name>minPrio</name></expr>;</init>

<condition><expr><name><name>param</name><operator>.</operator><name>sched_priority</name></name> <operator>&lt;=</operator> <name>maxPrio</name></expr>;</condition>

<incr><expr><name><name>param</name><operator>.</operator><name>sched_priority</name></name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prio</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_attr_setschedparam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>prio</name> <operator>=</operator> <call><name>GetThreadPriority</name><argument_list>(<argument><expr><call><name>pthread_getw32threadhandle_np</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>

<operator>==</operator> <name><name>validPriorities</name><index>[<expr><name><name>param</name><operator>.</operator><name>sched_priority</name></name><operator>+</operator><operator>(</operator><name>PTW32TEST_MAXPRIORITIES</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>sched_priority</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%10d %10d %10d\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>sched_priority</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>result</name></expr></argument>, <argument><expr><name>prio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
