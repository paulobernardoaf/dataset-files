<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\tests\context1.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../implement.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../context.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>washere</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>washere</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>anotherEnding</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>washere</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hThread</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>.</operator><name>p</name></name><operator>)</operator><operator>-&gt;</operator><name>threadH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SuspendThread</name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>hThread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>context</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ContextFlags</name></name> <operator>=</operator> <name>CONTEXT_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetThreadContext</name><argument_list>(<argument><expr><name>hThread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PTW32_PROGCTR</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>DWORD_PTR</name><operator>)</operator> <name>anotherEnding</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetThreadContext</name><argument_list>(<argument><expr><name>hThread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Exited early\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>washere</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
