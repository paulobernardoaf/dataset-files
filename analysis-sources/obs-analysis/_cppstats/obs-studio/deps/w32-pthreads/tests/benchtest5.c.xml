<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\tests\benchtest5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"benchtest.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITERATIONS</name></cpp:macro> <cpp:value>1000000L</cpp:value></cpp:define>

<decl_stmt><decl><type><name>sem_t</name></type> <name>sema</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>w32sema</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTW32_STRUCT_TIMEB</name></type> <name>currSysTimeStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTW32_STRUCT_TIMEB</name></type> <name>currSysTimeStop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>durationMilliSecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>overHeadMilliSecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDurationMilliSecs</name><parameter_list>(<parameter><type><name>_TStart</name></type></parameter>, <parameter><type><name>_TStop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)((_TStop.time*1000+_TStop.millitm) - (_TStart.time*1000+_TStart.millitm)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTSTART</name></cpp:macro> <cpp:value>{ int i, j = 0, k = 0; PTW32_FTIME(&amp;currSysTimeStart); for (i = 0; i &lt; ITERATIONS; i++) { j++;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTSTOP</name></cpp:macro> <cpp:value>}; PTW32_FTIME(&amp;currSysTimeStop); if (j + k == i) j++; }</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>reportTest</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>testNameString</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>durationMilliSecs</name> <operator>=</operator> <call><name>GetDurationMilliSecs</name><argument_list>(<argument><expr><name>currSysTimeStart</name></expr></argument>, <argument><expr><name>currSysTimeStop</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>overHeadMilliSecs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%-45s %15ld %15.3f\n"</literal></expr></argument>,

<argument><expr><name>testNameString</name></expr></argument>,

<argument><expr><name>durationMilliSecs</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>durationMilliSecs</name> <operator>*</operator> <literal type="number">1E3</literal> <operator>/</operator> <name>ITERATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"=============================================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"\nOperations on a semaphore.\n%ld iterations\n\n"</literal></expr></argument>,

<argument><expr><name>ITERATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%-45s %15s %15s\n"</literal></expr></argument>,

<argument><expr><literal type="string">"Test"</literal></expr></argument>,

<argument><expr><literal type="string">"Total(msec)"</literal></expr></argument>,

<argument><expr><literal type="string">"average(usec)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"-----------------------------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TESTSTART</name></type>

<name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <name>one</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TESTSTOP</name></type>

<name>durationMilliSecs</name> <init>= <expr><call><name>GetDurationMilliSecs</name><argument_list>(<argument><expr><name>currSysTimeStart</name></expr></argument>, <argument><expr><name>currSysTimeStop</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>overHeadMilliSecs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>overHeadMilliSecs</name> <operator>=</operator> <name>durationMilliSecs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>w32sema</name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>ITERATIONS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TESTSTART</name></type>

<name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name>w32sema</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>,</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>one</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TESTSTOP</name></type>

<name>assert</name><argument_list>(<argument><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>w32sema</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reportTest</name><argument_list>(<argument><expr><literal type="string">"W32 Post with no waiters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>w32sema</name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>ITERATIONS</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>ITERATIONS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TESTSTART</name></type>

<name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>w32sema</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call><operator>,</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>one</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TESTSTOP</name></type>

<name>assert</name><argument_list>(<argument><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>w32sema</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reportTest</name><argument_list>(<argument><expr><literal type="string">"W32 Wait without blocking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sema</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TESTSTART</name></type>

<name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sema</name></expr></argument>)</argument_list></call><operator>,</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>one</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TESTSTOP</name></type>

<name>assert</name><argument_list>(<argument><expr><call><name>sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sema</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reportTest</name><argument_list>(<argument><expr><literal type="string">"POSIX Post with no waiters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sema</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ITERATIONS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TESTSTART</name></type>

<name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sema</name></expr></argument>)</argument_list></call><operator>,</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>one</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TESTSTOP</name></type>

<name>assert</name><argument_list>(<argument><expr><call><name>sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sema</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reportTest</name><argument_list>(<argument><expr><literal type="string">"POSIX Wait without blocking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"=============================================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
