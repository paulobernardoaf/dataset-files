<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_mutex_unlock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_mutex_unlock</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>*</operator><name>mutex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;</operator> <name>PTHREAD_ERRORCHECK_MUTEX_INITIALIZER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>mx</name><operator>-&gt;</operator><name>kind</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>PTHREAD_MUTEX_NORMAL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>LONG</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator> <call><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name> <argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>lock_idx</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetEvent</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>PTHREAD_MUTEX_RECURSIVE</name>

<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <operator>--</operator><name><name>mx</name><operator>-&gt;</operator><name>recursive_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>LONG</name><operator>)</operator> <call><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name> <argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>lock_idx</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0L</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetEvent</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>-</operator><name>kind</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator> <operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>stateInconsistent</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>PTW32_ROBUST_NOTRECOVERABLE</name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><name>PTW32_ROBUST_INCONSISTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>PTHREAD_MUTEX_NORMAL</name> <operator>==</operator> <name>kind</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_robust_mutex_remove</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>LONG</name><operator>)</operator> <call><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator> <operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>lock_idx</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetEvent</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>PTHREAD_MUTEX_RECURSIVE</name>

<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <operator>--</operator><name><name>mx</name><operator>-&gt;</operator><name>recursive_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_robust_mutex_remove</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>LONG</name><operator>)</operator> <call><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name><argument_list>(<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator> <operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>lock_idx</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetEvent</name> <argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>mx</name> <operator>!=</operator> <name>PTHREAD_MUTEX_INITIALIZER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
