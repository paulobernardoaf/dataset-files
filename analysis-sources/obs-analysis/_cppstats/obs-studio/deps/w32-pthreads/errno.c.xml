<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\errno.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reallyBad</name> <init>= <expr><name>ENOMEM</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name> <modifier>*</modifier></type>

<name>_errno</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>self</name> <operator>=</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name>reallyBad</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>self</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>exitStatus</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
