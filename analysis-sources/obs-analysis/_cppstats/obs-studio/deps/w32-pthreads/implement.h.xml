<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\implement.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PAPCFUNC</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETIMEDOUT</name></cpp:macro> <cpp:value>10060</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"semaphore.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sched.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_C_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLINE</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLINE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_VOLATILE</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_VOLATILE</name></cpp:macro> <cpp:value>volatile</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_LONG</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_SIZE</name></cpp:macro> <cpp:value>size_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_PVOID</name></cpp:macro> <cpp:value>PVOID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_LONGPTR</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_VOLATILE long*</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_SIZEPTR</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_VOLATILE size_t*</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_PVOID_PTR</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_VOLATILE PVOID*</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int64_t</name></cpp:macro> <cpp:value>ULONGLONG</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int64_t</name></cpp:macro> <cpp:value>_int64</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal></expr></cpp:if>

<typedef>typedef <type><name>long</name></type> <name>intptr_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>PThreadStateInitial</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>PThreadStateRunning</name></decl>, 

<decl><name>PThreadStateSuspended</name></decl>, 

<decl><name>PThreadStateCancelPending</name></decl>, 

<decl><name>PThreadStateCanceling</name></decl>, 

<decl><name>PThreadStateExiting</name></decl>, 

<decl><name>PThreadStateLast</name></decl>, 

<decl><name>PThreadStateReuse</name></decl> 

}</block></enum></type>

<name>PThreadState</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ptw32_mcs_node_t_</name></name></type> <name>ptw32_mcs_local_node_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ptw32_mcs_node_t_</name></name><modifier>*</modifier></type> <name>ptw32_mcs_lock_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ptw32_robust_node_t_</name></name></type> <name>ptw32_robust_node_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ptw32_thread_t_</name></name></type> <name>ptw32_thread_t</name>;</typedef>

<struct>struct <name>ptw32_thread_t_</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>__int64</name></type> <name>seqNumber</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HANDLE</name></type> <name>threadH</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_t</name></type> <name>ptHandle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>prevReuse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>volatile</specifier> <name>PThreadState</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_mcs_lock_t</name></type> <name>threadLock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptw32_mcs_lock_t</name></type> <name>stateLock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HANDLE</name></type> <name>cancelEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>exitStatus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>parms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nextAssoc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>jmp_buf</name></type> <name>start_mark</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSET_T</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigmask</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>ptw32_mcs_lock_t</name></type>

<name>robustMxListLock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type>

<name>robustMxList</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ptErrno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>detachState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sched_priority</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cancelState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cancelType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>implicit</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>thread</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>dummy</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>align</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_ATTR_VALID</name></cpp:macro> <cpp:value>((unsigned long) 0xC4C0FFEE)</cpp:value></cpp:define>

<struct>struct <name>pthread_attr_t_</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stackaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>stacksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>detachstate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sched_param</name></name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inheritsched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>contentionscope</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSET_T</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigmask</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block>;</struct>

<struct>struct <name>sem_t_</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>sem</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_SEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>leftToUnblock</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_OBJECT_AUTO_INIT</name></cpp:macro> <cpp:value>((void *)(size_t) -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_OBJECT_INVALID</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<struct>struct <name>pthread_mutex_t_</name>

<block>{

<decl_stmt><decl><type><name>LONG</name></type> <name>lock_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>recursive_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_t</name></type> <name>ownerThread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>event</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type>

<name>robustNode</name></decl>;</decl_stmt> 

}</block>;</struct>

<enum>enum <name>ptw32_robust_state_t_</name>

<block>{

<decl><name>PTW32_ROBUST_CONSISTENT</name></decl>,

<decl><name>PTW32_ROBUST_INCONSISTENT</name></decl>,

<decl><name>PTW32_ROBUST_NOTRECOVERABLE</name></decl>

}</block>;</enum>

<typedef>typedef <type><name><name>enum</name> <name>ptw32_robust_state_t_</name></name></type> <name>ptw32_robust_state_t</name>;</typedef>

<struct>struct <name>ptw32_robust_node_t_</name>

<block>{

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_robust_state_t</name></type> <name>stateInconsistent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_robust_node_t</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pthread_mutexattr_t_</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>pshared</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>robustness</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SPIN_INVALID</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SPIN_UNLOCKED</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SPIN_LOCKED</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SPIN_USE_MUTEX</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<struct>struct <name>pthread_spinlock_t_</name>

<block>{

<decl_stmt><decl><type><name>long</name></type> <name>interlock</name></decl>;</decl_stmt> 

<union>union

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>cpus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt> 

}</block> <decl><name>u</name></decl>;</union>

}</block>;</struct>

<struct>struct <name>ptw32_mcs_node_t_</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ptw32_mcs_node_t_</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ptw32_mcs_node_t_</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HANDLE</name></type> <name>readyFlag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HANDLE</name></type> <name>nextFlag</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>pthread_barrier_t_</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nCurrentBarrierHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nInitialBarrierHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pshared</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sem_t</name></type> <name>semBarrierBreeched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_mcs_lock_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>proxynode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pthread_barrierattr_t_</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>pshared</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pthread_key_t_</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>key</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<name>PTW32_CDECL</name> <modifier>*</modifier><name>destructor</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ptw32_mcs_lock_t</name></type> <name>keyLock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ThreadParms</name></name></type> <name>ThreadParms</name>;</typedef>

<struct>struct <name>ThreadParms</name>

<block>{

<decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>PTW32_CDECL</name> <modifier>*</modifier><name>start</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pthread_cond_t_</name>

<block>{

<decl_stmt><decl><type><name>long</name></type> <name>nWaitersBlocked</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>nWaitersGone</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>nWaitersToUnblock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sem_t</name></type> <name>semBlockQueue</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sem_t</name></type> <name>semBlockLock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtxUnblockLock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>prev</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pthread_condattr_t_</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>pshared</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_RWLOCK_MAGIC</name></cpp:macro> <cpp:value>0xfacade2</cpp:value></cpp:define>

<struct>struct <name>pthread_rwlock_t_</name>

<block>{

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtxExclusiveAccess</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtxSharedAccessCompleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cndSharedAccessCompleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nSharedAccessCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nExclusiveAccessCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nCompletedSharedAccessCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nMagic</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pthread_rwlockattr_t_</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>pshared</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ThreadKeyAssoc</name></name></type> <name>ThreadKeyAssoc</name>;</typedef>

<struct>struct <name>ThreadKeyAssoc</name>

<block>{

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type><name>nextKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type><name>nextThread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type><name>prevKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type><name>prevThread</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE_SUCCESS</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE_INFORMATION</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE_WARNING</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE_ERROR</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_SOFTWARE_EXCEPTION</name><parameter_list>( <parameter><type><name>_severity</name></type></parameter>, <parameter><type><name>_facility</name></type></parameter>, <parameter><type><name>_exception</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (DWORD) ( ( (_severity) &lt;&lt; 30 ) | ( 1 &lt;&lt; 29 ) | ( 0 &lt;&lt; 28 ) | ( (_facility) &lt;&lt; 16 ) | ( (_exception) &lt;&lt; 0 ) ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXCEPTION_PTW32_SERVICES</name></cpp:macro> <cpp:value>MAKE_SOFTWARE_EXCEPTION( SE_ERROR, PTW32_SERVICES_FACILITY, PTW32_SERVICES_ERROR )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SERVICES_FACILITY</name></cpp:macro> <cpp:value>0xBAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_SERVICES_ERROR</name></cpp:macro> <cpp:value>0xDEED</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_EPS_EXIT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_EPS_CANCEL</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(b):(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(b):(a))</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>DWORD</name></type> (<modifier>*</modifier><name>ptw32_register_cancelation</name>) <parameter_list>(<parameter><decl><type><name>PAPCFUNC</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_THREAD_REUSE_EMPTY</name></cpp:macro> <cpp:value>((ptw32_thread_t *)(size_t) 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ptw32_processInitialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>ptw32_threadReuseTop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>ptw32_threadReuseBottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_key_t</name></type> <name>ptw32_selfThreadKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_key_t</name></type> <name>ptw32_cleanupKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_cond_t</name></type> <name>ptw32_cond_list_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_cond_t</name></type> <name>ptw32_cond_list_tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ptw32_mutex_default_kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>__int64</name></type> <name>ptw32_threadSeqNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ptw32_concurrency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ptw32_features</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_mcs_lock_t</name></type> <name>ptw32_thread_reuse_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_mcs_lock_t</name></type> <name>ptw32_mutex_test_init_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_mcs_lock_t</name></type> <name>ptw32_cond_list_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_mcs_lock_t</name></type> <name>ptw32_cond_test_init_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_mcs_lock_t</name></type> <name>ptw32_rwlock_test_init_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ptw32_mcs_lock_t</name></type> <name>ptw32_spinlock_test_init_lock</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>pthread_count</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>int</name></type> <name>ptw32_is_attr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_cond_check_need_init</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_mutex_check_need_init</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_rwlock_check_need_init</name> <parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type> <name>rwlock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_robust_mutex_inherit</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_robust_mutex_add</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>pthread_t</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_robust_mutex_remove</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>ptw32_thread_t</name><modifier>*</modifier></type> <name>otp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DWORD</name></type>

<name>ptw32_RegisterCancelation</name> <parameter_list>(<parameter><decl><type><name>PAPCFUNC</name></type> <name>callback</name></decl></parameter>,

<parameter><decl><type><name>HANDLE</name></type> <name>threadH</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>callback_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_processInitialize</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_processTerminate</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_threadDestroy</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_pop_cleanup_all</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>execute</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>pthread_t</name></type> <name>ptw32_new</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>pthread_t</name></type> <name>ptw32_threadReusePop</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_threadReusePush</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_getprocessors</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_setthreadpriority</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>policy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_rwlock_cancelwrwait</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MSVCRT__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DMC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<function_decl><type><name>unsigned</name> <name>__stdcall</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ptw32_threadStart</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vthreadParms</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_callUserDestroyRoutines</name> <parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_tkAssocCreate</name> <parameter_list>(<parameter><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_tkAssocDestroy</name> <parameter_list>(<parameter><decl><type><name>ThreadKeyAssoc</name> <modifier>*</modifier></type> <name>assoc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_semwait</name> <parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DWORD</name></type> <name>ptw32_relmillisecs</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type> <name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_mcs_lock_acquire</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_lock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ptw32_mcs_lock_try_acquire</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_lock_t</name> <modifier>*</modifier></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_mcs_lock_release</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_mcs_node_transfer</name> <parameter_list>(<parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>new_node</name></decl></parameter>, <parameter><decl><type><name>ptw32_mcs_local_node_t</name> <modifier>*</modifier></type> <name>old_node</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_FTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ptw32_timespec_to_filetime</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type> <name>ft</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptw32_filetime_to_timespec</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type> <name>ft</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_CALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calloc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ptw32_calloc(n, s)</cpp:value></cpp:define>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ptw32_calloc</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4290</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>ptw32_throw</name> <parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>exception</name></decl></parameter>)</parameter_list>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLEANUP_CXX</name></expr></argument>)</argument_list></call></expr></cpp:if>

throw<parameter_list>(<parameter><decl><type><name>ptw32_exception_cancel</name></type></decl></parameter>,<parameter><decl><type><name>ptw32_exception_exit</name></type></decl></parameter>)</parameter_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>_CRTIMP</name> <name>unsigned</name> <name>long</name> <name>__cdecl</name></type> <name>_beginthread</name> <parameter_list>(<parameter><function_decl><type><name>void</name></type> (<name>__cdecl</name> <modifier>*</modifier>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>_CRTIMP</name> <name>void</name> <name>__cdecl</name></type> <name>_endthread</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>_CRTIMP</name> <name>unsigned</name> <name>long</name> <name>__cdecl</name></type> <name>_beginthreadex</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>,

<parameter><function_decl><type><name>unsigned</name></type> (<name>__stdcall</name> <modifier>*</modifier>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>_CRTIMP</name> <name>void</name> <name>__cdecl</name></type> <name>_endthreadex</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_64</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>comparand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (value) _result; __asm__ __volatile__ ( "lock\n\t" "cmpxchgq %2,(%1)" :"=a" (_result) :"r" (location), "r" (value), "a" (comparand) :"memory", "cc"); _result; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_64</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (value) _result; __asm__ __volatile__ ( "xchgq %0,(%1)" :"=r" (_result) :"r" (location), "0" (value) :"memory", "cc"); _result; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_ADD_64</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (value) _result; __asm__ __volatile__ ( "lock\n\t" "xaddq %0,(%1)" :"=r" (_result) :"r" (location), "0" (value) :"memory", "cc"); _result; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_INCREMENT_64</name><parameter_list>(<parameter><type><name>location</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ PTW32_INTERLOCKED_LONG _temp = 1; __asm__ __volatile__ ( "lock\n\t" "xaddq %0,(%1)" :"+r" (_temp) :"r" (location) :"memory", "cc"); ++_temp; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_DECREMENT_64</name><parameter_list>(<parameter><type><name>location</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ PTW32_INTERLOCKED_LONG _temp = -1; __asm__ __volatile__ ( "lock\n\t" "xaddq %2,(%1)" :"+r" (_temp) :"r" (location) :"memory", "cc"); --_temp; })</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>comparand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (value) _result; __asm__ __volatile__ ( "lock\n\t" "cmpxchgl %2,(%1)" :"=a" (_result) :"r" (location), "r" (value), "a" (comparand) :"memory", "cc"); _result; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (value) _result; __asm__ __volatile__ ( "xchgl %0,(%1)" :"=r" (_result) :"r" (location), "0" (value) :"memory", "cc"); _result; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_ADD_LONG</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof (value) _result; __asm__ __volatile__ ( "lock\n\t" "xaddl %0,(%1)" :"=r" (_result) :"r" (location), "0" (value) :"memory", "cc"); _result; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_INCREMENT_LONG</name><parameter_list>(<parameter><type><name>location</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ PTW32_INTERLOCKED_LONG _temp = 1; __asm__ __volatile__ ( "lock\n\t" "xaddl %0,(%1)" :"+r" (_temp) :"r" (location) :"memory", "cc"); ++_temp; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_DECREMENT_LONG</name><parameter_list>(<parameter><type><name>location</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ PTW32_INTERLOCKED_LONG _temp = -1; __asm__ __volatile__ ( "lock\n\t" "xaddl %0,(%1)" :"+r" (_temp) :"r" (location) :"memory", "cc"); --_temp; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>comparand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE((PTW32_INTERLOCKED_SIZEPTR)location, (PTW32_INTERLOCKED_SIZE)value, (PTW32_INTERLOCKED_SIZE)comparand)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_PTR</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTW32_INTERLOCKED_EXCHANGE_SIZE((PTW32_INTERLOCKED_SIZEPTR)location, (PTW32_INTERLOCKED_SIZE)value)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_64</name></cpp:macro> <cpp:value>InterlockedCompareExchange64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_64</name></cpp:macro> <cpp:value>InterlockedExchange64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_ADD_64</name></cpp:macro> <cpp:value>InterlockedExchangeAdd64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_INCREMENT_64</name></cpp:macro> <cpp:value>InterlockedIncrement64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_DECREMENT_64</name></cpp:macro> <cpp:value>InterlockedDecrement64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>comparand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((LONG)InterlockedCompareExchange((PVOID *)(location), (PVOID)(value), (PVOID)(comparand)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</name></cpp:macro> <cpp:value>InterlockedCompareExchange</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name></cpp:macro> <cpp:value>InterlockedExchange</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_ADD_LONG</name></cpp:macro> <cpp:value>InterlockedExchangeAdd</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_INCREMENT_LONG</name></cpp:macro> <cpp:value>InterlockedIncrement</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_DECREMENT_LONG</name></cpp:macro> <cpp:value>InterlockedDecrement</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name></cpp:macro> <cpp:value>InterlockedCompareExchange</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_PTR</name><parameter_list>(<parameter><type><name>location</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((PVOID)InterlockedExchange((LPLONG)(location), (LONG)(value)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR</name></cpp:macro> <cpp:value>InterlockedCompareExchangePointer</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_PTR</name></cpp:macro> <cpp:value>InterlockedExchangePointer</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_COMPARE_EXCHANGE_64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_EXCHANGE_64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_EXCHANGE_ADD_64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_INCREMENT_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_INCREMENT_64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_DECREMENT_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_DECREMENT_64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_EXCHANGE_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_EXCHANGE_ADD_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_INCREMENT_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_INCREMENT_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTW32_INTERLOCKED_DECREMENT_SIZE</name></cpp:macro> <cpp:value>PTW32_INTERLOCKED_DECREMENT_LONG</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_CREATETHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_beginthreadex</name><parameter_list>(<parameter><type><name>security</name></type></parameter>, <parameter><type><name>stack_size</name></type></parameter>, <parameter><type><name>start_proc</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>pid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CreateThread(security, stack_size, (LPTHREAD_START_ROUTINE) start_proc, arg, flags, pid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_endthreadex</name></cpp:macro> <cpp:value>ExitThread</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
