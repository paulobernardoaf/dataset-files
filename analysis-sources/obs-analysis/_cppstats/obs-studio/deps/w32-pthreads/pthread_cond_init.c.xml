<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_cond_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_cond_init</name> <parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pthread_condattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>attr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>pshared</name></name> <operator>==</operator> <name>PTHREAD_PROCESS_SHARED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>

<goto>goto <name>DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cv</name> <operator>=</operator> <operator>(</operator><name>pthread_cond_t</name><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>cv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nWaitersBlocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nWaitersToUnblock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nWaitersGone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<goto>goto <name>FAIL0</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockQueue</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<goto>goto <name>FAIL1</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>pthread_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>mtxUnblockLock</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>FAIL2</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>DONE</name>;</goto>

<label><name>FAIL2</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockQueue</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>FAIL1</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cv</name><operator>-&gt;</operator><name>semBlockLock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>FAIL0</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>free</name> <argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>DONE</name>:</label>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>result</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptw32_cond_list_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ptw32_cond_list_tail</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_cond_list_tail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ptw32_cond_list_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptw32_cond_list_tail</name> <operator>=</operator> <name>cv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_cond_list_head</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptw32_cond_list_head</name> <operator>=</operator> <name>cv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cond</name> <operator>=</operator> <name>cv</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function> 

</unit>
