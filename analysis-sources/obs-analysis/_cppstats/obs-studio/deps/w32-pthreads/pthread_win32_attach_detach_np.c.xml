<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_win32_attach_detach_np.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>ptw32_h_quserex</name></decl>;</decl_stmt>

<function><type><name>BOOL</name></type>

<name>pthread_win32_process_attach_np</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>QuserExDLLPathBuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ptw32_processInitialize</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>pthread_count</name><operator>++</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>ptw32_features</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ptw32_features</name> <operator>=</operator> <name>PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>GetSystemDirectory</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>,

<argument><expr><literal type="string">"\\QUSEREX.DLL"</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptw32_h_quserex</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><call><name>GetSystemDirectory</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<literal type="number">0</literal> <operator>==</operator> <call><name>_tcsncat_s</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\QUSEREX.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptw32_h_quserex</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>QuserExDLLPathBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ptw32_h_quserex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptw32_register_cancelation</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PAPCFUNC</name></expr></argument>, <argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_UNICODE_CONSTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"QueueUserAPCEx"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <literal type="string">"QueueUserAPCEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ptw32_register_cancelation</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptw32_register_cancelation</name> <operator>=</operator> <name>ptw32_RegisterCancelation</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_h_quserex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>FreeLibrary</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptw32_h_quserex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<function_decl><type><name>BOOL</name></type> (<modifier>*</modifier><name>queue_user_apc_ex_init</name>) <parameter_list>(<parameter><decl><type><name>VOID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>queue_user_apc_ex_init</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VOID</name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_UNICODE_CONSTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"QueueUserAPCEx_Init"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <literal type="string">"QueueUserAPCEx_Init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>queue_user_apc_ex_init</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>queue_user_apc_ex_init</name> <argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptw32_register_cancelation</name> <operator>=</operator> <name>ptw32_RegisterCancelation</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>FreeLibrary</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptw32_h_quserex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_h_quserex</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptw32_features</name> <operator>|=</operator> <name>PTW32_ALERTABLE_ASYNC_CANCEL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type>

<name>pthread_win32_process_detach_np</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptw32_processInitialized</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>detachState</name></name> <operator>==</operator> <name>PTHREAD_CREATE_DETACHED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_threadDestroy</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TlsSetValue</name> <argument_list>(<argument><expr><name><name>ptw32_selfThreadKey</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_processTerminate</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptw32_h_quserex</name></expr>)</condition>

<block>{<block_content>

<function_decl><type><name>BOOL</name></type> (<modifier>*</modifier><name>queue_user_apc_ex_fini</name>) <parameter_list>(<parameter><decl><type><name>VOID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>queue_user_apc_ex_fini</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VOID</name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_UNICODE_CONSTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"QueueUserAPCEx_Fini"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <literal type="string">"QueueUserAPCEx_Fini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>queue_user_apc_ex_fini</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>queue_user_apc_ex_fini</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>FreeLibrary</name> <argument_list>(<argument><expr><name>ptw32_h_quserex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type>

<name>pthread_win32_thread_attach_np</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type>

<name>pthread_win32_thread_detach_np</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptw32_processInitialized</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name> <init>= <expr><operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name> <argument_list>(<argument><expr><name>ptw32_selfThreadKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_callUserDestroyRoutines</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateLast</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>robustMxList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>robustMxList</name><operator>-&gt;</operator><name>mx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_robust_mutex_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>PTW32_INTERLOCKED_EXCHANGE_LONG</name><argument_list>(

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONGPTR</name><operator>)</operator><operator>&amp;</operator><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>stateInconsistent</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>PTW32_INTERLOCKED_LONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>detachState</name></name> <operator>==</operator> <name>PTHREAD_CREATE_DETACHED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ptw32_threadDestroy</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>ptHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TlsSetValue</name> <argument_list>(<argument><expr><name><name>ptw32_selfThreadKey</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type>

<name>pthread_win32_test_features_np</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>feature_mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>ptw32_features</name> <operator>&amp;</operator> <name>feature_mask</name><operator>)</operator> <operator>==</operator> <name>feature_mask</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
