<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_mutex_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_mutex_init</name> <parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>pshared</name></name> <operator>==</operator> <name>PTHREAD_PROCESS_SHARED</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_POSIX_THREAD_PROCESS_SHARED</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> ERROR [__FILE__, line __LINE__]: Process shared mutexes are not supported yet.</cpp:error>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>ENOSYS</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>pthread_mutex_t</name><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>lock_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>recursive_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>PTHREAD_MUTEX_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>kind</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>robustness</name></name> <operator>==</operator> <name>PTHREAD_MUTEX_ROBUST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <operator>-</operator><name><name>mx</name><operator>-&gt;</operator><name>kind</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name></name> <operator>=</operator> <operator>(</operator><name>ptw32_robust_node_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptw32_robust_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>stateInconsistent</name></name> <operator>=</operator> <name>PTW32_ROBUST_CONSISTENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>mx</name></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>robustNode</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>ownerThread</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>CreateEvent</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PTW32_FALSE</name></expr></argument>, 

<argument><expr><name>PTW32_FALSE</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>mx</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mutex</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
