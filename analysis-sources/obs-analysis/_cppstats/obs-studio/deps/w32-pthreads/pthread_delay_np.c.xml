<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\pthread_delay_np.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>pthread_delay_np</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>interval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>wait_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>secs_in_millisecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>millisecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptw32_thread_t</name> <modifier>*</modifier></type> <name>sp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name><name>interval</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_testcancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sleep</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_testcancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>secs_in_millisecs</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name><name>interval</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000L</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>millisecs</name> <operator>=</operator> <operator>(</operator><name><name>interval</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>+</operator> <literal type="number">999999L</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>disable_message</name> <name>(</name><name>124</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>wait_time</name> <operator>=</operator> <name>secs_in_millisecs</name> <operator>+</operator> <name>millisecs</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>enable_message</name> <name>(</name><name>124</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>self</name> <operator>=</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>ptw32_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>==</operator> <name>PTHREAD_CANCEL_ENABLE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>WAIT_OBJECT_0</name> <operator>==</operator>

<operator>(</operator><name>status</name> <operator>=</operator> <call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelEvent</name></name></expr></argument>, <argument><expr><name>wait_time</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ptw32_mcs_local_node_t</name></type> <name>stateLock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_acquire</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>stateLock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>PThreadStateCanceling</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PThreadStateCanceling</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>cancelState</name></name> <operator>=</operator> <name>PTHREAD_CANCEL_DISABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ptw32_throw</name> <argument_list>(<argument><expr><name>PTW32_EPS_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ptw32_mcs_lock_release</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ESRCH</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Sleep</name> <argument_list>(<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
