<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\w32-pthreads\dll.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"implement.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>disable</name> <name>:</name> <name>4100</name> <name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>BOOL</name> <name>WINAPI</name></type>

<name>DllMain</name> <parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hinstDll</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>fdwReason</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpvReserved</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name> <init>= <expr><name>PTW32_TRUE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>fdwReason</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DLL_PROCESS_ATTACH</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_win32_process_attach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DLL_THREAD_ATTACH</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_win32_thread_attach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DLL_THREAD_DETACH</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_win32_thread_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DLL_PROCESS_DETACH</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_win32_thread_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pthread_win32_process_detach_np</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>

</block_content>}</block></function></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
