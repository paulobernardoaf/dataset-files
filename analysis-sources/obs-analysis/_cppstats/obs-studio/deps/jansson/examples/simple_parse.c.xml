<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\jansson\examples\simple_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>print_json</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_aux</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_indent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_plural</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_object</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_array</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_string</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_integer</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_real</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_true</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_false</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>print_json_null</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>print_json</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>print_json_aux</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_aux</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>JSON_OBJECT</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_object</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_ARRAY</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_array</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_string</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_INTEGER</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_integer</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_REAL</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_real</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_TRUE</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_true</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_FALSE</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_false</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JSON_NULL</name></expr>:</case>

<expr_stmt><expr><call><name>print_json_null</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unrecognized JSON type %d\n"</literal></expr></argument>, <argument><expr><call><name>json_typeof</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_indent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_plural</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_object</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>json_object_size</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON Object of %ld pair%s:\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>json_plural</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>json_object_foreach</name><argument_list>(<argument>element</argument>, <argument>key</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON Key: \"%s\"\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_json_aux</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_array</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>json_array_size</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON Array of %ld element%s:\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>json_plural</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>print_json_aux</name><argument_list>(<argument><expr><call><name>json_array_get</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_string</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON String: \"%s\"\n"</literal></expr></argument>, <argument><expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_integer</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON Integer: \"%"</literal> <name>JSON_INTEGER_FORMAT</name> <literal type="string">"\"\n"</literal></expr></argument>, <argument><expr><call><name>json_integer_value</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_real</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON Real: %f\n"</literal></expr></argument>, <argument><expr><call><name>json_real_value</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_true</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>element</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON True\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_false</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>element</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON False\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_json_null</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>element</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_json_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON Null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>json_t</name> <modifier>*</modifier></type><name>load_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>root</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"json error on line %d: %s\n"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>json_t</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>read_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_chars</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Type some JSON &gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>max_chars</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHARS</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_CHARS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>read_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAX_CHARS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>load_json</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_json</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
