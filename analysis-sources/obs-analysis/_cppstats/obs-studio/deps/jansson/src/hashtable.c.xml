<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\jansson\src\hashtable.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson_private_config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDINT_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson_config.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_private.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtable.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INITIAL_HASHTABLE_ORDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_HASHTABLE_ORDER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>hashtable_list</name></name></type> <name>list_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>hashtable_pair</name></name></type> <name>pair_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>hashtable_bucket</name></name></type> <name>bucket_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>uint32_t</name></type> <name>hashtable_seed</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lookup3.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_to_pair</name><parameter_list>(<parameter><type><name>list_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of(list_, pair_t, list)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_list_to_pair</name><parameter_list>(<parameter><type><name>list_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of(list_, pair_t, ordered_list)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_str</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)hashlittle((key), strlen(key), hashtable_seed))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>void</name></type> <name>list_init</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>void</name></type> <name>list_insert</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>void</name></type> <name>list_remove</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name> <name>int</name></type> <name>bucket_is_empty</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name> <operator>&amp;&amp;</operator> <name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_to_bucket</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,

<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>bucket_is_empty</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>list_insert</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pair_t</name> <modifier>*</modifier></type><name>hashtable_find_pair</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>bucket_is_empty</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>list_to_pair</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>hash</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pair</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>list</name> <operator>==</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hashtable_do_del</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <call><name>hashmask</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>hashtable_find_pair</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pair</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name><name>bucket</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name><name>bucket</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hashtable_do_clear</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>list</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>list</name> <operator>!=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name>next</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>list_to_pair</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hashtable_do_rehash</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>new_size</name></decl>, <decl><type ref="prev"/><name>new_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashtable_bucket</name></name> <modifier>*</modifier></type><name>new_buckets</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_order</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <call><name>hashsize</name><argument_list>(<argument><expr><name>new_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_buckets</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bucket_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_buckets</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>new_buckets</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>new_order</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>hashsize</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator>

<operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>list</name> <operator>!=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>list_to_pair</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>hash</name></name> <operator>%</operator> <name>new_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insert_to_bucket</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashtable_init</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>INITIAL_HASHTABLE_ORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><call><name>hashsize</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bucket_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>hashsize</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator>

<operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hashtable_close</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hashtable_do_clear</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jsonp_free</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashtable_set</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hashtable</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <call><name>hashsize</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call><name>hashtable_do_rehash</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_str</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <call><name>hashmask</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>hashtable_find_pair</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pair</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>pair_t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>jsonp_malloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>pair_t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pair</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insert_to_bucket</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hashtable_get</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_str</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>hash</name> <operator>&amp;</operator> <call><name>hashmask</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>hashtable_find_pair</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pair</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hashtable_del</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name> <init>= <expr><call><name>hash_str</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>hashtable_do_del</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hashtable_clear</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashtable_do_clear</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>hashsize</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator>

<operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hashtable_iter_next</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>ordered_list</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_at</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_str</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>hash</name> <operator>&amp;</operator> <call><name>hashmask</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>hashtable_find_pair</name><argument_list>(<argument><expr><name>hashtable</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pair</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>ordered_list</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_next</name><parameter_list>(<parameter><decl><type><name>hashtable_t</name> <modifier>*</modifier></type><name>hashtable</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator><name>list_t</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>hashtable</name><operator>-&gt;</operator><name>ordered_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><call><name>ordered_list_to_pair</name><argument_list>(<argument><expr><operator>(</operator><name>list_t</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>pair</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hashtable_iter_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><call><name>ordered_list_to_pair</name><argument_list>(<argument><expr><operator>(</operator><name>list_t</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hashtable_iter_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><call><name>ordered_list_to_pair</name><argument_list>(<argument><expr><operator>(</operator><name>list_t</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
