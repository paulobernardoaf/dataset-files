<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\jansson\src\jansson.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jansson_config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JANSSON_MAJOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JANSSON_MINOR_VERSION</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JANSSON_MICRO_VERSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JANSSON_VERSION</name></cpp:macro> <cpp:value>"2.9"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JANSSON_VERSION_HEX</name></cpp:macro> <cpp:value>((JANSSON_MAJOR_VERSION &lt;&lt; 16) | (JANSSON_MINOR_VERSION &lt;&lt; 8) | (JANSSON_MICRO_VERSION &lt;&lt; 0))</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>JSON_OBJECT</name></decl>,

<decl><name>JSON_ARRAY</name></decl>,

<decl><name>JSON_STRING</name></decl>,

<decl><name>JSON_INTEGER</name></decl>,

<decl><name>JSON_REAL</name></decl>,

<decl><name>JSON_TRUE</name></decl>,

<decl><name>JSON_FALSE</name></decl>,

<decl><name>JSON_NULL</name></decl>

}</block></enum></type> <name>json_type</name>;</typedef>

<typedef>typedef <type><struct>struct <name>json_t</name> <block>{

<decl_stmt><decl><type><name>json_type</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>refcount</name></decl>;</decl_stmt>

}</block></struct></type> <name>json_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JANSSON_USING_CMAKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JSON_INTEGER_IS_LONG_LONG</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_INTEGER_FORMAT</name></cpp:macro> <cpp:value>"I64d"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_INTEGER_FORMAT</name></cpp:macro> <cpp:value>"lld"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>json_int_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_INTEGER_FORMAT</name></cpp:macro> <cpp:value>"ld"</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name></type> <name>json_int_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_typeof</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json)-&gt;type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_object</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_OBJECT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_array</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_ARRAY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_string</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_STRING)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_integer</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_INTEGER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_real</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_REAL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_number</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(json_is_integer(json) || json_is_real(json))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_true</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_TRUE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_false</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_FALSE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_boolean_value</name></cpp:macro> <cpp:value>json_is_true</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_boolean</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(json_is_true(json) || json_is_false(json))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_is_null</name><parameter_list>(<parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((json) &amp;&amp; json_typeof(json) == JSON_NULL)</cpp:value></cpp:define>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_object</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_stringn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_string_nocheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_stringn_nocheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_integer</name><parameter_list>(<parameter><decl><type><name>json_int_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_real</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_true</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_false</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_boolean</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val) ? json_true() : json_false())</cpp:value></cpp:define>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>json_t</name> <modifier>*</modifier></type><name>json_incref</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>json</name> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>json</name><operator>-&gt;</operator><name>refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>json</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>json_delete</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>void</name></type> <name>json_decref</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>json</name> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>json</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>json_delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>void</name></type> <name>json_decrefp</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><operator>*</operator><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>json</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_auto_t</name></cpp:macro> <cpp:value>json_t __attribute__((cleanup(json_decrefp)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ERROR_TEXT_LENGTH</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ERROR_SOURCE_LENGTH</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>source</name><index>[<expr><name>JSON_ERROR_SOURCE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><name>JSON_ERROR_TEXT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>json_error_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>json_object_seed</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>json_object_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_object_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_set_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_set_new_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_del</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_clear</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_update</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_update_existing</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_update_missing</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>json_object_iter</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>json_object_iter_at</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>json_object_key_to_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>json_object_iter_next</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_object_iter_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_object_iter_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_object_iter_set_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_object_foreach</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(key = json_object_iter_key(json_object_iter(object)); key &amp;&amp; (value = json_object_iter_value(json_object_key_to_iter(key))); key = json_object_iter_key(json_object_iter_next(object, json_object_key_to_iter(key))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_object_foreach_safe</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(key = json_object_iter_key(json_object_iter(object)), n = json_object_iter_next(object, json_object_key_to_iter(key)); key &amp;&amp; (value = json_object_iter_value(json_object_key_to_iter(key))); key = json_object_iter_key(n), n = json_object_iter_next(object, json_object_key_to_iter(key)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_array_foreach</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(index = 0; index &lt; json_array_size(array) &amp;&amp; (value = json_array_get(array, index)); index++)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>int</name></type> <name>json_object_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>int</name></type> <name>json_object_set_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>json_object_set_new_nocheck</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>int</name></type> <name>json_object_iter_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>json_object_iter_set_new</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>size_t</name></type> <name>json_array_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_array_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_array_set_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_array_append_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_array_insert_new</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_array_remove</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_array_clear</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_array_extend</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>int</name></type> <name>json_array_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>json_array_set_new</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>int</name></type> <name>json_array_append</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JSON_INLINE</name>

<name>int</name></type> <name>json_array_insert</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>json_array_insert_new</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><call><name>json_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_string_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>json_string_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_int_t</name></type> <name>json_integer_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> <name>json_real_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>real</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> <name>json_number_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_string_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_string_setn</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_string_set_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_string_setn_nocheck</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_integer_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>, <parameter><decl><type><name>json_int_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_real_set</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>real</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_pack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_pack_ex</name><parameter_list>(<parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_vpack_ex</name><parameter_list>(<parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_VALIDATE_ONLY</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_STRICT</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>json_unpack</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_unpack_ex</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_vunpack_ex</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_equal</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_copy</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_deep_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_REJECT_DUPLICATES</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_DISABLE_EOF_CHECK</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_DECODE_ANY</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_DECODE_INT_AS_REAL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ALLOW_NUL</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>json_load_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_loads</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_loadb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_loadf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_t</name> <modifier>*</modifier></type><name>json_load_callback</name><parameter_list>(<parameter><decl><type><name>json_load_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>json_error_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_MAX_INDENT</name></cpp:macro> <cpp:value>0x1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_INDENT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &amp; JSON_MAX_INDENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_COMPACT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ENSURE_ASCII</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_SORT_KEYS</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_PRESERVE_ORDER</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ENCODE_ANY</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ESCAPE_SLASH</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_REAL_PRECISION</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n) &amp; 0x1F) &lt;&lt; 11)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>json_dump_callback_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>json_dumps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_dumpf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_dump_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>json_dump_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>json_dump_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>json_malloc_t</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>json_free_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>json_set_alloc_funcs</name><parameter_list>(<parameter><decl><type><name>json_malloc_t</name></type> <name>malloc_fn</name></decl></parameter>, <parameter><decl><type><name>json_free_t</name></type> <name>free_fn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>json_get_alloc_funcs</name><parameter_list>(<parameter><decl><type><name>json_malloc_t</name> <modifier>*</modifier></type><name>malloc_fn</name></decl></parameter>, <parameter><decl><type><name>json_free_t</name> <modifier>*</modifier></type><name>free_fn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
