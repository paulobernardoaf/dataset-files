<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\jansson\test\suites\api\test_copy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_copy_simple</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_copy</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying NULL doesn't return NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_true</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying true failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_false</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying false failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying null failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to copy a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying a string doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying a string produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>copy</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"invalid refcounts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">543</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to copy an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an integer doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an integer produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>copy</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"invalid refcounts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_real</name><argument_list>(<argument><expr><literal type="number">123e9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create a real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to copy a real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying a real doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying a real produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>copy</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"invalid refcounts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_deep_copy_simple</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_deep_copy</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying NULL doesn't return NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_true</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying true failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_false</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying false failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying null failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_string</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to deep copy a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying a string doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying a string produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>copy</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"invalid refcounts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_integer</name><argument_list>(<argument><expr><literal type="number">543</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to deep copy an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an integer doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an integer produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>copy</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"invalid refcounts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>json_real</name><argument_list>(<argument><expr><literal type="number">123e9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to create a real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to deep copy a real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying a real doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying a real produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>copy</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"invalid refcounts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_copy_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_array_text</name> <init>= <expr><literal type="string">"[1, \"foo\", 3.141592, {\"foo\": \"bar\"}]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>json_array_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to parse an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to copy an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an array doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an array produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>json_array_get</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>json_array_get</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an array modifies its elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_deep_copy_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_array_text</name> <init>= <expr><literal type="string">"[1, \"foo\", 3.141592, {\"foo\": \"bar\"}]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>array</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>json_array_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to parse an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to deep copy an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an array doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an array produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>json_array_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>json_array_get</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>json_array_get</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an array doesn't copy its elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_copy_object</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_object_text</name> <init>=

<expr><literal type="string">"{\"foo\": \"bar\", \"a\": 1, \"b\": 3.141592, \"c\": [1,2,3,4]}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>json_object_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to parse an object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_copy</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to copy an object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>object</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an object doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an object produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>iter</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>json_object_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_object_iter_value</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value1</name> <operator>!=</operator> <name>value2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an object modifies its items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"copying an object doesn't preserve key order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter_next</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_deep_copy_object</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_object_text</name> <init>=

<expr><literal type="string">"{\"foo\": \"bar\", \"a\": 1, \"b\": 3.141592, \"c\": [1,2,3,4]}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>json_object_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to parse an object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>json_deep_copy</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to deep copy an object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>copy</name> <operator>==</operator> <name>object</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an object doesn't copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>json_equal</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an object produces an inequal copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>iter</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>value1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>json_object_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value1</name> <operator>=</operator> <call><name>json_object_iter_value</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>json_object_get</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value1</name> <operator>==</operator> <name>value2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an object doesn't copy its items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"deep copying an object doesn't preserve key order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>json_object_iter_next</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_tests</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_copy_simple</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_deep_copy_simple</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_copy_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_deep_copy_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_copy_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_deep_copy_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
