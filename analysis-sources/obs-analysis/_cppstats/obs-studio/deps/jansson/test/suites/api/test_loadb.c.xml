<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\jansson\test\suites\api\test_loadb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_tests</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>str</name><index>[]</index></name> <init>= <expr><literal type="string">"[\"A\", {\"B\": \"C\"}, 1, 2, 3]garbage"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"garbage"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loadb</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadb failed on a valid JSON buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loadb</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadb should have failed on an incomplete buffer, but it didn't"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>error</name><operator>.</operator><name>line</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadb returned an invalid line number on fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"']' expected near end of file"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadb returned an invalid error message for an unclosed top-level array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
