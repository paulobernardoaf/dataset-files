<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\jansson\test\suites\api\test_load.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_not_found</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_load_file</name><argument_list>(<argument><expr><literal type="string">"/path/to/nonexistent/file.json"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_file returned non-NULL for a nonexistent file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>error</name><operator>.</operator><name>line</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_file returned an invalid line number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_file returne an invalid error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"unable to open /path/to/nonexistent/file.json"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_file returned an invalid error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>very_long_file_name</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_load_file</name><argument_list>(<argument><expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_file returned non-NULL for a nonexistent file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>error</name><operator>.</operator><name>line</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load_file returned an invalid line number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="string">"...aaa"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"error source was set incorrectly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reject_duplicates</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"{\"foo\": 1, \"foo\": 2}"</literal></expr></argument>, <argument><expr><name>JSON_REJECT_DUPLICATES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loads did not detect a duplicate key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_error</name><argument_list>(<argument><expr><literal type="string">"duplicate object key near '\"foo\"'"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>disable_eof_check</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><literal type="string">"{\"foo\": 1} garbage"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_loads</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loads did not detect garbage after JSON text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_error</name><argument_list>(<argument><expr><literal type="string">"end of file expected near 'garbage'"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>JSON_DISABLE_EOF_CHECK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loads failed with JSON_DISABLE_EOF_CHECK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_any</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"\"foo\""</literal></expr></argument>, <argument><expr><name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decoded any failed - string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"42"</literal></expr></argument>, <argument><expr><name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decoded any failed - integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_true</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decoded any failed - boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_null</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decoded any failed - null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_int_as_real</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JSON_INTEGER_IS_LONG_LONG</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>imprecise</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_int_t</name></type> <name>expected</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name></type> <name><name>big</name><index>[<expr><literal type="number">311</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"42"</literal></expr></argument>, <argument><expr><name>JSON_DECODE_INT_AS_REAL</name> <operator>|</operator> <name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>json_real_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">42.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decode int as real failed - int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JSON_INTEGER_IS_LONG_LONG</name></expr></cpp:if>

<expr_stmt><expr><name>imprecise</name> <operator>=</operator> <literal type="string">"9007199254740993"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">9007199254740992ll</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>imprecise</name></expr></argument>, <argument><expr><name>JSON_DECODE_INT_AS_REAL</name> <operator>|</operator> <name>JSON_DECODE_ANY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>expected</name> <operator>!=</operator> <operator>(</operator><name>json_int_t</name><operator>)</operator><call><name>json_real_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decode int as real failed - expected imprecision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>big</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>big</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">309</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>big</name><index>[<expr><literal type="number">310</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>big</name></expr></argument>, <argument><expr><name>JSON_DECODE_INT_AS_REAL</name> <operator>|</operator> <name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"real number overflow"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_load decode int as real failed - expected overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allow_nul</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><literal type="string">"\"nul byte \\u0000 in string\""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name> <init>= <expr><literal type="string">"nul byte \0 in string"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>JSON_ALLOW_NUL</name> <operator>|</operator> <name>JSON_DECODE_ANY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>json</name> <operator>||</operator> <operator>!</operator><call><name>json_is_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"unable to decode embedded NUL byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>json_string_length</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"decoder returned wrong string length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"decoder returned wrong string content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_wrong_args</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loads should return NULL if the first argument is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loadb</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadb should return NULL if the first argument is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loadf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadf should return NULL if the first argument is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_load_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loadf should return NULL if the first argument is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>position</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>flags</name> <init>= <expr><name>JSON_DISABLE_EOF_CHECK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"{\"foo\": \"bar\"}"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>error</name><operator>.</operator><name>position</name></name> <operator>!=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loads returned a wrong position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_loads</name><argument_list>(<argument><expr><literal type="string">"{\"foo\": \"bar\"} baz quux"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>error</name><operator>.</operator><name>position</name></name> <operator>!=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"json_loads returned a wrong position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_tests</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>file_not_found</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>very_long_file_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reject_duplicates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disable_eof_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_any</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_int_as_real</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>allow_nul</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_wrong_args</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>position</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
