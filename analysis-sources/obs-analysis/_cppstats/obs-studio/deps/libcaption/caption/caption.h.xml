<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libcaption\caption\caption.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eia608.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xds.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>signed</name> <name>long</name></type> <name>ssize_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>ssize_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LIBCAPTION_ERROR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LIBCAPTION_OK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LIBCAPTION_READY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>libcaption_stauts_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libcaption_stauts_t</name></type> <name>libcaption_status_update</name><parameter_list>(<parameter><decl><type><name>libcaption_stauts_t</name></type> <name>old_stat</name></decl></parameter>, <parameter><decl><type><name>libcaption_stauts_t</name></type> <name>new_stat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>LIBCAPTION_ERROR</name> <operator>==</operator> <name>old_stat</name> <operator>||</operator> <name>LIBCAPTION_ERROR</name> <operator>==</operator> <name>new_stat</name><operator>)</operator></expr> ?</condition><then> <expr><name>LIBCAPTION_ERROR</name></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>LIBCAPTION_READY</name> <operator>==</operator> <name>old_stat</name><operator>)</operator></expr> ?</condition><then> <expr><name>LIBCAPTION_READY</name></expr> </then><else>: <expr><name>new_stat</name></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_ROWS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_COLS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uln</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sty</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>utf8_char_t</name></type> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>caption_frame_cell_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>caption_frame_cell_t</name></type> <name><name>cell</name><index>[<expr><name>SCREEN_ROWS</name></expr>]</index><index>[<expr><name>SCREEN_COLS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>caption_frame_buffer_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uln</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sty</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rup</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>row</name></decl>, <name>col</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>caption_frame_state_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xds_t</name></type> <name>xds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>caption_frame_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>caption_frame_buffer_t</name></type> <name>front</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>caption_frame_buffer_t</name></type> <name>back</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>caption_frame_buffer_t</name><modifier>*</modifier></type> <name>write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libcaption_stauts_t</name></type> <name>status</name></decl>;</decl_stmt>

}</block></struct></type> <name>caption_frame_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>caption_frame_init</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>caption_frame_popon</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>back</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>caption_frame_painton</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>write</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>front</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name><name>_caption_frame_rollup</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>caption_frame_rollup</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>_caption_frame_rollup</name><index>[<expr><name><name>frame</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rup</name></name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>caption_frame_timestamp</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>caption_frame_write_char</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>caption_frame_read_char</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name><modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>underline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libcaption_stauts_t</name></type> <name>caption_frame_decode</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>caption_frame_from_text</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTION_FRAME_TEXT_BYTES</name></cpp:macro> <cpp:value>(4 * ((SCREEN_COLS + 2) * SCREEN_ROWS) + 1)</cpp:value></cpp:define>

<function_decl><type><name>size_t</name></type> <name>caption_frame_to_text</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTION_FRAME_DUMP_BUF_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<function_decl><type><name>size_t</name></type> <name>caption_frame_dump_buffer</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>caption_frame_dump</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
