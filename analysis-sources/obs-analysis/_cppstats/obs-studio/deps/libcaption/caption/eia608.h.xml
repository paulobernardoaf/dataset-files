<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libcaption\caption\eia608.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eia608_charmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_BX</name><parameter_list>(<parameter><type><name>B</name></type></parameter>, <parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((B) &lt;&lt; (X)) &amp; 0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_BP</name><parameter_list>(<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((B)&amp;0x7F) | (0x80 ^ EIA608_BX((B), 1) ^ EIA608_BX((B), 2) ^ EIA608_BX((B), 3) ^ EIA608_BX((B), 4) ^ EIA608_BX((B), 5) ^ EIA608_BX((B), 6) ^ EIA608_BX((B), 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_B2</name><parameter_list>(<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EIA608_BP((B) + 0), EIA608_BP((B) + 1), EIA608_BP((B) + 2), EIA608_BP((B) + 3), EIA608_BP((B) + 4), EIA608_BP((B) + 5), EIA608_BP((B) + 6), EIA608_BP((B) + 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_B1</name><parameter_list>(<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EIA608_B2((B) + 0), EIA608_B2((B) + 8), EIA608_B2((B) + 16), EIA608_B2((B) + 24), EIA608_B2((B) + 32), EIA608_B2((B) + 40), EIA608_B2((B) + 48), EIA608_B2((B) + 56)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>eia608_parity_table</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>EIA608_B1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>EIA608_B1</name><argument_list>(<argument><literal type="number">64</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>eia608_style_map</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>inline</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>eia608_parity_byte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>eia608_parity_table</name><index>[<expr><literal type="number">0x7F</literal> <operator>&amp;</operator> <name>cc_data</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>eia608_parity_word</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>eia608_parity_byte</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>cc_data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>eia608_parity_byte</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>cc_data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>eia608_parity</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>eia608_parity_word</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_parity_varify</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>eia608_parity_word</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cc_data</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_parity_strip</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>cc_data</name> <operator>&amp;</operator> <literal type="number">0x7F7F</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_test_second_channel_bit</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>cc_data</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_basicna</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x0000</literal> <operator>!=</operator> <operator>(</operator><literal type="number">0x6000</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_preamble</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x1040</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7040</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_midrowchange</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x1120</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7770</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_specialna</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x1130</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7770</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_xds</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x0000</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7070</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="number">0x0000</literal> <operator>!=</operator> <operator>(</operator><literal type="number">0x0F0F</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_westeu</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x1220</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7660</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_control</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x1420</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7670</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>||</operator> <literal type="number">0x1720</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x7770</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_norpak</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x1724</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x777C</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator> <operator>||</operator> <literal type="number">0x1728</literal> <operator>==</operator> <operator>(</operator><literal type="number">0x777C</literal> <operator>&amp;</operator> <name>cc_data</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>eia608_is_padding</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0x8080</literal> <operator>==</operator> <name>cc_data</name></expr>;</return> </block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>eia608_style_white</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>eia608_style_green</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>eia608_style_blue</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>eia608_style_cyan</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>eia608_style_red</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>eia608_style_yellow</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>eia608_style_magenta</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>eia608_style_italics</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

}</block></enum></type> <name>eia608_style_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>eia608_parse_preamble</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name><modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>underline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>eia608_parse_midrowchange</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name><modifier>*</modifier></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>underline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>eia608_row_column_pramble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>eia608_row_style_pramble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>eia608_midrow_change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>eia608_style_t</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{

<decl><name>eia608_tab_offset_0</name> <init>= <expr><literal type="number">0x1720</literal></expr></init></decl>,

<decl><name>eia608_tab_offset_1</name> <init>= <expr><literal type="number">0x1721</literal></expr></init></decl>,

<decl><name>eia608_tab_offset_2</name> <init>= <expr><literal type="number">0x1722</literal></expr></init></decl>,

<decl><name>eia608_tab_offset_3</name> <init>= <expr><literal type="number">0x1723</literal></expr></init></decl>,

<decl><name>eia608_control_resume_caption_loading</name> <init>= <expr><literal type="number">0x1420</literal></expr></init></decl>,

<decl><name>eia608_control_backspace</name> <init>= <expr><literal type="number">0x1421</literal></expr></init></decl>,

<decl><name>eia608_control_alarm_off</name> <init>= <expr><literal type="number">0x1422</literal></expr></init></decl>,

<decl><name>eia608_control_alarm_on</name> <init>= <expr><literal type="number">0x1423</literal></expr></init></decl>,

<decl><name>eia608_control_delete_to_end_of_row</name> <init>= <expr><literal type="number">0x1424</literal></expr></init></decl>,

<decl><name>eia608_control_roll_up_2</name> <init>= <expr><literal type="number">0x1425</literal></expr></init></decl>,

<decl><name>eia608_control_roll_up_3</name> <init>= <expr><literal type="number">0x1426</literal></expr></init></decl>,

<decl><name>eia608_control_roll_up_4</name> <init>= <expr><literal type="number">0x1427</literal></expr></init></decl>,

<decl><name>eia608_control_resume_direct_captioning</name> <init>= <expr><literal type="number">0x1429</literal></expr></init></decl>,

<decl><name>eia608_control_text_restart</name> <init>= <expr><literal type="number">0x142A</literal></expr></init></decl>,

<decl><name>eia608_control_text_resume_text_display</name> <init>= <expr><literal type="number">0x142B</literal></expr></init></decl>,

<decl><name>eia608_control_erase_display_memory</name> <init>= <expr><literal type="number">0x142C</literal></expr></init></decl>,

<decl><name>eia608_control_carriage_return</name> <init>= <expr><literal type="number">0x142D</literal></expr></init></decl>,

<decl><name>eia608_control_erase_non_displayed_memory</name> <init>= <expr><literal type="number">0x142E</literal></expr></init></decl>,

<decl><name>eia608_control_end_of_caption</name> <init>= <expr><literal type="number">0x142F</literal></expr></init></decl>,

}</block></enum></type> <name>eia608_control_t</name>;</typedef>

<function_decl><type><name>uint16_t</name></type> <name>eia608_control_command</name><parameter_list>(<parameter><decl><type><name>eia608_control_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>eia608_tab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><operator>(</operator><name>eia608_control_t</name><operator>)</operator><operator>(</operator><name>eia608_tab_offset_0</name> <operator>|</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>eia608_control_t</name></type> <name>eia608_parse_control</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>cc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>eia608_from_utf8_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>eia608_from_utf8_2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>c2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>eia608_from_basicna</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>bna1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>bna2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>eia608_to_utf8</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>char1</name></decl></parameter>, <parameter><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>char2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>eia608_dump</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
