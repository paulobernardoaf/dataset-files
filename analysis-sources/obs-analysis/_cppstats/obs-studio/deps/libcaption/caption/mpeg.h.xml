<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libcaption\caption\mpeg.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"caption.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cea708.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_H262</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_H264</name></cpp:macro> <cpp:value>0x1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_H265</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H262_SEI_PACKET</name></cpp:macro> <cpp:value>0xB2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_SEI_PACKET</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H265_SEI_PACKET</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NALU_SIZE</name></cpp:macro> <cpp:value>(6 * 1024 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REFRENCE_FRAMES</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><name>MAX_NALU_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dts</name></decl>, <name>cts</name>;</decl_stmt>

<decl_stmt><decl><type><name>libcaption_stauts_t</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>front</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>latent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_t</name></type> <name><name>cea708</name><index>[<expr><name>MAX_REFRENCE_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mpeg_bitstream_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>mpeg_bitstream_init</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>mpeg_bitstream_parse</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>stream_type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>cts</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libcaption_stauts_t</name></type> <name>mpeg_bitstream_status</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>size_t</name></type> <name>mpeg_bitstream_flush</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{

<decl><name>sei_type_buffering_period</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>sei_type_pic_timing</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>sei_type_pan_scan_rect</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>sei_type_filler_payload</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>sei_type_user_data_registered_itu_t_t35</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>sei_type_user_data_unregistered</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>sei_type_recovery_point</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>sei_type_dec_ref_pic_marking_repetition</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>sei_type_spare_pic</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>sei_type_scene_info</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>sei_type_sub_seq_info</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>sei_type_sub_seq_layer_characteristics</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>sei_type_sub_seq_characteristics</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>sei_type_full_frame_freeze</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>sei_type_full_frame_freeze_release</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>sei_type_full_frame_snapshot</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>sei_type_progressive_refinement_segment_start</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>sei_type_progressive_refinement_segment_end</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>sei_type_motion_constrained_slice_group_set</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>sei_type_film_grain_characteristics</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>sei_type_deblocking_filter_display_preference</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>sei_type_stereo_video_info</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

}</block></enum></type> <name>sei_msgtype_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_sei_message_t</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sei_msgtype_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_sei_message_t</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>sei_message_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>tail</name></decl>;</decl_stmt>

}</block></struct></type> <name>sei_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>sei_init</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sei_free</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sei_cat</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itu_t_t35</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sei_message_append</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libcaption_stauts_t</name></type> <name>sei_parse</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_head</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_tail</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>sei</name><operator>-&gt;</operator><name>tail</name></name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_next</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>sei_msgtype_t</name></type> <name>sei_message_type</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>sei_message_size</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>sei_message_data</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_new</name><parameter_list>(<parameter><decl><type><name>sei_msgtype_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_copy</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sei_message_new</name><argument_list>(<argument><expr><call><name>sei_message_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>sei_message_free</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>sei_render_size</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>sei_render</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sei_dump</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sei_dump_messages</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libcaption_stauts_t</name></type> <name>sei_from_scc</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scc_t</name><modifier>*</modifier></type> <name>scc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libcaption_stauts_t</name></type> <name>sei_from_caption_frame</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libcaption_stauts_t</name></type> <name>sei_from_caption_clear</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libcaption_stauts_t</name></type> <name>sei_to_caption_frame</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
