<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libcaption\src\vtt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_block_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>head</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt_new</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vtt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vtt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vtt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vtt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vtt_free</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name> <operator>=</operator> <call><name>vtt_block_free_head</name><argument_list>(<argument><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name> <operator>=</operator> <call><name>vtt_block_free_head</name><argument_list>(<argument><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name> <operator>=</operator> <call><name>vtt_block_free_head</name><argument_list>(<argument><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vtt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_block_new</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>VTT_BLOCK_TYPE</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vtt_block_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cue_settings</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cue_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTT_REGION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_tail</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTT_STYLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_tail</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTT_CUE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTT_NOTE</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>dest</name> <init>= <expr><operator>(</operator><name>utf8_char_t</name><operator>*</operator><operator>)</operator><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_block_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>cue_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>cue_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>cue_settings</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>cue_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vtt_cue_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name> <operator>=</operator> <call><name>vtt_block_free_head</name><argument_list>(<argument><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vtt_style_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name> <operator>=</operator> <call><name>vtt_block_free_head</name><argument_list>(<argument><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>style_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vtt_region_free_head</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name> <operator>=</operator> <call><name>vtt_block_free_head</name><argument_list>(<argument><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>region_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTTTIME2SECONDS</name><parameter_list>(<parameter><type><name>HH</name></type></parameter>, <parameter><type><name>MM</name></type></parameter>, <parameter><type><name>SS</name></type></parameter>, <parameter><type><name>MS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HH * 3600.0) + (MM * 60.0) + SS + (MS / 1000.0))</cpp:value></cpp:define>

<function><type><name>double</name></type> <name>parse_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%d:%2d:%2d%*1[,.]%3d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>VTTTIME2SECONDS</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%2d:%2d%*1[,.]%3d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>VTTTIME2SECONDS</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_timestamps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>start_pts</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>end_pts</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>cue_settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>start_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>end_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cue_str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" %31s --&gt; %31s%1023[^\n\r]"</literal></expr></argument>, <argument><expr><name>start_str</name></expr></argument>, <argument><expr><name>end_str</name></expr></argument>, <argument><expr><name>cue_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>start_pts</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cue_settings</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Matches: %d\n"</literal></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start_pts</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>start_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Start pts: %f\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>start_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_pts</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>end_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>matches</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>cue_str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cue_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cue_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>cue_settings</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>cue_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>*</operator><name>cue_settings</name></expr></argument>, <argument><expr><name>cue_str</name></expr></argument>, <argument><expr><name>cue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cue_settings</name><operator>)</operator><index>[<expr><name>cue_size</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_vtt_parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>vtt_t</name><modifier>*</modifier></type> <name>_vtt_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srt_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>str_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>trimmed_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>cue_settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>VTT_BLOCK_TYPE</name></name></type> <name>block_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cue_id_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>cue_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>size</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srt_mode</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid webvtt header: %.*s\n"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vtt</name> <operator>=</operator> <call><name>vtt_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>line_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_length</name> <operator>=</operator> <call><name>utf8_line_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>trimmed_length</name> <operator>=</operator> <call><name>utf8_trimmed_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>line_length</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name>trimmed_length</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>line_length</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strnstr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"REGION"</literal></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_type</name> <operator>=</operator> <name>VTT_REGION</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strnstr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STYLE"</literal></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_type</name> <operator>=</operator> <name>VTT_STYLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strnstr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NOTE"</literal></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_type</name> <operator>=</operator> <name>VTT_NOTE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strnstr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"--&gt;"</literal></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_type</name> <operator>=</operator> <name>VTT_CUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_timestamps</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cue_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str_pts</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Bad timestamp: %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line_length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cue_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERR: Unrecognized block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cue_id</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cue_id_length</name> <operator>=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>line_length</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>line_length</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>text</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>text_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>text_size</name> <operator>+=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_length</name> <operator>=</operator> <call><name>utf8_line_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>trimmed_length</name> <operator>=</operator> <call><name>utf8_trimmed_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>line_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>line_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>line_length</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>trimmed_length</name></expr>)</condition>;</do>

<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><call><name>vtt_block_new</name><argument_list>(<argument><expr><name>vtt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_size</name></expr></argument>, <argument><expr><name>block_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>VTT_CUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>str_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>end_pts</name> <operator>-</operator> <name>str_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cue_settings</name></name> <operator>=</operator> <name>cue_settings</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cue_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cue_id</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>cue_id_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>cue_id</name></name></expr></argument>, <argument><expr><name>cue_id</name></expr></argument>, <argument><expr><name>cue_id_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cue_id</name><index>[<expr><name>cue_id_length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cue_id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>vtt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vtt_cue_to_caption_frame</name><parameter_list>(<parameter><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>cue</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>cue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>caption_frame_from_text</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>vtt_cue_from_caption_frame</name><parameter_list>(<parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&gt;=</operator> <name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name><name>vtt</name><operator>-&gt;</operator><name>cue_tail</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>cue</name> <init>= <expr><call><name>vtt_block_new</name><argument_list>(<argument><expr><name>vtt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>CAPTION_FRAME_TEXT_BYTES</name></expr></argument>, <argument><expr><name>VTT_CUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>cue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>caption_frame_to_text</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cue</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_dump</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>vtt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vtt_block_t</name><modifier>*</modifier></type> <name>block</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WEBVTT\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>vtt</name><operator>-&gt;</operator><name>region_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"REGION\r\n%s\r\n"</literal></expr></argument>, <argument><expr><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>vtt</name><operator>-&gt;</operator><name>style_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"STYLE\r\n%s\r\n"</literal></expr></argument>, <argument><expr><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>vtt</name><operator>-&gt;</operator><name>cue_head</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hh1</name></decl>, <decl><type ref="prev"/><name>hh2</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>ss1</name></decl>, <decl><type ref="prev"/><name>ss2</name></decl>, <decl><type ref="prev"/><name>ms1</name></decl>, <decl><type ref="prev"/><name>ms2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vtt_crack_time</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtt_crack_time</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cue_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cue_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02d:%02d:%02d.%03d --&gt; %02d:%02d:%02d.%03d"</literal></expr></argument>,

<argument><expr><name>hh1</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>ss1</name></expr></argument>, <argument><expr><name>ms1</name></expr></argument>, <argument><expr><name>hh2</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>ss2</name></expr></argument>, <argument><expr><name>ms2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cue_settings</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cue_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n%s\r\n"</literal></expr></argument>, <argument><expr><call><name>vtt_block_data</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vtt_dump</name><parameter_list>(<parameter><decl><type><name>vtt_t</name><modifier>*</modifier></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>_dump</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

</unit>
