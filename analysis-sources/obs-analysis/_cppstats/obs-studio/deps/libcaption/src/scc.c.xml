<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libcaption\src\scc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>scc_t</name><modifier>*</modifier></type> <name>scc_relloc</name><parameter_list>(<parameter><decl><type><name>scc_t</name><modifier>*</modifier></type> <name>scc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cc_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>scc</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>cc_aloc</name></name> <operator>&lt;</operator> <name>cc_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scc</name> <operator>=</operator> <operator>(</operator><name>scc_t</name><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>scc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scc_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cc_count</name> <operator>*</operator> <literal type="number">15</literal> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>cc_aloc</name></name> <operator>=</operator> <name>cc_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>scc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>scc_t</name><modifier>*</modifier></type> <name>scc_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cc_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scc_t</name><modifier>*</modifier></type> <name>scc</name> <init>= <expr><call><name>scc_relloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cc_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>cc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>scc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>scc_t</name><modifier>*</modifier></type> <name>scc_free</name><parameter_list>(<parameter><decl><type><name>scc_t</name><modifier>*</modifier></type> <name>scc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>scc_time_to_timestamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>hh</name> <operator>*</operator> <literal type="number">3600.0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mm</name> <operator>*</operator> <literal type="number">60.0</literal><operator>)</operator> <operator>+</operator> <name>ss</name> <operator>+</operator> <operator>(</operator><name>ff</name> <operator>/</operator> <literal type="number">29.97</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>scc_to_608</name><parameter_list>(<parameter><decl><type><name>scc_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>scc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>utf8_char_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>llen</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cc_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>cc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Scenarist_SCC V%1d.%1d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">18</literal></expr><operator>,</operator> <expr><name>size</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>v1</name> <operator>||</operator> <literal type="number">0</literal> <operator>!=</operator> <name>v2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>utf8_line_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>llen</name> <operator>||</operator> <literal type="number">0</literal> <operator>!=</operator> <call><name>utf8_trimmed_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%2d:%2d:%2d%*1[:;]%2d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">12</literal></expr><operator>,</operator> <expr><name>size</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>utf8_line_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>utf8_trimmed_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_cc_count</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>llen</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator> <operator>=</operator> <call><name>scc_relloc</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator></expr></argument>, <argument><expr><name>max_cc_count</name> <operator>*</operator> <literal type="number">15</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>scc_time_to_timestamp</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>cc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>cc_size</name></name> <operator>&lt;</operator> <name>max_cc_count</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%04x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>cc_data</name></name><index>[<expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>cc_size</name></name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cc_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>scc</name><operator>)</operator><operator>-&gt;</operator><name>cc_size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">5</literal></expr><operator>,</operator> <expr><name>size</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

</unit>
