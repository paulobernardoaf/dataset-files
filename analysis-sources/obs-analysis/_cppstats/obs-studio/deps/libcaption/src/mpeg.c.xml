<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\libcaption\src\mpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_find_emulation_prevention_byte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">3</literal> <operator>!=</operator> <name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_copy_to_rbsp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>destData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>destSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>sorcData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sorcSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>toCopy</name></decl>, <decl><type ref="prev"/><name>totlSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>destSize</name> <operator>&gt;=</operator> <name>sorcSize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>toCopy</name> <operator>=</operator> <call><name>_find_emulation_prevention_byte</name><argument_list>(<argument><expr><name>sorcData</name></expr></argument>, <argument><expr><name>destSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>destData</name></expr></argument>, <argument><expr><name>sorcData</name></expr></argument>, <argument><expr><name>toCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totlSize</name> <operator>+=</operator> <name>toCopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>destData</name> <operator>+=</operator> <name>toCopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>destSize</name> <operator>-=</operator> <name>toCopy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>destSize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totlSize</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totlSize</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sorcData</name> <operator>+=</operator> <name>toCopy</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sorcSize</name> <operator>-=</operator> <name>toCopy</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>_find_emulated</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>&lt;</operator> <name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>_copy_from_rbsp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>payloadData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>payloadSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>payloadSize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>_find_emulated</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>payloadSize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <name>payloadSize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>total</name> <operator>+</operator> <name>bytes</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>bytes</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>bytes</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bytes</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>payloadData</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>payloadSize</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_next</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator>struct <name>_sei_message_t</name><operator>*</operator><operator>)</operator><name>msg</name><operator>)</operator><operator>-&gt;</operator><name>next</name></expr>;</return> </block_content>}</block></function>

<function><type><name>sei_msgtype_t</name></type> <name>sei_message_type</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator>struct <name>_sei_message_t</name><operator>*</operator><operator>)</operator><name>msg</name><operator>)</operator><operator>-&gt;</operator><name>type</name></expr>;</return> </block_content>}</block></function>

<function><type><name>size_t</name></type> <name>sei_message_size</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator>struct <name>_sei_message_t</name><operator>*</operator><operator>)</operator><name>msg</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint8_t</name><modifier>*</modifier></type> <name>sei_message_data</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>msg</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>_sei_message_t</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_message_free</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>sei_message_t</name><modifier>*</modifier></type> <name>sei_message_new</name><parameter_list>(<parameter><decl><type><name>sei_msgtype_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>_sei_message_t</name></name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><operator>(</operator>struct <name>_sei_message_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_sei_message_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>sei_message_t</name><operator>*</operator><operator>)</operator><name>msg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_init</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_message_append</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_cat</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itu_t_t35</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>to</name> <operator>||</operator> <operator>!</operator><name>from</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_head</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>msg</name></expr>;</condition> <incr><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_next</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>itu_t_t35</name> <operator>||</operator> <name>sei_type_user_data_registered_itu_t_t35</name> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_message_append</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><call><name>sei_message_copy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_free</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>tail</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>sei</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>sei_init</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_dump</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SEI %p\n"</literal></expr></argument>, <argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_dump_messages</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_dump_messages</name><parameter_list>(<parameter><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name></type> <name>cea708</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>msg</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>msg</name></expr>;</condition> <incr><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_next</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- Message %p\n-- Message Type: %d\n-- Message Size: %d\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>sei_message_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02X "</literal></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sei_type_user_data_registered_itu_t_t35</name> <operator>==</operator> <call><name>sei_message_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>LIBCAPTION_OK</name> <operator>!=</operator> <call><name>cea708_parse_h262</name><argument_list>(<argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cea708_parse error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cea708_dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>sei_render_size</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sei</name> <operator>||</operator> <operator>!</operator><name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_head</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>msg</name></expr>;</condition> <incr><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_next</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>/</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>sei_render</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sei</name> <operator>||</operator> <operator>!</operator><name><name>sei</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>escaped_size</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_head</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>msg</name></expr>;</condition> <incr><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_next</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>payloadType</name> <init>= <expr><call><name>sei_message_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payloadSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>payloadData</name> <init>= <expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">255</literal> <operator>&lt;=</operator> <name>payloadType</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>payloadType</name> <operator>-=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <name>payloadType</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">255</literal> <operator>&lt;=</operator> <name>payloadSize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>payloadSize</name> <operator>-=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <name>payloadSize</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;=</operator> <operator>(</operator><name>escaped_size</name> <operator>=</operator> <call><name>_copy_from_rbsp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>escaped_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>escaped_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name><modifier>*</modifier></type> <name>sei_render_alloc</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>aloc</name> <init>= <expr><call><name>sei_render_size</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>aloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>=</operator> <call><name>sei_render</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>sei_parse</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sei_init</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>payloadType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>payloadSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <literal type="number">255</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>payloadType</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr><operator>,</operator> <expr><operator>--</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LIBCAPTION_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>payloadType</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr><operator>,</operator> <expr><operator>--</operator><name>size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <literal type="number">255</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>payloadSize</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr><operator>,</operator> <expr><operator>--</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LIBCAPTION_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>payloadSize</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>data</name></expr><operator>,</operator> <expr><operator>--</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>payloadSize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>sei_message_new</name><argument_list>(<argument><expr><operator>(</operator><name>sei_msgtype_t</name><operator>)</operator><name>payloadType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>payloadData</name> <init>= <expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>_copy_to_rbsp</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sei_message_append</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <name>payloadSize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LIBCAPTION_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>sei_to_caption_frame</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name></type> <name>cea708</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libcaption_stauts_t</name></type> <name>status</name> <init>= <expr><name>LIBCAPTION_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_head</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>msg</name></expr>;</condition> <incr><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_next</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sei_type_user_data_registered_itu_t_t35</name> <operator>==</operator> <call><name>sei_message_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cea708_parse_h264</name><argument_list>(<argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>libcaption_status_update</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>cea708_to_caption_frame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>LIBCAPTION_READY</name> <operator>==</operator> <name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CHANNEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>sei_append_708</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>cea708</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>sei_message_new</name><argument_list>(<argument><expr><name>sei_type_user_data_registered_itu_t_t35</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CEA608_MAX_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>cea708_render</name><argument_list>(<argument><expr><name>cea708</name></expr></argument>, <argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_message_append</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><name>cea708</name></expr></argument>, <argument><expr><name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sei_encode_eia608</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>cea708</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>cc_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">31</literal> <operator>==</operator> <name><name>cea708</name><operator>-&gt;</operator><name>user_data</name><operator>.</operator><name>cc_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_append_708</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>cea708</name><operator>-&gt;</operator><name>user_data</name><operator>.</operator><name>cc_count</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_resume_caption_loading</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_resume_caption_loading</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>cc_data</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_end_of_caption</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_end_of_caption</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_append_708</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>sei_from_caption_frame</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unl</name></decl>, <decl><type ref="prev"/><name>prev_unl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_t</name></type> <name>cea708</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>prev_cc_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>eia608_style_t</name></type> <name>styl</name></decl>, <decl><type ref="prev"/><name>prev_styl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sei_init</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_erase_non_displayed_memory</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_resume_caption_loading</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>SCREEN_ROWS</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>prev_unl</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>prev_styl</name> <operator>=</operator> <name>eia608_style_white</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>SCREEN_COLS</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>*</operator><call><name>caption_frame_read_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>styl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unl</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>SCREEN_COLS</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>c</name> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>unl</name> <operator>&amp;&amp;</operator> <name>eia608_style_white</name> <operator>==</operator> <name>styl</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tab</name> <init>= <expr><name>c</name> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_row_column_pramble</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_tab</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_row_style_pramble</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>styl</name></expr></argument>, <argument><expr><name>unl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_unl</name> <operator>=</operator> <name>unl</name></expr><operator>,</operator> <expr><name>prev_styl</name> <operator>=</operator> <name>styl</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>prev_cc_data</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>data</name> <operator>=</operator> <call><name>caption_frame_read_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <name>SCREEN_COLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr><operator>,</operator> <expr><name>data</name> <operator>=</operator> <call><name>caption_frame_read_char</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>styl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unl</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cc_data</name> <init>= <expr><call><name>eia608_from_utf8_1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unl</name> <operator>!=</operator> <name>prev_unl</name> <operator>||</operator> <name>styl</name> <operator>!=</operator> <name>prev_styl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_midrow_change</name><argument_list>(<argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>styl</name></expr></argument>, <argument><expr><name>unl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_unl</name> <operator>=</operator> <name>unl</name></expr><operator>,</operator> <expr><name>prev_styl</name> <operator>=</operator> <name>styl</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cc_data</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>prev_cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_from_basicna</name><argument_list>(<argument><expr><name>prev_cc_data</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_westeu</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_from_basicna</name><argument_list>(<argument><expr><name>prev_cc_data</name></expr></argument>, <argument><expr><call><name>eia608_from_utf8_1</name><argument_list>(<argument><expr><name>EIA608_CHAR_SPACE</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>prev_cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_cc_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_westeu</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_from_utf8_1</name><argument_list>(<argument><expr><name>EIA608_CHAR_SPACE</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eia608_is_basicna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_cc_data</name> <operator>=</operator> <name>cc_data</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eia608_is_specialna</name><argument_list>(<argument><expr><name>cc_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_resume_caption_loading</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>prev_cc_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name>prev_cc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sei_encode_eia608</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt> 

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>sei_from_scc</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scc_t</name><modifier>*</modifier></type> <name>scc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_t</name></type> <name>cea708</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scc</name><operator>-&gt;</operator><name>cc_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">31</literal> <operator>==</operator> <name><name>cea708</name><operator>.</operator><name>user_data</name><operator>.</operator><name>cc_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_append_708</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><name><name>scc</name><operator>-&gt;</operator><name>cc_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>cea708</name><operator>.</operator><name>user_data</name><operator>.</operator><name>cc_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sei_append_708</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libcaption_stauts_t</name></type> <name>sei_from_caption_clear</name><parameter_list>(<parameter><decl><type><name>sei_t</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name></type> <name>cea708</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><name><name>sei</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_end_of_caption</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_end_of_caption</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_erase_non_displayed_memory</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_erase_non_displayed_memory</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_erase_display_memory</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cea708_add_cc_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cc_type_ntsc_cc_field_1</name></expr></argument>, <argument><expr><call><name>eia608_control_command</name><argument_list>(<argument><expr><name>eia608_control_erase_display_memory</name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sei_append_708</name><argument_list>(<argument><expr><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cea708</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LIBCAPTION_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpeg_bitstream_init</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>cts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_OK</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>mpeg_bitstream_packet_type</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>stream_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>stream_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STREAM_TYPE_H262</name></expr>:</case>

<return>return <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

<case>case <expr><name>STREAM_TYPE_H264</name></expr>:</case>

<return>return <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</return>

<case>case <expr><name>STREAM_TYPE_H265</name></expr>:</case>

<return>return <expr><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>find_start_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_code</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start_code</name> <operator>=</operator> <operator>(</operator><name>start_code</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x00000100</literal> <operator>==</operator> <operator>(</operator><name>start_code</name> <operator>&amp;</operator> <literal type="number">0xffffff00</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>cea708_t</name><modifier>*</modifier></type> <name>_mpeg_bitstream_cea708_at</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>cea708</name><index>[<expr><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>front</name></name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>%</operator> <name>MAX_REFRENCE_FRAMES</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><name>cea708_t</name><modifier>*</modifier></type> <name>_mpeg_bitstream_cea708_front</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_mpeg_bitstream_cea708_at</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>cea708_t</name><modifier>*</modifier></type> <name>_mpeg_bitstream_cea708_back</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_mpeg_bitstream_cea708_at</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>cea708_t</name><modifier>*</modifier></type> <name>_mpeg_bitstream_cea708_emplace_back</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>cea708</name> <init>= <expr><call><name>_mpeg_bitstream_cea708_back</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cea708_init</name><argument_list>(<argument><expr><name>cea708</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cea708</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_mpeg_bitstream_cea708_sort</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<label><name>again</name>:</label>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>latent</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>_mpeg_bitstream_cea708_at</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>_mpeg_bitstream_cea708_at</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cea708_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cea708_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cea708_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>again</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>mpeg_bitstream_flush</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>cea708</name> <init>= <expr><call><name>_mpeg_bitstream_cea708_front</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>libcaption_status_update</name><argument_list>(<argument><expr><name>LIBCAPTION_OK</name></expr></argument>, <argument><expr><call><name>cea708_to_caption_frame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>cea708</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>front</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MAX_REFRENCE_FRAMES</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_mpeg_bitstream_cea708_sort_flush</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_mpeg_bitstream_cea708_sort</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>latent</name></name> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>LIBCAPTION_OK</name> <operator>&amp;&amp;</operator> <call><name>_mpeg_bitstream_cea708_front</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>timestamp</name> <operator>&lt;</operator> <name>dts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpeg_bitstream_flush</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>mpeg_bitstream_parse</name><parameter_list>(<parameter><decl><type><name>mpeg_bitstream_t</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>caption_frame_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>stream_type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>cts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>MAX_NALU_SIZE</name> <operator>&lt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_ERROR</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>MAX_NALU_SIZE</name> <operator>&lt;=</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>MAX_NALU_SIZE</name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>sei_t</name></type> <name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl>, <decl><type ref="prev"/><name>scpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LIBCAPTION_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>LIBCAPTION_OK</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>scpos</name> <operator>=</operator> <call><name>find_start_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>mpeg_bitstream_packet_type</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>stream_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<default>default:</default>

<break>break;</break>

<case>case <expr><name>H262_SEI_PACKET</name></expr>:</case>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>STREAM_TYPE_H262</name> <operator>==</operator> <name>stream_type</name> <operator>&amp;&amp;</operator> <name>scpos</name> <operator>&gt;</operator> <name>header_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>cea708</name> <init>= <expr><call><name>_mpeg_bitstream_cea708_emplace_back</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>dts</name> <operator>+</operator> <name>cts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>libcaption_status_update</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>cea708_parse_h262</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>header_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>scpos</name> <operator>-</operator> <name>header_size</name></expr></argument>, <argument><expr><name>cea708</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mpeg_bitstream_cea708_sort_flush</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_PACKET</name></expr>:</case>

<case>case <expr><name>H265_SEI_PACKET</name></expr>:</case>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <ternary><condition><expr><name>STREAM_TYPE_H264</name> <operator>==</operator> <name>stream_type</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><ternary><condition><expr><name>STREAM_TYPE_H265</name> <operator>==</operator> <name>stream_type</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&amp;&amp;</operator> <name>scpos</name> <operator>&gt;</operator> <name>header_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>libcaption_status_update</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>sei_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>header_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>scpos</name> <operator>-</operator> <name>header_size</name></expr></argument>, <argument><expr><name>dts</name> <operator>+</operator> <name>cts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>sei_message_t</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>sei_message_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>msg</name></expr>;</condition> <incr><expr><name>msg</name> <operator>=</operator> <call><name>sei_message_next</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sei_type_user_data_registered_itu_t_t35</name> <operator>==</operator> <call><name>sei_message_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name><modifier>*</modifier></type> <name>cea708</name> <init>= <expr><call><name>_mpeg_bitstream_cea708_emplace_back</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>dts</name> <operator>+</operator> <name>cts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>libcaption_status_update</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>cea708_parse_h264</name><argument_list>(<argument><expr><call><name>sei_message_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sei_message_size</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cea708</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mpeg_bitstream_cea708_sort_flush</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>scpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>scpos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

</unit>
