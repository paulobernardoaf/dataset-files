<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\obs-scripting\obs-scripting-python-import.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_REDEFS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-python-import.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4152</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_EXT</name></cpp:macro> <cpp:value>".dll"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_EXT</name></cpp:macro> <cpp:value>".dylib"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_LIB_SUBDIR</name></cpp:macro> <cpp:value>"lib/"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_LIB_SUBDIR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>import_python</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>python_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>lib_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lib</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>python_path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>python_path</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib_path</name></expr></argument>, <argument><expr><name>python_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib_path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib_path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>PYTHON_LIB_SUBDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>dstr_cat</name><argument_list>(<argument>&amp;lib_path</argument>, <argument>PYTHON_LIB SO_EXT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name><name>lib_path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"[Python] Could not load library: %s"</literal></expr></argument>,

<argument><expr><name><name>lib_path</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPORT_FUNC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { Import_##x = os_dlsym(lib, #x); if (!Import_##x) { blog(LOG_WARNING, "[Python] Failed to import: %s", #x); goto fail; } } while (false)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyType_Ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_GenericGetAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_IsTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>Py_DecRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_Malloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyUnicode_FromFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyUnicode_Concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyLong_FromVoidPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyBool_FromLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyGILState_Ensure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyGILState_GetThisThreadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_SetString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_Occurred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_Fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_Restore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_WriteUnraisable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyArg_UnpackTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>Py_BuildValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyRun_SimpleStringFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_Print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>Py_SetPythonHome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>Py_Initialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>Py_Finalize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>Py_IsInitialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyEval_InitThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyEval_ThreadsInitialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyEval_ReleaseThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PySys_SetArgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyImport_ImportModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_CallFunctionObjArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>_Py_NotImplementedStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_GetAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyUnicode_FromString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyDict_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyDict_GetItemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyDict_SetItemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyCFunction_NewEx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyModule_GetDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyModule_GetNameObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyModule_AddObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyModule_AddStringConstant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyImport_Import</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_CallObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>_Py_FalseStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>_Py_TrueStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyGILState_Release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyList_Append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PySys_GetObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyImport_ReloadModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_GetAttrString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyCapsule_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyCapsule_GetPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyArg_ParseTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyFunction_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_SetAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>_PyObject_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyCapsule_Import</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyErr_Clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyObject_Call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyList_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyList_Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyList_GetItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyUnicode_AsUTF8String</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyLong_FromUnsignedLongLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyArg_VaParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>_Py_NoneStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMPORT_FUNC</name><argument_list>(<argument><expr><name>PyTuple_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPORT_FUNC</name></cpp:undef>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>lib</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_dlclose</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

</unit>
