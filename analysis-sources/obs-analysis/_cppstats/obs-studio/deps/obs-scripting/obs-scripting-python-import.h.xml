<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\obs-scripting\obs-scripting-python-import.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/c99defs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNTIME_LINK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NO_ENABLE_SHARED</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNTIME_LINK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4115</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_DEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEBUG</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUNTIME_LINK</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_REDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_EXTERN</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_EXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyType_Ready</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_GenericGetAttr</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyObject_IsTrue</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_Py_DecRef</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_Malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyObject_Free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_Init</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyUnicode_FromFormat</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyUnicode_Concat</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyLong_FromVoidPtr</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyBool_FromLong</name>)<parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyGILState_STATE</name></type> (<modifier>*</modifier><name>Import_PyGILState_Ensure</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyThreadState</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyGILState_GetThisThreadState</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyErr_SetString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exception</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyErr_Occurred</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyErr_Fetch</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyErr_Restore</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyErr_WriteUnraisable</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyArg_UnpackTuple</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type></decl></parameter>,

<parameter><decl><type><name>Py_ssize_t</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_Py_BuildValue</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyRun_SimpleStringFlags</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>PyCompilerFlags</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyErr_Print</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_Py_SetPythonHome</name>)<parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_Py_Initialize</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_Py_Finalize</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_Py_IsInitialized</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyEval_InitThreads</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyEval_ThreadsInitialized</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyEval_ReleaseThread</name>)<parameter_list>(<parameter><decl><type><name>PyThreadState</name> <modifier>*</modifier></type><name>tstate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PySys_SetArgv</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyImport_ImportModule</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_CallFunctionObjArgs</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>callable</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>PY_EXTERN</name></type> <name>PyObject</name><argument_list>(<argument><expr><operator>*</operator><name>Import__Py_NotImplementedStruct</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PY_EXTERN</name></type> <name>PyObject</name> <modifier>*</modifier><argument_list>(<argument><expr><operator>*</operator><name>Import_PyExc_TypeError</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PY_EXTERN</name></type> <name>PyObject</name> <modifier>*</modifier><argument_list>(<argument><expr><operator>*</operator><name>Import_PyExc_RuntimeError</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_GetAttr</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyUnicode_FromString</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyDict_New</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyDict_GetItemString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyDict_SetItemString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyCFunction_NewEx</name>)<parameter_list>(<parameter><decl><type><name>PyMethodDef</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyModule_GetDict</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyModule_GetNameObject</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyModule_AddObject</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyModule_AddStringConstant</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyImport_Import</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_CallObject</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>callable_object</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>PY_EXTERN</name> <name><name>struct</name> <name>_longobject</name></name></type><argument_list>(<argument><expr><operator>*</operator><name>Import__Py_FalseStruct</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PY_EXTERN</name> <name><name>struct</name> <name>_longobject</name></name></type><argument_list>(<argument><expr><operator>*</operator><name>Import__Py_TrueStruct</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyGILState_Release</name>)<parameter_list>(<parameter><decl><type><name>PyGILState_STATE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyList_Append</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PySys_GetObject</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyImport_ReloadModule</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_GetAttrString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyCapsule_New</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>PyCapsule_Destructor</name></type> <name>destructor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyCapsule_GetPointer</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>capsule</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyArg_ParseTuple</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>PY_EXTERN</name></type> <name>PyTypeObject</name><argument_list>(<argument><expr><operator>*</operator><name>Import_PyFunction_Type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyObject_SetAttr</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import__PyObject_New</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyCapsule_Import</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>void</name></type> (<modifier>*</modifier><name>Import_PyErr_Clear</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyObject_Call</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>callable_object</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyList_New</name>)<parameter_list>(<parameter><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>Py_ssize_t</name></type> (<modifier>*</modifier><name>Import_PyList_Size</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyList_GetItem</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyUnicode_AsUTF8String</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unicode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyLong_FromUnsignedLongLong</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PY_EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>Import_PyArg_VaParse</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>PY_EXTERN</name></type> <name>PyObject</name><argument_list>(<argument><expr><operator>*</operator><name>Import__Py_NoneStruct</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>PY_EXTERN</name> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>Import_PyTuple_New</name>)<parameter_list>(<parameter><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>import_python</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>python_path</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_REDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_Ready</name></cpp:macro> <cpp:value>Import_PyType_Ready</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GenericGetAttr</name></cpp:macro> <cpp:value>Import_PyObject_GenericGetAttr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_IsTrue</name></cpp:macro> <cpp:value>Import_PyObject_IsTrue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_DecRef</name></cpp:macro> <cpp:value>Import_Py_DecRef</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Malloc</name></cpp:macro> <cpp:value>Import_PyObject_Malloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Free</name></cpp:macro> <cpp:value>Import_PyObject_Free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Init</name></cpp:macro> <cpp:value>Import_PyObject_Init</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromFormat</name></cpp:macro> <cpp:value>Import_PyUnicode_FromFormat</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Concat</name></cpp:macro> <cpp:value>Import_PyUnicode_Concat</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_FromVoidPtr</name></cpp:macro> <cpp:value>Import_PyLong_FromVoidPtr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBool_FromLong</name></cpp:macro> <cpp:value>Import_PyBool_FromLong</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGILState_Ensure</name></cpp:macro> <cpp:value>Import_PyGILState_Ensure</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGILState_GetThisThreadState</name></cpp:macro> <cpp:value>Import_PyGILState_GetThisThreadState</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SetString</name></cpp:macro> <cpp:value>Import_PyErr_SetString</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Occurred</name></cpp:macro> <cpp:value>Import_PyErr_Occurred</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Fetch</name></cpp:macro> <cpp:value>Import_PyErr_Fetch</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Restore</name></cpp:macro> <cpp:value>Import_PyErr_Restore</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_WriteUnraisable</name></cpp:macro> <cpp:value>Import_PyErr_WriteUnraisable</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_UnpackTuple</name></cpp:macro> <cpp:value>Import_PyArg_UnpackTuple</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BuildValue</name></cpp:macro> <cpp:value>Import_Py_BuildValue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyRun_SimpleStringFlags</name></cpp:macro> <cpp:value>Import_PyRun_SimpleStringFlags</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Print</name></cpp:macro> <cpp:value>Import_PyErr_Print</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_SetPythonHome</name></cpp:macro> <cpp:value>Import_Py_SetPythonHome</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_Initialize</name></cpp:macro> <cpp:value>Import_Py_Initialize</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_Finalize</name></cpp:macro> <cpp:value>Import_Py_Finalize</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IsInitialized</name></cpp:macro> <cpp:value>Import_Py_IsInitialized</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyEval_InitThreads</name></cpp:macro> <cpp:value>Import_PyEval_InitThreads</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyEval_ThreadsInitialized</name></cpp:macro> <cpp:value>Import_PyEval_ThreadsInitialized</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyEval_ReleaseThread</name></cpp:macro> <cpp:value>Import_PyEval_ReleaseThread</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySys_SetArgv</name></cpp:macro> <cpp:value>Import_PySys_SetArgv</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyImport_ImportModule</name></cpp:macro> <cpp:value>Import_PyImport_ImportModule</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallFunctionObjArgs</name></cpp:macro> <cpp:value>Import_PyObject_CallFunctionObjArgs</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_NotImplementedStruct</name></cpp:macro> <cpp:value>(*Import__Py_NotImplementedStruct)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_TypeError</name></cpp:macro> <cpp:value>(*Import_PyExc_TypeError)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_RuntimeError</name></cpp:macro> <cpp:value>(*Import_PyExc_RuntimeError)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GetAttr</name></cpp:macro> <cpp:value>Import_PyObject_GetAttr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromString</name></cpp:macro> <cpp:value>Import_PyUnicode_FromString</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_New</name></cpp:macro> <cpp:value>Import_PyDict_New</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_GetItemString</name></cpp:macro> <cpp:value>Import_PyDict_GetItemString</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_SetItemString</name></cpp:macro> <cpp:value>Import_PyDict_SetItemString</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_NewEx</name></cpp:macro> <cpp:value>Import_PyCFunction_NewEx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_GetDict</name></cpp:macro> <cpp:value>Import_PyModule_GetDict</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_GetNameObject</name></cpp:macro> <cpp:value>Import_PyModule_GetNameObject</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_AddObject</name></cpp:macro> <cpp:value>Import_PyModule_AddObject</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_AddStringConstant</name></cpp:macro> <cpp:value>Import_PyModule_AddStringConstant</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyImport_Import</name></cpp:macro> <cpp:value>Import_PyImport_Import</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallObject</name></cpp:macro> <cpp:value>Import_PyObject_CallObject</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_FalseStruct</name></cpp:macro> <cpp:value>(*Import__Py_FalseStruct)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_TrueStruct</name></cpp:macro> <cpp:value>(*Import__Py_TrueStruct)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGILState_Release</name></cpp:macro> <cpp:value>Import_PyGILState_Release</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_Append</name></cpp:macro> <cpp:value>Import_PyList_Append</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySys_GetObject</name></cpp:macro> <cpp:value>Import_PySys_GetObject</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyImport_ReloadModule</name></cpp:macro> <cpp:value>Import_PyImport_ReloadModule</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GetAttrString</name></cpp:macro> <cpp:value>Import_PyObject_GetAttrString</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCapsule_New</name></cpp:macro> <cpp:value>Import_PyCapsule_New</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCapsule_GetPointer</name></cpp:macro> <cpp:value>Import_PyCapsule_GetPointer</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_ParseTuple</name></cpp:macro> <cpp:value>Import_PyArg_ParseTuple</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFunction_Type</name></cpp:macro> <cpp:value>(*Import_PyFunction_Type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_SetAttr</name></cpp:macro> <cpp:value>Import_PyObject_SetAttr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_New</name></cpp:macro> <cpp:value>Import__PyObject_New</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCapsule_Import</name></cpp:macro> <cpp:value>Import_PyCapsule_Import</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Clear</name></cpp:macro> <cpp:value>Import_PyErr_Clear</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Call</name></cpp:macro> <cpp:value>Import_PyObject_Call</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_New</name></cpp:macro> <cpp:value>Import_PyList_New</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_Size</name></cpp:macro> <cpp:value>Import_PyList_Size</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_GetItem</name></cpp:macro> <cpp:value>Import_PyList_GetItem</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF8String</name></cpp:macro> <cpp:value>Import_PyUnicode_AsUTF8String</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_FromUnsignedLongLong</name></cpp:macro> <cpp:value>Import_PyLong_FromUnsignedLongLong</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_VaParse</name></cpp:macro> <cpp:value>Import_PyArg_VaParse</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_NoneStruct</name></cpp:macro> <cpp:value>(*Import__Py_NoneStruct)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTuple_New</name></cpp:macro> <cpp:value>Import_PyTuple_New</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
