<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\obs-scripting\obs-scripting-python.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWIG_TYPE_TABLE</name></cpp:macro> <cpp:value>obspython</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4100</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4115</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4204</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-python-import.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;structmember.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swig/swigpyrun.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-callback.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__func__</name></cpp:macro> <cpp:value>__FUNCTION__</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;callback/calldata.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_log</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "[Python] " format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_WARNING, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_INFO, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_log(LOG_DEBUG, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<struct_decl>struct <name>python_obs_callback</name>;</struct_decl>

<struct>struct <name>obs_python_script</name> <block>{

<decl_stmt><decl><type><name>obs_script_t</name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>get_properties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>first_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>next_tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_prev_next_tick</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>python_obs_callback</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type>

<name>add_python_obs_callback_extra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>extra_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_script_callback</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>first_callback</name></name></expr></argument>, <argument><expr><operator>(</operator><name>obs_script_t</name> <operator>*</operator><operator>)</operator><name>script</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>extra_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<return>return <expr><name>cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type>

<name>add_python_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>add_python_obs_callback_extra</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>python_obs_callback_extra_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type>

<name>python_obs_callback_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>script</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type>

<name>find_next_python_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <ternary><condition><expr><name>cb</name></expr> ?</condition><then> <expr><operator>(</operator>struct <name>python_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>next</name></name></expr>

</then><else>: <expr><operator>(</operator>struct <name>python_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>script</name><operator>-&gt;</operator><name>first_callback</name></name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>func</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>(</operator>struct <name>python_obs_callback</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type>

<name>find_python_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>find_next_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>remove_python_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>just_free_python_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>just_free_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_python_obs_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_script_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_args_</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>new_format</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va_args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va_args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyArg_VaParse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>new_format</name></expr></argument>, <argument><expr><name>va_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>parse_args</name><parameter_list>(<parameter><type><name>args</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>parse_args_(args, __FUNCTION__, format, ##__VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>py_error_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Python failure in %s:%d:"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>py_error</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>py_error_(__FUNCTION__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lock_python</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyGILState_STATE gstate = PyGILState_Ensure()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlock_python</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyGILState_Release(gstate)</cpp:value></cpp:define>

<struct_decl>struct <name>py_source</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>py_source</name></name></type> <name>py_source_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_libobs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cur_python_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>cur_python_script</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>py_to_obs_source_info</name><parameter_list>(<parameter><decl><type><name>py_source_t</name> <modifier>*</modifier></type><name>py_info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_obs_register_source</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_obs_get_script_config_path</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>add_functions_to_py_module</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,

<parameter><decl><type><name>PyMethodDef</name> <modifier>*</modifier></type><name>method_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>py_to_libobs_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>libobs_to_py_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ownership</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>py_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>py_call</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>call</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_def</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>py_import_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>python_none</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>none</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>none</name></expr>;</return>

</block_content>}</block></function>

</unit>
