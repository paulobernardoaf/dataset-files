<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\obs-scripting\obs-scripting-python.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-python.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scripting-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/base.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/dstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>startup_script</name> <init>= <expr><literal type="string">"\n\

import sys\n\

import os\n\

import obspython\n\

class stdout_logger(object):\n\

def write(self, message):\n\

obspython.script_log_no_endl(obspython.LOG_INFO, message)\n\

def flush(self):\n\

pass\n\

class stderr_logger(object):\n\

def write(self, message):\n\

obspython.script_log_no_endl(obspython.LOG_ERROR, message)\n\

def flush(self):\n\

pass\n\

os.environ['PYTHONUNBUFFERED'] = '1'\n\

sys.stdout = stdout_logger()\n\

sys.stderr = stderr_logger()\n"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUNTIME_LINK</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>home_path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>python_paths</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>python_loaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>tick_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>first_tick_script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_obspython</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>cur_python_script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cur_python_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>py_to_libobs_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>swig_type_info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG could not find type: %s%s%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>py_in</name></expr></argument>, <argument><expr><name>libobs_out</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SWIG_IsOK</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG failed to convert python object to obs "</literal>

<literal type="string">"object: %s%s%s"</literal></expr></argument>,

<argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libobs_to_py_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>libobs_in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ownership</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>py_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>swig_type_info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG could not find type: %s%s%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>py_out</name> <operator>=</operator> <call><name>SWIG_NewPointerObj</name><argument_list>(<argument><expr><name>libobs_in</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ownership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>py_out</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s:%d: SWIG failed to convert obs object to python "</literal>

<literal type="string">"object: %s%s%s"</literal></expr></argument>,

<argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="string">"::"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>libobs_to_py</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>obs_obj</name></type></parameter>, <parameter><type><name>ownership</name></type></parameter>, <parameter><type><name>py_obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libobs_to_py_(#type " *", obs_obj, ownership, py_obj, NULL, __func__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>py_to_libobs</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>py_obj</name></type></parameter>, <parameter><type><name>libobs_out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>py_to_libobs_(#type " *", py_obj, libobs_out, NULL, __func__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lock_callback</name><parameter_list>(<parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lock_python(); struct obs_python_script *__last_script = cur_python_script; struct python_obs_callback *__last_cb = cur_python_cb; cur_python_script = (struct obs_python_script *)cb-&gt;base.script; cur_python_cb = cb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlock_callback</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>cur_python_cb = __last_cb; cur_python_script = __last_script; unlock_python()</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>add_functions_to_py_module</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>PyMethodDef</name> <modifier>*</modifier></type><name>method_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>PyModule_GetNameObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>PyMethodDef</name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><name>method_list</name></expr></init></decl>;</init> <condition><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>PyCFunction_NewEx</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_get_current_script_path</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"__script_dir__"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_defaults</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>get_defs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_settings</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_settings</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(O)"</literal></expr></argument>, <argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>get_defs</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_python_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_success</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_tick</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_load</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_defaults</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>py_file</name> <operator>=</operator> <call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>py_module</name> <operator>=</operator> <call><name>PyImport_Import</name><argument_list>(<argument><expr><name>py_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>py_module</name> <operator>=</operator> <call><name>PyImport_ReloadModule</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_module</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>py_obspython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"obspython"</literal></expr></argument>, <argument><expr><name>py_obspython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"__script_dir__"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_data</name> <init>= <expr><call><name>PyCapsule_New</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"__script_data__"</literal></expr></argument>, <argument><expr><name>py_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>global_funcs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"script_path"</literal></expr>, <expr><name>py_get_current_script_path</name></expr>, <expr><name>METH_NOARGS</name></expr>,

<expr><literal type="string">"Gets the script path"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_functions_to_py_module</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><name>global_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>=</operator>

<call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_defaults"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_desc</name> <init>= <expr><call><name>PyUnicode_AsUTF8String</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>py_desc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>PyBytes_AS_STRING</name><argument_list>(<argument><expr><name>py_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>desc</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>py_tick</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_tick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>py_tick</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>first_tick_script</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <operator>&amp;</operator><name>first_tick_script</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_tick_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <name>py_tick</name></expr>;</expr_stmt>

<expr_stmt><expr><name>py_tick</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>py_load</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>py_load</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(O)"</literal></expr></argument>, <argument><expr><name>py_s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>py_load</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>py_module</name></expr>;</expr_stmt>

<expr_stmt><expr><name>py_module</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unload_python_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_module</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>py_func</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_module</name></expr></argument>, <argument><expr><literal type="string">"script_unload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>py_func</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>py_ret</name> <operator>=</operator> <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>py_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_to_python_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_path_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>python_paths</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>python_path</name> <init>= <expr><name><name>python_paths</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>python_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"import sys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>py_path</name> <operator>=</operator> <call><name>PySys_GetObject</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>py_path</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>py_path_str</name> <operator>=</operator> <call><name>PyUnicode_FromString</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyList_Append</name><argument_list>(<argument><expr><name>py_path</name></expr></argument>, <argument><expr><name>py_path_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_error</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>python_paths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_path_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>python_obs_timer</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_prev_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>timer_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>first_timer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>python_obs_timer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>first_timer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name>first_timer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_timer</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>python_obs_timer_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>p_prev_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>timer</name><operator>-&gt;</operator><name>p_prev_next</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type>

<name>python_obs_timer_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>python_obs_callback</name> <operator>*</operator><operator>)</operator><name>timer</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>timer_remove</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=

<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>(</operator>struct <name>python_obs_callback</name> <operator>*</operator><operator>)</operator><name>p_cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_cb</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_timer_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>python_obs_callback_extra_data</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>python_obs_timer_init</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>timer_add</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback_extra</name><argument_list>(

<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>python_obs_timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>python_obs_callback_extra_data</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>ms</name> <operator>*</operator> <literal type="number">1000000ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>=</operator> <call><name>obs_get_video_frame_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_timer_init</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_python_tick_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_remove_tick_callback</name><argument_list>(<argument><expr><name>obs_python_tick_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(f)"</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>obs_python_remove_tick_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=

<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>obs_python_add_tick_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_add_tick_callback</name><argument_list>(<argument><expr><name>obs_python_tick_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calldata_signal_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>signal_handler_remove_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(O)"</literal></expr></argument>, <argument><expr><name>py_cd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>obs_python_signal_handler_disconnect</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_sh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OsO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=

<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>cb_handler</name> <init>=

<expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cb_signal</name> <init>=

<expr><call><name>calldata_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"signal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb_signal</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>signal</name></expr></argument>, <argument><expr><name>cb_signal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>handler</name> <operator>==</operator> <name>cb_handler</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_next_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>obs_python_signal_handler_connect</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_sh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OsO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_set_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"signal"</literal></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_connect</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><name>calldata_signal_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calldata_signal_callback_global</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>,

<parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>signal_handler_remove_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(sO)"</literal></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><name>py_cd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>obs_python_signal_handler_disconnect_global</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_sh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=

<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>cb_handler</name> <init>=

<expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <name>cb_handler</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_next_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>obs_python_signal_handler_connect_global</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_sh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>signal_handler_t</name></expr></argument>, <argument><expr><name>py_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"handler"</literal></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_connect_global</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>calldata_signal_callback_global</name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_hotkey_unregister</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_hotkey_unregister</name><argument_list>(<argument><expr><operator>(</operator><name>obs_hotkey_id</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_remove_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>obs_hotkey_id</name><operator>)</operator><call><name>calldata_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_hotkey_unregister</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hotkey_pressed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_pressed</name> <init>= <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>pressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(O)"</literal></expr></argument>, <argument><expr><name>py_pressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_pressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_hotkey_pressed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hotkey_pressed</name><argument_list>(<argument><expr><name>p_cb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>defer_hotkey_unpressed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hotkey_pressed</name><argument_list>(<argument><expr><name>p_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_invalid_hotkey_id</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr><name>OBS_INVALID_HOTKEY_ID</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hotkey_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_hotkey_pressed</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>defer_call_post</name><argument_list>(<argument><expr><name>defer_hotkey_unpressed</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>hotkey_unregister</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>script</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"No active script, report this to Jim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>=

<expr><call><name>find_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>hotkey_register_frontend</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"ssO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>py_invalid_hotkey_id</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>py_invalid_hotkey_id</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>on_remove</name></name> <operator>=</operator> <name>on_remove_hotkey</name></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>obs_hotkey_register_frontend</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>hotkey_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>button_prop_clicked</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_props</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(OO)"</literal></expr></argument>, <argument><expr><name>py_props</name></expr></argument>, <argument><expr><name>py_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_error</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>py_ret</name> <operator>==</operator> <name>Py_True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>properties_add_button</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OssO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_props</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><name>py_props</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>obs_properties_add_button2</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>button_prop_clicked</name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>py_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>modified_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cb</name></decl></parameter>, <parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>p_cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_settings</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_props</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_settings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>=

<expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(OOO)"</literal></expr></argument>, <argument><expr><name>py_props</name></expr></argument>, <argument><expr><name>py_p</name></expr></argument>, <argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_error</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>py_ret</name> <operator>==</operator> <name>Py_True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>property_set_modified_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>script</name> <init>= <expr><name>cur_python_script</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_property_t</name></expr></argument>, <argument><expr><name>py_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_cb</name> <operator>||</operator> <operator>!</operator><call><name>PyFunction_Check</name><argument_list>(<argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>add_python_obs_callback</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>py_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_set_modified_callback2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>modified_callback</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>remove_current_callback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_python_cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_python_obs_callback</name><argument_list>(<argument><expr><name>cur_python_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>calldata_source</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"Os"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><name>py_cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>py_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>calldata_sceneitem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_cd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"Os"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>calldata_t</name></expr></argument>, <argument><expr><name>py_cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>calldata_ptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_sceneitem_t</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>py_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>enum_sources_proc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_get_ref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>py_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>enum_sources</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enum_sources</name><argument_list>(<argument><expr><name>enum_sources_proc</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>enum_items_proc</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_sceneitem_t</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_sceneitem_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>py_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>scene_enum_items</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_scene</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_scene</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_scene_t</name></expr></argument>, <argument><expr><name>py_scene</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scene</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_scene_enum_items</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>enum_items_proc</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>source_list_release</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_source</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_source_t</name></expr></argument>, <argument><expr><name>py_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>sceneitem_list_release</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_item</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_sceneitem_t</name></expr></argument>, <argument><expr><name>py_item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>cur_py_log_chunk</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_script_log_internal</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>add_endl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>calling_self</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>calling_self</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>calling_self</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_args</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"is"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_py_log_chunk</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_endl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_py_log_chunk</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>cur_py_log_chunk</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endl</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>endl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>endl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_python_script</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>script_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_python_script</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>script_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>endl</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>endl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endl</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cur_py_log_chunk</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_py_log_chunk</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><name>calling_self</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><call><name>python_none</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_script_log_no_endl</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>py_script_log_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_script_log</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>py_script_log_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hook_functions</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>funcs</name><index>[]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FUNC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{n, c, METH_VARARGS, NULL}</cpp:value></cpp:define>

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"script_log_no_endl"</literal></expr></argument>, <argument><expr><name>py_script_log_no_endl</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"script_log"</literal></expr></argument>, <argument><expr><name>py_script_log</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"timer_remove"</literal></expr></argument>, <argument><expr><name>timer_remove</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"timer_add"</literal></expr></argument>, <argument><expr><name>timer_add</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"calldata_source"</literal></expr></argument>, <argument><expr><name>calldata_source</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"calldata_sceneitem"</literal></expr></argument>, <argument><expr><name>calldata_sceneitem</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"source_list_release"</literal></expr></argument>, <argument><expr><name>source_list_release</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"sceneitem_list_release"</literal></expr></argument>, <argument><expr><name>sceneitem_list_release</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_enum_sources"</literal></expr></argument>, <argument><expr><name>enum_sources</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_scene_enum_items"</literal></expr></argument>, <argument><expr><name>scene_enum_items</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_remove_tick_callback"</literal></expr></argument>,

<argument><expr><name>obs_python_remove_tick_callback</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_add_tick_callback"</literal></expr></argument>, <argument><expr><name>obs_python_add_tick_callback</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"signal_handler_disconnect"</literal></expr></argument>,

<argument><expr><name>obs_python_signal_handler_disconnect</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"signal_handler_connect"</literal></expr></argument>,

<argument><expr><name>obs_python_signal_handler_connect</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"signal_handler_disconnect_global"</literal></expr></argument>,

<argument><expr><name>obs_python_signal_handler_disconnect_global</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"signal_handler_connect_global"</literal></expr></argument>,

<argument><expr><name>obs_python_signal_handler_connect_global</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_hotkey_unregister"</literal></expr></argument>, <argument><expr><name>hotkey_unregister</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_hotkey_register_frontend"</literal></expr></argument>,

<argument><expr><name>hotkey_register_frontend</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_properties_add_button"</literal></expr></argument>, <argument><expr><name>properties_add_button</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"obs_property_set_modified_callback"</literal></expr></argument>,

<argument><expr><name>property_set_modified_callback</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEF_FUNC</name><argument_list>(<argument><expr><literal type="string">"remove_current_callback"</literal></expr></argument>, <argument><expr><name>remove_current_callback</name></expr></argument>)</argument_list></call></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEF_FUNC</name></cpp:undef>

<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_functions_to_py_module</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>obs_python_script_update</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>obs_python_script_load</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>python_loaded</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_python_path</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name> <operator>=</operator> <call><name>load_python_script</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_python_script_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_script_t</name> <modifier>*</modifier></type><name>obs_python_script_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBS_SCRIPT_LANG_PYTHON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><ternary><condition><expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr> ?</condition><then> <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>slash</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".py"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ext</name> <operator>-</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>settings</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>obs_script_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_python_path</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name> <operator>=</operator> <call><name>load_python_script</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>loaded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_python_script_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>obs_script_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_python_script_unload</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name> <operator>||</operator> <operator>!</operator><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_prev_next_tick</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>first_callback</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>script_callback</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>remove_script_callback</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>unload_python_script</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_python_script_destroy</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>python_loaded</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_python_script_update</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name> <operator>||</operator> <operator>!</operator><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>settings</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_settings</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_settings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(O)"</literal></expr></argument>, <argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>update</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_python_script_get_properties</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name> <operator>||</operator> <operator>!</operator><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>get_properties</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>py_error</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>py_to_libobs</name><argument_list>(<argument><expr><name>obs_properties_t</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_python_script_save</name><parameter_list>(<parameter><decl><type><name>obs_script_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>obs_python_script</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loaded</name></name> <operator>||</operator> <operator>!</operator><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_settings</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libobs_to_py</name><argument_list>(<argument><expr><name>obs_data_t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_settings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(O)"</literal></expr></argument>, <argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>save</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>python_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_python_script</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><call><name>obs_get_video_frame_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>first_tick_script</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(f)"</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>first_tick_script</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_ret</name> <init>=

<expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tick</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next_tick</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>cur_python_script</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name>first_timer</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_timer</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>python_obs_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>python_obs_timer_cb</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>python_obs_timer_remove</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>elapsed</name> <init>= <expr><name>ts</name> <operator>-</operator> <name><name>timer</name><operator>-&gt;</operator><name>last_ts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>interval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timer_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_python</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>+=</operator> <name><name>timer</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>obs_python_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>obs_scripting_python_runtime_linked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><name>RUNTIME_LINK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_scripting_python_loaded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>python_loaded</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_python_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>python_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>add_python_frontend_funcs</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>python_loaded_at_all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>obs_scripting_load_python</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>python_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUNTIME_LINK</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

struct dstr old_path = {0};

struct dstr new_path = {0};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>import_python</name><argument_list>(<argument><expr><name>python_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>python_path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>python_path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_utf8_to_wcs</name><argument_list>(<argument><expr><name>python_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>home_path</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_SetPythonHome</name><argument_list>(<argument><expr><name>home_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

dstr_copy(&amp;old_path, getenv("PATH"));

_putenv("PYTHONPATH=");

_putenv("PATH=");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>python_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Py_IsInitialized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
if (pythondir &amp;&amp; *pythondir) {

dstr_printf(&amp;new_path, "PATH=%s", old_path.array);

_putenv(new_path.array);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

bfree(pythondir);

dstr_free(&amp;new_path);

dstr_free(&amp;old_path);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PyEval_InitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyEval_ThreadsInitialized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">L""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PySys_SetArgv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PYTHON_STARTUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"import os"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"import sys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"os.environ['PYTHONUNBUFFERED'] = '1'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"sys.stdout = open('./stdOut.txt','w',1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"sys.stderr = open('./stdErr.txt','w',1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"print(sys.version)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>add_to_python_path</name><argument_list>(<argument><expr><name>SCRIPT_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exec_path</name> <init>= <expr><call><name>os_get_executable_path_ptr</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exec_path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_python_path</name><argument_list>(<argument><expr><name>exec_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>exec_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>py_obspython</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"obspython"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><operator>!</operator><call><name>py_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Error importing obspython.py', unloading obs-python"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>python_loaded</name> <operator>=</operator> <call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><name>startup_script</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_hook_functions</name><argument_list>(<argument><expr><name>py_obspython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_python_frontend_funcs</name><argument_list>(<argument><expr><name>py_obspython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>py_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>PyEval_ReleaseThread</name><argument_list>(<argument><expr><call><name>PyGILState_GetThisThreadState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failed to load python plugin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_python_unload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>python_loaded_at_all</name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>python_loaded</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_add_tick_callback</name><argument_list>(<argument><expr><name>python_tick</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>python_loaded</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_python_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>python_loaded_at_all</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>python_loaded</name> <operator>&amp;&amp;</operator> <call><name>Py_IsInitialized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_obspython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_remove_tick_callback</name><argument_list>(<argument><expr><name>python_tick</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>python_paths</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>python_paths</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>python_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tick_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_py_log_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>python_loaded_at_all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
