<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\glad\include\glad\glad_glx.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/X.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/glad.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__glad_glxext_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__glxext_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> GLX header already included, remove this include, glad already provides it</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glad_glxext_h_</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glxext_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRYP</name></cpp:macro> <cpp:value>APIENTRY *</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>GLADloadproc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GLAPI_EXPORT</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllexport)) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllimport)) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllimport) extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default"))) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>GLAPI</name> <name>int</name></type> <name>gladLoadGLX</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLAPI</name> <name>void</name></type> <name>gladLoadGLXLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLEXT_64_TYPES_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLEXT_64_TYPES_DEFINED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__digital__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__VMS</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__USLC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXOS2__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SOL64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name>long</name> <name>int</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name>__int32</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>__int64</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>XID</name></type> <name>GLXFBConfigID</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__GLXFBConfigRec</name></name> <modifier>*</modifier></type><name>GLXFBConfig</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXContextID</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__GLXcontextRec</name></name> <modifier>*</modifier></type><name>GLXContext</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXPixmap</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXDrawable</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXWindow</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXPbuffer</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>__GLXextFuncPtr</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXVideoCaptureDeviceNV</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLXVideoDeviceNV</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXVideoSourceSGIX</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXFBConfigIDSGIX</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__GLXFBConfigRec</name></name> <modifier>*</modifier></type><name>GLXFBConfigSGIX</name>;</typedef>

<typedef>typedef <type><name>XID</name></type> <name>GLXPbufferSGIX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>event_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>draw_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>serial</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bool</name></type> <name>send_event</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GLXDrawable</name></type> <name>drawable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aux_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

}</block></struct></type> <name>GLXPbufferClobberEvent</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>serial</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bool</name></type> <name>send_event</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GLXDrawable</name></type> <name>drawable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>event_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ust</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>msc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sbc</name></decl>;</decl_stmt>

}</block></struct></type> <name>GLXBufferSwapComplete</name>;</typedef>

<typedef>typedef <type><union>union <name>__GLXEvent</name> <block>{

<decl_stmt><decl><type><name>GLXPbufferClobberEvent</name></type> <name>glxpbufferclobber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXBufferSwapComplete</name></type> <name>glxbufferswapcomplete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name><name>pad</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></union></type> <name>GLXEvent</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>serial</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bool</name></type> <name>send_event</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GLXDrawable</name></type> <name>drawable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>event_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>draw_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

}</block></struct></type> <name>GLXBufferClobberEventSGIX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>networkId</name></decl>;</decl_stmt>

}</block></struct></type> <name>GLXHyperpipeNetworkSGIX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>participationType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeSlice</name></decl>;</decl_stmt>

}</block></struct></type> <name>GLXHyperpipeConfigSGIX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>srcXOrigin</name></decl>, <name>srcYOrigin</name>, <name>srcWidth</name>, <name>srcHeight</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>destXOrigin</name></decl>, <name>destYOrigin</name>, <name>destWidth</name>, <name>destHeight</name>;</decl_stmt>

}</block></struct></type> <name>GLXPipeRect</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>XOrigin</name></decl>, <name>YOrigin</name>, <name>maxHeight</name>, <name>maxWidth</name>;</decl_stmt>

}</block></struct></type> <name>GLXPipeRectLimits</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXTENSION_NAME</name></cpp:macro> <cpp:value>"GLX"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PbufferClobber</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BufferSwapComplete</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__GLX_NUMBER_EVENTS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_SCREEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_ATTRIBUTE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NO_EXTENSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_VISUAL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_CONTEXT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_VALUE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_ENUM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_USE_GL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BUFFER_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LEVEL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DOUBLEBUFFER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STEREO</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX_BUFFERS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RED_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GREEN_SIZE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BLUE_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ALPHA_SIZE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEPTH_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STENCIL_SIZE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_RED_SIZE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_GREEN_SIZE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_BLUE_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_ALPHA_SIZE</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VENDOR</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXTENSIONS</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIXMAP_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_CLOBBER_MASK</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_LEFT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_RIGHT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_LEFT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_RIGHT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX_BUFFERS_BIT</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEPTH_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STENCIL_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONFIG_CAVEAT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_VISUAL_TYPE</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_TYPE</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX_VALUE</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RED_VALUE</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_GREEN_VALUE</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_BLUE_VALUE</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_ALPHA_VALUE</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DONT_CARE</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NONE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SLOW_CONFIG</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRUE_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DIRECT_COLOR</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PSEUDO_COLOR</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_COLOR</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GRAY_SCALE</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_GRAY</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RGB</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_ID</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SCREEN</name></cpp:macro> <cpp:value>0x800C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NON_CONFORMANT_CONFIG</name></cpp:macro> <cpp:value>0x800D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DRAWABLE_TYPE</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDER_TYPE</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_RENDERABLE</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FBCONFIG_ID</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_TYPE</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_TYPE</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_PIXELS</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PRESERVED_CONTENTS</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LARGEST_PBUFFER</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WIDTH</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HEIGHT</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EVENT_MASK</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DAMAGED</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAVED</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_VERSION_1_0</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>XVisualInfo</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXCHOOSEVISUALPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCHOOSEVISUALPROC</name></type> <name>glad_glXChooseVisual</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChooseVisual</name></cpp:macro> <cpp:value>glad_glXChooseVisual</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATECONTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XVisualInfo</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>Bool</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATECONTEXTPROC</name></type> <name>glad_glXCreateContext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateContext</name></cpp:macro> <cpp:value>glad_glXCreateContext</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYCONTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYCONTEXTPROC</name></type> <name>glad_glXDestroyContext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyContext</name></cpp:macro> <cpp:value>glad_glXDestroyContext</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXMAKECURRENTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXMAKECURRENTPROC</name></type> <name>glad_glXMakeCurrent</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXMakeCurrent</name></cpp:macro> <cpp:value>glad_glXMakeCurrent</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXCOPYCONTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCOPYCONTEXTPROC</name></type> <name>glad_glXCopyContext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCopyContext</name></cpp:macro> <cpp:value>glad_glXCopyContext</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXSWAPBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSWAPBUFFERSPROC</name></type> <name>glad_glXSwapBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapBuffers</name></cpp:macro> <cpp:value>glad_glXSwapBuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXPixmap</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEGLXPIXMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XVisualInfo</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Pixmap</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEGLXPIXMAPPROC</name></type> <name>glad_glXCreateGLXPixmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPixmap</name></cpp:macro> <cpp:value>glad_glXCreateGLXPixmap</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYGLXPIXMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPixmap</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYGLXPIXMAPPROC</name></type> <name>glad_glXDestroyGLXPixmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyGLXPixmap</name></cpp:macro> <cpp:value>glad_glXDestroyGLXPixmap</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYEXTENSIONPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYEXTENSIONPROC</name></type> <name>glad_glXQueryExtension</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryExtension</name></cpp:macro> <cpp:value>glad_glXQueryExtension</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYVERSIONPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYVERSIONPROC</name></type> <name>glad_glXQueryVersion</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryVersion</name></cpp:macro> <cpp:value>glad_glXQueryVersion</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXISDIRECTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXISDIRECTPROC</name></type> <name>glad_glXIsDirect</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXIsDirect</name></cpp:macro> <cpp:value>glad_glXIsDirect</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETCONFIGPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XVisualInfo</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCONFIGPROC</name></type> <name>glad_glXGetConfig</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetConfig</name></cpp:macro> <cpp:value>glad_glXGetConfig</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETCURRENTCONTEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCURRENTCONTEXTPROC</name></type> <name>glad_glXGetCurrentContext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentContext</name></cpp:macro> <cpp:value>glad_glXGetCurrentContext</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXDrawable</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETCURRENTDRAWABLEPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCURRENTDRAWABLEPROC</name></type> <name>glad_glXGetCurrentDrawable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentDrawable</name></cpp:macro> <cpp:value>glad_glXGetCurrentDrawable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXWAITGLPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXWAITGLPROC</name></type> <name>glad_glXWaitGL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitGL</name></cpp:macro> <cpp:value>glad_glXWaitGL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXWAITXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXWAITXPROC</name></type> <name>glad_glXWaitX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitX</name></cpp:macro> <cpp:value>glad_glXWaitX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXUSEXFONTPROC</name>)<parameter_list>(<parameter><decl><type><name>Font</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXUSEXFONTPROC</name></type> <name>glad_glXUseXFont</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXUseXFont</name></cpp:macro> <cpp:value>glad_glXUseXFont</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_VERSION_1_1</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYEXTENSIONSSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYEXTENSIONSSTRINGPROC</name></type> <name>glad_glXQueryExtensionsString</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryExtensionsString</name></cpp:macro> <cpp:value>glad_glXQueryExtensionsString</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYSERVERSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYSERVERSTRINGPROC</name></type> <name>glad_glXQueryServerString</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryServerString</name></cpp:macro> <cpp:value>glad_glXQueryServerString</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETCLIENTSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCLIENTSTRINGPROC</name></type> <name>glad_glXGetClientString</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetClientString</name></cpp:macro> <cpp:value>glad_glXGetClientString</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_VERSION_1_2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Display</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETCURRENTDISPLAYPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCURRENTDISPLAYPROC</name></type> <name>glad_glXGetCurrentDisplay</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentDisplay</name></cpp:macro> <cpp:value>glad_glXGetCurrentDisplay</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_VERSION_1_3</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLXFBConfig</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETFBCONFIGSPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETFBCONFIGSPROC</name></type> <name>glad_glXGetFBConfigs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigs</name></cpp:macro> <cpp:value>glad_glXGetFBConfigs</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXFBConfig</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXCHOOSEFBCONFIGPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCHOOSEFBCONFIGPROC</name></type> <name>glad_glXChooseFBConfig</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChooseFBConfig</name></cpp:macro> <cpp:value>glad_glXChooseFBConfig</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETFBCONFIGATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETFBCONFIGATTRIBPROC</name></type> <name>glad_glXGetFBConfigAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigAttrib</name></cpp:macro> <cpp:value>glad_glXGetFBConfigAttrib</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>XVisualInfo</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETVISUALFROMFBCONFIGPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETVISUALFROMFBCONFIGPROC</name></type> <name>glad_glXGetVisualFromFBConfig</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVisualFromFBConfig</name></cpp:macro> <cpp:value>glad_glXGetVisualFromFBConfig</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXWindow</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEWINDOWPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><name>Window</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEWINDOWPROC</name></type> <name>glad_glXCreateWindow</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateWindow</name></cpp:macro> <cpp:value>glad_glXCreateWindow</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYWINDOWPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXWindow</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYWINDOWPROC</name></type> <name>glad_glXDestroyWindow</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyWindow</name></cpp:macro> <cpp:value>glad_glXDestroyWindow</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXPixmap</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEPIXMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><name>Pixmap</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEPIXMAPPROC</name></type> <name>glad_glXCreatePixmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreatePixmap</name></cpp:macro> <cpp:value>glad_glXCreatePixmap</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYPIXMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPixmap</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYPIXMAPPROC</name></type> <name>glad_glXDestroyPixmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyPixmap</name></cpp:macro> <cpp:value>glad_glXDestroyPixmap</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXPbuffer</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEPBUFFERPROC</name></type> <name>glad_glXCreatePbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreatePbuffer</name></cpp:macro> <cpp:value>glad_glXCreatePbuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPbuffer</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYPBUFFERPROC</name></type> <name>glad_glXDestroyPbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyPbuffer</name></cpp:macro> <cpp:value>glad_glXDestroyPbuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYDRAWABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYDRAWABLEPROC</name></type> <name>glad_glXQueryDrawable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryDrawable</name></cpp:macro> <cpp:value>glad_glXQueryDrawable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATENEWCONTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>Bool</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATENEWCONTEXTPROC</name></type> <name>glad_glXCreateNewContext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateNewContext</name></cpp:macro> <cpp:value>glad_glXCreateNewContext</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXMAKECONTEXTCURRENTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXMAKECONTEXTCURRENTPROC</name></type> <name>glad_glXMakeContextCurrent</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXMakeContextCurrent</name></cpp:macro> <cpp:value>glad_glXMakeContextCurrent</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXDrawable</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETCURRENTREADDRAWABLEPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCURRENTREADDRAWABLEPROC</name></type> <name>glad_glXGetCurrentReadDrawable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentReadDrawable</name></cpp:macro> <cpp:value>glad_glXGetCurrentReadDrawable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYCONTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYCONTEXTPROC</name></type> <name>glad_glXQueryContext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryContext</name></cpp:macro> <cpp:value>glad_glXQueryContext</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXSELECTEVENTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSELECTEVENTPROC</name></type> <name>glad_glXSelectEvent</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSelectEvent</name></cpp:macro> <cpp:value>glad_glXSelectEvent</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETSELECTEDEVENTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETSELECTEDEVENTPROC</name></type> <name>glad_glXGetSelectedEvent</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetSelectedEvent</name></cpp:macro> <cpp:value>glad_glXGetSelectedEvent</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_VERSION_1_4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>__GLXextFuncPtr</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETPROCADDRESSPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETPROCADDRESSPROC</name></type> <name>glad_glXGetProcAddress</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetProcAddress</name></cpp:macro> <cpp:value>glad_glXGetProcAddress</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB</name></cpp:macro> <cpp:value>0x20B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SHARE_CONTEXT_EXT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_ID_EXT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SCREEN_EXT</name></cpp:macro> <cpp:value>0x800C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_SAMPLES_NV</name></cpp:macro> <cpp:value>0x20B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS</name></cpp:macro> <cpp:value>0x8026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS</name></cpp:macro> <cpp:value>0x8027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BUFFER_CLOBBER_MASK_SGIX</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_LEFT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_RIGHT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_LEFT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_RIGHT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX_BUFFERS_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEPTH_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STENCIL_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OPTIMAL_PBUFFER_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x801A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PRESERVED_CONTENTS_SGIX</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LARGEST_PBUFFER_SGIX</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EVENT_MASK_SGIX</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DAMAGED_SGIX</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAVED_SGIX</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW_SGIX</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_SGIX</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_FLOAT_TYPE_ARB</name></cpp:macro> <cpp:value>0x20B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_FLOAT_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_HYPERPIPE_CONFIG_SGIX</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_HYPERPIPE_SGIX</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_DISPLAY_PIPE_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_RENDER_PIPE_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIPE_RECT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIPE_RECT_LIMITS_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_STEREO_SGIX</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_ID_SGIX</name></cpp:macro> <cpp:value>0x8030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_RESET_ISOLATION_BIT_ARB</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXCHANGE_COMPLETE_INTEL</name></cpp:macro> <cpp:value>0x8180</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COPY_COMPLETE_INTEL</name></cpp:macro> <cpp:value>0x8181</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FLIP_COMPLETE_INTEL</name></cpp:macro> <cpp:value>0x8182</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SYNC_FRAME_SGIX</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SYNC_SWAP_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ES2_PROFILE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT</name></cpp:macro> <cpp:value>0x20B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT</name></cpp:macro> <cpp:value>0x20B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_BUFFER_AGE_EXT</name></cpp:macro> <cpp:value>0x20F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_3DFX</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES_3DFX</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_VISUAL_TYPE_EXT</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_TYPE_EXT</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX_VALUE_EXT</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RED_VALUE_EXT</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_GREEN_VALUE_EXT</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_BLUE_VALUE_EXT</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_ALPHA_VALUE_EXT</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NONE_EXT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRUE_COLOR_EXT</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DIRECT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PSEUDO_COLOR_EXT</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_COLOR_EXT</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GRAY_SCALE_EXT</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_GRAY_EXT</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RGB_EXT</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_SGIS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES_SGIS</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_3DFX_WINDOW_MODE_MESA</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_3DFX_FULLSCREEN_MODE_MESA</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_1D_BIT_EXT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_2D_BIT_EXT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_RECTANGLE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_TEXTURE_RGB_EXT</name></cpp:macro> <cpp:value>0x20D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_TEXTURE_RGBA_EXT</name></cpp:macro> <cpp:value>0x20D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_MIPMAP_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x20D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_TEXTURE_TARGETS_EXT</name></cpp:macro> <cpp:value>0x20D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_Y_INVERTED_EXT</name></cpp:macro> <cpp:value>0x20D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_EXT</name></cpp:macro> <cpp:value>0x20D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_TARGET_EXT</name></cpp:macro> <cpp:value>0x20D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MIPMAP_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x20D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_NONE_EXT</name></cpp:macro> <cpp:value>0x20D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_RGB_EXT</name></cpp:macro> <cpp:value>0x20D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_RGBA_EXT</name></cpp:macro> <cpp:value>0x20DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_1D_EXT</name></cpp:macro> <cpp:value>0x20DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_2D_EXT</name></cpp:macro> <cpp:value>0x20DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_RECTANGLE_EXT</name></cpp:macro> <cpp:value>0x20DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_LEFT_EXT</name></cpp:macro> <cpp:value>0x20DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_RIGHT_EXT</name></cpp:macro> <cpp:value>0x20DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_LEFT_EXT</name></cpp:macro> <cpp:value>0x20E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_RIGHT_EXT</name></cpp:macro> <cpp:value>0x20E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_EXT</name></cpp:macro> <cpp:value>0x20DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_EXT</name></cpp:macro> <cpp:value>0x20E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX0_EXT</name></cpp:macro> <cpp:value>0x20E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX1_EXT</name></cpp:macro> <cpp:value>0x20E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX2_EXT</name></cpp:macro> <cpp:value>0x20E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX3_EXT</name></cpp:macro> <cpp:value>0x20E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX4_EXT</name></cpp:macro> <cpp:value>0x20E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX5_EXT</name></cpp:macro> <cpp:value>0x20E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX6_EXT</name></cpp:macro> <cpp:value>0x20E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX7_EXT</name></cpp:macro> <cpp:value>0x20E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX8_EXT</name></cpp:macro> <cpp:value>0x20EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX9_EXT</name></cpp:macro> <cpp:value>0x20EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEVICE_ID_NV</name></cpp:macro> <cpp:value>0x20CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_UNIQUE_ID_NV</name></cpp:macro> <cpp:value>0x20CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NUM_VIDEO_CAPTURE_SLOTS_NV</name></cpp:macro> <cpp:value>0x20CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES_ARB</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_INTERVAL_EXT</name></cpp:macro> <cpp:value>0x20F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_SWAP_INTERVAL_EXT</name></cpp:macro> <cpp:value>0x20F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_VENDOR_ID_MESA</name></cpp:macro> <cpp:value>0x8183</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_DEVICE_ID_MESA</name></cpp:macro> <cpp:value>0x8184</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_VERSION_MESA</name></cpp:macro> <cpp:value>0x8185</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_ACCELERATED_MESA</name></cpp:macro> <cpp:value>0x8186</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_VIDEO_MEMORY_MESA</name></cpp:macro> <cpp:value>0x8187</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA</name></cpp:macro> <cpp:value>0x8188</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_PREFERRED_PROFILE_MESA</name></cpp:macro> <cpp:value>0x8189</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA</name></cpp:macro> <cpp:value>0x818A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA</name></cpp:macro> <cpp:value>0x818B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA</name></cpp:macro> <cpp:value>0x818C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA</name></cpp:macro> <cpp:value>0x818D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDERER_ID_MESA</name></cpp:macro> <cpp:value>0x818E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_DEBUG_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_MAJOR_VERSION_ARB</name></cpp:macro> <cpp:value>0x2091</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_MINOR_VERSION_ARB</name></cpp:macro> <cpp:value>0x2092</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_FLAGS_ARB</name></cpp:macro> <cpp:value>0x2094</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ES_PROFILE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIXMAP_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DRAWABLE_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDER_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_RENDERABLE_SGIX</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FBCONFIG_ID_SGIX</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_SELECT_GROUP_SGIX</name></cpp:macro> <cpp:value>0x8028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_COLOR_NV</name></cpp:macro> <cpp:value>0x20C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_ALPHA_NV</name></cpp:macro> <cpp:value>0x20C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV</name></cpp:macro> <cpp:value>0x20C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_FRAME_NV</name></cpp:macro> <cpp:value>0x20C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_FIELD_1_NV</name></cpp:macro> <cpp:value>0x20C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_FIELD_2_NV</name></cpp:macro> <cpp:value>0x20CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV</name></cpp:macro> <cpp:value>0x20CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV</name></cpp:macro> <cpp:value>0x20CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BLENDED_RGBA_SGIS</name></cpp:macro> <cpp:value>0x8025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DIGITAL_MEDIA_PBUFFER_SGIX</name></cpp:macro> <cpp:value>0x8024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LOSE_CONTEXT_ON_RESET_ARB</name></cpp:macro> <cpp:value>0x8252</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB</name></cpp:macro> <cpp:value>0x8256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NO_RESET_NOTIFICATION_ARB</name></cpp:macro> <cpp:value>0x8261</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LATE_SWAPS_TEAR_EXT</name></cpp:macro> <cpp:value>0x20F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_CAVEAT_EXT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SLOW_VISUAL_EXT</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NON_CONFORMANT_VISUAL_EXT</name></cpp:macro> <cpp:value>0x800D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FLOAT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x20B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_METHOD_OML</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_EXCHANGE_OML</name></cpp:macro> <cpp:value>0x8061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_COPY_OML</name></cpp:macro> <cpp:value>0x8062</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_UNDEFINED_OML</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NUM_VIDEO_SLOTS_NV</name></cpp:macro> <cpp:value>0x20F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_VENDOR_AMD</name></cpp:macro> <cpp:value>0x1F00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_RENDERER_STRING_AMD</name></cpp:macro> <cpp:value>0x1F01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_OPENGL_VERSION_STRING_AMD</name></cpp:macro> <cpp:value>0x1F02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_FASTEST_TARGET_GPUS_AMD</name></cpp:macro> <cpp:value>0x21A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_RAM_AMD</name></cpp:macro> <cpp:value>0x21A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_CLOCK_AMD</name></cpp:macro> <cpp:value>0x21A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_NUM_PIPES_AMD</name></cpp:macro> <cpp:value>0x21A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_NUM_SIMD_AMD</name></cpp:macro> <cpp:value>0x21A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_NUM_RB_AMD</name></cpp:macro> <cpp:value>0x21A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GPU_NUM_SPI_AMD</name></cpp:macro> <cpp:value>0x21A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_CORE_PROFILE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_PROFILE_MASK_ARB</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB</name></cpp:macro> <cpp:value>0x2095</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_import_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_import_context</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_import_context</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Display</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETCURRENTDISPLAYEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCURRENTDISPLAYEXTPROC</name></type> <name>glad_glXGetCurrentDisplayEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentDisplayEXT</name></cpp:macro> <cpp:value>glad_glXGetCurrentDisplayEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYCONTEXTINFOEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYCONTEXTINFOEXTPROC</name></type> <name>glad_glXQueryContextInfoEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryContextInfoEXT</name></cpp:macro> <cpp:value>glad_glXQueryContextInfoEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXContextID</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETCONTEXTIDEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCONTEXTIDEXTPROC</name></type> <name>glad_glXGetContextIDEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetContextIDEXT</name></cpp:macro> <cpp:value>glad_glXGetContextIDEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<name>APIENTRYP</name> <name>PFNGLXIMPORTCONTEXTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContextID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXIMPORTCONTEXTEXTPROC</name></type> <name>glad_glXImportContextEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXImportContextEXT</name></cpp:macro> <cpp:value>glad_glXImportContextEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXFREECONTEXTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXFREECONTEXTEXTPROC</name></type> <name>glad_glXFreeContextEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXFreeContextEXT</name></cpp:macro> <cpp:value>glad_glXFreeContextEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_multisample_coverage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_multisample_coverage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_multisample_coverage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIS_shared_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIS_shared_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIS_shared_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_pbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_pbuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_pbuffer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLXPbufferSGIX</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEGLXPBUFFERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfigSGIX</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEGLXPBUFFERSGIXPROC</name></type> <name>glad_glXCreateGLXPbufferSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPbufferSGIX</name></cpp:macro> <cpp:value>glad_glXCreateGLXPbufferSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYGLXPBUFFERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPbufferSGIX</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYGLXPBUFFERSGIXPROC</name></type> <name>glad_glXDestroyGLXPbufferSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyGLXPbufferSGIX</name></cpp:macro> <cpp:value>glad_glXDestroyGLXPbufferSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYGLXPBUFFERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPbufferSGIX</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYGLXPBUFFERSGIXPROC</name></type> <name>glad_glXQueryGLXPbufferSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryGLXPbufferSGIX</name></cpp:macro> <cpp:value>glad_glXQueryGLXPbufferSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXSELECTEVENTSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSELECTEVENTSGIXPROC</name></type> <name>glad_glXSelectEventSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSelectEventSGIX</name></cpp:macro> <cpp:value>glad_glXSelectEventSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETSELECTEDEVENTSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETSELECTEDEVENTSGIXPROC</name></type> <name>glad_glXGetSelectedEventSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetSelectedEventSGIX</name></cpp:macro> <cpp:value>glad_glXGetSelectedEventSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_swap_group</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_swap_group</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXJOINSWAPGROUPNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXJOINSWAPGROUPNVPROC</name></type> <name>glad_glXJoinSwapGroupNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXJoinSwapGroupNV</name></cpp:macro> <cpp:value>glad_glXJoinSwapGroupNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDSWAPBARRIERNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDSWAPBARRIERNVPROC</name></type> <name>glad_glXBindSwapBarrierNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindSwapBarrierNV</name></cpp:macro> <cpp:value>glad_glXBindSwapBarrierNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYSWAPGROUPNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYSWAPGROUPNVPROC</name></type> <name>glad_glXQuerySwapGroupNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQuerySwapGroupNV</name></cpp:macro> <cpp:value>glad_glXQuerySwapGroupNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYMAXSWAPGROUPSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYMAXSWAPGROUPSNVPROC</name></type> <name>glad_glXQueryMaxSwapGroupsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryMaxSwapGroupsNV</name></cpp:macro> <cpp:value>glad_glXQueryMaxSwapGroupsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYFRAMECOUNTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYFRAMECOUNTNVPROC</name></type> <name>glad_glXQueryFrameCountNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryFrameCountNV</name></cpp:macro> <cpp:value>glad_glXQueryFrameCountNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXRESETFRAMECOUNTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXRESETFRAMECOUNTNVPROC</name></type> <name>glad_glXResetFrameCountNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXResetFrameCountNV</name></cpp:macro> <cpp:value>glad_glXResetFrameCountNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_fbconfig_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_fbconfig_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_fbconfig_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_hyperpipe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_hyperpipe</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_hyperpipe</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLXHyperpipeNetworkSGIX</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYHYPERPIPENETWORKSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYHYPERPIPENETWORKSGIXPROC</name></type> <name>glad_glXQueryHyperpipeNetworkSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeNetworkSGIX</name></cpp:macro> <cpp:value>glad_glXQueryHyperpipeNetworkSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXHYPERPIPECONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLXHyperpipeConfigSGIX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXHYPERPIPECONFIGSGIXPROC</name></type> <name>glad_glXHyperpipeConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXHyperpipeConfigSGIX</name></cpp:macro> <cpp:value>glad_glXHyperpipeConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXHyperpipeConfigSGIX</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYHYPERPIPECONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYHYPERPIPECONFIGSGIXPROC</name></type> <name>glad_glXQueryHyperpipeConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeConfigSGIX</name></cpp:macro> <cpp:value>glad_glXQueryHyperpipeConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC</name></type> <name>glad_glXDestroyHyperpipeConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyHyperpipeConfigSGIX</name></cpp:macro> <cpp:value>glad_glXDestroyHyperpipeConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDHYPERPIPESGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDHYPERPIPESGIXPROC</name></type> <name>glad_glXBindHyperpipeSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindHyperpipeSGIX</name></cpp:macro> <cpp:value>glad_glXBindHyperpipeSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC</name></type> <name>glad_glXQueryHyperpipeBestAttribSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeBestAttribSGIX</name></cpp:macro> <cpp:value>glad_glXQueryHyperpipeBestAttribSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXHYPERPIPEATTRIBSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXHYPERPIPEATTRIBSGIXPROC</name></type> <name>glad_glXHyperpipeAttribSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXHyperpipeAttribSGIX</name></cpp:macro> <cpp:value>glad_glXHyperpipeAttribSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC</name></type> <name>glad_glXQueryHyperpipeAttribSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeAttribSGIX</name></cpp:macro> <cpp:value>glad_glXQueryHyperpipeAttribSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_robustness_share_group_isolation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_robustness_share_group_isolation</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_robustness_share_group_isolation</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_INTEL_swap_event</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_INTEL_swap_event</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_INTEL_swap_event</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_video_resize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_video_resize</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_video_resize</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDCHANNELTOWINDOWSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>Window</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDCHANNELTOWINDOWSGIXPROC</name></type> <name>glad_glXBindChannelToWindowSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindChannelToWindowSGIX</name></cpp:macro> <cpp:value>glad_glXBindChannelToWindowSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXCHANNELRECTSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCHANNELRECTSGIXPROC</name></type> <name>glad_glXChannelRectSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChannelRectSGIX</name></cpp:macro> <cpp:value>glad_glXChannelRectSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYCHANNELRECTSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYCHANNELRECTSGIXPROC</name></type> <name>glad_glXQueryChannelRectSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryChannelRectSGIX</name></cpp:macro> <cpp:value>glad_glXQueryChannelRectSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYCHANNELDELTASSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYCHANNELDELTASSGIXPROC</name></type> <name>glad_glXQueryChannelDeltasSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryChannelDeltasSGIX</name></cpp:macro> <cpp:value>glad_glXQueryChannelDeltasSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXCHANNELRECTSYNCSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCHANNELRECTSYNCSGIXPROC</name></type> <name>glad_glXChannelRectSyncSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChannelRectSyncSGIX</name></cpp:macro> <cpp:value>glad_glXChannelRectSyncSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_create_context_es2_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_create_context_es2_profile</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_create_context_es2_profile</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_robustness_application_isolation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_robustness_application_isolation</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_robustness_application_isolation</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_copy_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_copy_image</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXCOPYIMAGESUBDATANVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCOPYIMAGESUBDATANVPROC</name></type> <name>glad_glXCopyImageSubDataNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCopyImageSubDataNV</name></cpp:macro> <cpp:value>glad_glXCopyImageSubDataNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_OML_sync_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OML_sync_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_OML_sync_control</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETSYNCVALUESOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETSYNCVALUESOMLPROC</name></type> <name>glad_glXGetSyncValuesOML</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetSyncValuesOML</name></cpp:macro> <cpp:value>glad_glXGetSyncValuesOML</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETMSCRATEOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETMSCRATEOMLPROC</name></type> <name>glad_glXGetMscRateOML</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetMscRateOML</name></cpp:macro> <cpp:value>glad_glXGetMscRateOML</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int64_t</name></type> (<name>APIENTRYP</name> <name>PFNGLXSWAPBUFFERSMSCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSWAPBUFFERSMSCOMLPROC</name></type> <name>glad_glXSwapBuffersMscOML</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapBuffersMscOML</name></cpp:macro> <cpp:value>glad_glXSwapBuffersMscOML</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXWAITFORMSCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXWAITFORMSCOMLPROC</name></type> <name>glad_glXWaitForMscOML</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitForMscOML</name></cpp:macro> <cpp:value>glad_glXWaitForMscOML</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXWAITFORSBCOMLPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXWAITFORSBCOMLPROC</name></type> <name>glad_glXWaitForSbcOML</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitForSbcOML</name></cpp:macro> <cpp:value>glad_glXWaitForSbcOML</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_make_current_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_make_current_read</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGI_make_current_read</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXMAKECURRENTREADSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXMAKECURRENTREADSGIPROC</name></type> <name>glad_glXMakeCurrentReadSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXMakeCurrentReadSGI</name></cpp:macro> <cpp:value>glad_glXMakeCurrentReadSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXDrawable</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETCURRENTREADDRAWABLESGIPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETCURRENTREADDRAWABLESGIPROC</name></type> <name>glad_glXGetCurrentReadDrawableSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentReadDrawableSGI</name></cpp:macro> <cpp:value>glad_glXGetCurrentReadDrawableSGI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_swap_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_swap_control</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXSWAPINTERVALMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSWAPINTERVALMESAPROC</name></type> <name>glad_glXSwapIntervalMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapIntervalMESA</name></cpp:macro> <cpp:value>glad_glXSwapIntervalMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_swap_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGI_swap_control</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXSWAPINTERVALSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSWAPINTERVALSGIPROC</name></type> <name>glad_glXSwapIntervalSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapIntervalSGI</name></cpp:macro> <cpp:value>glad_glXSwapIntervalSGI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_fbconfig_packed_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_fbconfig_packed_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_fbconfig_packed_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_buffer_age</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_buffer_age</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_buffer_age</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_3DFX_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_3DFX_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_3DFX_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_visual_info</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_visual_info</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_visual_info</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_video_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_video_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGI_video_sync</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETVIDEOSYNCSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETVIDEOSYNCSGIPROC</name></type> <name>glad_glXGetVideoSyncSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVideoSyncSGI</name></cpp:macro> <cpp:value>glad_glXGetVideoSyncSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXWAITVIDEOSYNCSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXWAITVIDEOSYNCSGIPROC</name></type> <name>glad_glXWaitVideoSyncSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitVideoSyncSGI</name></cpp:macro> <cpp:value>glad_glXWaitVideoSyncSGI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_agp_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_agp_offset</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_agp_offset</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETAGPOFFSETMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETAGPOFFSETMESAPROC</name></type> <name>glad_glXGetAGPOffsetMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetAGPOffsetMESA</name></cpp:macro> <cpp:value>glad_glXGetAGPOffsetMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIS_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIS_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIS_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_set_3dfx_mode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_set_3dfx_mode</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_set_3dfx_mode</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXSET3DFXMODEMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSET3DFXMODEMESAPROC</name></type> <name>glad_glXSet3DfxModeMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSet3DfxModeMESA</name></cpp:macro> <cpp:value>glad_glXSet3DfxModeMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_texture_from_pixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_texture_from_pixmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_texture_from_pixmap</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDTEXIMAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDTEXIMAGEEXTPROC</name></type> <name>glad_glXBindTexImageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindTexImageEXT</name></cpp:macro> <cpp:value>glad_glXBindTexImageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXRELEASETEXIMAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXRELEASETEXIMAGEEXTPROC</name></type> <name>glad_glXReleaseTexImageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseTexImageEXT</name></cpp:macro> <cpp:value>glad_glXReleaseTexImageEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_video_capture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_video_capture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>GLXVideoCaptureDeviceNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXBindVideoCaptureDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_glXBindVideoCaptureDeviceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXVideoCaptureDeviceNV</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC</name></type> <name>glad_glXEnumerateVideoCaptureDevicesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXEnumerateVideoCaptureDevicesNV</name></cpp:macro> <cpp:value>glad_glXEnumerateVideoCaptureDevicesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXVideoCaptureDeviceNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXLockVideoCaptureDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXLockVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_glXLockVideoCaptureDeviceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXVideoCaptureDeviceNV</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXQueryVideoCaptureDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_glXQueryVideoCaptureDeviceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXVideoCaptureDeviceNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC</name></type> <name>glad_glXReleaseVideoCaptureDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>glad_glXReleaseVideoCaptureDeviceNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_delay_before_swap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_delay_before_swap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_delay_before_swap</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXDELAYBEFORESWAPNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDELAYBEFORESWAPNVPROC</name></type> <name>glad_glXDelayBeforeSwapNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDelayBeforeSwapNV</name></cpp:macro> <cpp:value>glad_glXDelayBeforeSwapNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_swap_group</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_swap_group</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXJOINSWAPGROUPSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXJOINSWAPGROUPSGIXPROC</name></type> <name>glad_glXJoinSwapGroupSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXJoinSwapGroupSGIX</name></cpp:macro> <cpp:value>glad_glXJoinSwapGroupSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_swap_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_swap_control</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXSWAPINTERVALEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSWAPINTERVALEXTPROC</name></type> <name>glad_glXSwapIntervalEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapIntervalEXT</name></cpp:macro> <cpp:value>glad_glXSwapIntervalEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_video_source</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_video_source</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_video_source</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_VL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>GLXVideoSourceSGIX</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEGLXVIDEOSOURCESGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VLServer</name></type></decl></parameter>, <parameter><decl><type><name>VLPath</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VLNode</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEGLXVIDEOSOURCESGIXPROC</name></type> <name>glad_glXCreateGLXVideoSourceSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXVideoSourceSGIX</name></cpp:macro> <cpp:value>glad_glXCreateGLXVideoSourceSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXVideoSourceSGIX</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC</name></type> <name>glad_glXDestroyGLXVideoSourceSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyGLXVideoSourceSGIX</name></cpp:macro> <cpp:value>glad_glXDestroyGLXVideoSourceSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_query_renderer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_query_renderer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_query_renderer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC</name></type> <name>glad_glXQueryCurrentRendererIntegerMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryCurrentRendererIntegerMESA</name></cpp:macro> <cpp:value>glad_glXQueryCurrentRendererIntegerMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC</name></type> <name>glad_glXQueryCurrentRendererStringMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryCurrentRendererStringMESA</name></cpp:macro> <cpp:value>glad_glXQueryCurrentRendererStringMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYRENDERERINTEGERMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYRENDERERINTEGERMESAPROC</name></type> <name>glad_glXQueryRendererIntegerMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryRendererIntegerMESA</name></cpp:macro> <cpp:value>glad_glXQueryRendererIntegerMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYRENDERERSTRINGMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYRENDERERSTRINGMESAPROC</name></type> <name>glad_glXQueryRendererStringMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryRendererStringMESA</name></cpp:macro> <cpp:value>glad_glXQueryRendererStringMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_create_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_create_context</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_create_context</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATECONTEXTATTRIBSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>Bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATECONTEXTATTRIBSARBPROC</name></type> <name>glad_glXCreateContextAttribsARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateContextAttribsARB</name></cpp:macro> <cpp:value>glad_glXCreateContextAttribsARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_create_context_es_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_create_context_es_profile</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_create_context_es_profile</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_fbconfig</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_fbconfig</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_fbconfig</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETFBCONFIGATTRIBSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfigSGIX</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETFBCONFIGATTRIBSGIXPROC</name></type> <name>glad_glXGetFBConfigAttribSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigAttribSGIX</name></cpp:macro> <cpp:value>glad_glXGetFBConfigAttribSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXFBConfigSGIX</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXCHOOSEFBCONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCHOOSEFBCONFIGSGIXPROC</name></type> <name>glad_glXChooseFBConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChooseFBConfigSGIX</name></cpp:macro> <cpp:value>glad_glXChooseFBConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXPixmap</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfigSGIX</name></type></decl></parameter>, <parameter><decl><type><name>Pixmap</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC</name></type> <name>glad_glXCreateGLXPixmapWithConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPixmapWithConfigSGIX</name></cpp:macro> <cpp:value>glad_glXCreateGLXPixmapWithConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfigSGIX</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>Bool</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC</name></type> <name>glad_glXCreateContextWithConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateContextWithConfigSGIX</name></cpp:macro> <cpp:value>glad_glXCreateContextWithConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>XVisualInfo</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXGETVISUALFROMFBCONFIGSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfigSGIX</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETVISUALFROMFBCONFIGSGIXPROC</name></type> <name>glad_glXGetVisualFromFBConfigSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVisualFromFBConfigSGIX</name></cpp:macro> <cpp:value>glad_glXGetVisualFromFBConfigSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLXFBConfigSGIX</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETFBCONFIGFROMVISUALSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XVisualInfo</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETFBCONFIGFROMVISUALSGIXPROC</name></type> <name>glad_glXGetFBConfigFromVisualSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigFromVisualSGIX</name></cpp:macro> <cpp:value>glad_glXGetFBConfigFromVisualSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_pixmap_colormap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_pixmap_colormap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_pixmap_colormap</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLXPixmap</name></type> (<name>APIENTRYP</name> <name>PFNGLXCREATEGLXPIXMAPMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XVisualInfo</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Pixmap</name></type></decl></parameter>, <parameter><decl><type><name>Colormap</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCREATEGLXPIXMAPMESAPROC</name></type> <name>glad_glXCreateGLXPixmapMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPixmapMESA</name></cpp:macro> <cpp:value>glad_glXCreateGLXPixmapMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_visual_select_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_visual_select_group</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_visual_select_group</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_video_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_video_output</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_video_output</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETVIDEODEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLXVideoDeviceNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETVIDEODEVICENVPROC</name></type> <name>glad_glXGetVideoDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVideoDeviceNV</name></cpp:macro> <cpp:value>glad_glXGetVideoDeviceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXRELEASEVIDEODEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLXVideoDeviceNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXRELEASEVIDEODEVICENVPROC</name></type> <name>glad_glXReleaseVideoDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseVideoDeviceNV</name></cpp:macro> <cpp:value>glad_glXReleaseVideoDeviceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDVIDEOIMAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXVideoDeviceNV</name></type></decl></parameter>, <parameter><decl><type><name>GLXPbuffer</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDVIDEOIMAGENVPROC</name></type> <name>glad_glXBindVideoImageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindVideoImageNV</name></cpp:macro> <cpp:value>glad_glXBindVideoImageNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXRELEASEVIDEOIMAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPbuffer</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXRELEASEVIDEOIMAGENVPROC</name></type> <name>glad_glXReleaseVideoImageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseVideoImageNV</name></cpp:macro> <cpp:value>glad_glXReleaseVideoImageNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXSENDPBUFFERTOVIDEONVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPbuffer</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXSENDPBUFFERTOVIDEONVPROC</name></type> <name>glad_glXSendPbufferToVideoNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSendPbufferToVideoNV</name></cpp:macro> <cpp:value>glad_glXSendPbufferToVideoNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETVIDEOINFONVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>GLXVideoDeviceNV</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETVIDEOINFONVPROC</name></type> <name>glad_glXGetVideoInfoNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVideoInfoNV</name></cpp:macro> <cpp:value>glad_glXGetVideoInfoNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIS_blended_overlay</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIS_blended_overlay</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIS_blended_overlay</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_dmbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_dmbuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_dmbuffer</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DM_BUFFER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXASSOCIATEDMPBUFFERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXPbufferSGIX</name></type></decl></parameter>, <parameter><decl><type><name>DMparams</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DMbuffer</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXASSOCIATEDMPBUFFERSGIXPROC</name></type> <name>glad_glXAssociateDMPbufferSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXAssociateDMPbufferSGIX</name></cpp:macro> <cpp:value>glad_glXAssociateDMPbufferSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_create_context_robustness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_create_context_robustness</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_create_context_robustness</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_swap_barrier</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_swap_barrier</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGIX_swap_barrier</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDSWAPBARRIERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDSWAPBARRIERSGIXPROC</name></type> <name>glad_glXBindSwapBarrierSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindSwapBarrierSGIX</name></cpp:macro> <cpp:value>glad_glXBindSwapBarrierSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC</name></type> <name>glad_glXQueryMaxSwapBarriersSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryMaxSwapBarriersSGIX</name></cpp:macro> <cpp:value>glad_glXQueryMaxSwapBarriersSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_swap_control_tear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_swap_control_tear</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_swap_control_tear</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_release_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_release_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_release_buffers</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Bool</name></type> (<name>APIENTRYP</name> <name>PFNGLXRELEASEBUFFERSMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXRELEASEBUFFERSMESAPROC</name></type> <name>glad_glXReleaseBuffersMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseBuffersMESA</name></cpp:macro> <cpp:value>glad_glXReleaseBuffersMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_visual_rating</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_visual_rating</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_EXT_visual_rating</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_copy_sub_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_copy_sub_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_MESA_copy_sub_buffer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXCOPYSUBBUFFERMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXDrawable</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCOPYSUBBUFFERMESAPROC</name></type> <name>glad_glXCopySubBufferMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCopySubBufferMESA</name></cpp:macro> <cpp:value>glad_glXCopySubBufferMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_cushion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_cushion</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SGI_cushion</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLXCUSHIONSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Window</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXCUSHIONSGIPROC</name></type> <name>glad_glXCushionSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCushionSGI</name></cpp:macro> <cpp:value>glad_glXCushionSGI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_float_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_float_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_float_buffer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_OML_swap_method</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OML_swap_method</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_OML_swap_method</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_present_video</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_present_video</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_NV_present_video</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLXENUMERATEVIDEODEVICESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXENUMERATEVIDEODEVICESNVPROC</name></type> <name>glad_glXEnumerateVideoDevicesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXEnumerateVideoDevicesNV</name></cpp:macro> <cpp:value>glad_glXEnumerateVideoDevicesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>APIENTRYP</name> <name>PFNGLXBINDVIDEODEVICENVPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXBINDVIDEODEVICENVPROC</name></type> <name>glad_glXBindVideoDeviceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindVideoDeviceNV</name></cpp:macro> <cpp:value>glad_glXBindVideoDeviceNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SUN_get_transparent_index</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SUN_get_transparent_index</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_SUN_get_transparent_index</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>Status</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETTRANSPARENTINDEXSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Window</name></type></decl></parameter>, <parameter><decl><type><name>Window</name></type></decl></parameter>, <parameter><decl><type><name>long</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETTRANSPARENTINDEXSUNPROC</name></type> <name>glad_glXGetTransparentIndexSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetTransparentIndexSUN</name></cpp:macro> <cpp:value>glad_glXGetTransparentIndexSUN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_AMD_gpu_association</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AMD_gpu_association</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_AMD_gpu_association</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_create_context_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_create_context_profile</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_create_context_profile</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_get_proc_address</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_get_proc_address</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_get_proc_address</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>__GLXextFuncPtr</name></type> (<name>APIENTRYP</name> <name>PFNGLXGETPROCADDRESSARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLXGETPROCADDRESSARBPROC</name></type> <name>glad_glXGetProcAddressARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetProcAddressARB</name></cpp:macro> <cpp:value>glad_glXGetProcAddressARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_vertex_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_vertex_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GLX_ARB_vertex_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
