<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\glad\include\glad\glad.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__glad_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__gl_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> OpenGL header already included, remove this include, glad already provides it</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glad_h_</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gl_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRYP</name></cpp:macro> <cpp:value>APIENTRY *</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>extern</specifier> struct <name>gladGLversionStruct</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>

}</block> <decl><name>GLVersion</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>GLADloadproc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_GLAPI_EXPORT</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllexport)) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllimport)) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllimport) extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default"))) extern</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>GLAPI</name> <name>int</name></type> <name>gladLoadGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLAPI</name> <name>void</name></type> <name>gladLoadGLLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;KHR/khrplatform.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLEXT_64_TYPES_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLEXT_64_TYPES_DEFINED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__digital__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__VMS</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__USLC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXOS2__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SOL64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name>long</name> <name>int</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name>__int32</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>__int64</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLenum</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLboolean</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLbitfield</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>GLvoid</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>GLbyte</name>;</typedef>

<typedef>typedef <type><name>short</name></type> <name>GLshort</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>GLint</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>GLclampx</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLubyte</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLushort</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLuint</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>GLsizei</name>;</typedef>

<typedef>typedef <type><name>float</name></type> <name>GLfloat</name>;</typedef>

<typedef>typedef <type><name>float</name></type> <name>GLclampf</name>;</typedef>

<typedef>typedef <type><name>double</name></type> <name>GLdouble</name>;</typedef>

<typedef>typedef <type><name>double</name></type> <name>GLclampd</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLeglImageOES</name>;</typedef>

<typedef>typedef <type><name>char</name></type> <name>GLchar</name>;</typedef>

<typedef>typedef <type><name>char</name></type> <name>GLcharARB</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLhandleARB</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLhandleARB</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalfARB</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalf</name>;</typedef>

<typedef>typedef <type><name>GLint</name></type> <name>GLfixed</name>;</typedef>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLintptr</name>;</typedef>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLsizeiptr</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>GLint64</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64</name>;</typedef>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLintptrARB</name>;</typedef>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLsizeiptrARB</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>GLint64EXT</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64EXT</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>

<struct_decl>struct <name>_cl_context</name>;</struct_decl>

<struct_decl>struct <name>_cl_event</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROCARB</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROCKHR</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROCAMD</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>category</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalfNV</name>;</typedef>

<typedef>typedef <type><name>GLintptr</name></type> <name>GLvdpauSurfaceNV</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINTS</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_LOOP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_FAN</name></cpp:macro> <cpp:value>0x0006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEVER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LESS</name></cpp:macro> <cpp:value>0x0201</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUAL</name></cpp:macro> <cpp:value>0x0202</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEQUAL</name></cpp:macro> <cpp:value>0x0203</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREATER</name></cpp:macro> <cpp:value>0x0204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOTEQUAL</name></cpp:macro> <cpp:value>0x0205</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEQUAL</name></cpp:macro> <cpp:value>0x0206</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS</name></cpp:macro> <cpp:value>0x0207</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_COLOR</name></cpp:macro> <cpp:value>0x0300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_COLOR</name></cpp:macro> <cpp:value>0x0301</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0302</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0303</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_ALPHA</name></cpp:macro> <cpp:value>0x0304</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_ALPHA</name></cpp:macro> <cpp:value>0x0305</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_COLOR</name></cpp:macro> <cpp:value>0x0306</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_COLOR</name></cpp:macro> <cpp:value>0x0307</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA_SATURATE</name></cpp:macro> <cpp:value>0x0308</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_LEFT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_RIGHT</name></cpp:macro> <cpp:value>0x0401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_LEFT</name></cpp:macro> <cpp:value>0x0402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_RIGHT</name></cpp:macro> <cpp:value>0x0403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT</name></cpp:macro> <cpp:value>0x0404</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK</name></cpp:macro> <cpp:value>0x0405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEFT</name></cpp:macro> <cpp:value>0x0406</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RIGHT</name></cpp:macro> <cpp:value>0x0407</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_AND_BACK</name></cpp:macro> <cpp:value>0x0408</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_ENUM</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_VALUE</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_OPERATION</name></cpp:macro> <cpp:value>0x0502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUT_OF_MEMORY</name></cpp:macro> <cpp:value>0x0505</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CW</name></cpp:macro> <cpp:value>0x0900</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CCW</name></cpp:macro> <cpp:value>0x0901</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE</name></cpp:macro> <cpp:value>0x0B11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_SMOOTH</name></cpp:macro> <cpp:value>0x0B20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH</name></cpp:macro> <cpp:value>0x0B21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_MODE</name></cpp:macro> <cpp:value>0x0B40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_SMOOTH</name></cpp:macro> <cpp:value>0x0B41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE</name></cpp:macro> <cpp:value>0x0B44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE_MODE</name></cpp:macro> <cpp:value>0x0B45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_FACE</name></cpp:macro> <cpp:value>0x0B46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_RANGE</name></cpp:macro> <cpp:value>0x0B70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEST</name></cpp:macro> <cpp:value>0x0B71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_WRITEMASK</name></cpp:macro> <cpp:value>0x0B72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_FUNC</name></cpp:macro> <cpp:value>0x0B74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TEST</name></cpp:macro> <cpp:value>0x0B90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FUNC</name></cpp:macro> <cpp:value>0x0B92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_VALUE_MASK</name></cpp:macro> <cpp:value>0x0B93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FAIL</name></cpp:macro> <cpp:value>0x0B94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x0B95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x0B96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_REF</name></cpp:macro> <cpp:value>0x0B97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_WRITEMASK</name></cpp:macro> <cpp:value>0x0B98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT</name></cpp:macro> <cpp:value>0x0BA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DITHER</name></cpp:macro> <cpp:value>0x0BD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST</name></cpp:macro> <cpp:value>0x0BE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC</name></cpp:macro> <cpp:value>0x0BE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND</name></cpp:macro> <cpp:value>0x0BE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOGIC_OP_MODE</name></cpp:macro> <cpp:value>0x0BF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_LOGIC_OP</name></cpp:macro> <cpp:value>0x0BF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x0C01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_BUFFER</name></cpp:macro> <cpp:value>0x0C02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_BOX</name></cpp:macro> <cpp:value>0x0C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_TEST</name></cpp:macro> <cpp:value>0x0C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0C22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_WRITEMASK</name></cpp:macro> <cpp:value>0x0C23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLEBUFFER</name></cpp:macro> <cpp:value>0x0C32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STEREO</name></cpp:macro> <cpp:value>0x0C33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SWAP_BYTES</name></cpp:macro> <cpp:value>0x0CF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_LSB_FIRST</name></cpp:macro> <cpp:value>0x0CF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0CF3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0CF4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0CF5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SWAP_BYTES</name></cpp:macro> <cpp:value>0x0D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_LSB_FIRST</name></cpp:macro> <cpp:value>0x0D01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0D02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0D03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0D04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0D05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x0D33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VIEWPORT_DIMS</name></cpp:macro> <cpp:value>0x0D3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBPIXEL_BITS</name></cpp:macro> <cpp:value>0x0D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D</name></cpp:macro> <cpp:value>0x0DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D</name></cpp:macro> <cpp:value>0x0DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_UNITS</name></cpp:macro> <cpp:value>0x2A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_POINT</name></cpp:macro> <cpp:value>0x2A01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_LINE</name></cpp:macro> <cpp:value>0x2A02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FILL</name></cpp:macro> <cpp:value>0x8037</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FACTOR</name></cpp:macro> <cpp:value>0x8038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D</name></cpp:macro> <cpp:value>0x8068</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D</name></cpp:macro> <cpp:value>0x8069</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WIDTH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_HEIGHT</name></cpp:macro> <cpp:value>0x1001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x1003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER_COLOR</name></cpp:macro> <cpp:value>0x1004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_SIZE</name></cpp:macro> <cpp:value>0x805D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_SIZE</name></cpp:macro> <cpp:value>0x805E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x805F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DONT_CARE</name></cpp:macro> <cpp:value>0x1100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FASTEST</name></cpp:macro> <cpp:value>0x1101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NICEST</name></cpp:macro> <cpp:value>0x1102</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BYTE</name></cpp:macro> <cpp:value>0x1400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE</name></cpp:macro> <cpp:value>0x1401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHORT</name></cpp:macro> <cpp:value>0x1402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT</name></cpp:macro> <cpp:value>0x1403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT</name></cpp:macro> <cpp:value>0x1404</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT</name></cpp:macro> <cpp:value>0x1406</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE</name></cpp:macro> <cpp:value>0x140A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLEAR</name></cpp:macro> <cpp:value>0x1500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND</name></cpp:macro> <cpp:value>0x1501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND_REVERSE</name></cpp:macro> <cpp:value>0x1502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY</name></cpp:macro> <cpp:value>0x1503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND_INVERTED</name></cpp:macro> <cpp:value>0x1504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOOP</name></cpp:macro> <cpp:value>0x1505</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_XOR</name></cpp:macro> <cpp:value>0x1506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR</name></cpp:macro> <cpp:value>0x1507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOR</name></cpp:macro> <cpp:value>0x1508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUIV</name></cpp:macro> <cpp:value>0x1509</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERT</name></cpp:macro> <cpp:value>0x150A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR_REVERSE</name></cpp:macro> <cpp:value>0x150B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_INVERTED</name></cpp:macro> <cpp:value>0x150C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR_INVERTED</name></cpp:macro> <cpp:value>0x150D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAND</name></cpp:macro> <cpp:value>0x150E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SET</name></cpp:macro> <cpp:value>0x150F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE</name></cpp:macro> <cpp:value>0x1702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR</name></cpp:macro> <cpp:value>0x1800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH</name></cpp:macro> <cpp:value>0x1801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL</name></cpp:macro> <cpp:value>0x1802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX</name></cpp:macro> <cpp:value>0x1901</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT</name></cpp:macro> <cpp:value>0x1902</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN</name></cpp:macro> <cpp:value>0x1904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE</name></cpp:macro> <cpp:value>0x1905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA</name></cpp:macro> <cpp:value>0x1906</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB</name></cpp:macro> <cpp:value>0x1907</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA</name></cpp:macro> <cpp:value>0x1908</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT</name></cpp:macro> <cpp:value>0x1B00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE</name></cpp:macro> <cpp:value>0x1B01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILL</name></cpp:macro> <cpp:value>0x1B02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KEEP</name></cpp:macro> <cpp:value>0x1E00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE</name></cpp:macro> <cpp:value>0x1E01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR</name></cpp:macro> <cpp:value>0x1E02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR</name></cpp:macro> <cpp:value>0x1E03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VENDOR</name></cpp:macro> <cpp:value>0x1F00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERER</name></cpp:macro> <cpp:value>0x1F01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION</name></cpp:macro> <cpp:value>0x1F02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXTENSIONS</name></cpp:macro> <cpp:value>0x1F03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST</name></cpp:macro> <cpp:value>0x2600</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR</name></cpp:macro> <cpp:value>0x2601</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2701</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2703</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAG_FILTER</name></cpp:macro> <cpp:value>0x2800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_FILTER</name></cpp:macro> <cpp:value>0x2801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_S</name></cpp:macro> <cpp:value>0x2802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_T</name></cpp:macro> <cpp:value>0x2803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D</name></cpp:macro> <cpp:value>0x8064</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPEAT</name></cpp:macro> <cpp:value>0x2901</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R3_G3_B2</name></cpp:macro> <cpp:value>0x2A10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4</name></cpp:macro> <cpp:value>0x804F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB12</name></cpp:macro> <cpp:value>0x8053</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16</name></cpp:macro> <cpp:value>0x8054</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA2</name></cpp:macro> <cpp:value>0x8055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA12</name></cpp:macro> <cpp:value>0x805A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16</name></cpp:macro> <cpp:value>0x805B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_3_3_2</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8</name></cpp:macro> <cpp:value>0x8035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2</name></cpp:macro> <cpp:value>0x8036</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_3D</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_3D</name></cpp:macro> <cpp:value>0x8070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH</name></cpp:macro> <cpp:value>0x8071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_2_3_3_REV</name></cpp:macro> <cpp:value>0x8362</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5</name></cpp:macro> <cpp:value>0x8363</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5_REV</name></cpp:macro> <cpp:value>0x8364</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_REV</name></cpp:macro> <cpp:value>0x8365</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></cpp:macro> <cpp:value>0x8366</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></cpp:macro> <cpp:value>0x8367</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8368</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR</name></cpp:macro> <cpp:value>0x80E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x846E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x8501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_COUNTER_BITS</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8914</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_TYPE</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8B5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_SHADOW</name></cpp:macro> <cpp:value>0x8B61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DELETE_STATUS</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE_STATUS</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINK_STATUS</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VALIDATE_STATUS</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INFO_LOG_LENGTH</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTACHED_SHADERS</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_SOURCE_LENGTH</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTES</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PROGRAM</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_COORD_ORIGIN</name></cpp:macro> <cpp:value>0x8CA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOWER_LEFT</name></cpp:macro> <cpp:value>0x8CA1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UPPER_LEFT</name></cpp:macro> <cpp:value>0x8CA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_REF</name></cpp:macro> <cpp:value>0x8CA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_VALUE_MASK</name></cpp:macro> <cpp:value>0x8CA4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_WRITEMASK</name></cpp:macro> <cpp:value>0x8CA5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x3</name></cpp:macro> <cpp:value>0x8B65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x4</name></cpp:macro> <cpp:value>0x8B66</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x2</name></cpp:macro> <cpp:value>0x8B67</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x4</name></cpp:macro> <cpp:value>0x8B68</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x2</name></cpp:macro> <cpp:value>0x8B69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x3</name></cpp:macro> <cpp:value>0x8B6A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_TO_TEXTURE</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE0</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE1</name></cpp:macro> <cpp:value>0x3001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE2</name></cpp:macro> <cpp:value>0x3002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE3</name></cpp:macro> <cpp:value>0x3003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE4</name></cpp:macro> <cpp:value>0x3004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE5</name></cpp:macro> <cpp:value>0x3005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE6</name></cpp:macro> <cpp:value>0x3006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE7</name></cpp:macro> <cpp:value>0x3007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIP_DISTANCES</name></cpp:macro> <cpp:value>0x0D32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAJOR_VERSION</name></cpp:macro> <cpp:value>0x821B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINOR_VERSION</name></cpp:macro> <cpp:value>0x821C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_EXTENSIONS</name></cpp:macro> <cpp:value>0x821D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAGS</name></cpp:macro> <cpp:value>0x821E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED</name></cpp:macro> <cpp:value>0x8225</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG</name></cpp:macro> <cpp:value>0x8226</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_READ_COLOR</name></cpp:macro> <cpp:value>0x891C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_ONLY</name></cpp:macro> <cpp:value>0x891D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHARED_SIZE</name></cpp:macro> <cpp:value>0x8C3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_INTEGER</name></cpp:macro> <cpp:value>0x8D95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_INTEGER</name></cpp:macro> <cpp:value>0x8D96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_INTEGER</name></cpp:macro> <cpp:value>0x8D9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_INTEGER</name></cpp:macro> <cpp:value>0x8D9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DC9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_WAIT</name></cpp:macro> <cpp:value>0x8E13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_NO_WAIT</name></cpp:macro> <cpp:value>0x8E14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_WAIT</name></cpp:macro> <cpp:value>0x8E15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_NO_WAIT</name></cpp:macro> <cpp:value>0x8E16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_FLAGS</name></cpp:macro> <cpp:value>0x911F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_LENGTH</name></cpp:macro> <cpp:value>0x9120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_OFFSET</name></cpp:macro> <cpp:value>0x9121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F</name></cpp:macro> <cpp:value>0x8CAC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8</name></cpp:macro> <cpp:value>0x8CAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8210</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE</name></cpp:macro> <cpp:value>0x8211</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE</name></cpp:macro> <cpp:value>0x8212</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8213</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8214</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8215</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8216</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8217</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT</name></cpp:macro> <cpp:value>0x8218</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNDEFINED</name></cpp:macro> <cpp:value>0x8219</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x821A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x88F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX</name></cpp:macro> <cpp:value>0x8222</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_READ_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_WRITE_BIT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_RANGE_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_BUFFER_BIT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_FLUSH_EXPLICIT_BIT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_UNSYNCHRONIZED_BIT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_INTEGER</name></cpp:macro> <cpp:value>0x8228</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16</name></cpp:macro> <cpp:value>0x822A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16</name></cpp:macro> <cpp:value>0x822C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32F</name></cpp:macro> <cpp:value>0x822E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32F</name></cpp:macro> <cpp:value>0x8230</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8I</name></cpp:macro> <cpp:value>0x8231</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8UI</name></cpp:macro> <cpp:value>0x8232</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16I</name></cpp:macro> <cpp:value>0x8233</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16UI</name></cpp:macro> <cpp:value>0x8234</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32I</name></cpp:macro> <cpp:value>0x8235</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32UI</name></cpp:macro> <cpp:value>0x8236</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8I</name></cpp:macro> <cpp:value>0x8237</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8UI</name></cpp:macro> <cpp:value>0x8238</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16I</name></cpp:macro> <cpp:value>0x8239</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16UI</name></cpp:macro> <cpp:value>0x823A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32I</name></cpp:macro> <cpp:value>0x823B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32UI</name></cpp:macro> <cpp:value>0x823C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8B63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_SHADOW</name></cpp:macro> <cpp:value>0x8B64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DCD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_SNORM</name></cpp:macro> <cpp:value>0x8F94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_SNORM</name></cpp:macro> <cpp:value>0x8F95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_SNORM</name></cpp:macro> <cpp:value>0x8F96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_SNORM</name></cpp:macro> <cpp:value>0x8F97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16_SNORM</name></cpp:macro> <cpp:value>0x8F98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16_SNORM</name></cpp:macro> <cpp:value>0x8F99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_SNORM</name></cpp:macro> <cpp:value>0x8F9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_SNORM</name></cpp:macro> <cpp:value>0x8F9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8F9C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART</name></cpp:macro> <cpp:value>0x8F9D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_INDEX</name></cpp:macro> <cpp:value>0x8F9E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER</name></cpp:macro> <cpp:value>0x8F36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER</name></cpp:macro> <cpp:value>0x8F37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER</name></cpp:macro> <cpp:value>0x8A11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8A28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_START</name></cpp:macro> <cpp:value>0x8A29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8A2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x8A2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x8A30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x8A34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_TYPE</name></cpp:macro> <cpp:value>0x8A37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_SIZE</name></cpp:macro> <cpp:value>0x8A38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x8A3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_OFFSET</name></cpp:macro> <cpp:value>0x8A3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8A3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x8A3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x8A3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_BINDING</name></cpp:macro> <cpp:value>0x8A3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_DATA_SIZE</name></cpp:macro> <cpp:value>0x8A40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8A42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES</name></cpp:macro> <cpp:value>0x8A43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8A44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8A46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_INDEX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_CORE_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_COMPATIBILITY_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT</name></cpp:macro> <cpp:value>0x8916</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE</name></cpp:macro> <cpp:value>0x8917</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE</name></cpp:macro> <cpp:value>0x8918</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9124</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9125</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_PROFILE_MASK</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP</name></cpp:macro> <cpp:value>0x864F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROVOKING_VERTEX</name></cpp:macro> <cpp:value>0x8E4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_SEAMLESS</name></cpp:macro> <cpp:value>0x884F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SERVER_WAIT_TIMEOUT</name></cpp:macro> <cpp:value>0x9111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x9112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CONDITION</name></cpp:macro> <cpp:value>0x9113</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_STATUS</name></cpp:macro> <cpp:value>0x9114</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLAGS</name></cpp:macro> <cpp:value>0x9115</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FENCE</name></cpp:macro> <cpp:value>0x9116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_GPU_COMMANDS_COMPLETE</name></cpp:macro> <cpp:value>0x9117</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNALED</name></cpp:macro> <cpp:value>0x9118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNALED</name></cpp:macro> <cpp:value>0x9119</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALREADY_SIGNALED</name></cpp:macro> <cpp:value>0x911A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_EXPIRED</name></cpp:macro> <cpp:value>0x911B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONDITION_SATISFIED</name></cpp:macro> <cpp:value>0x911C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WAIT_FAILED</name></cpp:macro> <cpp:value>0x911D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_IGNORED</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLUSH_COMMANDS_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_POSITION</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK</name></cpp:macro> <cpp:value>0x8E51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE</name></cpp:macro> <cpp:value>0x8E52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLE_MASK_WORDS</name></cpp:macro> <cpp:value>0x8E59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9102</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9103</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9104</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9105</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x9106</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FIXED_SAMPLE_LOCATIONS</name></cpp:macro> <cpp:value>0x9107</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9108</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9109</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x910A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEPTH_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_INTEGER_SAMPLES</name></cpp:macro> <cpp:value>0x9110</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x88FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DUAL_SOURCE_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x88FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8C2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BINDING</name></cpp:macro> <cpp:value>0x8919</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2UI</name></cpp:macro> <cpp:value>0x906F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIME_ELAPSED</name></cpp:macro> <cpp:value>0x88BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMESTAMP</name></cpp:macro> <cpp:value>0x8E28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8D9F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_SHADING</name></cpp:macro> <cpp:value>0x8C36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_SAMPLE_SHADING_VALUE</name></cpp:macro> <cpp:value>0x8C37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET</name></cpp:macro> <cpp:value>0x8E5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET</name></cpp:macro> <cpp:value>0x8E5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x9009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x900D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_BUFFER</name></cpp:macro> <cpp:value>0x8F3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8F43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_INVOCATIONS</name></cpp:macro> <cpp:value>0x887F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_SHADER_INVOCATIONS</name></cpp:macro> <cpp:value>0x8E5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_FRAGMENT_INTERPOLATION_OFFSET</name></cpp:macro> <cpp:value>0x8E5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INTERPOLATION_OFFSET</name></cpp:macro> <cpp:value>0x8E5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_INTERPOLATION_OFFSET_BITS</name></cpp:macro> <cpp:value>0x8E5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_STREAMS</name></cpp:macro> <cpp:value>0x8E71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC2</name></cpp:macro> <cpp:value>0x8FFC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC3</name></cpp:macro> <cpp:value>0x8FFD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC4</name></cpp:macro> <cpp:value>0x8FFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2</name></cpp:macro> <cpp:value>0x8F46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3</name></cpp:macro> <cpp:value>0x8F47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4</name></cpp:macro> <cpp:value>0x8F48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2x3</name></cpp:macro> <cpp:value>0x8F49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2x4</name></cpp:macro> <cpp:value>0x8F4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3x2</name></cpp:macro> <cpp:value>0x8F4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3x4</name></cpp:macro> <cpp:value>0x8F4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4x2</name></cpp:macro> <cpp:value>0x8F4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4x3</name></cpp:macro> <cpp:value>0x8F4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINES</name></cpp:macro> <cpp:value>0x8DE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_UNIFORMS</name></cpp:macro> <cpp:value>0x8DE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x8E47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8E48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8E49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SUBROUTINES</name></cpp:macro> <cpp:value>0x8DE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x8DE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPATIBLE_SUBROUTINES</name></cpp:macro> <cpp:value>0x8E4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPATIBLE_SUBROUTINES</name></cpp:macro> <cpp:value>0x8E4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCHES</name></cpp:macro> <cpp:value>0x000E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCH_VERTICES</name></cpp:macro> <cpp:value>0x8E72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCH_DEFAULT_INNER_LEVEL</name></cpp:macro> <cpp:value>0x8E73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCH_DEFAULT_OUTER_LEVEL</name></cpp:macro> <cpp:value>0x8E74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_OUTPUT_VERTICES</name></cpp:macro> <cpp:value>0x8E75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_MODE</name></cpp:macro> <cpp:value>0x8E76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_SPACING</name></cpp:macro> <cpp:value>0x8E77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_VERTEX_ORDER</name></cpp:macro> <cpp:value>0x8E78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_POINT_MODE</name></cpp:macro> <cpp:value>0x8E79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ISOLINES</name></cpp:macro> <cpp:value>0x8E7A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRACTIONAL_ODD</name></cpp:macro> <cpp:value>0x8E7B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRACTIONAL_EVEN</name></cpp:macro> <cpp:value>0x8E7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PATCH_VERTICES</name></cpp:macro> <cpp:value>0x8E7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_GEN_LEVEL</name></cpp:macro> <cpp:value>0x8E7E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8E81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8E82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8E83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_PATCH_COMPONENTS</name></cpp:macro> <cpp:value>0x8E84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8E85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8E86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8E89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8E8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x886C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x886D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E1E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x84F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x84F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x8E87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x8E88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK</name></cpp:macro> <cpp:value>0x8E22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED</name></cpp:macro> <cpp:value>0x8E23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE</name></cpp:macro> <cpp:value>0x8E24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BINDING</name></cpp:macro> <cpp:value>0x8E25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_BUFFERS</name></cpp:macro> <cpp:value>0x8E70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED</name></cpp:macro> <cpp:value>0x140C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_TYPE</name></cpp:macro> <cpp:value>0x8B9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_FORMAT</name></cpp:macro> <cpp:value>0x8B9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOW_FLOAT</name></cpp:macro> <cpp:value>0x8DF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MEDIUM_FLOAT</name></cpp:macro> <cpp:value>0x8DF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HIGH_FLOAT</name></cpp:macro> <cpp:value>0x8DF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOW_INT</name></cpp:macro> <cpp:value>0x8DF3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MEDIUM_INT</name></cpp:macro> <cpp:value>0x8DF4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HIGH_INT</name></cpp:macro> <cpp:value>0x8DF5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8DFA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x8DF8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SHADER_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x8DF9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_VECTORS</name></cpp:macro> <cpp:value>0x8DFB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_VECTORS</name></cpp:macro> <cpp:value>0x8DFC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_VECTORS</name></cpp:macro> <cpp:value>0x8DFD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB565</name></cpp:macro> <cpp:value>0x8D62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_RETRIEVABLE_HINT</name></cpp:macro> <cpp:value>0x8257</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_LENGTH</name></cpp:macro> <cpp:value>0x8741</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_PROGRAM_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x87FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x87FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_SHADER_BITS</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_SEPARABLE</name></cpp:macro> <cpp:value>0x8258</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_PROGRAM</name></cpp:macro> <cpp:value>0x8259</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE_BINDING</name></cpp:macro> <cpp:value>0x825A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VIEWPORTS</name></cpp:macro> <cpp:value>0x825B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT_SUBPIXEL_BITS</name></cpp:macro> <cpp:value>0x825C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT_BOUNDS_RANGE</name></cpp:macro> <cpp:value>0x825D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAYER_PROVOKING_VERTEX</name></cpp:macro> <cpp:value>0x825E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT_INDEX_PROVOKING_VERTEX</name></cpp:macro> <cpp:value>0x825F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNDEFINED_VERTEX</name></cpp:macro> <cpp:value>0x8260</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_WIDTH</name></cpp:macro> <cpp:value>0x9127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_HEIGHT</name></cpp:macro> <cpp:value>0x9128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_DEPTH</name></cpp:macro> <cpp:value>0x9129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x912A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_WIDTH</name></cpp:macro> <cpp:value>0x912B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_HEIGHT</name></cpp:macro> <cpp:value>0x912C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_DEPTH</name></cpp:macro> <cpp:value>0x912D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x912E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SAMPLE_COUNTS</name></cpp:macro> <cpp:value>0x9380</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_MAP_BUFFER_ALIGNMENT</name></cpp:macro> <cpp:value>0x90BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER</name></cpp:macro> <cpp:value>0x92C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x92C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_START</name></cpp:macro> <cpp:value>0x92C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x92C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE</name></cpp:macro> <cpp:value>0x92C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES</name></cpp:macro> <cpp:value>0x92C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x92C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x92C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x92C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x92CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x92CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x92D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x92D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x92DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x92D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX</name></cpp:macro> <cpp:value>0x92DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_ATOMIC_COUNTER</name></cpp:macro> <cpp:value>0x92DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FETCH_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_ACCESS_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMMAND_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_BUFFER_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_UPDATE_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_UPDATE_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_BARRIER_BITS</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8F38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS</name></cpp:macro> <cpp:value>0x8F39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_NAME</name></cpp:macro> <cpp:value>0x8F3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_LEVEL</name></cpp:macro> <cpp:value>0x8F3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_LAYERED</name></cpp:macro> <cpp:value>0x8F3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_LAYER</name></cpp:macro> <cpp:value>0x8F3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_ACCESS</name></cpp:macro> <cpp:value>0x8F3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_1D</name></cpp:macro> <cpp:value>0x904C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D</name></cpp:macro> <cpp:value>0x904D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_3D</name></cpp:macro> <cpp:value>0x904E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_RECT</name></cpp:macro> <cpp:value>0x904F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CUBE</name></cpp:macro> <cpp:value>0x9050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BUFFER</name></cpp:macro> <cpp:value>0x9051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_1D_ARRAY</name></cpp:macro> <cpp:value>0x9052</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_ARRAY</name></cpp:macro> <cpp:value>0x9053</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x9054</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_1D</name></cpp:macro> <cpp:value>0x9057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D</name></cpp:macro> <cpp:value>0x9058</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_3D</name></cpp:macro> <cpp:value>0x9059</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_RECT</name></cpp:macro> <cpp:value>0x905A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_CUBE</name></cpp:macro> <cpp:value>0x905B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_BUFFER</name></cpp:macro> <cpp:value>0x905C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_1D_ARRAY</name></cpp:macro> <cpp:value>0x905D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_ARRAY</name></cpp:macro> <cpp:value>0x905E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x905F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_1D</name></cpp:macro> <cpp:value>0x9062</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D</name></cpp:macro> <cpp:value>0x9063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_3D</name></cpp:macro> <cpp:value>0x9064</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_RECT</name></cpp:macro> <cpp:value>0x9065</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_CUBE</name></cpp:macro> <cpp:value>0x9066</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_BUFFER</name></cpp:macro> <cpp:value>0x9067</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_1D_ARRAY</name></cpp:macro> <cpp:value>0x9068</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_ARRAY</name></cpp:macro> <cpp:value>0x9069</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x906A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x906B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x906C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_IMAGE_SAMPLES</name></cpp:macro> <cpp:value>0x906D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_FORMAT</name></cpp:macro> <cpp:value>0x906E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</name></cpp:macro> <cpp:value>0x90C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE</name></cpp:macro> <cpp:value>0x90C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS</name></cpp:macro> <cpp:value>0x90C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x90CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x90CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x90CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x90CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x90CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x90CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_BPTC_UNORM</name></cpp:macro> <cpp:value>0x8E8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM</name></cpp:macro> <cpp:value>0x8E8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT</name></cpp:macro> <cpp:value>0x8E8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT</name></cpp:macro> <cpp:value>0x8E8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMMUTABLE_FORMAT</name></cpp:macro> <cpp:value>0x912F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SHADING_LANGUAGE_VERSIONS</name></cpp:macro> <cpp:value>0x82E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_LONG</name></cpp:macro> <cpp:value>0x874E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_ETC2</name></cpp:macro> <cpp:value>0x9274</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ETC2</name></cpp:macro> <cpp:value>0x9275</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9276</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9277</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9278</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9279</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_R11_EAC</name></cpp:macro> <cpp:value>0x9270</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_R11_EAC</name></cpp:macro> <cpp:value>0x9271</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG11_EAC</name></cpp:macro> <cpp:value>0x9272</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG11_EAC</name></cpp:macro> <cpp:value>0x9273</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_FIXED_INDEX</name></cpp:macro> <cpp:value>0x8D69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED_CONSERVATIVE</name></cpp:macro> <cpp:value>0x8D6A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENT_INDEX</name></cpp:macro> <cpp:value>0x8D6B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x91B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x91BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x91BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x91BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_SHARED_MEMORY_SIZE</name></cpp:macro> <cpp:value>0x8262</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8263</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x8264</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x8265</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8266</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS</name></cpp:macro> <cpp:value>0x90EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_WORK_GROUP_COUNT</name></cpp:macro> <cpp:value>0x91BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_WORK_GROUP_SIZE</name></cpp:macro> <cpp:value>0x91BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_WORK_GROUP_SIZE</name></cpp:macro> <cpp:value>0x8267</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x90EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x90ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPATCH_INDIRECT_BUFFER</name></cpp:macro> <cpp:value>0x90EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPATCH_INDIRECT_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x90EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_MARKER</name></cpp:macro> <cpp:value>0x8268</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PUSH_GROUP</name></cpp:macro> <cpp:value>0x8269</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_POP_GROUP</name></cpp:macro> <cpp:value>0x826A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_NOTIFICATION</name></cpp:macro> <cpp:value>0x826B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER</name></cpp:macro> <cpp:value>0x82E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER</name></cpp:macro> <cpp:value>0x82E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM</name></cpp:macro> <cpp:value>0x82E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY</name></cpp:macro> <cpp:value>0x82E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE</name></cpp:macro> <cpp:value>0x82E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER</name></cpp:macro> <cpp:value>0x82E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LABEL_LENGTH</name></cpp:macro> <cpp:value>0x82E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT</name></cpp:macro> <cpp:value>0x92E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_DEBUG_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x826E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_WIDTH</name></cpp:macro> <cpp:value>0x9310</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_HEIGHT</name></cpp:macro> <cpp:value>0x9311</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_LAYERS</name></cpp:macro> <cpp:value>0x9312</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_SAMPLES</name></cpp:macro> <cpp:value>0x9313</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS</name></cpp:macro> <cpp:value>0x9314</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x9315</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x9316</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_LAYERS</name></cpp:macro> <cpp:value>0x9317</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x9318</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_SUPPORTED</name></cpp:macro> <cpp:value>0x826F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_PREFERRED</name></cpp:macro> <cpp:value>0x8270</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_RED_SIZE</name></cpp:macro> <cpp:value>0x8271</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8272</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8273</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8274</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8275</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8276</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_SHARED_SIZE</name></cpp:macro> <cpp:value>0x8277</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_RED_TYPE</name></cpp:macro> <cpp:value>0x8278</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_GREEN_TYPE</name></cpp:macro> <cpp:value>0x8279</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_BLUE_TYPE</name></cpp:macro> <cpp:value>0x827A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_ALPHA_TYPE</name></cpp:macro> <cpp:value>0x827B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_DEPTH_TYPE</name></cpp:macro> <cpp:value>0x827C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_STENCIL_TYPE</name></cpp:macro> <cpp:value>0x827D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_WIDTH</name></cpp:macro> <cpp:value>0x827E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_HEIGHT</name></cpp:macro> <cpp:value>0x827F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEPTH</name></cpp:macro> <cpp:value>0x8280</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LAYERS</name></cpp:macro> <cpp:value>0x8281</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_DIMENSIONS</name></cpp:macro> <cpp:value>0x8282</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_COMPONENTS</name></cpp:macro> <cpp:value>0x8283</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENTS</name></cpp:macro> <cpp:value>0x8284</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_COMPONENTS</name></cpp:macro> <cpp:value>0x8285</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_RENDERABLE</name></cpp:macro> <cpp:value>0x8286</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_RENDERABLE</name></cpp:macro> <cpp:value>0x8287</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_RENDERABLE</name></cpp:macro> <cpp:value>0x8288</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_RENDERABLE</name></cpp:macro> <cpp:value>0x8289</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_RENDERABLE_LAYERED</name></cpp:macro> <cpp:value>0x828A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BLEND</name></cpp:macro> <cpp:value>0x828B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXELS</name></cpp:macro> <cpp:value>0x828C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXELS_FORMAT</name></cpp:macro> <cpp:value>0x828D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXELS_TYPE</name></cpp:macro> <cpp:value>0x828E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMAGE_FORMAT</name></cpp:macro> <cpp:value>0x828F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMAGE_TYPE</name></cpp:macro> <cpp:value>0x8290</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GET_TEXTURE_IMAGE_FORMAT</name></cpp:macro> <cpp:value>0x8291</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GET_TEXTURE_IMAGE_TYPE</name></cpp:macro> <cpp:value>0x8292</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIPMAP</name></cpp:macro> <cpp:value>0x8293</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MANUAL_GENERATE_MIPMAP</name></cpp:macro> <cpp:value>0x8294</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUTO_GENERATE_MIPMAP</name></cpp:macro> <cpp:value>0x8295</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8296</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_READ</name></cpp:macro> <cpp:value>0x8297</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_WRITE</name></cpp:macro> <cpp:value>0x8298</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILTER</name></cpp:macro> <cpp:value>0x829A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_TEXTURE</name></cpp:macro> <cpp:value>0x829B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_TEXTURE</name></cpp:macro> <cpp:value>0x829C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_TEXTURE</name></cpp:macro> <cpp:value>0x829D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_TEXTURE</name></cpp:macro> <cpp:value>0x829E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_TEXTURE</name></cpp:macro> <cpp:value>0x829F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_TEXTURE</name></cpp:macro> <cpp:value>0x82A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHADOW</name></cpp:macro> <cpp:value>0x82A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GATHER</name></cpp:macro> <cpp:value>0x82A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GATHER_SHADOW</name></cpp:macro> <cpp:value>0x82A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_LOAD</name></cpp:macro> <cpp:value>0x82A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_STORE</name></cpp:macro> <cpp:value>0x82A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_ATOMIC</name></cpp:macro> <cpp:value>0x82A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TEXEL_SIZE</name></cpp:macro> <cpp:value>0x82A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_COMPATIBILITY_CLASS</name></cpp:macro> <cpp:value>0x82A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_PIXEL_FORMAT</name></cpp:macro> <cpp:value>0x82A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_PIXEL_TYPE</name></cpp:macro> <cpp:value>0x82AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST</name></cpp:macro> <cpp:value>0x82AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST</name></cpp:macro> <cpp:value>0x82AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE</name></cpp:macro> <cpp:value>0x82AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE</name></cpp:macro> <cpp:value>0x82AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_BLOCK_WIDTH</name></cpp:macro> <cpp:value>0x82B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT</name></cpp:macro> <cpp:value>0x82B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x82B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLEAR_BUFFER</name></cpp:macro> <cpp:value>0x82B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW</name></cpp:macro> <cpp:value>0x82B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_COMPATIBILITY_CLASS</name></cpp:macro> <cpp:value>0x82B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_SUPPORT</name></cpp:macro> <cpp:value>0x82B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CAVEAT_SUPPORT</name></cpp:macro> <cpp:value>0x82B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_4_X_32</name></cpp:macro> <cpp:value>0x82B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_2_X_32</name></cpp:macro> <cpp:value>0x82BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_1_X_32</name></cpp:macro> <cpp:value>0x82BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_4_X_16</name></cpp:macro> <cpp:value>0x82BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_2_X_16</name></cpp:macro> <cpp:value>0x82BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_1_X_16</name></cpp:macro> <cpp:value>0x82BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_4_X_8</name></cpp:macro> <cpp:value>0x82BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_2_X_8</name></cpp:macro> <cpp:value>0x82C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_1_X_8</name></cpp:macro> <cpp:value>0x82C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_11_11_10</name></cpp:macro> <cpp:value>0x82C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_10_10_10_2</name></cpp:macro> <cpp:value>0x82C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_128_BITS</name></cpp:macro> <cpp:value>0x82C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_96_BITS</name></cpp:macro> <cpp:value>0x82C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_64_BITS</name></cpp:macro> <cpp:value>0x82C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_48_BITS</name></cpp:macro> <cpp:value>0x82C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_32_BITS</name></cpp:macro> <cpp:value>0x82C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_24_BITS</name></cpp:macro> <cpp:value>0x82C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_16_BITS</name></cpp:macro> <cpp:value>0x82CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_8_BITS</name></cpp:macro> <cpp:value>0x82CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT1_RGB</name></cpp:macro> <cpp:value>0x82CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT1_RGBA</name></cpp:macro> <cpp:value>0x82CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT3_RGBA</name></cpp:macro> <cpp:value>0x82CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT5_RGBA</name></cpp:macro> <cpp:value>0x82CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_RGTC1_RED</name></cpp:macro> <cpp:value>0x82D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_RGTC2_RG</name></cpp:macro> <cpp:value>0x82D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_BPTC_UNORM</name></cpp:macro> <cpp:value>0x82D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_BPTC_FLOAT</name></cpp:macro> <cpp:value>0x82D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM</name></cpp:macro> <cpp:value>0x92E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK</name></cpp:macro> <cpp:value>0x92E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_INPUT</name></cpp:macro> <cpp:value>0x92E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_OUTPUT</name></cpp:macro> <cpp:value>0x92E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_VARIABLE</name></cpp:macro> <cpp:value>0x92E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BLOCK</name></cpp:macro> <cpp:value>0x92E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SUBROUTINE</name></cpp:macro> <cpp:value>0x92E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SUBROUTINE</name></cpp:macro> <cpp:value>0x92E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SUBROUTINE</name></cpp:macro> <cpp:value>0x92EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SUBROUTINE</name></cpp:macro> <cpp:value>0x92EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SUBROUTINE</name></cpp:macro> <cpp:value>0x92EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SUBROUTINE</name></cpp:macro> <cpp:value>0x92ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING</name></cpp:macro> <cpp:value>0x92F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_RESOURCES</name></cpp:macro> <cpp:value>0x92F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x92F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NUM_ACTIVE_VARIABLES</name></cpp:macro> <cpp:value>0x92F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NUM_COMPATIBLE_SUBROUTINES</name></cpp:macro> <cpp:value>0x92F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAME_LENGTH</name></cpp:macro> <cpp:value>0x92F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TYPE</name></cpp:macro> <cpp:value>0x92FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x92FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET</name></cpp:macro> <cpp:value>0x92FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x92FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x92FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x92FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x9300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_INDEX</name></cpp:macro> <cpp:value>0x9301</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x9302</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_DATA_SIZE</name></cpp:macro> <cpp:value>0x9303</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_ACTIVE_VARIABLES</name></cpp:macro> <cpp:value>0x9304</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VARIABLES</name></cpp:macro> <cpp:value>0x9305</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x9306</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x9307</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x9308</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x9309</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x930A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x930B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TOP_LEVEL_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x930C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TOP_LEVEL_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x930D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCATION</name></cpp:macro> <cpp:value>0x930E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCATION_INDEX</name></cpp:macro> <cpp:value>0x930F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IS_PER_PATCH</name></cpp:macro> <cpp:value>0x92E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER</name></cpp:macro> <cpp:value>0x90D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x90D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_START</name></cpp:macro> <cpp:value>0x90D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x90D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x90DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHADER_STORAGE_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x90DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x90DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES</name></cpp:macro> <cpp:value>0x8F39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_TEXTURE_MODE</name></cpp:macro> <cpp:value>0x90EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_OFFSET</name></cpp:macro> <cpp:value>0x919D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x919E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x919F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_MIN_LEVEL</name></cpp:macro> <cpp:value>0x82DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_NUM_LEVELS</name></cpp:macro> <cpp:value>0x82DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_MIN_LAYER</name></cpp:macro> <cpp:value>0x82DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_NUM_LAYERS</name></cpp:macro> <cpp:value>0x82DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMMUTABLE_LEVELS</name></cpp:macro> <cpp:value>0x82DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_BINDING</name></cpp:macro> <cpp:value>0x82D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_RELATIVE_OFFSET</name></cpp:macro> <cpp:value>0x82D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_DIVISOR</name></cpp:macro> <cpp:value>0x82D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_OFFSET</name></cpp:macro> <cpp:value>0x82D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_STRIDE</name></cpp:macro> <cpp:value>0x82D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET</name></cpp:macro> <cpp:value>0x82D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_BINDINGS</name></cpp:macro> <cpp:value>0x82DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_BUFFER</name></cpp:macro> <cpp:value>0x8F4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPLAY_LIST</name></cpp:macro> <cpp:value>0x82E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_STRIDE</name></cpp:macro> <cpp:value>0x82E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED</name></cpp:macro> <cpp:value>0x8221</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_PERSISTENT_BIT</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_COHERENT_BIT</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_STORAGE_BIT</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_STORAGE_BIT</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_IMMUTABLE_STORAGE</name></cpp:macro> <cpp:value>0x821F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_STORAGE_FLAGS</name></cpp:macro> <cpp:value>0x8220</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLEAR_TEXTURE</name></cpp:macro> <cpp:value>0x9365</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCATION_COMPONENT</name></cpp:macro> <cpp:value>0x934A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_INDEX</name></cpp:macro> <cpp:value>0x934B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE</name></cpp:macro> <cpp:value>0x934C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER</name></cpp:macro> <cpp:value>0x9192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x9193</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_NO_WAIT</name></cpp:macro> <cpp:value>0x9194</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x8743</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_0</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCULLFACEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCULLFACEPROC</name></type> <name>glad_glCullFace</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCullFace</name></cpp:macro> <cpp:value>glad_glCullFace</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRONTFACEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRONTFACEPROC</name></type> <name>glad_glFrontFace</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrontFace</name></cpp:macro> <cpp:value>glad_glFrontFace</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLHINTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLHINTPROC</name></type> <name>glad_glHint</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glHint</name></cpp:macro> <cpp:value>glad_glHint</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLINEWIDTHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLINEWIDTHPROC</name></type> <name>glad_glLineWidth</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLineWidth</name></cpp:macro> <cpp:value>glad_glLineWidth</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTSIZEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTSIZEPROC</name></type> <name>glad_glPointSize</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointSize</name></cpp:macro> <cpp:value>glad_glPointSize</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLYGONMODEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLYGONMODEPROC</name></type> <name>glad_glPolygonMode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonMode</name></cpp:macro> <cpp:value>glad_glPolygonMode</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSCISSORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSCISSORPROC</name></type> <name>glad_glScissor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScissor</name></cpp:macro> <cpp:value>glad_glScissor</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERFPROC</name></type> <name>glad_glTexParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterf</name></cpp:macro> <cpp:value>glad_glTexParameterf</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERFVPROC</name></type> <name>glad_glTexParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterfv</name></cpp:macro> <cpp:value>glad_glTexParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIPROC</name></type> <name>glad_glTexParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameteri</name></cpp:macro> <cpp:value>glad_glTexParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIVPROC</name></type> <name>glad_glTexParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameteriv</name></cpp:macro> <cpp:value>glad_glTexParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE1DPROC</name></type> <name>glad_glTexImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage1D</name></cpp:macro> <cpp:value>glad_glTexImage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE2DPROC</name></type> <name>glad_glTexImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2D</name></cpp:macro> <cpp:value>glad_glTexImage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERPROC</name></type> <name>glad_glDrawBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffer</name></cpp:macro> <cpp:value>glad_glDrawBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARPROC</name></type> <name>glad_glClear</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClear</name></cpp:macro> <cpp:value>glad_glClear</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARCOLORPROC</name></type> <name>glad_glClearColor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearColor</name></cpp:macro> <cpp:value>glad_glClearColor</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARSTENCILPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARSTENCILPROC</name></type> <name>glad_glClearStencil</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearStencil</name></cpp:macro> <cpp:value>glad_glClearStencil</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHPROC</name></type> <name>glad_glClearDepth</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepth</name></cpp:macro> <cpp:value>glad_glClearDepth</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILMASKPROC</name></type> <name>glad_glStencilMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilMask</name></cpp:macro> <cpp:value>glad_glStencilMask</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORMASKPROC</name></type> <name>glad_glColorMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMask</name></cpp:macro> <cpp:value>glad_glColorMask</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHMASKPROC</name></type> <name>glad_glDepthMask</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthMask</name></cpp:macro> <cpp:value>glad_glDepthMask</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEPROC</name></type> <name>glad_glDisable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisable</name></cpp:macro> <cpp:value>glad_glDisable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEPROC</name></type> <name>glad_glEnable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnable</name></cpp:macro> <cpp:value>glad_glEnable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHPROC</name></type> <name>glad_glFinish</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinish</name></cpp:macro> <cpp:value>glad_glFinish</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHPROC</name></type> <name>glad_glFlush</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlush</name></cpp:macro> <cpp:value>glad_glFlush</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCPROC</name></type> <name>glad_glBlendFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFunc</name></cpp:macro> <cpp:value>glad_glBlendFunc</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOGICOPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOGICOPPROC</name></type> <name>glad_glLogicOp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLogicOp</name></cpp:macro> <cpp:value>glad_glLogicOp</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFUNCPROC</name></type> <name>glad_glStencilFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFunc</name></cpp:macro> <cpp:value>glad_glStencilFunc</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILOPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILOPPROC</name></type> <name>glad_glStencilOp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOp</name></cpp:macro> <cpp:value>glad_glStencilOp</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHFUNCPROC</name></type> <name>glad_glDepthFunc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthFunc</name></cpp:macro> <cpp:value>glad_glDepthFunc</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELSTOREFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELSTOREFPROC</name></type> <name>glad_glPixelStoref</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStoref</name></cpp:macro> <cpp:value>glad_glPixelStoref</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELSTOREIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELSTOREIPROC</name></type> <name>glad_glPixelStorei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStorei</name></cpp:macro> <cpp:value>glad_glPixelStorei</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREADBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREADBUFFERPROC</name></type> <name>glad_glReadBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadBuffer</name></cpp:macro> <cpp:value>glad_glReadBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREADPIXELSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREADPIXELSPROC</name></type> <name>glad_glReadPixels</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadPixels</name></cpp:macro> <cpp:value>glad_glReadPixels</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBOOLEANVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBOOLEANVPROC</name></type> <name>glad_glGetBooleanv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleanv</name></cpp:macro> <cpp:value>glad_glGetBooleanv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDOUBLEVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDOUBLEVPROC</name></type> <name>glad_glGetDoublev</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDoublev</name></cpp:macro> <cpp:value>glad_glGetDoublev</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLGETERRORPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETERRORPROC</name></type> <name>glad_glGetError</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetError</name></cpp:macro> <cpp:value>glad_glGetError</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFLOATVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFLOATVPROC</name></type> <name>glad_glGetFloatv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFloatv</name></cpp:macro> <cpp:value>glad_glGetFloatv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERVPROC</name></type> <name>glad_glGetIntegerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegerv</name></cpp:macro> <cpp:value>glad_glGetIntegerv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLGETSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSTRINGPROC</name></type> <name>glad_glGetString</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetString</name></cpp:macro> <cpp:value>glad_glGetString</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXIMAGEPROC</name></type> <name>glad_glGetTexImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexImage</name></cpp:macro> <cpp:value>glad_glGetTexImage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERFVPROC</name></type> <name>glad_glGetTexParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterfv</name></cpp:macro> <cpp:value>glad_glGetTexParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIVPROC</name></type> <name>glad_glGetTexParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameteriv</name></cpp:macro> <cpp:value>glad_glGetTexParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXLEVELPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXLEVELPARAMETERFVPROC</name></type> <name>glad_glGetTexLevelParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameterfv</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXLEVELPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXLEVELPARAMETERIVPROC</name></type> <name>glad_glGetTexLevelParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameteriv</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISENABLEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISENABLEDPROC</name></type> <name>glad_glIsEnabled</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabled</name></cpp:macro> <cpp:value>glad_glIsEnabled</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEPROC</name></type> <name>glad_glDepthRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRange</name></cpp:macro> <cpp:value>glad_glDepthRange</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIEWPORTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIEWPORTPROC</name></type> <name>glad_glViewport</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glViewport</name></cpp:macro> <cpp:value>glad_glViewport</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_1</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSPROC</name></type> <name>glad_glDrawArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArrays</name></cpp:macro> <cpp:value>glad_glDrawArrays</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSPROC</name></type> <name>glad_glDrawElements</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElements</name></cpp:macro> <cpp:value>glad_glDrawElements</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLYGONOFFSETPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLYGONOFFSETPROC</name></type> <name>glad_glPolygonOffset</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonOffset</name></cpp:macro> <cpp:value>glad_glPolygonOffset</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXIMAGE1DPROC</name></type> <name>glad_glCopyTexImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage1D</name></cpp:macro> <cpp:value>glad_glCopyTexImage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXIMAGE2DPROC</name></type> <name>glad_glCopyTexImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage2D</name></cpp:macro> <cpp:value>glad_glCopyTexImage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE1DPROC</name></type> <name>glad_glCopyTexSubImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage1D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE2DPROC</name></type> <name>glad_glCopyTexSubImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage2D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE1DPROC</name></type> <name>glad_glTexSubImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage1D</name></cpp:macro> <cpp:value>glad_glTexSubImage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE2DPROC</name></type> <name>glad_glTexSubImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage2D</name></cpp:macro> <cpp:value>glad_glTexSubImage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXTUREPROC</name></type> <name>glad_glBindTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTexture</name></cpp:macro> <cpp:value>glad_glBindTexture</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETETEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETETEXTURESPROC</name></type> <name>glad_glDeleteTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteTextures</name></cpp:macro> <cpp:value>glad_glDeleteTextures</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENTEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENTEXTURESPROC</name></type> <name>glad_glGenTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenTextures</name></cpp:macro> <cpp:value>glad_glGenTextures</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTEXTUREPROC</name></type> <name>glad_glIsTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTexture</name></cpp:macro> <cpp:value>glad_glIsTexture</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTSPROC</name></type> <name>glad_glDrawRangeElements</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElements</name></cpp:macro> <cpp:value>glad_glDrawRangeElements</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE3DPROC</name></type> <name>glad_glTexImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3D</name></cpp:macro> <cpp:value>glad_glTexImage3D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE3DPROC</name></type> <name>glad_glTexSubImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage3D</name></cpp:macro> <cpp:value>glad_glTexSubImage3D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE3DPROC</name></type> <name>glad_glCopyTexSubImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage3D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage3D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_3</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVETEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVETEXTUREPROC</name></type> <name>glad_glActiveTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveTexture</name></cpp:macro> <cpp:value>glad_glActiveTexture</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLECOVERAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLECOVERAGEPROC</name></type> <name>glad_glSampleCoverage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverage</name></cpp:macro> <cpp:value>glad_glSampleCoverage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name></type> <name>glad_glCompressedTexImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage3D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage3D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name></type> <name>glad_glCompressedTexImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage2D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name></type> <name>glad_glCompressedTexImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage1D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name></type> <name>glad_glCompressedTexSubImage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage3D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage3D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name></type> <name>glad_glCompressedTexSubImage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage2D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name></type> <name>glad_glCompressedTexSubImage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage1D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name></type> <name>glad_glGetCompressedTexImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedTexImage</name></cpp:macro> <cpp:value>glad_glGetCompressedTexImage</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEPROC</name></type> <name>glad_glBlendFuncSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparate</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparate</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSPROC</name></type> <name>glad_glMultiDrawArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArrays</name></cpp:macro> <cpp:value>glad_glMultiDrawArrays</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSPROC</name></type> <name>glad_glMultiDrawElements</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElements</name></cpp:macro> <cpp:value>glad_glMultiDrawElements</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFPROC</name></type> <name>glad_glPointParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterf</name></cpp:macro> <cpp:value>glad_glPointParameterf</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFVPROC</name></type> <name>glad_glPointParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfv</name></cpp:macro> <cpp:value>glad_glPointParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERIPROC</name></type> <name>glad_glPointParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteri</name></cpp:macro> <cpp:value>glad_glPointParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERIVPROC</name></type> <name>glad_glPointParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteriv</name></cpp:macro> <cpp:value>glad_glPointParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDCOLORPROC</name></type> <name>glad_glBlendColor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendColor</name></cpp:macro> <cpp:value>glad_glBlendColor</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONPROC</name></type> <name>glad_glBlendEquation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquation</name></cpp:macro> <cpp:value>glad_glBlendEquation</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_5</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENQUERIESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENQUERIESPROC</name></type> <name>glad_glGenQueries</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenQueries</name></cpp:macro> <cpp:value>glad_glGenQueries</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEQUERIESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEQUERIESPROC</name></type> <name>glad_glDeleteQueries</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteQueries</name></cpp:macro> <cpp:value>glad_glDeleteQueries</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISQUERYPROC</name></type> <name>glad_glIsQuery</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsQuery</name></cpp:macro> <cpp:value>glad_glIsQuery</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINQUERYPROC</name></type> <name>glad_glBeginQuery</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginQuery</name></cpp:macro> <cpp:value>glad_glBeginQuery</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDQUERYPROC</name></type> <name>glad_glEndQuery</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndQuery</name></cpp:macro> <cpp:value>glad_glEndQuery</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYIVPROC</name></type> <name>glad_glGetQueryiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryiv</name></cpp:macro> <cpp:value>glad_glGetQueryiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTIVPROC</name></type> <name>glad_glGetQueryObjectiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectiv</name></cpp:macro> <cpp:value>glad_glGetQueryObjectiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTUIVPROC</name></type> <name>glad_glGetQueryObjectuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectuiv</name></cpp:macro> <cpp:value>glad_glGetQueryObjectuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERPROC</name></type> <name>glad_glBindBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBuffer</name></cpp:macro> <cpp:value>glad_glBindBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEBUFFERSPROC</name></type> <name>glad_glDeleteBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteBuffers</name></cpp:macro> <cpp:value>glad_glDeleteBuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENBUFFERSPROC</name></type> <name>glad_glGenBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenBuffers</name></cpp:macro> <cpp:value>glad_glGenBuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISBUFFERPROC</name></type> <name>glad_glIsBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsBuffer</name></cpp:macro> <cpp:value>glad_glIsBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERDATAPROC</name></type> <name>glad_glBufferData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferData</name></cpp:macro> <cpp:value>glad_glBufferData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERSUBDATAPROC</name></type> <name>glad_glBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferSubData</name></cpp:macro> <cpp:value>glad_glBufferSubData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERSUBDATAPROC</name></type> <name>glad_glGetBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferSubData</name></cpp:macro> <cpp:value>glad_glGetBufferSubData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPBUFFERPROC</name></type> <name>glad_glMapBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBuffer</name></cpp:macro> <cpp:value>glad_glMapBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPBUFFERPROC</name></type> <name>glad_glUnmapBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapBuffer</name></cpp:macro> <cpp:value>glad_glUnmapBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetBufferParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetBufferParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPOINTERVPROC</name></type> <name>glad_glGetBufferPointerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferPointerv</name></cpp:macro> <cpp:value>glad_glGetBufferPointerv</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_2_0</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEPROC</name></type> <name>glad_glBlendEquationSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparate</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparate</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERSPROC</name></type> <name>glad_glDrawBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffers</name></cpp:macro> <cpp:value>glad_glDrawBuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILOPSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILOPSEPARATEPROC</name></type> <name>glad_glStencilOpSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOpSeparate</name></cpp:macro> <cpp:value>glad_glStencilOpSeparate</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFUNCSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFUNCSEPARATEPROC</name></type> <name>glad_glStencilFuncSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFuncSeparate</name></cpp:macro> <cpp:value>glad_glStencilFuncSeparate</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILMASKSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILMASKSEPARATEPROC</name></type> <name>glad_glStencilMaskSeparate</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilMaskSeparate</name></cpp:macro> <cpp:value>glad_glStencilMaskSeparate</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLATTACHSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLATTACHSHADERPROC</name></type> <name>glad_glAttachShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAttachShader</name></cpp:macro> <cpp:value>glad_glAttachShader</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDATTRIBLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDATTRIBLOCATIONPROC</name></type> <name>glad_glBindAttribLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindAttribLocation</name></cpp:macro> <cpp:value>glad_glBindAttribLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPILESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPILESHADERPROC</name></type> <name>glad_glCompileShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompileShader</name></cpp:macro> <cpp:value>glad_glCompileShader</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATEPROGRAMPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATEPROGRAMPROC</name></type> <name>glad_glCreateProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateProgram</name></cpp:macro> <cpp:value>glad_glCreateProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESHADERPROC</name></type> <name>glad_glCreateShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShader</name></cpp:macro> <cpp:value>glad_glCreateShader</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMPROC</name></type> <name>glad_glDeleteProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgram</name></cpp:macro> <cpp:value>glad_glDeleteProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETESHADERPROC</name></type> <name>glad_glDeleteShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteShader</name></cpp:macro> <cpp:value>glad_glDeleteShader</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDETACHSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDETACHSHADERPROC</name></type> <name>glad_glDetachShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDetachShader</name></cpp:macro> <cpp:value>glad_glDetachShader</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glDisableVertexAttribArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexAttribArray</name></cpp:macro> <cpp:value>glad_glDisableVertexAttribArray</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glEnableVertexAttribArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexAttribArray</name></cpp:macro> <cpp:value>glad_glEnableVertexAttribArray</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEATTRIBPROC</name></type> <name>glad_glGetActiveAttrib</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveAttrib</name></cpp:macro> <cpp:value>glad_glGetActiveAttrib</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMPROC</name></type> <name>glad_glGetActiveUniform</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniform</name></cpp:macro> <cpp:value>glad_glGetActiveUniform</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTACHEDSHADERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTACHEDSHADERSPROC</name></type> <name>glad_glGetAttachedShaders</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttachedShaders</name></cpp:macro> <cpp:value>glad_glGetAttachedShaders</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTRIBLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTRIBLOCATIONPROC</name></type> <name>glad_glGetAttribLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttribLocation</name></cpp:macro> <cpp:value>glad_glGetAttribLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMIVPROC</name></type> <name>glad_glGetProgramiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramiv</name></cpp:macro> <cpp:value>glad_glGetProgramiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>glad_glGetProgramInfoLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramInfoLog</name></cpp:macro> <cpp:value>glad_glGetProgramInfoLog</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERIVPROC</name></type> <name>glad_glGetShaderiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderiv</name></cpp:macro> <cpp:value>glad_glGetShaderiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERINFOLOGPROC</name></type> <name>glad_glGetShaderInfoLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderInfoLog</name></cpp:macro> <cpp:value>glad_glGetShaderInfoLog</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERSOURCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERSOURCEPROC</name></type> <name>glad_glGetShaderSource</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderSource</name></cpp:macro> <cpp:value>glad_glGetShaderSource</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>glad_glGetUniformLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformLocation</name></cpp:macro> <cpp:value>glad_glGetUniformLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMFVPROC</name></type> <name>glad_glGetUniformfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformfv</name></cpp:macro> <cpp:value>glad_glGetUniformfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMIVPROC</name></type> <name>glad_glGetUniformiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformiv</name></cpp:macro> <cpp:value>glad_glGetUniformiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBDVPROC</name></type> <name>glad_glGetVertexAttribdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribdv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribdv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBFVPROC</name></type> <name>glad_glGetVertexAttribfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribfv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIVPROC</name></type> <name>glad_glGetVertexAttribiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name></type> <name>glad_glGetVertexAttribPointerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribPointerv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribPointerv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMPROC</name></type> <name>glad_glIsProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgram</name></cpp:macro> <cpp:value>glad_glIsProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISSHADERPROC</name></type> <name>glad_glIsShader</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsShader</name></cpp:macro> <cpp:value>glad_glIsShader</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLINKPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLINKPROGRAMPROC</name></type> <name>glad_glLinkProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLinkProgram</name></cpp:macro> <cpp:value>glad_glLinkProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADERSOURCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADERSOURCEPROC</name></type> <name>glad_glShaderSource</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderSource</name></cpp:macro> <cpp:value>glad_glShaderSource</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUSEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUSEPROGRAMPROC</name></type> <name>glad_glUseProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseProgram</name></cpp:macro> <cpp:value>glad_glUseProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1FPROC</name></type> <name>glad_glUniform1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1f</name></cpp:macro> <cpp:value>glad_glUniform1f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2FPROC</name></type> <name>glad_glUniform2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2f</name></cpp:macro> <cpp:value>glad_glUniform2f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3FPROC</name></type> <name>glad_glUniform3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3f</name></cpp:macro> <cpp:value>glad_glUniform3f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4FPROC</name></type> <name>glad_glUniform4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4f</name></cpp:macro> <cpp:value>glad_glUniform4f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1IPROC</name></type> <name>glad_glUniform1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1i</name></cpp:macro> <cpp:value>glad_glUniform1i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2IPROC</name></type> <name>glad_glUniform2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2i</name></cpp:macro> <cpp:value>glad_glUniform2i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3IPROC</name></type> <name>glad_glUniform3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3i</name></cpp:macro> <cpp:value>glad_glUniform3i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4IPROC</name></type> <name>glad_glUniform4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4i</name></cpp:macro> <cpp:value>glad_glUniform4i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1FVPROC</name></type> <name>glad_glUniform1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1fv</name></cpp:macro> <cpp:value>glad_glUniform1fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2FVPROC</name></type> <name>glad_glUniform2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2fv</name></cpp:macro> <cpp:value>glad_glUniform2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3FVPROC</name></type> <name>glad_glUniform3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3fv</name></cpp:macro> <cpp:value>glad_glUniform3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4FVPROC</name></type> <name>glad_glUniform4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4fv</name></cpp:macro> <cpp:value>glad_glUniform4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1IVPROC</name></type> <name>glad_glUniform1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1iv</name></cpp:macro> <cpp:value>glad_glUniform1iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2IVPROC</name></type> <name>glad_glUniform2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2iv</name></cpp:macro> <cpp:value>glad_glUniform2iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3IVPROC</name></type> <name>glad_glUniform3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3iv</name></cpp:macro> <cpp:value>glad_glUniform3iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4IVPROC</name></type> <name>glad_glUniform4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4iv</name></cpp:macro> <cpp:value>glad_glUniform4iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2FVPROC</name></type> <name>glad_glUniformMatrix2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3FVPROC</name></type> <name>glad_glUniformMatrix3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>glad_glUniformMatrix4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVALIDATEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVALIDATEPROGRAMPROC</name></type> <name>glad_glValidateProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glValidateProgram</name></cpp:macro> <cpp:value>glad_glValidateProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DPROC</name></type> <name>glad_glVertexAttrib1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1d</name></cpp:macro> <cpp:value>glad_glVertexAttrib1d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DVPROC</name></type> <name>glad_glVertexAttrib1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FPROC</name></type> <name>glad_glVertexAttrib1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1f</name></cpp:macro> <cpp:value>glad_glVertexAttrib1f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FVPROC</name></type> <name>glad_glVertexAttrib1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SPROC</name></type> <name>glad_glVertexAttrib1s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1s</name></cpp:macro> <cpp:value>glad_glVertexAttrib1s</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SVPROC</name></type> <name>glad_glVertexAttrib1sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1sv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DPROC</name></type> <name>glad_glVertexAttrib2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2d</name></cpp:macro> <cpp:value>glad_glVertexAttrib2d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DVPROC</name></type> <name>glad_glVertexAttrib2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FPROC</name></type> <name>glad_glVertexAttrib2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2f</name></cpp:macro> <cpp:value>glad_glVertexAttrib2f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FVPROC</name></type> <name>glad_glVertexAttrib2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SPROC</name></type> <name>glad_glVertexAttrib2s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2s</name></cpp:macro> <cpp:value>glad_glVertexAttrib2s</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SVPROC</name></type> <name>glad_glVertexAttrib2sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2sv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DPROC</name></type> <name>glad_glVertexAttrib3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3d</name></cpp:macro> <cpp:value>glad_glVertexAttrib3d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DVPROC</name></type> <name>glad_glVertexAttrib3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FPROC</name></type> <name>glad_glVertexAttrib3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3f</name></cpp:macro> <cpp:value>glad_glVertexAttrib3f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FVPROC</name></type> <name>glad_glVertexAttrib3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SPROC</name></type> <name>glad_glVertexAttrib3s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3s</name></cpp:macro> <cpp:value>glad_glVertexAttrib3s</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SVPROC</name></type> <name>glad_glVertexAttrib3sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3sv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NBVPROC</name></type> <name>glad_glVertexAttrib4Nbv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nbv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nbv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NIVPROC</name></type> <name>glad_glVertexAttrib4Niv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Niv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Niv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NSVPROC</name></type> <name>glad_glVertexAttrib4Nsv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nsv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nsv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBPROC</name></type> <name>glad_glVertexAttrib4Nub</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nub</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nub</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBVPROC</name></type> <name>glad_glVertexAttrib4Nubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nubv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nubv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUIVPROC</name></type> <name>glad_glVertexAttrib4Nuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nuiv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUSVPROC</name></type> <name>glad_glVertexAttrib4Nusv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nusv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nusv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4BVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4BVPROC</name></type> <name>glad_glVertexAttrib4bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4bv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4bv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DPROC</name></type> <name>glad_glVertexAttrib4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4d</name></cpp:macro> <cpp:value>glad_glVertexAttrib4d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DVPROC</name></type> <name>glad_glVertexAttrib4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FPROC</name></type> <name>glad_glVertexAttrib4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4f</name></cpp:macro> <cpp:value>glad_glVertexAttrib4f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FVPROC</name></type> <name>glad_glVertexAttrib4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4IVPROC</name></type> <name>glad_glVertexAttrib4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4iv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SPROC</name></type> <name>glad_glVertexAttrib4s</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4s</name></cpp:macro> <cpp:value>glad_glVertexAttrib4s</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SVPROC</name></type> <name>glad_glVertexAttrib4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4sv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UBVPROC</name></type> <name>glad_glVertexAttrib4ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UIVPROC</name></type> <name>glad_glVertexAttrib4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4USVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4USVPROC</name></type> <name>glad_glVertexAttrib4usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4usv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4usv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>glad_glVertexAttribPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribPointer</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_2_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_2_1</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2X3FVPROC</name></type> <name>glad_glUniformMatrix2x3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3X2FVPROC</name></type> <name>glad_glUniformMatrix3x2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2X4FVPROC</name></type> <name>glad_glUniformMatrix2x4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4X2FVPROC</name></type> <name>glad_glUniformMatrix4x2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3X4FVPROC</name></type> <name>glad_glUniformMatrix3x4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4X3FVPROC</name></type> <name>glad_glUniformMatrix4x3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x3fv</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_0</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORMASKIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORMASKIPROC</name></type> <name>glad_glColorMaski</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMaski</name></cpp:macro> <cpp:value>glad_glColorMaski</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBOOLEANI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBOOLEANI_VPROC</name></type> <name>glad_glGetBooleani_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleani_v</name></cpp:macro> <cpp:value>glad_glGetBooleani_v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERI_VPROC</name></type> <name>glad_glGetIntegeri_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegeri_v</name></cpp:macro> <cpp:value>glad_glGetIntegeri_v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEIPROC</name></type> <name>glad_glEnablei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnablei</name></cpp:macro> <cpp:value>glad_glEnablei</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEIPROC</name></type> <name>glad_glDisablei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisablei</name></cpp:macro> <cpp:value>glad_glDisablei</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISENABLEDIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISENABLEDIPROC</name></type> <name>glad_glIsEnabledi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabledi</name></cpp:macro> <cpp:value>glad_glIsEnabledi</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name></type> <name>glad_glBeginTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginTransformFeedback</name></cpp:macro> <cpp:value>glad_glBeginTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDTRANSFORMFEEDBACKPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDTRANSFORMFEEDBACKPROC</name></type> <name>glad_glEndTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndTransformFeedback</name></cpp:macro> <cpp:value>glad_glEndTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERRANGEPROC</name></type> <name>glad_glBindBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferRange</name></cpp:macro> <cpp:value>glad_glBindBufferRange</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERBASEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERBASEPROC</name></type> <name>glad_glBindBufferBase</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferBase</name></cpp:macro> <cpp:value>glad_glBindBufferBase</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name></type> <name>glad_glTransformFeedbackVaryings</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackVaryings</name></cpp:macro> <cpp:value>glad_glTransformFeedbackVaryings</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name></type> <name>glad_glGetTransformFeedbackVarying</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTransformFeedbackVarying</name></cpp:macro> <cpp:value>glad_glGetTransformFeedbackVarying</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLAMPCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLAMPCOLORPROC</name></type> <name>glad_glClampColor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClampColor</name></cpp:macro> <cpp:value>glad_glClampColor</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINCONDITIONALRENDERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINCONDITIONALRENDERPROC</name></type> <name>glad_glBeginConditionalRender</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginConditionalRender</name></cpp:macro> <cpp:value>glad_glBeginConditionalRender</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDCONDITIONALRENDERPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDCONDITIONALRENDERPROC</name></type> <name>glad_glEndConditionalRender</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndConditionalRender</name></cpp:macro> <cpp:value>glad_glEndConditionalRender</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBIPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBIPOINTERPROC</name></type> <name>glad_glVertexAttribIPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribIPointer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIIVPROC</name></type> <name>glad_glGetVertexAttribIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIUIVPROC</name></type> <name>glad_glGetVertexAttribIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIuiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1IPROC</name></type> <name>glad_glVertexAttribI1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1i</name></cpp:macro> <cpp:value>glad_glVertexAttribI1i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2IPROC</name></type> <name>glad_glVertexAttribI2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2i</name></cpp:macro> <cpp:value>glad_glVertexAttribI2i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3IPROC</name></type> <name>glad_glVertexAttribI3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3i</name></cpp:macro> <cpp:value>glad_glVertexAttribI3i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4IPROC</name></type> <name>glad_glVertexAttribI4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4i</name></cpp:macro> <cpp:value>glad_glVertexAttribI4i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1UIPROC</name></type> <name>glad_glVertexAttribI1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI1ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2UIPROC</name></type> <name>glad_glVertexAttribI2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3UIPROC</name></type> <name>glad_glVertexAttribI3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UIPROC</name></type> <name>glad_glVertexAttribI4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1IVPROC</name></type> <name>glad_glVertexAttribI1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI1iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2IVPROC</name></type> <name>glad_glVertexAttribI2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI2iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3IVPROC</name></type> <name>glad_glVertexAttribI3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI3iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4IVPROC</name></type> <name>glad_glVertexAttribI4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1UIVPROC</name></type> <name>glad_glVertexAttribI1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI1uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2UIVPROC</name></type> <name>glad_glVertexAttribI2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3UIVPROC</name></type> <name>glad_glVertexAttribI3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UIVPROC</name></type> <name>glad_glVertexAttribI4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4BVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4BVPROC</name></type> <name>glad_glVertexAttribI4bv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4bv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4bv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4SVPROC</name></type> <name>glad_glVertexAttribI4sv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4sv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4sv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UBVPROC</name></type> <name>glad_glVertexAttribI4ubv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ubv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ubv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4USVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4USVPROC</name></type> <name>glad_glVertexAttribI4usv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4usv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4usv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMUIVPROC</name></type> <name>glad_glGetUniformuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformuiv</name></cpp:macro> <cpp:value>glad_glGetUniformuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGDATALOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGDATALOCATIONPROC</name></type> <name>glad_glBindFragDataLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocation</name></cpp:macro> <cpp:value>glad_glBindFragDataLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGDATALOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGDATALOCATIONPROC</name></type> <name>glad_glGetFragDataLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataLocation</name></cpp:macro> <cpp:value>glad_glGetFragDataLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UIPROC</name></type> <name>glad_glUniform1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1ui</name></cpp:macro> <cpp:value>glad_glUniform1ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UIPROC</name></type> <name>glad_glUniform2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2ui</name></cpp:macro> <cpp:value>glad_glUniform2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UIPROC</name></type> <name>glad_glUniform3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3ui</name></cpp:macro> <cpp:value>glad_glUniform3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UIPROC</name></type> <name>glad_glUniform4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4ui</name></cpp:macro> <cpp:value>glad_glUniform4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UIVPROC</name></type> <name>glad_glUniform1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1uiv</name></cpp:macro> <cpp:value>glad_glUniform1uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UIVPROC</name></type> <name>glad_glUniform2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2uiv</name></cpp:macro> <cpp:value>glad_glUniform2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UIVPROC</name></type> <name>glad_glUniform3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3uiv</name></cpp:macro> <cpp:value>glad_glUniform3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UIVPROC</name></type> <name>glad_glUniform4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4uiv</name></cpp:macro> <cpp:value>glad_glUniform4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIIVPROC</name></type> <name>glad_glTexParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIiv</name></cpp:macro> <cpp:value>glad_glTexParameterIiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIUIVPROC</name></type> <name>glad_glTexParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIuiv</name></cpp:macro> <cpp:value>glad_glTexParameterIuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIIVPROC</name></type> <name>glad_glGetTexParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIiv</name></cpp:macro> <cpp:value>glad_glGetTexParameterIiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIUIVPROC</name></type> <name>glad_glGetTexParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIuiv</name></cpp:macro> <cpp:value>glad_glGetTexParameterIuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERIVPROC</name></type> <name>glad_glClearBufferiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferiv</name></cpp:macro> <cpp:value>glad_glClearBufferiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERUIVPROC</name></type> <name>glad_glClearBufferuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferuiv</name></cpp:macro> <cpp:value>glad_glClearBufferuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERFVPROC</name></type> <name>glad_glClearBufferfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferfv</name></cpp:macro> <cpp:value>glad_glClearBufferfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERFIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERFIPROC</name></type> <name>glad_glClearBufferfi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferfi</name></cpp:macro> <cpp:value>glad_glClearBufferfi</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLGETSTRINGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSTRINGIPROC</name></type> <name>glad_glGetStringi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetStringi</name></cpp:macro> <cpp:value>glad_glGetStringi</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISRENDERBUFFERPROC</name></type> <name>glad_glIsRenderbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsRenderbuffer</name></cpp:macro> <cpp:value>glad_glIsRenderbuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDRENDERBUFFERPROC</name></type> <name>glad_glBindRenderbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindRenderbuffer</name></cpp:macro> <cpp:value>glad_glBindRenderbuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETERENDERBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETERENDERBUFFERSPROC</name></type> <name>glad_glDeleteRenderbuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteRenderbuffers</name></cpp:macro> <cpp:value>glad_glDeleteRenderbuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENRENDERBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENRENDERBUFFERSPROC</name></type> <name>glad_glGenRenderbuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenRenderbuffers</name></cpp:macro> <cpp:value>glad_glGenRenderbuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEPROC</name></type> <name>glad_glRenderbufferStorage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorage</name></cpp:macro> <cpp:value>glad_glRenderbufferStorage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetRenderbufferParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetRenderbufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetRenderbufferParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISFRAMEBUFFERPROC</name></type> <name>glad_glIsFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFramebuffer</name></cpp:macro> <cpp:value>glad_glIsFramebuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAMEBUFFERPROC</name></type> <name>glad_glBindFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFramebuffer</name></cpp:macro> <cpp:value>glad_glBindFramebuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFRAMEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFRAMEBUFFERSPROC</name></type> <name>glad_glDeleteFramebuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFramebuffers</name></cpp:macro> <cpp:value>glad_glDeleteFramebuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFRAMEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFRAMEBUFFERSPROC</name></type> <name>glad_glGenFramebuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFramebuffers</name></cpp:macro> <cpp:value>glad_glGenFramebuffers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name></type> <name>glad_glCheckFramebufferStatus</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCheckFramebufferStatus</name></cpp:macro> <cpp:value>glad_glCheckFramebufferStatus</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name></type> <name>glad_glFramebufferTexture1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture1D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name></type> <name>glad_glFramebufferTexture2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture2D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name></type> <name>glad_glFramebufferTexture3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture3D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture3D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name></type> <name>glad_glFramebufferRenderbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferRenderbuffer</name></cpp:macro> <cpp:value>glad_glFramebufferRenderbuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></type> <name>glad_glGetFramebufferAttachmentParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferAttachmentParameteriv</name></cpp:macro> <cpp:value>glad_glGetFramebufferAttachmentParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENERATEMIPMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENERATEMIPMAPPROC</name></type> <name>glad_glGenerateMipmap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateMipmap</name></cpp:macro> <cpp:value>glad_glGenerateMipmap</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLITFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLITFRAMEBUFFERPROC</name></type> <name>glad_glBlitFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlitFramebuffer</name></cpp:macro> <cpp:value>glad_glBlitFramebuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name></type> <name>glad_glRenderbufferStorageMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageMultisample</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageMultisample</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name></type> <name>glad_glFramebufferTextureLayer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureLayer</name></cpp:macro> <cpp:value>glad_glFramebufferTextureLayer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPBUFFERRANGEPROC</name></type> <name>glad_glMapBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBufferRange</name></cpp:macro> <cpp:value>glad_glMapBufferRange</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name></type> <name>glad_glFlushMappedBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushMappedBufferRange</name></cpp:macro> <cpp:value>glad_glFlushMappedBufferRange</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXARRAYPROC</name></type> <name>glad_glBindVertexArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexArray</name></cpp:macro> <cpp:value>glad_glBindVertexArray</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEVERTEXARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEVERTEXARRAYSPROC</name></type> <name>glad_glDeleteVertexArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteVertexArrays</name></cpp:macro> <cpp:value>glad_glDeleteVertexArrays</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENVERTEXARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENVERTEXARRAYSPROC</name></type> <name>glad_glGenVertexArrays</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenVertexArrays</name></cpp:macro> <cpp:value>glad_glGenVertexArrays</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISVERTEXARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISVERTEXARRAYPROC</name></type> <name>glad_glIsVertexArray</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVertexArray</name></cpp:macro> <cpp:value>glad_glIsVertexArray</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_1</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSINSTANCEDPROC</name></type> <name>glad_glDrawArraysInstanced</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysInstanced</name></cpp:macro> <cpp:value>glad_glDrawArraysInstanced</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDPROC</name></type> <name>glad_glDrawElementsInstanced</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstanced</name></cpp:macro> <cpp:value>glad_glDrawElementsInstanced</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUFFERPROC</name></type> <name>glad_glTexBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBuffer</name></cpp:macro> <cpp:value>glad_glTexBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRIMITIVERESTARTINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRIMITIVERESTARTINDEXPROC</name></type> <name>glad_glPrimitiveRestartIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrimitiveRestartIndex</name></cpp:macro> <cpp:value>glad_glPrimitiveRestartIndex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYBUFFERSUBDATAPROC</name></type> <name>glad_glCopyBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyBufferSubData</name></cpp:macro> <cpp:value>glad_glCopyBufferSubData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMINDICESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMINDICESPROC</name></type> <name>glad_glGetUniformIndices</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformIndices</name></cpp:macro> <cpp:value>glad_glGetUniformIndices</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMSIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMSIVPROC</name></type> <name>glad_glGetActiveUniformsiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformsiv</name></cpp:macro> <cpp:value>glad_glGetActiveUniformsiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMNAMEPROC</name></type> <name>glad_glGetActiveUniformName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformName</name></cpp:macro> <cpp:value>glad_glGetActiveUniformName</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMBLOCKINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMBLOCKINDEXPROC</name></type> <name>glad_glGetUniformBlockIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformBlockIndex</name></cpp:macro> <cpp:value>glad_glGetUniformBlockIndex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name></type> <name>glad_glGetActiveUniformBlockiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformBlockiv</name></cpp:macro> <cpp:value>glad_glGetActiveUniformBlockiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name></type> <name>glad_glGetActiveUniformBlockName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformBlockName</name></cpp:macro> <cpp:value>glad_glGetActiveUniformBlockName</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMBLOCKBINDINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMBLOCKBINDINGPROC</name></type> <name>glad_glUniformBlockBinding</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformBlockBinding</name></cpp:macro> <cpp:value>glad_glUniformBlockBinding</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawElementsBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawElementsBaseVertex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawRangeElementsBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawRangeElementsBaseVertex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name></type> <name>glad_glDrawElementsInstancedBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedBaseVertex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glMultiDrawElementsBaseVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsBaseVertex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROVOKINGVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROVOKINGVERTEXPROC</name></type> <name>glad_glProvokingVertex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProvokingVertex</name></cpp:macro> <cpp:value>glad_glProvokingVertex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>APIENTRYP</name> <name>PFNGLFENCESYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFENCESYNCPROC</name></type> <name>glad_glFenceSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFenceSync</name></cpp:macro> <cpp:value>glad_glFenceSync</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISSYNCPROC</name></type> <name>glad_glIsSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsSync</name></cpp:macro> <cpp:value>glad_glIsSync</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETESYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETESYNCPROC</name></type> <name>glad_glDeleteSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteSync</name></cpp:macro> <cpp:value>glad_glDeleteSync</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIENTWAITSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIENTWAITSYNCPROC</name></type> <name>glad_glClientWaitSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientWaitSync</name></cpp:macro> <cpp:value>glad_glClientWaitSync</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWAITSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWAITSYNCPROC</name></type> <name>glad_glWaitSync</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWaitSync</name></cpp:macro> <cpp:value>glad_glWaitSync</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGER64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGER64VPROC</name></type> <name>glad_glGetInteger64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInteger64v</name></cpp:macro> <cpp:value>glad_glGetInteger64v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSYNCIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSYNCIVPROC</name></type> <name>glad_glGetSynciv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSynciv</name></cpp:macro> <cpp:value>glad_glGetSynciv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGER64I_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGER64I_VPROC</name></type> <name>glad_glGetInteger64i_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInteger64i_v</name></cpp:macro> <cpp:value>glad_glGetInteger64i_v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERI64VPROC</name></type> <name>glad_glGetBufferParameteri64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameteri64v</name></cpp:macro> <cpp:value>glad_glGetBufferParameteri64v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTUREPROC</name></type> <name>glad_glFramebufferTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture</name></cpp:macro> <cpp:value>glad_glFramebufferTexture</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name></type> <name>glad_glTexImage2DMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2DMultisample</name></cpp:macro> <cpp:value>glad_glTexImage2DMultisample</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name></type> <name>glad_glTexImage3DMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3DMultisample</name></cpp:macro> <cpp:value>glad_glTexImage3DMultisample</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTISAMPLEFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTISAMPLEFVPROC</name></type> <name>glad_glGetMultisamplefv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultisamplefv</name></cpp:macro> <cpp:value>glad_glGetMultisamplefv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMASKIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMASKIPROC</name></type> <name>glad_glSampleMaski</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMaski</name></cpp:macro> <cpp:value>glad_glSampleMaski</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_3</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name></type> <name>glad_glBindFragDataLocationIndexed</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocationIndexed</name></cpp:macro> <cpp:value>glad_glBindFragDataLocationIndexed</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGDATAINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGDATAINDEXPROC</name></type> <name>glad_glGetFragDataIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataIndex</name></cpp:macro> <cpp:value>glad_glGetFragDataIndex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENSAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENSAMPLERSPROC</name></type> <name>glad_glGenSamplers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenSamplers</name></cpp:macro> <cpp:value>glad_glGenSamplers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETESAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETESAMPLERSPROC</name></type> <name>glad_glDeleteSamplers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteSamplers</name></cpp:macro> <cpp:value>glad_glDeleteSamplers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISSAMPLERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISSAMPLERPROC</name></type> <name>glad_glIsSampler</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsSampler</name></cpp:macro> <cpp:value>glad_glIsSampler</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDSAMPLERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDSAMPLERPROC</name></type> <name>glad_glBindSampler</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindSampler</name></cpp:macro> <cpp:value>glad_glBindSampler</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIPROC</name></type> <name>glad_glSamplerParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameteri</name></cpp:macro> <cpp:value>glad_glSamplerParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIVPROC</name></type> <name>glad_glSamplerParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameteriv</name></cpp:macro> <cpp:value>glad_glSamplerParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERFPROC</name></type> <name>glad_glSamplerParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterf</name></cpp:macro> <cpp:value>glad_glSamplerParameterf</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERFVPROC</name></type> <name>glad_glSamplerParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterfv</name></cpp:macro> <cpp:value>glad_glSamplerParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glSamplerParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterIiv</name></cpp:macro> <cpp:value>glad_glSamplerParameterIiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glSamplerParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterIuiv</name></cpp:macro> <cpp:value>glad_glSamplerParameterIuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERIVPROC</name></type> <name>glad_glGetSamplerParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameteriv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glGetSamplerParameterIiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterIiv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterIiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERFVPROC</name></type> <name>glad_glGetSamplerParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterfv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glGetSamplerParameterIuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterIuiv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterIuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLQUERYCOUNTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLQUERYCOUNTERPROC</name></type> <name>glad_glQueryCounter</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glQueryCounter</name></cpp:macro> <cpp:value>glad_glQueryCounter</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTI64VPROC</name></type> <name>glad_glGetQueryObjecti64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjecti64v</name></cpp:macro> <cpp:value>glad_glGetQueryObjecti64v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTUI64VPROC</name></type> <name>glad_glGetQueryObjectui64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectui64v</name></cpp:macro> <cpp:value>glad_glGetQueryObjectui64v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBDIVISORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBDIVISORPROC</name></type> <name>glad_glVertexAttribDivisor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribDivisor</name></cpp:macro> <cpp:value>glad_glVertexAttribDivisor</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP1UIPROC</name></type> <name>glad_glVertexAttribP1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP1ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP1ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP1UIVPROC</name></type> <name>glad_glVertexAttribP1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP1uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP1uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP2UIPROC</name></type> <name>glad_glVertexAttribP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP2ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP2UIVPROC</name></type> <name>glad_glVertexAttribP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP2uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP3UIPROC</name></type> <name>glad_glVertexAttribP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP3ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP3UIVPROC</name></type> <name>glad_glVertexAttribP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP3uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP4UIPROC</name></type> <name>glad_glVertexAttribP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP4ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP4UIVPROC</name></type> <name>glad_glVertexAttribP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP2UIPROC</name></type> <name>glad_glVertexP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP2ui</name></cpp:macro> <cpp:value>glad_glVertexP2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP2UIVPROC</name></type> <name>glad_glVertexP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP2uiv</name></cpp:macro> <cpp:value>glad_glVertexP2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP3UIPROC</name></type> <name>glad_glVertexP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP3ui</name></cpp:macro> <cpp:value>glad_glVertexP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP3UIVPROC</name></type> <name>glad_glVertexP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP3uiv</name></cpp:macro> <cpp:value>glad_glVertexP3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP4UIPROC</name></type> <name>glad_glVertexP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP4ui</name></cpp:macro> <cpp:value>glad_glVertexP4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP4UIVPROC</name></type> <name>glad_glVertexP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP4uiv</name></cpp:macro> <cpp:value>glad_glVertexP4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP1UIPROC</name></type> <name>glad_glTexCoordP1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP1ui</name></cpp:macro> <cpp:value>glad_glTexCoordP1ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP1UIVPROC</name></type> <name>glad_glTexCoordP1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP1uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP1uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP2UIPROC</name></type> <name>glad_glTexCoordP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP2ui</name></cpp:macro> <cpp:value>glad_glTexCoordP2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP2UIVPROC</name></type> <name>glad_glTexCoordP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP2uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP3UIPROC</name></type> <name>glad_glTexCoordP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP3ui</name></cpp:macro> <cpp:value>glad_glTexCoordP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP3UIVPROC</name></type> <name>glad_glTexCoordP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP3uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP4UIPROC</name></type> <name>glad_glTexCoordP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP4ui</name></cpp:macro> <cpp:value>glad_glTexCoordP4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP4UIVPROC</name></type> <name>glad_glTexCoordP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP4uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP1UIPROC</name></type> <name>glad_glMultiTexCoordP1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP1ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP1ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP1UIVPROC</name></type> <name>glad_glMultiTexCoordP1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP1uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP1uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP2UIPROC</name></type> <name>glad_glMultiTexCoordP2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP2ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP2UIVPROC</name></type> <name>glad_glMultiTexCoordP2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP2uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP3UIPROC</name></type> <name>glad_glMultiTexCoordP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP3ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP3UIVPROC</name></type> <name>glad_glMultiTexCoordP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP3uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP4UIPROC</name></type> <name>glad_glMultiTexCoordP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP4ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP4UIVPROC</name></type> <name>glad_glMultiTexCoordP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP4uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALP3UIPROC</name></type> <name>glad_glNormalP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalP3ui</name></cpp:macro> <cpp:value>glad_glNormalP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALP3UIVPROC</name></type> <name>glad_glNormalP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalP3uiv</name></cpp:macro> <cpp:value>glad_glNormalP3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP3UIPROC</name></type> <name>glad_glColorP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP3ui</name></cpp:macro> <cpp:value>glad_glColorP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP3UIVPROC</name></type> <name>glad_glColorP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP3uiv</name></cpp:macro> <cpp:value>glad_glColorP3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP4UIPROC</name></type> <name>glad_glColorP4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP4ui</name></cpp:macro> <cpp:value>glad_glColorP4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP4UIVPROC</name></type> <name>glad_glColorP4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP4uiv</name></cpp:macro> <cpp:value>glad_glColorP4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORP3UIPROC</name></type> <name>glad_glSecondaryColorP3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorP3ui</name></cpp:macro> <cpp:value>glad_glSecondaryColorP3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORP3UIVPROC</name></type> <name>glad_glSecondaryColorP3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorP3uiv</name></cpp:macro> <cpp:value>glad_glSecondaryColorP3uiv</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_4_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_4_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_4_0</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMINSAMPLESHADINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMINSAMPLESHADINGPROC</name></type> <name>glad_glMinSampleShading</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMinSampleShading</name></cpp:macro> <cpp:value>glad_glMinSampleShading</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONIPROC</name></type> <name>glad_glBlendEquationi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationi</name></cpp:macro> <cpp:value>glad_glBlendEquationi</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEIPROC</name></type> <name>glad_glBlendEquationSeparatei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparatei</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparatei</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCIPROC</name></type> <name>glad_glBlendFunci</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFunci</name></cpp:macro> <cpp:value>glad_glBlendFunci</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEIPROC</name></type> <name>glad_glBlendFuncSeparatei</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparatei</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparatei</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSINDIRECTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSINDIRECTPROC</name></type> <name>glad_glDrawArraysIndirect</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysIndirect</name></cpp:macro> <cpp:value>glad_glDrawArraysIndirect</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINDIRECTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINDIRECTPROC</name></type> <name>glad_glDrawElementsIndirect</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsIndirect</name></cpp:macro> <cpp:value>glad_glDrawElementsIndirect</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1DPROC</name></type> <name>glad_glUniform1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1d</name></cpp:macro> <cpp:value>glad_glUniform1d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2DPROC</name></type> <name>glad_glUniform2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2d</name></cpp:macro> <cpp:value>glad_glUniform2d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3DPROC</name></type> <name>glad_glUniform3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3d</name></cpp:macro> <cpp:value>glad_glUniform3d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4DPROC</name></type> <name>glad_glUniform4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4d</name></cpp:macro> <cpp:value>glad_glUniform4d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1DVPROC</name></type> <name>glad_glUniform1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1dv</name></cpp:macro> <cpp:value>glad_glUniform1dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2DVPROC</name></type> <name>glad_glUniform2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2dv</name></cpp:macro> <cpp:value>glad_glUniform2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3DVPROC</name></type> <name>glad_glUniform3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3dv</name></cpp:macro> <cpp:value>glad_glUniform3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4DVPROC</name></type> <name>glad_glUniform4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4dv</name></cpp:macro> <cpp:value>glad_glUniform4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2DVPROC</name></type> <name>glad_glUniformMatrix2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3DVPROC</name></type> <name>glad_glUniformMatrix3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4DVPROC</name></type> <name>glad_glUniformMatrix4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2X3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2X3DVPROC</name></type> <name>glad_glUniformMatrix2x3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x3dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2X4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2X4DVPROC</name></type> <name>glad_glUniformMatrix2x4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x4dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3X2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3X2DVPROC</name></type> <name>glad_glUniformMatrix3x2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x2dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3X4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3X4DVPROC</name></type> <name>glad_glUniformMatrix3x4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x4dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4X2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4X2DVPROC</name></type> <name>glad_glUniformMatrix4x2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x2dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4X3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4X3DVPROC</name></type> <name>glad_glUniformMatrix4x3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x3dv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMDVPROC</name></type> <name>glad_glGetUniformdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformdv</name></cpp:macro> <cpp:value>glad_glGetUniformdv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC</name></type> <name>glad_glGetSubroutineUniformLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSubroutineUniformLocation</name></cpp:macro> <cpp:value>glad_glGetSubroutineUniformLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSUBROUTINEINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSUBROUTINEINDEXPROC</name></type> <name>glad_glGetSubroutineIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSubroutineIndex</name></cpp:macro> <cpp:value>glad_glGetSubroutineIndex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC</name></type> <name>glad_glGetActiveSubroutineUniformiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveSubroutineUniformiv</name></cpp:macro> <cpp:value>glad_glGetActiveSubroutineUniformiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC</name></type> <name>glad_glGetActiveSubroutineUniformName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveSubroutineUniformName</name></cpp:macro> <cpp:value>glad_glGetActiveSubroutineUniformName</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVESUBROUTINENAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVESUBROUTINENAMEPROC</name></type> <name>glad_glGetActiveSubroutineName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveSubroutineName</name></cpp:macro> <cpp:value>glad_glGetActiveSubroutineName</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMSUBROUTINESUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMSUBROUTINESUIVPROC</name></type> <name>glad_glUniformSubroutinesuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformSubroutinesuiv</name></cpp:macro> <cpp:value>glad_glUniformSubroutinesuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMSUBROUTINEUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMSUBROUTINEUIVPROC</name></type> <name>glad_glGetUniformSubroutineuiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformSubroutineuiv</name></cpp:macro> <cpp:value>glad_glGetUniformSubroutineuiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMSTAGEIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMSTAGEIVPROC</name></type> <name>glad_glGetProgramStageiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramStageiv</name></cpp:macro> <cpp:value>glad_glGetProgramStageiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATCHPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATCHPARAMETERIPROC</name></type> <name>glad_glPatchParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPatchParameteri</name></cpp:macro> <cpp:value>glad_glPatchParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATCHPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATCHPARAMETERFVPROC</name></type> <name>glad_glPatchParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPatchParameterfv</name></cpp:macro> <cpp:value>glad_glPatchParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTRANSFORMFEEDBACKPROC</name></type> <name>glad_glBindTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTransformFeedback</name></cpp:macro> <cpp:value>glad_glBindTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETETRANSFORMFEEDBACKSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETETRANSFORMFEEDBACKSPROC</name></type> <name>glad_glDeleteTransformFeedbacks</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteTransformFeedbacks</name></cpp:macro> <cpp:value>glad_glDeleteTransformFeedbacks</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENTRANSFORMFEEDBACKSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENTRANSFORMFEEDBACKSPROC</name></type> <name>glad_glGenTransformFeedbacks</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenTransformFeedbacks</name></cpp:macro> <cpp:value>glad_glGenTransformFeedbacks</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTRANSFORMFEEDBACKPROC</name></type> <name>glad_glIsTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTransformFeedback</name></cpp:macro> <cpp:value>glad_glIsTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPAUSETRANSFORMFEEDBACKPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPAUSETRANSFORMFEEDBACKPROC</name></type> <name>glad_glPauseTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPauseTransformFeedback</name></cpp:macro> <cpp:value>glad_glPauseTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESUMETRANSFORMFEEDBACKPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESUMETRANSFORMFEEDBACKPROC</name></type> <name>glad_glResumeTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResumeTransformFeedback</name></cpp:macro> <cpp:value>glad_glResumeTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWTRANSFORMFEEDBACKPROC</name></type> <name>glad_glDrawTransformFeedback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawTransformFeedback</name></cpp:macro> <cpp:value>glad_glDrawTransformFeedback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC</name></type> <name>glad_glDrawTransformFeedbackStream</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawTransformFeedbackStream</name></cpp:macro> <cpp:value>glad_glDrawTransformFeedbackStream</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINQUERYINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINQUERYINDEXEDPROC</name></type> <name>glad_glBeginQueryIndexed</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginQueryIndexed</name></cpp:macro> <cpp:value>glad_glBeginQueryIndexed</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDQUERYINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDQUERYINDEXEDPROC</name></type> <name>glad_glEndQueryIndexed</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndQueryIndexed</name></cpp:macro> <cpp:value>glad_glEndQueryIndexed</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYINDEXEDIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYINDEXEDIVPROC</name></type> <name>glad_glGetQueryIndexediv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryIndexediv</name></cpp:macro> <cpp:value>glad_glGetQueryIndexediv</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_4_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_4_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_4_1</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRELEASESHADERCOMPILERPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRELEASESHADERCOMPILERPROC</name></type> <name>glad_glReleaseShaderCompiler</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReleaseShaderCompiler</name></cpp:macro> <cpp:value>glad_glReleaseShaderCompiler</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADERBINARYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADERBINARYPROC</name></type> <name>glad_glShaderBinary</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderBinary</name></cpp:macro> <cpp:value>glad_glShaderBinary</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERPRECISIONFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERPRECISIONFORMATPROC</name></type> <name>glad_glGetShaderPrecisionFormat</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderPrecisionFormat</name></cpp:macro> <cpp:value>glad_glGetShaderPrecisionFormat</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEFPROC</name></type> <name>glad_glDepthRangef</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangef</name></cpp:macro> <cpp:value>glad_glDepthRangef</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHFPROC</name></type> <name>glad_glClearDepthf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepthf</name></cpp:macro> <cpp:value>glad_glClearDepthf</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMBINARYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMBINARYPROC</name></type> <name>glad_glGetProgramBinary</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramBinary</name></cpp:macro> <cpp:value>glad_glGetProgramBinary</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMBINARYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMBINARYPROC</name></type> <name>glad_glProgramBinary</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramBinary</name></cpp:macro> <cpp:value>glad_glProgramBinary</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETERIPROC</name></type> <name>glad_glProgramParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameteri</name></cpp:macro> <cpp:value>glad_glProgramParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUSEPROGRAMSTAGESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUSEPROGRAMSTAGESPROC</name></type> <name>glad_glUseProgramStages</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseProgramStages</name></cpp:macro> <cpp:value>glad_glUseProgramStages</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVESHADERPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVESHADERPROGRAMPROC</name></type> <name>glad_glActiveShaderProgram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveShaderProgram</name></cpp:macro> <cpp:value>glad_glActiveShaderProgram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESHADERPROGRAMVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESHADERPROGRAMVPROC</name></type> <name>glad_glCreateShaderProgramv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShaderProgramv</name></cpp:macro> <cpp:value>glad_glCreateShaderProgramv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPROGRAMPIPELINEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPROGRAMPIPELINEPROC</name></type> <name>glad_glBindProgramPipeline</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindProgramPipeline</name></cpp:macro> <cpp:value>glad_glBindProgramPipeline</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMPIPELINESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMPIPELINESPROC</name></type> <name>glad_glDeleteProgramPipelines</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgramPipelines</name></cpp:macro> <cpp:value>glad_glDeleteProgramPipelines</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPROGRAMPIPELINESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPROGRAMPIPELINESPROC</name></type> <name>glad_glGenProgramPipelines</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenProgramPipelines</name></cpp:macro> <cpp:value>glad_glGenProgramPipelines</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMPIPELINEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMPIPELINEPROC</name></type> <name>glad_glIsProgramPipeline</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgramPipeline</name></cpp:macro> <cpp:value>glad_glIsProgramPipeline</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMPIPELINEIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMPIPELINEIVPROC</name></type> <name>glad_glGetProgramPipelineiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramPipelineiv</name></cpp:macro> <cpp:value>glad_glGetProgramPipelineiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1IPROC</name></type> <name>glad_glProgramUniform1i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1i</name></cpp:macro> <cpp:value>glad_glProgramUniform1i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1IVPROC</name></type> <name>glad_glProgramUniform1iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1iv</name></cpp:macro> <cpp:value>glad_glProgramUniform1iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1FPROC</name></type> <name>glad_glProgramUniform1f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1f</name></cpp:macro> <cpp:value>glad_glProgramUniform1f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1FVPROC</name></type> <name>glad_glProgramUniform1fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1fv</name></cpp:macro> <cpp:value>glad_glProgramUniform1fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1DPROC</name></type> <name>glad_glProgramUniform1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1d</name></cpp:macro> <cpp:value>glad_glProgramUniform1d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1DVPROC</name></type> <name>glad_glProgramUniform1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1dv</name></cpp:macro> <cpp:value>glad_glProgramUniform1dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1UIPROC</name></type> <name>glad_glProgramUniform1ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1ui</name></cpp:macro> <cpp:value>glad_glProgramUniform1ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1UIVPROC</name></type> <name>glad_glProgramUniform1uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1uiv</name></cpp:macro> <cpp:value>glad_glProgramUniform1uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2IPROC</name></type> <name>glad_glProgramUniform2i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2i</name></cpp:macro> <cpp:value>glad_glProgramUniform2i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2IVPROC</name></type> <name>glad_glProgramUniform2iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2iv</name></cpp:macro> <cpp:value>glad_glProgramUniform2iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2FPROC</name></type> <name>glad_glProgramUniform2f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2f</name></cpp:macro> <cpp:value>glad_glProgramUniform2f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2FVPROC</name></type> <name>glad_glProgramUniform2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2fv</name></cpp:macro> <cpp:value>glad_glProgramUniform2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2DPROC</name></type> <name>glad_glProgramUniform2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2d</name></cpp:macro> <cpp:value>glad_glProgramUniform2d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2DVPROC</name></type> <name>glad_glProgramUniform2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2dv</name></cpp:macro> <cpp:value>glad_glProgramUniform2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2UIPROC</name></type> <name>glad_glProgramUniform2ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2ui</name></cpp:macro> <cpp:value>glad_glProgramUniform2ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2UIVPROC</name></type> <name>glad_glProgramUniform2uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2uiv</name></cpp:macro> <cpp:value>glad_glProgramUniform2uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3IPROC</name></type> <name>glad_glProgramUniform3i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3i</name></cpp:macro> <cpp:value>glad_glProgramUniform3i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3IVPROC</name></type> <name>glad_glProgramUniform3iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3iv</name></cpp:macro> <cpp:value>glad_glProgramUniform3iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3FPROC</name></type> <name>glad_glProgramUniform3f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3f</name></cpp:macro> <cpp:value>glad_glProgramUniform3f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3FVPROC</name></type> <name>glad_glProgramUniform3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3fv</name></cpp:macro> <cpp:value>glad_glProgramUniform3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3DPROC</name></type> <name>glad_glProgramUniform3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3d</name></cpp:macro> <cpp:value>glad_glProgramUniform3d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3DVPROC</name></type> <name>glad_glProgramUniform3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3dv</name></cpp:macro> <cpp:value>glad_glProgramUniform3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3UIPROC</name></type> <name>glad_glProgramUniform3ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3ui</name></cpp:macro> <cpp:value>glad_glProgramUniform3ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3UIVPROC</name></type> <name>glad_glProgramUniform3uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3uiv</name></cpp:macro> <cpp:value>glad_glProgramUniform3uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4IPROC</name></type> <name>glad_glProgramUniform4i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4i</name></cpp:macro> <cpp:value>glad_glProgramUniform4i</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4IVPROC</name></type> <name>glad_glProgramUniform4iv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4iv</name></cpp:macro> <cpp:value>glad_glProgramUniform4iv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4FPROC</name></type> <name>glad_glProgramUniform4f</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4f</name></cpp:macro> <cpp:value>glad_glProgramUniform4f</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4FVPROC</name></type> <name>glad_glProgramUniform4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4fv</name></cpp:macro> <cpp:value>glad_glProgramUniform4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4DPROC</name></type> <name>glad_glProgramUniform4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4d</name></cpp:macro> <cpp:value>glad_glProgramUniform4d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4DVPROC</name></type> <name>glad_glProgramUniform4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4dv</name></cpp:macro> <cpp:value>glad_glProgramUniform4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4UIPROC</name></type> <name>glad_glProgramUniform4ui</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4ui</name></cpp:macro> <cpp:value>glad_glProgramUniform4ui</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4UIVPROC</name></type> <name>glad_glProgramUniform4uiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4uiv</name></cpp:macro> <cpp:value>glad_glProgramUniform4uiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2FVPROC</name></type> <name>glad_glProgramUniformMatrix2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3FVPROC</name></type> <name>glad_glProgramUniformMatrix3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4FVPROC</name></type> <name>glad_glProgramUniformMatrix4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2DVPROC</name></type> <name>glad_glProgramUniformMatrix2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3DVPROC</name></type> <name>glad_glProgramUniformMatrix3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4DVPROC</name></type> <name>glad_glProgramUniformMatrix4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC</name></type> <name>glad_glProgramUniformMatrix2x3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x3fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC</name></type> <name>glad_glProgramUniformMatrix3x2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x2fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC</name></type> <name>glad_glProgramUniformMatrix2x4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x4fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC</name></type> <name>glad_glProgramUniformMatrix4x2fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x2fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x2fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC</name></type> <name>glad_glProgramUniformMatrix3x4fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x4fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x4fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC</name></type> <name>glad_glProgramUniformMatrix4x3fv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x3fv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x3fv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC</name></type> <name>glad_glProgramUniformMatrix2x3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x3dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC</name></type> <name>glad_glProgramUniformMatrix3x2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x2dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC</name></type> <name>glad_glProgramUniformMatrix2x4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x4dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC</name></type> <name>glad_glProgramUniformMatrix4x2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x2dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC</name></type> <name>glad_glProgramUniformMatrix3x4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x4dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC</name></type> <name>glad_glProgramUniformMatrix4x3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x3dv</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVALIDATEPROGRAMPIPELINEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVALIDATEPROGRAMPIPELINEPROC</name></type> <name>glad_glValidateProgramPipeline</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glValidateProgramPipeline</name></cpp:macro> <cpp:value>glad_glValidateProgramPipeline</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMPIPELINEINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMPIPELINEINFOLOGPROC</name></type> <name>glad_glGetProgramPipelineInfoLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramPipelineInfoLog</name></cpp:macro> <cpp:value>glad_glGetProgramPipelineInfoLog</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1DPROC</name></type> <name>glad_glVertexAttribL1d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1d</name></cpp:macro> <cpp:value>glad_glVertexAttribL1d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2DPROC</name></type> <name>glad_glVertexAttribL2d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2d</name></cpp:macro> <cpp:value>glad_glVertexAttribL2d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3DPROC</name></type> <name>glad_glVertexAttribL3d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3d</name></cpp:macro> <cpp:value>glad_glVertexAttribL3d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4DPROC</name></type> <name>glad_glVertexAttribL4d</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4d</name></cpp:macro> <cpp:value>glad_glVertexAttribL4d</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1DVPROC</name></type> <name>glad_glVertexAttribL1dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1dv</name></cpp:macro> <cpp:value>glad_glVertexAttribL1dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2DVPROC</name></type> <name>glad_glVertexAttribL2dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2dv</name></cpp:macro> <cpp:value>glad_glVertexAttribL2dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3DVPROC</name></type> <name>glad_glVertexAttribL3dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3dv</name></cpp:macro> <cpp:value>glad_glVertexAttribL3dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4DVPROC</name></type> <name>glad_glVertexAttribL4dv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4dv</name></cpp:macro> <cpp:value>glad_glVertexAttribL4dv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBLPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBLPOINTERPROC</name></type> <name>glad_glVertexAttribLPointer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribLPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribLPointer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBLDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBLDVPROC</name></type> <name>glad_glGetVertexAttribLdv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribLdv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribLdv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIEWPORTARRAYVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIEWPORTARRAYVPROC</name></type> <name>glad_glViewportArrayv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glViewportArrayv</name></cpp:macro> <cpp:value>glad_glViewportArrayv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIEWPORTINDEXEDFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIEWPORTINDEXEDFPROC</name></type> <name>glad_glViewportIndexedf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glViewportIndexedf</name></cpp:macro> <cpp:value>glad_glViewportIndexedf</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIEWPORTINDEXEDFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIEWPORTINDEXEDFVPROC</name></type> <name>glad_glViewportIndexedfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glViewportIndexedfv</name></cpp:macro> <cpp:value>glad_glViewportIndexedfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSCISSORARRAYVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSCISSORARRAYVPROC</name></type> <name>glad_glScissorArrayv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScissorArrayv</name></cpp:macro> <cpp:value>glad_glScissorArrayv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSCISSORINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSCISSORINDEXEDPROC</name></type> <name>glad_glScissorIndexed</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScissorIndexed</name></cpp:macro> <cpp:value>glad_glScissorIndexed</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSCISSORINDEXEDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSCISSORINDEXEDVPROC</name></type> <name>glad_glScissorIndexedv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScissorIndexedv</name></cpp:macro> <cpp:value>glad_glScissorIndexedv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEARRAYVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEARRAYVPROC</name></type> <name>glad_glDepthRangeArrayv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangeArrayv</name></cpp:macro> <cpp:value>glad_glDepthRangeArrayv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEINDEXEDPROC</name></type> <name>glad_glDepthRangeIndexed</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangeIndexed</name></cpp:macro> <cpp:value>glad_glDepthRangeIndexed</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFLOATI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFLOATI_VPROC</name></type> <name>glad_glGetFloati_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFloati_v</name></cpp:macro> <cpp:value>glad_glGetFloati_v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDOUBLEI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDOUBLEI_VPROC</name></type> <name>glad_glGetDoublei_v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDoublei_v</name></cpp:macro> <cpp:value>glad_glGetDoublei_v</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_4_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_4_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_4_2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC</name></type> <name>glad_glDrawArraysInstancedBaseInstance</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysInstancedBaseInstance</name></cpp:macro> <cpp:value>glad_glDrawArraysInstancedBaseInstance</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC</name></type> <name>glad_glDrawElementsInstancedBaseInstance</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedBaseInstance</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedBaseInstance</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC</name></type> <name>glad_glDrawElementsInstancedBaseVertexBaseInstance</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedBaseVertexBaseInstance</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedBaseVertexBaseInstance</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTERNALFORMATIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTERNALFORMATIVPROC</name></type> <name>glad_glGetInternalformativ</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInternalformativ</name></cpp:macro> <cpp:value>glad_glGetInternalformativ</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC</name></type> <name>glad_glGetActiveAtomicCounterBufferiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveAtomicCounterBufferiv</name></cpp:macro> <cpp:value>glad_glGetActiveAtomicCounterBufferiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDIMAGETEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDIMAGETEXTUREPROC</name></type> <name>glad_glBindImageTexture</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindImageTexture</name></cpp:macro> <cpp:value>glad_glBindImageTexture</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMEMORYBARRIERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMEMORYBARRIERPROC</name></type> <name>glad_glMemoryBarrier</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMemoryBarrier</name></cpp:macro> <cpp:value>glad_glMemoryBarrier</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSTORAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSTORAGE1DPROC</name></type> <name>glad_glTexStorage1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexStorage1D</name></cpp:macro> <cpp:value>glad_glTexStorage1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSTORAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSTORAGE2DPROC</name></type> <name>glad_glTexStorage2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexStorage2D</name></cpp:macro> <cpp:value>glad_glTexStorage2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSTORAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSTORAGE3DPROC</name></type> <name>glad_glTexStorage3D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexStorage3D</name></cpp:macro> <cpp:value>glad_glTexStorage3D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC</name></type> <name>glad_glDrawTransformFeedbackInstanced</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawTransformFeedbackInstanced</name></cpp:macro> <cpp:value>glad_glDrawTransformFeedbackInstanced</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC</name></type> <name>glad_glDrawTransformFeedbackStreamInstanced</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawTransformFeedbackStreamInstanced</name></cpp:macro> <cpp:value>glad_glDrawTransformFeedbackStreamInstanced</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_4_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_4_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_4_3</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERDATAPROC</name></type> <name>glad_glClearBufferData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferData</name></cpp:macro> <cpp:value>glad_glClearBufferData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERSUBDATAPROC</name></type> <name>glad_glClearBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferSubData</name></cpp:macro> <cpp:value>glad_glClearBufferSubData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISPATCHCOMPUTEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISPATCHCOMPUTEPROC</name></type> <name>glad_glDispatchCompute</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDispatchCompute</name></cpp:macro> <cpp:value>glad_glDispatchCompute</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISPATCHCOMPUTEINDIRECTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISPATCHCOMPUTEINDIRECTPROC</name></type> <name>glad_glDispatchComputeIndirect</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDispatchComputeIndirect</name></cpp:macro> <cpp:value>glad_glDispatchComputeIndirect</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYIMAGESUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYIMAGESUBDATAPROC</name></type> <name>glad_glCopyImageSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyImageSubData</name></cpp:macro> <cpp:value>glad_glCopyImageSubData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERPARAMETERIPROC</name></type> <name>glad_glFramebufferParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferParameteri</name></cpp:macro> <cpp:value>glad_glFramebufferParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAMEBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAMEBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetFramebufferParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetFramebufferParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTERNALFORMATI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTERNALFORMATI64VPROC</name></type> <name>glad_glGetInternalformati64v</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInternalformati64v</name></cpp:macro> <cpp:value>glad_glGetInternalformati64v</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINVALIDATETEXSUBIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINVALIDATETEXSUBIMAGEPROC</name></type> <name>glad_glInvalidateTexSubImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInvalidateTexSubImage</name></cpp:macro> <cpp:value>glad_glInvalidateTexSubImage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINVALIDATETEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINVALIDATETEXIMAGEPROC</name></type> <name>glad_glInvalidateTexImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInvalidateTexImage</name></cpp:macro> <cpp:value>glad_glInvalidateTexImage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINVALIDATEBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINVALIDATEBUFFERSUBDATAPROC</name></type> <name>glad_glInvalidateBufferSubData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInvalidateBufferSubData</name></cpp:macro> <cpp:value>glad_glInvalidateBufferSubData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINVALIDATEBUFFERDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINVALIDATEBUFFERDATAPROC</name></type> <name>glad_glInvalidateBufferData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInvalidateBufferData</name></cpp:macro> <cpp:value>glad_glInvalidateBufferData</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINVALIDATEFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINVALIDATEFRAMEBUFFERPROC</name></type> <name>glad_glInvalidateFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInvalidateFramebuffer</name></cpp:macro> <cpp:value>glad_glInvalidateFramebuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINVALIDATESUBFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINVALIDATESUBFRAMEBUFFERPROC</name></type> <name>glad_glInvalidateSubFramebuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInvalidateSubFramebuffer</name></cpp:macro> <cpp:value>glad_glInvalidateSubFramebuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTPROC</name></type> <name>glad_glMultiDrawArraysIndirect</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArraysIndirect</name></cpp:macro> <cpp:value>glad_glMultiDrawArraysIndirect</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTPROC</name></type> <name>glad_glMultiDrawElementsIndirect</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsIndirect</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsIndirect</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMINTERFACEIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMINTERFACEIVPROC</name></type> <name>glad_glGetProgramInterfaceiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramInterfaceiv</name></cpp:macro> <cpp:value>glad_glGetProgramInterfaceiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMRESOURCEINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMRESOURCEINDEXPROC</name></type> <name>glad_glGetProgramResourceIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramResourceIndex</name></cpp:macro> <cpp:value>glad_glGetProgramResourceIndex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMRESOURCENAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMRESOURCENAMEPROC</name></type> <name>glad_glGetProgramResourceName</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramResourceName</name></cpp:macro> <cpp:value>glad_glGetProgramResourceName</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMRESOURCEIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMRESOURCEIVPROC</name></type> <name>glad_glGetProgramResourceiv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramResourceiv</name></cpp:macro> <cpp:value>glad_glGetProgramResourceiv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMRESOURCELOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMRESOURCELOCATIONPROC</name></type> <name>glad_glGetProgramResourceLocation</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramResourceLocation</name></cpp:macro> <cpp:value>glad_glGetProgramResourceLocation</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC</name></type> <name>glad_glGetProgramResourceLocationIndex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramResourceLocationIndex</name></cpp:macro> <cpp:value>glad_glGetProgramResourceLocationIndex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADERSTORAGEBLOCKBINDINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADERSTORAGEBLOCKBINDINGPROC</name></type> <name>glad_glShaderStorageBlockBinding</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderStorageBlockBinding</name></cpp:macro> <cpp:value>glad_glShaderStorageBlockBinding</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUFFERRANGEPROC</name></type> <name>glad_glTexBufferRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBufferRange</name></cpp:macro> <cpp:value>glad_glTexBufferRange</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSTORAGE2DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSTORAGE2DMULTISAMPLEPROC</name></type> <name>glad_glTexStorage2DMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexStorage2DMultisample</name></cpp:macro> <cpp:value>glad_glTexStorage2DMultisample</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSTORAGE3DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSTORAGE3DMULTISAMPLEPROC</name></type> <name>glad_glTexStorage3DMultisample</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexStorage3DMultisample</name></cpp:macro> <cpp:value>glad_glTexStorage3DMultisample</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREVIEWPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREVIEWPROC</name></type> <name>glad_glTextureView</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureView</name></cpp:macro> <cpp:value>glad_glTextureView</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXBUFFERPROC</name></type> <name>glad_glBindVertexBuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexBuffer</name></cpp:macro> <cpp:value>glad_glBindVertexBuffer</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBFORMATPROC</name></type> <name>glad_glVertexAttribFormat</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribFormat</name></cpp:macro> <cpp:value>glad_glVertexAttribFormat</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBIFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBIFORMATPROC</name></type> <name>glad_glVertexAttribIFormat</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIFormat</name></cpp:macro> <cpp:value>glad_glVertexAttribIFormat</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBLFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBLFORMATPROC</name></type> <name>glad_glVertexAttribLFormat</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribLFormat</name></cpp:macro> <cpp:value>glad_glVertexAttribLFormat</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBBINDINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBBINDINGPROC</name></type> <name>glad_glVertexAttribBinding</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribBinding</name></cpp:macro> <cpp:value>glad_glVertexAttribBinding</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXBINDINGDIVISORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXBINDINGDIVISORPROC</name></type> <name>glad_glVertexBindingDivisor</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexBindingDivisor</name></cpp:macro> <cpp:value>glad_glVertexBindingDivisor</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECONTROLPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECONTROLPROC</name></type> <name>glad_glDebugMessageControl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageControl</name></cpp:macro> <cpp:value>glad_glDebugMessageControl</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEINSERTPROC</name></type> <name>glad_glDebugMessageInsert</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsert</name></cpp:macro> <cpp:value>glad_glDebugMessageInsert</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROC</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECALLBACKPROC</name></type> <name>glad_glDebugMessageCallback</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallback</name></cpp:macro> <cpp:value>glad_glDebugMessageCallback</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDEBUGMESSAGELOGPROC</name></type> <name>glad_glGetDebugMessageLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLog</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLog</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPUSHDEBUGGROUPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPUSHDEBUGGROUPPROC</name></type> <name>glad_glPushDebugGroup</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushDebugGroup</name></cpp:macro> <cpp:value>glad_glPushDebugGroup</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOPDEBUGGROUPPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOPDEBUGGROUPPROC</name></type> <name>glad_glPopDebugGroup</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopDebugGroup</name></cpp:macro> <cpp:value>glad_glPopDebugGroup</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLOBJECTLABELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLOBJECTLABELPROC</name></type> <name>glad_glObjectLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectLabel</name></cpp:macro> <cpp:value>glad_glObjectLabel</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTLABELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTLABELPROC</name></type> <name>glad_glGetObjectLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectLabel</name></cpp:macro> <cpp:value>glad_glGetObjectLabel</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLOBJECTPTRLABELPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLOBJECTPTRLABELPROC</name></type> <name>glad_glObjectPtrLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectPtrLabel</name></cpp:macro> <cpp:value>glad_glObjectPtrLabel</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTPTRLABELPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTPTRLABELPROC</name></type> <name>glad_glGetObjectPtrLabel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectPtrLabel</name></cpp:macro> <cpp:value>glad_glGetObjectPtrLabel</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_4_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_4_4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_4_4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERSTORAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERSTORAGEPROC</name></type> <name>glad_glBufferStorage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferStorage</name></cpp:macro> <cpp:value>glad_glBufferStorage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARTEXIMAGEPROC</name></type> <name>glad_glClearTexImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearTexImage</name></cpp:macro> <cpp:value>glad_glClearTexImage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARTEXSUBIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARTEXSUBIMAGEPROC</name></type> <name>glad_glClearTexSubImage</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearTexSubImage</name></cpp:macro> <cpp:value>glad_glClearTexSubImage</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERSBASEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERSBASEPROC</name></type> <name>glad_glBindBuffersBase</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBuffersBase</name></cpp:macro> <cpp:value>glad_glBindBuffersBase</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERSRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLintptr</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizeiptr</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERSRANGEPROC</name></type> <name>glad_glBindBuffersRange</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBuffersRange</name></cpp:macro> <cpp:value>glad_glBindBuffersRange</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXTURESPROC</name></type> <name>glad_glBindTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTextures</name></cpp:macro> <cpp:value>glad_glBindTextures</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDSAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDSAMPLERSPROC</name></type> <name>glad_glBindSamplers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindSamplers</name></cpp:macro> <cpp:value>glad_glBindSamplers</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDIMAGETEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDIMAGETEXTURESPROC</name></type> <name>glad_glBindImageTextures</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindImageTextures</name></cpp:macro> <cpp:value>glad_glBindImageTextures</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLintptr</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXBUFFERSPROC</name></type> <name>glad_glBindVertexBuffers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexBuffers</name></cpp:macro> <cpp:value>glad_glBindVertexBuffers</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX</name></cpp:macro> <cpp:value>0x813E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_CACHE_INCREMENT_SGIX</name></cpp:macro> <cpp:value>0x813F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8140</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x8141</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_GRID_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8142</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_GRID_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x8143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_GRID_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_CACHE_SIZE_SGIX</name></cpp:macro> <cpp:value>0x8145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_NV</name></cpp:macro> <cpp:value>0x8861</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COORD_REPLACE_NV</name></cpp:macro> <cpp:value>0x8862</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_R_MODE_NV</name></cpp:macro> <cpp:value>0x8863</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_APPLE</name></cpp:macro> <cpp:value>0x8A0C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_TYPE_APPLE</name></cpp:macro> <cpp:value>0x8A0D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_POINTER_APPLE</name></cpp:macro> <cpp:value>0x8A0E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT_EXT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT_EXT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT_IBM</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_HINT_APPLE</name></cpp:macro> <cpp:value>0x85B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC_ATI</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL_ATI</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV</name></cpp:macro> <cpp:value>0x88F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_CALL_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8C2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNITS_ARB</name></cpp:macro> <cpp:value>0x86A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VERTEX_UNITS_ARB</name></cpp:macro> <cpp:value>0x86A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_SUM_UNITY_ARB</name></cpp:macro> <cpp:value>0x86A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BLEND_ARB</name></cpp:macro> <cpp:value>0x86A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_WEIGHT_ARB</name></cpp:macro> <cpp:value>0x86A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x86A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x86AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x86AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x86AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_ARB</name></cpp:macro> <cpp:value>0x86AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_ARB</name></cpp:macro> <cpp:value>0x1700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_ARB</name></cpp:macro> <cpp:value>0x850A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW2_ARB</name></cpp:macro> <cpp:value>0x8722</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW3_ARB</name></cpp:macro> <cpp:value>0x8723</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW4_ARB</name></cpp:macro> <cpp:value>0x8724</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW5_ARB</name></cpp:macro> <cpp:value>0x8725</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW6_ARB</name></cpp:macro> <cpp:value>0x8726</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW7_ARB</name></cpp:macro> <cpp:value>0x8727</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW8_ARB</name></cpp:macro> <cpp:value>0x8728</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW9_ARB</name></cpp:macro> <cpp:value>0x8729</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW10_ARB</name></cpp:macro> <cpp:value>0x872A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW11_ARB</name></cpp:macro> <cpp:value>0x872B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW12_ARB</name></cpp:macro> <cpp:value>0x872C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW13_ARB</name></cpp:macro> <cpp:value>0x872D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW14_ARB</name></cpp:macro> <cpp:value>0x872E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW15_ARB</name></cpp:macro> <cpp:value>0x872F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW16_ARB</name></cpp:macro> <cpp:value>0x8730</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW17_ARB</name></cpp:macro> <cpp:value>0x8731</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW18_ARB</name></cpp:macro> <cpp:value>0x8732</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW19_ARB</name></cpp:macro> <cpp:value>0x8733</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW20_ARB</name></cpp:macro> <cpp:value>0x8734</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW21_ARB</name></cpp:macro> <cpp:value>0x8735</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW22_ARB</name></cpp:macro> <cpp:value>0x8736</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW23_ARB</name></cpp:macro> <cpp:value>0x8737</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW24_ARB</name></cpp:macro> <cpp:value>0x8738</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW25_ARB</name></cpp:macro> <cpp:value>0x8739</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW26_ARB</name></cpp:macro> <cpp:value>0x873A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW27_ARB</name></cpp:macro> <cpp:value>0x873B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW28_ARB</name></cpp:macro> <cpp:value>0x873C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW29_ARB</name></cpp:macro> <cpp:value>0x873D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW30_ARB</name></cpp:macro> <cpp:value>0x873E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW31_ARB</name></cpp:macro> <cpp:value>0x873F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_ARB</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8E20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP_EXT</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP_EXT</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_EXT</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_EXT</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_EXT</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_TEST_EXT</name></cpp:macro> <cpp:value>0x81B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_TEST_FUNC_EXT</name></cpp:macro> <cpp:value>0x81B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_TEST_REF_EXT</name></cpp:macro> <cpp:value>0x81B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGB8_OES</name></cpp:macro> <cpp:value>0x8B90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGBA8_OES</name></cpp:macro> <cpp:value>0x8B91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_R5_G6_B5_OES</name></cpp:macro> <cpp:value>0x8B92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGBA4_OES</name></cpp:macro> <cpp:value>0x8B93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8B94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGB8_OES</name></cpp:macro> <cpp:value>0x8B95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGBA8_OES</name></cpp:macro> <cpp:value>0x8B96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_R5_G6_B5_OES</name></cpp:macro> <cpp:value>0x8B97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGBA4_OES</name></cpp:macro> <cpp:value>0x8B98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8B99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP_NV</name></cpp:macro> <cpp:value>0x864F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_GPU_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHADER_BUFFER_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_CONSTANT_DATA_SUNX</name></cpp:macro> <cpp:value>0x81D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CONSTANT_DATA_SUNX</name></cpp:macro> <cpp:value>0x81D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_WAIT_NV</name></cpp:macro> <cpp:value>0x8E13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_NO_WAIT_NV</name></cpp:macro> <cpp:value>0x8E14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_WAIT_NV</name></cpp:macro> <cpp:value>0x8E15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_NO_WAIT_NV</name></cpp:macro> <cpp:value>0x8E16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_EXT</name></cpp:macro> <cpp:value>0x8570</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_RGB_EXT</name></cpp:macro> <cpp:value>0x8571</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8572</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SCALE_EXT</name></cpp:macro> <cpp:value>0x8573</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_SIGNED_EXT</name></cpp:macro> <cpp:value>0x8574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERPOLATE_EXT</name></cpp:macro> <cpp:value>0x8575</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_EXT</name></cpp:macro> <cpp:value>0x8576</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR_EXT</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS_EXT</name></cpp:macro> <cpp:value>0x8578</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_RGB_EXT</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_RGB_EXT</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_RGB_EXT</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_ALPHA_EXT</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_RGB_EXT</name></cpp:macro> <cpp:value>0x8590</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_RGB_EXT</name></cpp:macro> <cpp:value>0x8591</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_RGB_EXT</name></cpp:macro> <cpp:value>0x8592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8598</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8599</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_ALPHA_EXT</name></cpp:macro> <cpp:value>0x859A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_DISTANCE_MODE_NV</name></cpp:macro> <cpp:value>0x855A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_RADIAL_NV</name></cpp:macro> <cpp:value>0x855B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_PLANE_ABSOLUTE_NV</name></cpp:macro> <cpp:value>0x855C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_PLANE</name></cpp:macro> <cpp:value>0x2502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_HISTOGRAM_SGIX</name></cpp:macro> <cpp:value>0x832C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_HISTOGRAM_SGIX</name></cpp:macro> <cpp:value>0x832D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHININESS_NV</name></cpp:macro> <cpp:value>0x8504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPOT_EXPONENT_NV</name></cpp:macro> <cpp:value>0x8505</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE4_NV</name></cpp:macro> <cpp:value>0x8503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE3_RGB_NV</name></cpp:macro> <cpp:value>0x8583</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE3_ALPHA_NV</name></cpp:macro> <cpp:value>0x858B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND3_RGB_NV</name></cpp:macro> <cpp:value>0x8593</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND3_ALPHA_NV</name></cpp:macro> <cpp:value>0x859B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ARB</name></cpp:macro> <cpp:value>0x8570</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_RGB_ARB</name></cpp:macro> <cpp:value>0x8571</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8572</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_RGB_ARB</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_RGB_ARB</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_RGB_ARB</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_ALPHA_ARB</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_RGB_ARB</name></cpp:macro> <cpp:value>0x8590</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_RGB_ARB</name></cpp:macro> <cpp:value>0x8591</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_RGB_ARB</name></cpp:macro> <cpp:value>0x8592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8598</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8599</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_ALPHA_ARB</name></cpp:macro> <cpp:value>0x859A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SCALE_ARB</name></cpp:macro> <cpp:value>0x8573</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_SIGNED_ARB</name></cpp:macro> <cpp:value>0x8574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERPOLATE_ARB</name></cpp:macro> <cpp:value>0x8575</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBTRACT_ARB</name></cpp:macro> <cpp:value>0x84E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ARB</name></cpp:macro> <cpp:value>0x8576</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR_ARB</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS_ARB</name></cpp:macro> <cpp:value>0x8578</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_1D_EXT</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_2D_EXT</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARABLE_2D_EXT</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_MODE_EXT</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_SCALE_EXT</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_BIAS_EXT</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REDUCE_EXT</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x8019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_WIDTH_EXT</name></cpp:macro> <cpp:value>0x801A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_SCALE_EXT</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_SCALE_EXT</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_SCALE_EXT</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_SCALE_EXT</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_BIAS_EXT</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_BIAS_EXT</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_BIAS_EXT</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_BIAS_EXT</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_PROGRAM_NV</name></cpp:macro> <cpp:value>0x90FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x90FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT64_NV</name></cpp:macro> <cpp:value>0x140E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_NV</name></cpp:macro> <cpp:value>0x140F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX1_EXT</name></cpp:macro> <cpp:value>0x80E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX2_EXT</name></cpp:macro> <cpp:value>0x80E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX4_EXT</name></cpp:macro> <cpp:value>0x80E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX8_EXT</name></cpp:macro> <cpp:value>0x80E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX12_EXT</name></cpp:macro> <cpp:value>0x80E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX16_EXT</name></cpp:macro> <cpp:value>0x80E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INDEX_SIZE_EXT</name></cpp:macro> <cpp:value>0x80ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE_ARB</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_FORMAT_ARB</name></cpp:macro> <cpp:value>0x8C2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_ATI</name></cpp:macro> <cpp:value>0x87F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI</name></cpp:macro> <cpp:value>0x87F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_POINT_MODE_ATI</name></cpp:macro> <cpp:value>0x87F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_NORMAL_MODE_ATI</name></cpp:macro> <cpp:value>0x87F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI</name></cpp:macro> <cpp:value>0x87F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI</name></cpp:macro> <cpp:value>0x87F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI</name></cpp:macro> <cpp:value>0x87F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI</name></cpp:macro> <cpp:value>0x87F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI</name></cpp:macro> <cpp:value>0x87F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_RESAMPLE_SGIX</name></cpp:macro> <cpp:value>0x842C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_RESAMPLE_SGIX</name></cpp:macro> <cpp:value>0x842D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_REPLICATE_SGIX</name></cpp:macro> <cpp:value>0x842E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_ZERO_FILL_SGIX</name></cpp:macro> <cpp:value>0x842F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_DECIMATE_SGIX</name></cpp:macro> <cpp:value>0x8430</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_MATERIAL_EXT</name></cpp:macro> <cpp:value>0x8349</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_NORMAL_EXT</name></cpp:macro> <cpp:value>0x834A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_EXT</name></cpp:macro> <cpp:value>0x834C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTENUATION_EXT</name></cpp:macro> <cpp:value>0x834D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADOW_ATTENUATION_EXT</name></cpp:macro> <cpp:value>0x834E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_APPLICATION_MODE_EXT</name></cpp:macro> <cpp:value>0x834F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LIGHT_EXT</name></cpp:macro> <cpp:value>0x8350</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MATERIAL_FACE_EXT</name></cpp:macro> <cpp:value>0x8351</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MATERIAL_PARAMETER_EXT</name></cpp:macro> <cpp:value>0x8352</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8452</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_ARB</name></cpp:macro> <cpp:value>0x8861</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COORD_REPLACE_ARB</name></cpp:macro> <cpp:value>0x8862</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT_ARB</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PATCH_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x86D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_PROGRAM_NV</name></cpp:macro> <cpp:value>0x891E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_PROGRAM_NV</name></cpp:macro> <cpp:value>0x891F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8C74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8C75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCREEN_COORDINATES_REND</name></cpp:macro> <cpp:value>0x8490</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERTED_SCREEN_W_REND</name></cpp:macro> <cpp:value>0x8491</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHARED_TEXTURE_PALETTE_EXT</name></cpp:macro> <cpp:value>0x81FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F_EXT</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV_EXT</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_SIGNED_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8C3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FORMAT_SUBSAMPLE_24_24_OML</name></cpp:macro> <cpp:value>0x8982</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FORMAT_SUBSAMPLE_244_244_OML</name></cpp:macro> <cpp:value>0x8983</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PRECLIP_SGIX</name></cpp:macro> <cpp:value>0x83EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PRECLIP_HINT_SGIX</name></cpp:macro> <cpp:value>0x83EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_BIAS_SGIX</name></cpp:macro> <cpp:value>0x8179</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_SCALE_SGIX</name></cpp:macro> <cpp:value>0x817A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX</name></cpp:macro> <cpp:value>0x817B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX</name></cpp:macro> <cpp:value>0x817C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS_EXT</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMBOSS_LIGHT_NV</name></cpp:macro> <cpp:value>0x855D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMBOSS_CONSTANT_NV</name></cpp:macro> <cpp:value>0x855E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMBOSS_MAP_NV</name></cpp:macro> <cpp:value>0x855F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R_EXT</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G_EXT</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B_EXT</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A_EXT</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA_EXT</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_ARB</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_PROGRAM_EXT</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_SHADER_BITS_EXT</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_SEPARABLE_EXT</name></cpp:macro> <cpp:value>0x8258</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE_BINDING_EXT</name></cpp:macro> <cpp:value>0x825A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>0x9045</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COLOR_SAMPLES_NV</name></cpp:macro> <cpp:value>0x9046</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_OBJECT_ARB</name></cpp:macro> <cpp:value>0x8B40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OBJECT_ARB</name></cpp:macro> <cpp:value>0x8B48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8B4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_SUBTYPE_ARB</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_ARB</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2_ARB</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3_ARB</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4_ARB</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARB</name></cpp:macro> <cpp:value>0x8B5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARB</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D_ARB</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_ARB</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_SHADOW_ARB</name></cpp:macro> <cpp:value>0x8B61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW_ARB</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_ARB</name></cpp:macro> <cpp:value>0x8B63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_SHADOW_ARB</name></cpp:macro> <cpp:value>0x8B64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_DELETE_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_COMPILE_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_LINK_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_VALIDATE_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_INFO_LOG_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ATTACHED_OBJECTS_ARB</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_UNIFORMS_ARB</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_SHADER_SOURCE_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_TYPE</name></cpp:macro> <cpp:value>0x8C14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_TYPE</name></cpp:macro> <cpp:value>0x8C15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_ROT_MATRIX_ATI</name></cpp:macro> <cpp:value>0x8775</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_ROT_MATRIX_SIZE_ATI</name></cpp:macro> <cpp:value>0x8776</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_NUM_TEX_UNITS_ATI</name></cpp:macro> <cpp:value>0x8777</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_TEX_UNITS_ATI</name></cpp:macro> <cpp:value>0x8778</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUDV_ATI</name></cpp:macro> <cpp:value>0x8779</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DU8DV8_ATI</name></cpp:macro> <cpp:value>0x877A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_ENVMAP_ATI</name></cpp:macro> <cpp:value>0x877B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_TARGET_ATI</name></cpp:macro> <cpp:value>0x877C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE_NV</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE_ARB</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE_ARB</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE_ARB</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOSE_CONTEXT_ON_RESET_ARB</name></cpp:macro> <cpp:value>0x8252</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GUILTY_CONTEXT_RESET_ARB</name></cpp:macro> <cpp:value>0x8253</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INNOCENT_CONTEXT_RESET_ARB</name></cpp:macro> <cpp:value>0x8254</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNKNOWN_CONTEXT_RESET_ARB</name></cpp:macro> <cpp:value>0x8255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESET_NOTIFICATION_STRATEGY_ARB</name></cpp:macro> <cpp:value>0x8256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_RESET_NOTIFICATION_ARB</name></cpp:macro> <cpp:value>0x8261</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_PIXEL_DATA_RANGE_NV</name></cpp:macro> <cpp:value>0x8878</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXEL_DATA_RANGE_NV</name></cpp:macro> <cpp:value>0x8879</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV</name></cpp:macro> <cpp:value>0x887A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXEL_DATA_RANGE_LENGTH_NV</name></cpp:macro> <cpp:value>0x887B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV</name></cpp:macro> <cpp:value>0x887C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXEL_DATA_RANGE_POINTER_NV</name></cpp:macro> <cpp:value>0x887D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_SGIX</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24_SGIX</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_SGIX</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x0BA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_MATRIX_EXT</name></cpp:macro> <cpp:value>0x0BA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHTING_EXT</name></cpp:macro> <cpp:value>0x8509</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_EXT</name></cpp:macro> <cpp:value>0x1700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_EXT</name></cpp:macro> <cpp:value>0x850A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_WEIGHT_EXT</name></cpp:macro> <cpp:value>0x850B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x850C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x850D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x850E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x850F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8510</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</name></cpp:macro> <cpp:value>0x8E8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</name></cpp:macro> <cpp:value>0x8E8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</name></cpp:macro> <cpp:value>0x8E8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</name></cpp:macro> <cpp:value>0x8E8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_RGTC1_EXT</name></cpp:macro> <cpp:value>0x8DBB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_RGTC1_EXT</name></cpp:macro> <cpp:value>0x8DBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_GREEN_RGTC2_EXT</name></cpp:macro> <cpp:value>0x8DBD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT</name></cpp:macro> <cpp:value>0x8DBE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_2D_NV</name></cpp:macro> <cpp:value>0x86C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_TRIANGULAR_2D_NV</name></cpp:macro> <cpp:value>0x86C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_TESSELLATION_NV</name></cpp:macro> <cpp:value>0x86C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_ATTRIB_U_ORDER_NV</name></cpp:macro> <cpp:value>0x86C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_ATTRIB_V_ORDER_NV</name></cpp:macro> <cpp:value>0x86C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_FRACTIONAL_TESSELLATION_NV</name></cpp:macro> <cpp:value>0x86C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB0_NV</name></cpp:macro> <cpp:value>0x86C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB1_NV</name></cpp:macro> <cpp:value>0x86C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB2_NV</name></cpp:macro> <cpp:value>0x86C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB3_NV</name></cpp:macro> <cpp:value>0x86C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB4_NV</name></cpp:macro> <cpp:value>0x86CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB5_NV</name></cpp:macro> <cpp:value>0x86CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB6_NV</name></cpp:macro> <cpp:value>0x86CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB7_NV</name></cpp:macro> <cpp:value>0x86CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB8_NV</name></cpp:macro> <cpp:value>0x86CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB9_NV</name></cpp:macro> <cpp:value>0x86CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB10_NV</name></cpp:macro> <cpp:value>0x86D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB11_NV</name></cpp:macro> <cpp:value>0x86D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB12_NV</name></cpp:macro> <cpp:value>0x86D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB13_NV</name></cpp:macro> <cpp:value>0x86D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB14_NV</name></cpp:macro> <cpp:value>0x86D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB15_NV</name></cpp:macro> <cpp:value>0x86D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MAP_TESSELLATION_NV</name></cpp:macro> <cpp:value>0x86D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RATIONAL_EVAL_ORDER_NV</name></cpp:macro> <cpp:value>0x86D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILTER4_SGIS</name></cpp:macro> <cpp:value>0x8146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FILTER4_SIZE_SGIS</name></cpp:macro> <cpp:value>0x8147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNTER_TYPE_AMD</name></cpp:macro> <cpp:value>0x8BC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNTER_RANGE_AMD</name></cpp:macro> <cpp:value>0x8BC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_AMD</name></cpp:macro> <cpp:value>0x8BC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERCENTAGE_AMD</name></cpp:macro> <cpp:value>0x8BC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_AVAILABLE_AMD</name></cpp:macro> <cpp:value>0x8BC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_SIZE_AMD</name></cpp:macro> <cpp:value>0x8BC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_AMD</name></cpp:macro> <cpp:value>0x8BC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TAG_BITS_EXT</name></cpp:macro> <cpp:value>0x88F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_CLEAR_TAG_VALUE_EXT</name></cpp:macro> <cpp:value>0x88F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAME_NV</name></cpp:macro> <cpp:value>0x8E26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIELDS_NV</name></cpp:macro> <cpp:value>0x8E27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_TIME_NV</name></cpp:macro> <cpp:value>0x8E28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FILL_STREAMS_NV</name></cpp:macro> <cpp:value>0x8E29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESENT_TIME_NV</name></cpp:macro> <cpp:value>0x8E2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESENT_DURATION_NV</name></cpp:macro> <cpp:value>0x8E2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IGNORE_BORDER_HP</name></cpp:macro> <cpp:value>0x8150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_BORDER_HP</name></cpp:macro> <cpp:value>0x8151</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLICATE_BORDER_HP</name></cpp:macro> <cpp:value>0x8153</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_COLOR_HP</name></cpp:macro> <cpp:value>0x8154</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_OFFSET_SGIX</name></cpp:macro> <cpp:value>0x8198</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_OFFSET_VALUE_SGIX</name></cpp:macro> <cpp:value>0x8199</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_READ_INGR</name></cpp:macro> <cpp:value>0x8568</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_PRIMARY_COLOR_NV</name></cpp:macro> <cpp:value>0x8C77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x8C78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_NV</name></cpp:macro> <cpp:value>0x8C79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE_NV</name></cpp:macro> <cpp:value>0x8C7A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ID_NV</name></cpp:macro> <cpp:value>0x8C7B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_ID_NV</name></cpp:macro> <cpp:value>0x8C7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERIC_ATTRIB_NV</name></cpp:macro> <cpp:value>0x8C7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C7E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VARYINGS_NV</name></cpp:macro> <cpp:value>0x8C81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VARYING_MAX_LENGTH_NV</name></cpp:macro> <cpp:value>0x8C82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS_NV</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START_NV</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_RECORD_NV</name></cpp:macro> <cpp:value>0x8C86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED_NV</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD_NV</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_NV</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAYER_NV</name></cpp:macro> <cpp:value>0x8DAA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEXT_BUFFER_NV</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SKIP_COMPONENTS4_NV</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SKIP_COMPONENTS3_NV</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SKIP_COMPONENTS2_NV</name></cpp:macro> <cpp:value>-5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SKIP_COMPONENTS1_NV</name></cpp:macro> <cpp:value>-6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV</name></cpp:macro> <cpp:value>0x8868</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8870</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_NV</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_NV</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_BINDING_NV</name></cpp:macro> <cpp:value>0x8873</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_STRING_NV</name></cpp:macro> <cpp:value>0x8874</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SET_AMD</name></cpp:macro> <cpp:value>0x874A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_VALUE_AMD</name></cpp:macro> <cpp:value>0x874B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_OP_VALUE_AMD</name></cpp:macro> <cpp:value>0x874C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_OP_VALUE_AMD</name></cpp:macro> <cpp:value>0x874D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8037</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FACTOR_EXT</name></cpp:macro> <cpp:value>0x8038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_BIAS_EXT</name></cpp:macro> <cpp:value>0x8039</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV</name></cpp:macro> <cpp:value>0x8533</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_X_AMD</name></cpp:macro> <cpp:value>0x9195</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_Y_AMD</name></cpp:macro> <cpp:value>0x9196</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_Z_AMD</name></cpp:macro> <cpp:value>0x9197</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPARSE_TEXTURE_SIZE_AMD</name></cpp:macro> <cpp:value>0x9198</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD</name></cpp:macro> <cpp:value>0x9199</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS</name></cpp:macro> <cpp:value>0x919A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_SPARSE_LEVEL_AMD</name></cpp:macro> <cpp:value>0x919B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_LOD_WARNING_AMD</name></cpp:macro> <cpp:value>0x919C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STORAGE_SPARSE_BIT_AMD</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_COMPLETED_NV</name></cpp:macro> <cpp:value>0x84F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_STATUS_NV</name></cpp:macro> <cpp:value>0x84F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_CONDITION_NV</name></cpp:macro> <cpp:value>0x84F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_MESH_SUN</name></cpp:macro> <cpp:value>0x8614</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_MESH_SUN</name></cpp:macro> <cpp:value>0x8615</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CL_EVENT_ARB</name></cpp:macro> <cpp:value>0x8240</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CL_EVENT_COMPLETE_ARB</name></cpp:macro> <cpp:value>0x8241</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_NV</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8_NV</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_NV</name></cpp:macro> <cpp:value>0x8558</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_INDEX_NV</name></cpp:macro> <cpp:value>0x8559</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLOBAL_ALPHA_SUN</name></cpp:macro> <cpp:value>0x81D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLOBAL_ALPHA_FACTOR_SUN</name></cpp:macro> <cpp:value>0x81DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_PRIORITY_EXT</name></cpp:macro> <cpp:value>0x8066</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RESIDENT_EXT</name></cpp:macro> <cpp:value>0x8067</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_BINDING_EXT</name></cpp:macro> <cpp:value>0x8068</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_BINDING_EXT</name></cpp:macro> <cpp:value>0x8069</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D_BINDING_EXT</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DATA_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9151</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFORMANCE_MONITOR_AMD</name></cpp:macro> <cpp:value>0x9152</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_OBJECT_AMD</name></cpp:macro> <cpp:value>0x9153</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_OBJECT_AMD</name></cpp:macro> <cpp:value>0x9154</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_OBJECT_AMD</name></cpp:macro> <cpp:value>0x9155</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8850</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV</name></cpp:macro> <cpp:value>0x8851</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x8852</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV</name></cpp:macro> <cpp:value>0x8853</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8854</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x8855</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8856</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x8857</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_HILO_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8858</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_RGB_TEXTURE_3D_NV</name></cpp:macro> <cpp:value>0x8859</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x885A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_PASS_THROUGH_NV</name></cpp:macro> <cpp:value>0x885B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_1D_NV</name></cpp:macro> <cpp:value>0x885C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV</name></cpp:macro> <cpp:value>0x885D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HILO8_NV</name></cpp:macro> <cpp:value>0x885E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_HILO8_NV</name></cpp:macro> <cpp:value>0x885F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FORCE_BLUE_TO_ONE_NV</name></cpp:macro> <cpp:value>0x8860</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_3D_NV</name></cpp:macro> <cpp:value>0x86EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x803B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x803C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA12_EXT</name></cpp:macro> <cpp:value>0x803D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16_EXT</name></cpp:macro> <cpp:value>0x803E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_EXT</name></cpp:macro> <cpp:value>0x803F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_EXT</name></cpp:macro> <cpp:value>0x8041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_EXT</name></cpp:macro> <cpp:value>0x8042</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x8043</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE6_ALPHA2_EXT</name></cpp:macro> <cpp:value>0x8044</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8045</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x8046</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA12_EXT</name></cpp:macro> <cpp:value>0x8047</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_ALPHA16_EXT</name></cpp:macro> <cpp:value>0x8048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_EXT</name></cpp:macro> <cpp:value>0x8049</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY4_EXT</name></cpp:macro> <cpp:value>0x804A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8_EXT</name></cpp:macro> <cpp:value>0x804B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY12_EXT</name></cpp:macro> <cpp:value>0x804C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16_EXT</name></cpp:macro> <cpp:value>0x804D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB2_EXT</name></cpp:macro> <cpp:value>0x804E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4_EXT</name></cpp:macro> <cpp:value>0x804F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_EXT</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_EXT</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_EXT</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB12_EXT</name></cpp:macro> <cpp:value>0x8053</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_EXT</name></cpp:macro> <cpp:value>0x8054</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA2_EXT</name></cpp:macro> <cpp:value>0x8055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_EXT</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1_EXT</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_EXT</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2_EXT</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA12_EXT</name></cpp:macro> <cpp:value>0x805A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_EXT</name></cpp:macro> <cpp:value>0x805B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x805D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x805E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x805F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_EXT</name></cpp:macro> <cpp:value>0x8062</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_EXT</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_EXT</name></cpp:macro> <cpp:value>0x8064</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_TOO_LARGE_EXT</name></cpp:macro> <cpp:value>0x8065</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_APPLE</name></cpp:macro> <cpp:value>0x8A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_APPLE</name></cpp:macro> <cpp:value>0x8A01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE</name></cpp:macro> <cpp:value>0x8A02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE</name></cpp:macro> <cpp:value>0x8A03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE</name></cpp:macro> <cpp:value>0x8A04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE</name></cpp:macro> <cpp:value>0x8A05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE</name></cpp:macro> <cpp:value>0x8A06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE</name></cpp:macro> <cpp:value>0x8A07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE</name></cpp:macro> <cpp:value>0x8A08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE</name></cpp:macro> <cpp:value>0x8A09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADOW_AMBIENT_SGIX</name></cpp:macro> <cpp:value>0x80BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP_ARB</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP_ARB</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIST_PRIORITY_SGIX</name></cpp:macro> <cpp:value>0x8182</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV</name></cpp:macro> <cpp:value>0x8F1E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_UNIFIED_NV</name></cpp:macro> <cpp:value>0x8F1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_UNIFIED_NV</name></cpp:macro> <cpp:value>0x8F40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGB_EXT</name></cpp:macro> <cpp:value>0x8740</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGBA_EXT</name></cpp:macro> <cpp:value>0x8741</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE_ADD_ATI</name></cpp:macro> <cpp:value>0x8744</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE_SIGNED_ADD_ATI</name></cpp:macro> <cpp:value>0x8745</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE_SUBTRACT_ATI</name></cpp:macro> <cpp:value>0x8746</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_OVERLAP_NV</name></cpp:macro> <cpp:value>0x9281</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_PREMULTIPLIED_SRC_NV</name></cpp:macro> <cpp:value>0x9280</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_NV</name></cpp:macro> <cpp:value>0x1905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLORBURN_NV</name></cpp:macro> <cpp:value>0x929A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLORDODGE_NV</name></cpp:macro> <cpp:value>0x9299</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONJOINT_NV</name></cpp:macro> <cpp:value>0x9284</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTRAST_NV</name></cpp:macro> <cpp:value>0x92A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DARKEN_NV</name></cpp:macro> <cpp:value>0x9297</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DIFFERENCE_NV</name></cpp:macro> <cpp:value>0x929E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISJOINT_NV</name></cpp:macro> <cpp:value>0x9283</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_ATOP_NV</name></cpp:macro> <cpp:value>0x928F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_IN_NV</name></cpp:macro> <cpp:value>0x928B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_NV</name></cpp:macro> <cpp:value>0x9287</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_OUT_NV</name></cpp:macro> <cpp:value>0x928D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_OVER_NV</name></cpp:macro> <cpp:value>0x9289</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXCLUSION_NV</name></cpp:macro> <cpp:value>0x92A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_NV</name></cpp:macro> <cpp:value>0x1904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HARDLIGHT_NV</name></cpp:macro> <cpp:value>0x929B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HARDMIX_NV</name></cpp:macro> <cpp:value>0x92A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HSL_COLOR_NV</name></cpp:macro> <cpp:value>0x92AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HSL_HUE_NV</name></cpp:macro> <cpp:value>0x92AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HSL_LUMINOSITY_NV</name></cpp:macro> <cpp:value>0x92B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HSL_SATURATION_NV</name></cpp:macro> <cpp:value>0x92AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERT_OVG_NV</name></cpp:macro> <cpp:value>0x92B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERT_RGB_NV</name></cpp:macro> <cpp:value>0x92A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHTEN_NV</name></cpp:macro> <cpp:value>0x9298</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEARBURN_NV</name></cpp:macro> <cpp:value>0x92A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEARDODGE_NV</name></cpp:macro> <cpp:value>0x92A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEARLIGHT_NV</name></cpp:macro> <cpp:value>0x92A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINUS_CLAMPED_NV</name></cpp:macro> <cpp:value>0x92B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINUS_NV</name></cpp:macro> <cpp:value>0x929F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTIPLY_NV</name></cpp:macro> <cpp:value>0x9294</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OVERLAY_NV</name></cpp:macro> <cpp:value>0x9296</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PINLIGHT_NV</name></cpp:macro> <cpp:value>0x92A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PLUS_CLAMPED_ALPHA_NV</name></cpp:macro> <cpp:value>0x92B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PLUS_CLAMPED_NV</name></cpp:macro> <cpp:value>0x92B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PLUS_DARKER_NV</name></cpp:macro> <cpp:value>0x9292</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PLUS_NV</name></cpp:macro> <cpp:value>0x9291</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_NV</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCREEN_NV</name></cpp:macro> <cpp:value>0x9295</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOFTLIGHT_NV</name></cpp:macro> <cpp:value>0x929C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ATOP_NV</name></cpp:macro> <cpp:value>0x928E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_IN_NV</name></cpp:macro> <cpp:value>0x928A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_NV</name></cpp:macro> <cpp:value>0x9286</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_OUT_NV</name></cpp:macro> <cpp:value>0x928C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_OVER_NV</name></cpp:macro> <cpp:value>0x9288</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNCORRELATED_NV</name></cpp:macro> <cpp:value>0x9282</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIVIDLIGHT_NV</name></cpp:macro> <cpp:value>0x92A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_XOR_NV</name></cpp:macro> <cpp:value>0x1506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_SHARPEN_SGIS</name></cpp:macro> <cpp:value>0x80AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_SHARPEN_ALPHA_SGIS</name></cpp:macro> <cpp:value>0x80AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_SHARPEN_COLOR_SGIS</name></cpp:macro> <cpp:value>0x80AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x80B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_ARB</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_ARB</name></cpp:macro> <cpp:value>0x8620</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB_ARB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8627</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_STRING_ARB</name></cpp:macro> <cpp:value>0x8628</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x862E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_MATRICES_ARB</name></cpp:macro> <cpp:value>0x862F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x8640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_ARB</name></cpp:macro> <cpp:value>0x8641</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE_ARB</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE_ARB</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_POSITION_ARB</name></cpp:macro> <cpp:value>0x864B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINDING_ARB</name></cpp:macro> <cpp:value>0x8677</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_STRING_ARB</name></cpp:macro> <cpp:value>0x8874</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_FORMAT_ASCII_ARB</name></cpp:macro> <cpp:value>0x8875</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_FORMAT_ARB</name></cpp:macro> <cpp:value>0x8876</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ENV_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB</name></cpp:macro> <cpp:value>0x88B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_CURRENT_MATRIX_ARB</name></cpp:macro> <cpp:value>0x88B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX0_ARB</name></cpp:macro> <cpp:value>0x88C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX1_ARB</name></cpp:macro> <cpp:value>0x88C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX2_ARB</name></cpp:macro> <cpp:value>0x88C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX3_ARB</name></cpp:macro> <cpp:value>0x88C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX4_ARB</name></cpp:macro> <cpp:value>0x88C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX5_ARB</name></cpp:macro> <cpp:value>0x88C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX6_ARB</name></cpp:macro> <cpp:value>0x88C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX7_ARB</name></cpp:macro> <cpp:value>0x88C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX8_ARB</name></cpp:macro> <cpp:value>0x88C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX9_ARB</name></cpp:macro> <cpp:value>0x88C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX10_ARB</name></cpp:macro> <cpp:value>0x88CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX11_ARB</name></cpp:macro> <cpp:value>0x88CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX12_ARB</name></cpp:macro> <cpp:value>0x88CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX13_ARB</name></cpp:macro> <cpp:value>0x88CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX14_ARB</name></cpp:macro> <cpp:value>0x88CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX15_ARB</name></cpp:macro> <cpp:value>0x88CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX16_ARB</name></cpp:macro> <cpp:value>0x88D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX17_ARB</name></cpp:macro> <cpp:value>0x88D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX18_ARB</name></cpp:macro> <cpp:value>0x88D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX19_ARB</name></cpp:macro> <cpp:value>0x88D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX20_ARB</name></cpp:macro> <cpp:value>0x88D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX21_ARB</name></cpp:macro> <cpp:value>0x88D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX22_ARB</name></cpp:macro> <cpp:value>0x88D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX23_ARB</name></cpp:macro> <cpp:value>0x88D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX24_ARB</name></cpp:macro> <cpp:value>0x88D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX25_ARB</name></cpp:macro> <cpp:value>0x88D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX26_ARB</name></cpp:macro> <cpp:value>0x88DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX27_ARB</name></cpp:macro> <cpp:value>0x88DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX28_ARB</name></cpp:macro> <cpp:value>0x88DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX29_ARB</name></cpp:macro> <cpp:value>0x88DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX30_ARB</name></cpp:macro> <cpp:value>0x88DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX31_ARB</name></cpp:macro> <cpp:value>0x88DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_OML</name></cpp:macro> <cpp:value>0x8980</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_READ_OML</name></cpp:macro> <cpp:value>0x8981</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT_MODE_ATI</name></cpp:macro> <cpp:value>0x8820</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI</name></cpp:macro> <cpp:value>0x8835</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE_ARB</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE_ARB</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8896</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8897</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8898</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8899</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY_ARB</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY_ARB</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE_ARB</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_ARB</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED_ARB</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER_ARB</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ_ARB</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY_ARB</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ_ARB</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY_ARB</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ_ARB</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY_ARB</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXT_FRAGMENT_SHADER_ATI</name></cpp:macro> <cpp:value>0x8200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_NV</name></cpp:macro> <cpp:value>0x851D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_LENGTH_NV</name></cpp:macro> <cpp:value>0x851E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_VALID_NV</name></cpp:macro> <cpp:value>0x851F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV</name></cpp:macro> <cpp:value>0x8520</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_POINTER_NV</name></cpp:macro> <cpp:value>0x8521</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHTING_SGIX</name></cpp:macro> <cpp:value>0x8400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_MATERIAL_SGIX</name></cpp:macro> <cpp:value>0x8401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX</name></cpp:macro> <cpp:value>0x8402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX</name></cpp:macro> <cpp:value>0x8403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_LIGHTS_SGIX</name></cpp:macro> <cpp:value>0x8404</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ACTIVE_LIGHTS_SGIX</name></cpp:macro> <cpp:value>0x8405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_NORMAL_SGIX</name></cpp:macro> <cpp:value>0x8406</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_ENV_MODE_SGIX</name></cpp:macro> <cpp:value>0x8407</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX</name></cpp:macro> <cpp:value>0x8408</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX</name></cpp:macro> <cpp:value>0x8409</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX</name></cpp:macro> <cpp:value>0x840A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX</name></cpp:macro> <cpp:value>0x840B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT0_SGIX</name></cpp:macro> <cpp:value>0x840C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT1_SGIX</name></cpp:macro> <cpp:value>0x840D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT2_SGIX</name></cpp:macro> <cpp:value>0x840E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT3_SGIX</name></cpp:macro> <cpp:value>0x840F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT4_SGIX</name></cpp:macro> <cpp:value>0x8410</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT5_SGIX</name></cpp:macro> <cpp:value>0x8411</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT6_SGIX</name></cpp:macro> <cpp:value>0x8412</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT7_SGIX</name></cpp:macro> <cpp:value>0x8413</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_UNSIGNED_REMAP_MODE_NV</name></cpp:macro> <cpp:value>0x888F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_COLOR_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8E10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV</name></cpp:macro> <cpp:value>0x8E11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_COVERAGE_MODES_NV</name></cpp:macro> <cpp:value>0x8E12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIME_ELAPSED_EXT</name></cpp:macro> <cpp:value>0x88BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY</name></cpp:macro> <cpp:value>0x8074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_OVERFLOW</name></cpp:macro> <cpp:value>0x0503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_UNDERFLOW</name></cpp:macro> <cpp:value>0x0504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION_KHR</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM_KHR</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API_KHR</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER_KHR</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY_KHR</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION_KHR</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER_KHR</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR_KHR</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY_KHR</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE_KHR</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER_KHR</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_MARKER_KHR</name></cpp:macro> <cpp:value>0x8268</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PUSH_GROUP_KHR</name></cpp:macro> <cpp:value>0x8269</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_POP_GROUP_KHR</name></cpp:macro> <cpp:value>0x826A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_NOTIFICATION_KHR</name></cpp:macro> <cpp:value>0x826B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR</name></cpp:macro> <cpp:value>0x826C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_GROUP_STACK_DEPTH_KHR</name></cpp:macro> <cpp:value>0x826D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_KHR</name></cpp:macro> <cpp:value>0x82E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_KHR</name></cpp:macro> <cpp:value>0x82E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_KHR</name></cpp:macro> <cpp:value>0x82E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_KHR</name></cpp:macro> <cpp:value>0x8074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_KHR</name></cpp:macro> <cpp:value>0x82E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_KHR</name></cpp:macro> <cpp:value>0x82E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LABEL_LENGTH_KHR</name></cpp:macro> <cpp:value>0x82E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH_KHR</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES_KHR</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES_KHR</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH_KHR</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM_KHR</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW_KHR</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_KHR</name></cpp:macro> <cpp:value>0x92E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_DEBUG_BIT_KHR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_OVERFLOW_KHR</name></cpp:macro> <cpp:value>0x0503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_UNDERFLOW_KHR</name></cpp:macro> <cpp:value>0x0504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER_SGIS</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_CLIPMAP_LINEAR_SGIX</name></cpp:macro> <cpp:value>0x8170</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_CENTER_SGIX</name></cpp:macro> <cpp:value>0x8171</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_FRAME_SGIX</name></cpp:macro> <cpp:value>0x8172</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_OFFSET_SGIX</name></cpp:macro> <cpp:value>0x8173</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8174</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX</name></cpp:macro> <cpp:value>0x8175</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8176</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIPMAP_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8177</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8178</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_CLIPMAP_NEAREST_SGIX</name></cpp:macro> <cpp:value>0x844D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_CLIPMAP_LINEAR_SGIX</name></cpp:macro> <cpp:value>0x844E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_CLIPMAP_NEAREST_SGIX</name></cpp:macro> <cpp:value>0x844F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_EXT</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT_EXT</name></cpp:macro> <cpp:value>0x8DDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8DDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8DDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_VARYING_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT</name></cpp:macro> <cpp:value>0x8DA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE_EXT</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_MESA</name></cpp:macro> <cpp:value>0x85BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_REV_MESA</name></cpp:macro> <cpp:value>0x85BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBCR_MESA</name></cpp:macro> <cpp:value>0x8757</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_STACK_MESAX</name></cpp:macro> <cpp:value>0x8759</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_STACK_MESAX</name></cpp:macro> <cpp:value>0x875A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_STACK_MESAX</name></cpp:macro> <cpp:value>0x875B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_STACK_MESAX</name></cpp:macro> <cpp:value>0x875C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_STACK_BINDING_MESAX</name></cpp:macro> <cpp:value>0x875D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_STACK_BINDING_MESAX</name></cpp:macro> <cpp:value>0x875E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT</name></cpp:macro> <cpp:value>0x8DE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT</name></cpp:macro> <cpp:value>0x8DE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT</name></cpp:macro> <cpp:value>0x8DE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_BINDABLE_UNIFORM_SIZE_EXT</name></cpp:macro> <cpp:value>0x8DED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8DEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_4x4_KHR</name></cpp:macro> <cpp:value>0x93B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_5x4_KHR</name></cpp:macro> <cpp:value>0x93B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_5x5_KHR</name></cpp:macro> <cpp:value>0x93B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_6x5_KHR</name></cpp:macro> <cpp:value>0x93B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_6x6_KHR</name></cpp:macro> <cpp:value>0x93B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x5_KHR</name></cpp:macro> <cpp:value>0x93B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x6_KHR</name></cpp:macro> <cpp:value>0x93B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x8_KHR</name></cpp:macro> <cpp:value>0x93B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x5_KHR</name></cpp:macro> <cpp:value>0x93B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x6_KHR</name></cpp:macro> <cpp:value>0x93B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x8_KHR</name></cpp:macro> <cpp:value>0x93BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x10_KHR</name></cpp:macro> <cpp:value>0x93BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_12x10_KHR</name></cpp:macro> <cpp:value>0x93BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_12x12_KHR</name></cpp:macro> <cpp:value>0x93BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR</name></cpp:macro> <cpp:value>0x93D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR</name></cpp:macro> <cpp:value>0x93D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR</name></cpp:macro> <cpp:value>0x93D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR</name></cpp:macro> <cpp:value>0x93D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR</name></cpp:macro> <cpp:value>0x93D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR</name></cpp:macro> <cpp:value>0x93D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR</name></cpp:macro> <cpp:value>0x93D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR</name></cpp:macro> <cpp:value>0x93D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR</name></cpp:macro> <cpp:value>0x93D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR</name></cpp:macro> <cpp:value>0x93D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR</name></cpp:macro> <cpp:value>0x93DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR</name></cpp:macro> <cpp:value>0x93DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR</name></cpp:macro> <cpp:value>0x93DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR</name></cpp:macro> <cpp:value>0x93DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_ATI</name></cpp:macro> <cpp:value>0x8768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_TYPE_ATI</name></cpp:macro> <cpp:value>0x8769</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_POINTER_ATI</name></cpp:macro> <cpp:value>0x876A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCE_PLANE_SGIX</name></cpp:macro> <cpp:value>0x817D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCE_PLANE_EQUATION_SGIX</name></cpp:macro> <cpp:value>0x817E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TEST_TWO_SIDE_EXT</name></cpp:macro> <cpp:value>0x8910</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_STENCIL_FACE_EXT</name></cpp:macro> <cpp:value>0x8911</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_S_SGIX</name></cpp:macro> <cpp:value>0x818E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_T_SGIX</name></cpp:macro> <cpp:value>0x818F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_R_SGIX</name></cpp:macro> <cpp:value>0x8190</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_POSITION_NV</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_NV</name></cpp:macro> <cpp:value>0x8E51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE_NV</name></cpp:macro> <cpp:value>0x8E52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV</name></cpp:macro> <cpp:value>0x8E54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLE_MASK_WORDS_NV</name></cpp:macro> <cpp:value>0x8E59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_STATIC_DATA_IBM</name></cpp:macro> <cpp:value>103060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_VERTEX_ARRAY_IBM</name></cpp:macro> <cpp:value>103061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_VOLUME_CLIPPING_HINT_EXT</name></cpp:macro> <cpp:value>0x80F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERTURB_EXT</name></cpp:macro> <cpp:value>0x85AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_NORMAL_EXT</name></cpp:macro> <cpp:value>0x85AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_IF_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOOP_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOOP_COUNT_NV</name></cpp:macro> <cpp:value>0x88F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN_EXT</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX_EXT</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE_EXT</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISTANCE_ATTENUATION_EXT</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREFER_DOUBLEBUFFER_HINT_PGI</name></cpp:macro> <cpp:value>0x1A1F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSERVE_MEMORY_HINT_PGI</name></cpp:macro> <cpp:value>0x1A1FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RECLAIM_MEMORY_HINT_PGI</name></cpp:macro> <cpp:value>0x1A1FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NATIVE_GRAPHICS_HANDLE_PGI</name></cpp:macro> <cpp:value>0x1A202</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI</name></cpp:macro> <cpp:value>0x1A203</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NATIVE_GRAPHICS_END_HINT_PGI</name></cpp:macro> <cpp:value>0x1A204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS_FAST_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS_SOFT_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_OBJ_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_WIN_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_FRG_HINT_PGI</name></cpp:macro> <cpp:value>0x1A210</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_MEM_HINT_PGI</name></cpp:macro> <cpp:value>0x1A211</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STRICT_DEPTHFUNC_HINT_PGI</name></cpp:macro> <cpp:value>0x1A216</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STRICT_LIGHTING_HINT_PGI</name></cpp:macro> <cpp:value>0x1A217</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STRICT_SCISSOR_HINT_PGI</name></cpp:macro> <cpp:value>0x1A218</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_STIPPLE_HINT_PGI</name></cpp:macro> <cpp:value>0x1A219</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_NEAR_HINT_PGI</name></cpp:macro> <cpp:value>0x1A220</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_FAR_HINT_PGI</name></cpp:macro> <cpp:value>0x1A221</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WIDE_LINE_HINT_PGI</name></cpp:macro> <cpp:value>0x1A222</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_NORMALS_HINT_PGI</name></cpp:macro> <cpp:value>0x1A223</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SUBSAMPLE_RATE_SGIX</name></cpp:macro> <cpp:value>0x85A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SUBSAMPLE_RATE_SGIX</name></cpp:macro> <cpp:value>0x85A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_SUBSAMPLE_4444_SGIX</name></cpp:macro> <cpp:value>0x85A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_SUBSAMPLE_2424_SGIX</name></cpp:macro> <cpp:value>0x85A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_SUBSAMPLE_4242_SGIX</name></cpp:macro> <cpp:value>0x85A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_ARB</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS_ARB</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_ATTRIBUTES_ARB</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_ARB</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA4_SGIS</name></cpp:macro> <cpp:value>0x8110</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA8_SGIS</name></cpp:macro> <cpp:value>0x8111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA12_SGIS</name></cpp:macro> <cpp:value>0x8112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA16_SGIS</name></cpp:macro> <cpp:value>0x8113</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE4_SGIS</name></cpp:macro> <cpp:value>0x8114</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE8_SGIS</name></cpp:macro> <cpp:value>0x8115</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE12_SGIS</name></cpp:macro> <cpp:value>0x8116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE16_SGIS</name></cpp:macro> <cpp:value>0x8117</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY4_SGIS</name></cpp:macro> <cpp:value>0x8118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY8_SGIS</name></cpp:macro> <cpp:value>0x8119</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY12_SGIS</name></cpp:macro> <cpp:value>0x811A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY16_SGIS</name></cpp:macro> <cpp:value>0x811B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE_ALPHA4_SGIS</name></cpp:macro> <cpp:value>0x811C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE_ALPHA8_SGIS</name></cpp:macro> <cpp:value>0x811D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_ALPHA4_SGIS</name></cpp:macro> <cpp:value>0x811E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_ALPHA8_SGIS</name></cpp:macro> <cpp:value>0x811F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_LUMINANCE4_SGIS</name></cpp:macro> <cpp:value>0x8120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_LUMINANCE8_SGIS</name></cpp:macro> <cpp:value>0x8121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_INTENSITY4_SGIS</name></cpp:macro> <cpp:value>0x8122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_INTENSITY8_SGIS</name></cpp:macro> <cpp:value>0x8123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_TEXTURE_SELECT_SGIS</name></cpp:macro> <cpp:value>0x8124</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_TEXTURE_SELECT_SGIS</name></cpp:macro> <cpp:value>0x8125</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x864C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV</name></cpp:macro> <cpp:value>0x864D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x864E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV</name></cpp:macro> <cpp:value>0x86D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_S8_S8_8_8_NV</name></cpp:macro> <cpp:value>0x86DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_S8_S8_REV_NV</name></cpp:macro> <cpp:value>0x86DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_MAG_INTENSITY_NV</name></cpp:macro> <cpp:value>0x86DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_CONSISTENT_NV</name></cpp:macro> <cpp:value>0x86DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHADER_NV</name></cpp:macro> <cpp:value>0x86DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OPERATION_NV</name></cpp:macro> <cpp:value>0x86DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_MODES_NV</name></cpp:macro> <cpp:value>0x86E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_MATRIX_NV</name></cpp:macro> <cpp:value>0x86E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_SCALE_NV</name></cpp:macro> <cpp:value>0x86E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_BIAS_NV</name></cpp:macro> <cpp:value>0x86E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_MATRIX_NV</name></cpp:macro> <cpp:value>0x86E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_SCALE_NV</name></cpp:macro> <cpp:value>0x86E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_BIAS_NV</name></cpp:macro> <cpp:value>0x86E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS_TEXTURE_INPUT_NV</name></cpp:macro> <cpp:value>0x86E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONST_EYE_NV</name></cpp:macro> <cpp:value>0x86E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PASS_THROUGH_NV</name></cpp:macro> <cpp:value>0x86E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FRAGMENT_NV</name></cpp:macro> <cpp:value>0x86E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_AR_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_GB_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_NV</name></cpp:macro> <cpp:value>0x86EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_DEPTH_REPLACE_NV</name></cpp:macro> <cpp:value>0x86ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HILO_NV</name></cpp:macro> <cpp:value>0x86F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_NV</name></cpp:macro> <cpp:value>0x86F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_MAG_NV</name></cpp:macro> <cpp:value>0x86F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_MAG_VIB_NV</name></cpp:macro> <cpp:value>0x86F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HILO16_NV</name></cpp:macro> <cpp:value>0x86F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_HILO_NV</name></cpp:macro> <cpp:value>0x86F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_HILO16_NV</name></cpp:macro> <cpp:value>0x86FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGBA_NV</name></cpp:macro> <cpp:value>0x86FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGBA8_NV</name></cpp:macro> <cpp:value>0x86FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB_NV</name></cpp:macro> <cpp:value>0x86FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB8_NV</name></cpp:macro> <cpp:value>0x86FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE_NV</name></cpp:macro> <cpp:value>0x8701</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE8_NV</name></cpp:macro> <cpp:value>0x8702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE_ALPHA_NV</name></cpp:macro> <cpp:value>0x8703</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE8_ALPHA8_NV</name></cpp:macro> <cpp:value>0x8704</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_ALPHA_NV</name></cpp:macro> <cpp:value>0x8705</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_ALPHA8_NV</name></cpp:macro> <cpp:value>0x8706</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_INTENSITY_NV</name></cpp:macro> <cpp:value>0x8707</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_INTENSITY8_NV</name></cpp:macro> <cpp:value>0x8708</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT8_NV</name></cpp:macro> <cpp:value>0x8709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT8_MAG8_NV</name></cpp:macro> <cpp:value>0x870A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT8_MAG8_INTENSITY8_NV</name></cpp:macro> <cpp:value>0x870B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB_UNSIGNED_ALPHA_NV</name></cpp:macro> <cpp:value>0x870C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV</name></cpp:macro> <cpp:value>0x870D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HI_SCALE_NV</name></cpp:macro> <cpp:value>0x870E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LO_SCALE_NV</name></cpp:macro> <cpp:value>0x870F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DS_SCALE_NV</name></cpp:macro> <cpp:value>0x8710</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DT_SCALE_NV</name></cpp:macro> <cpp:value>0x8711</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAGNITUDE_SCALE_NV</name></cpp:macro> <cpp:value>0x8712</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIBRANCE_SCALE_NV</name></cpp:macro> <cpp:value>0x8713</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HI_BIAS_NV</name></cpp:macro> <cpp:value>0x8714</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LO_BIAS_NV</name></cpp:macro> <cpp:value>0x8715</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DS_BIAS_NV</name></cpp:macro> <cpp:value>0x8716</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DT_BIAS_NV</name></cpp:macro> <cpp:value>0x8717</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAGNITUDE_BIAS_NV</name></cpp:macro> <cpp:value>0x8718</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIBRANCE_BIAS_NV</name></cpp:macro> <cpp:value>0x8719</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER_VALUES_NV</name></cpp:macro> <cpp:value>0x871A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_HI_SIZE_NV</name></cpp:macro> <cpp:value>0x871B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LO_SIZE_NV</name></cpp:macro> <cpp:value>0x871C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DS_SIZE_NV</name></cpp:macro> <cpp:value>0x871D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DT_SIZE_NV</name></cpp:macro> <cpp:value>0x871E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAG_SIZE_NV</name></cpp:macro> <cpp:value>0x871F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS</name></cpp:macro> <cpp:value>0x0007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_SPECULAR_TEXTURE_WIN</name></cpp:macro> <cpp:value>0x80EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ELEMENT_SWIZZLE_AMD</name></cpp:macro> <cpp:value>0x91A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ID_SWIZZLE_AMD</name></cpp:macro> <cpp:value>0x91A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_ARB</name></cpp:macro> <cpp:value>0x8804</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8805</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8806</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x8807</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8808</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8809</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x880A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x880D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x8810</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_RESAMPLE_OML</name></cpp:macro> <cpp:value>0x8984</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_RESAMPLE_OML</name></cpp:macro> <cpp:value>0x8985</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_REPLICATE_OML</name></cpp:macro> <cpp:value>0x8986</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_ZERO_FILL_OML</name></cpp:macro> <cpp:value>0x8987</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_AVERAGE_OML</name></cpp:macro> <cpp:value>0x8988</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_DECIMATE_OML</name></cpp:macro> <cpp:value>0x8989</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBCR_422_APPLE</name></cpp:macro> <cpp:value>0x85B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_APPLE</name></cpp:macro> <cpp:value>0x85BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_REV_APPLE</name></cpp:macro> <cpp:value>0x85BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ENV_BIAS_SGIX</name></cpp:macro> <cpp:value>0x80BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FAIL_VALUE_ARB</name></cpp:macro> <cpp:value>0x80BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_EXT</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_EXT</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEXTURE_SGIS</name></cpp:macro> <cpp:value>0x8353</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS</name></cpp:macro> <cpp:value>0x8354</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS</name></cpp:macro> <cpp:value>0x8355</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_GROUP_COLOR_SGIS</name></cpp:macro> <cpp:value>0x8356</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_SGIS</name></cpp:macro> <cpp:value>0x8191</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_HINT_SGIS</name></cpp:macro> <cpp:value>0x8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INSTRUMENT_BUFFER_POINTER_SGIX</name></cpp:macro> <cpp:value>0x8180</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INSTRUMENT_MEASUREMENTS_SGIX</name></cpp:macro> <cpp:value>0x8181</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LIGHTING_MODE_HP</name></cpp:macro> <cpp:value>0x8167</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_POST_SPECULAR_HP</name></cpp:macro> <cpp:value>0x8168</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_PRE_SPECULAR_HP</name></cpp:macro> <cpp:value>0x8169</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_EXT</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_EXT</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD_EXT</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_INVERT_MESA</name></cpp:macro> <cpp:value>0x8758</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_HINT_SGIX</name></cpp:macro> <cpp:value>0x8316</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_DATA_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_CONSISTENT_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATERIAL_SIDE_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR3_BIT_PGI</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR4_BIT_PGI</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGEFLAG_BIT_PGI</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_BIT_PGI</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_AMBIENT_BIT_PGI</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_DIFFUSE_BIT_PGI</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_EMISSION_BIT_PGI</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_COLOR_INDEXES_BIT_PGI</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_SHININESS_BIT_PGI</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_SPECULAR_BIT_PGI</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_BIT_PGI</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD1_BIT_PGI</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD2_BIT_PGI</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD3_BIT_PGI</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD4_BIT_PGI</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX23_BIT_PGI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX4_BIT_PGI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI_EXT</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI_EXT</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32UI_EXT</name></cpp:macro> <cpp:value>0x8D72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32UI_EXT</name></cpp:macro> <cpp:value>0x8D73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32UI_EXT</name></cpp:macro> <cpp:value>0x8D74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32UI_EXT</name></cpp:macro> <cpp:value>0x8D75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI_EXT</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI_EXT</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16UI_EXT</name></cpp:macro> <cpp:value>0x8D78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16UI_EXT</name></cpp:macro> <cpp:value>0x8D79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16UI_EXT</name></cpp:macro> <cpp:value>0x8D7A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16UI_EXT</name></cpp:macro> <cpp:value>0x8D7B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI_EXT</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI_EXT</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8UI_EXT</name></cpp:macro> <cpp:value>0x8D7E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8UI_EXT</name></cpp:macro> <cpp:value>0x8D7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8UI_EXT</name></cpp:macro> <cpp:value>0x8D80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA8UI_EXT</name></cpp:macro> <cpp:value>0x8D81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I_EXT</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I_EXT</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32I_EXT</name></cpp:macro> <cpp:value>0x8D84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32I_EXT</name></cpp:macro> <cpp:value>0x8D85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32I_EXT</name></cpp:macro> <cpp:value>0x8D86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32I_EXT</name></cpp:macro> <cpp:value>0x8D87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I_EXT</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I_EXT</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16I_EXT</name></cpp:macro> <cpp:value>0x8D8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16I_EXT</name></cpp:macro> <cpp:value>0x8D8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16I_EXT</name></cpp:macro> <cpp:value>0x8D8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16I_EXT</name></cpp:macro> <cpp:value>0x8D8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I_EXT</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I_EXT</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8I_EXT</name></cpp:macro> <cpp:value>0x8D90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8I_EXT</name></cpp:macro> <cpp:value>0x8D91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8I_EXT</name></cpp:macro> <cpp:value>0x8D92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA8I_EXT</name></cpp:macro> <cpp:value>0x8D93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER_MODE_EXT</name></cpp:macro> <cpp:value>0x8D9E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_S3TC</name></cpp:macro> <cpp:value>0x83A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4_S3TC</name></cpp:macro> <cpp:value>0x83A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_S3TC</name></cpp:macro> <cpp:value>0x83A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_S3TC</name></cpp:macro> <cpp:value>0x83A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_DXT5_S3TC</name></cpp:macro> <cpp:value>0x83A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_DXT5_S3TC</name></cpp:macro> <cpp:value>0x83A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESSELLATION_MODE_AMD</name></cpp:macro> <cpp:value>0x9004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESSELLATION_FACTOR_AMD</name></cpp:macro> <cpp:value>0x9005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCRETE_AMD</name></cpp:macro> <cpp:value>0x9006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTINUOUS_AMD</name></cpp:macro> <cpp:value>0x9007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MATERIAL_EXT</name></cpp:macro> <cpp:value>0x81B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MATERIAL_PARAMETER_EXT</name></cpp:macro> <cpp:value>0x81B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MATERIAL_FACE_EXT</name></cpp:macro> <cpp:value>0x81BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_ADVANCED_COHERENT_NV</name></cpp:macro> <cpp:value>0x9285</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PARALLEL_ARRAYS_INTEL</name></cpp:macro> <cpp:value>0x83F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_ATI</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_ATI</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_ATI</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_ATI</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_ATI</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_ATI</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_ATI</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_ATI</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_ATI</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_ATI</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_ATI</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_ATI</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_ATI</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_ATI</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_ATI</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_ATI</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_ATI</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CMYK_EXT</name></cpp:macro> <cpp:value>0x800C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CMYKA_EXT</name></cpp:macro> <cpp:value>0x800D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_CMYK_HINT_EXT</name></cpp:macro> <cpp:value>0x800E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_CMYK_HINT_EXT</name></cpp:macro> <cpp:value>0x800F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_SGIX</name></cpp:macro> <cpp:value>0x8139</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_MODE_SGIX</name></cpp:macro> <cpp:value>0x832B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE</name></cpp:macro> <cpp:value>0x85B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_SGIX</name></cpp:macro> <cpp:value>0x8094</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV</name></cpp:macro> <cpp:value>0x8DA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV</name></cpp:macro> <cpp:value>0x8DA1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8DA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8DA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8DA4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESCALE_NORMAL_EXT</name></cpp:macro> <cpp:value>0x803A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_ARB</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_ARB</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8A45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_NV</name></cpp:macro> <cpp:value>0x8E22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV</name></cpp:macro> <cpp:value>0x8E23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV</name></cpp:macro> <cpp:value>0x8E24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BINDING_NV</name></cpp:macro> <cpp:value>0x8E25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_TEX_IMAGE_SGIX</name></cpp:macro> <cpp:value>0x835C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_DRAW_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x835D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_READ_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x835E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_TEX_IMAGE_SGIX</name></cpp:macro> <cpp:value>0x835F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_DRAW_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x8360</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_READ_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x8361</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR_EXT</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WARP_SIZE_NV</name></cpp:macro> <cpp:value>0x9339</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WARPS_PER_SM_NV</name></cpp:macro> <cpp:value>0x933A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SM_COUNT_NV</name></cpp:macro> <cpp:value>0x933B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP_EXT</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP_EXT</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_V2F_EXT</name></cpp:macro> <cpp:value>0x81AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_V3F_EXT</name></cpp:macro> <cpp:value>0x81AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_N3F_V2F_EXT</name></cpp:macro> <cpp:value>0x81AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_N3F_V3F_EXT</name></cpp:macro> <cpp:value>0x81B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_V2F_EXT</name></cpp:macro> <cpp:value>0x81B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_V3F_EXT</name></cpp:macro> <cpp:value>0x81B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_N3F_V2F_EXT</name></cpp:macro> <cpp:value>0x81B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_N3F_V3F_EXT</name></cpp:macro> <cpp:value>0x81B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_EXT</name></cpp:macro> <cpp:value>0x8024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_HISTOGRAM_EXT</name></cpp:macro> <cpp:value>0x8025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x8028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x8029</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x802A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x802B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_LUMINANCE_SIZE_EXT</name></cpp:macro> <cpp:value>0x802C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_SINK_EXT</name></cpp:macro> <cpp:value>0x802D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_EXT</name></cpp:macro> <cpp:value>0x802E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_FORMAT_EXT</name></cpp:macro> <cpp:value>0x802F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_SINK_EXT</name></cpp:macro> <cpp:value>0x8030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TABLE_TOO_LARGE_EXT</name></cpp:macro> <cpp:value>0x8031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN_SGIS</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX_SGIS</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE_SGIS</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISTANCE_ATTENUATION_SGIS</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8E2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_PROGRAM_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8E2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_MATRIX_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8E2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBSAMPLE_DISTANCE_AMD</name></cpp:macro> <cpp:value>0x883F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8620</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STATE_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8621</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_SIZE_NV</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_STRIDE_NV</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_TYPE_NV</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_ATTRIB_NV</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_LENGTH_NV</name></cpp:macro> <cpp:value>0x8627</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_STRING_NV</name></cpp:macro> <cpp:value>0x8628</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW_PROJECTION_NV</name></cpp:macro> <cpp:value>0x8629</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IDENTITY_NV</name></cpp:macro> <cpp:value>0x862A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERSE_NV</name></cpp:macro> <cpp:value>0x862B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_NV</name></cpp:macro> <cpp:value>0x862C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERSE_TRANSPOSE_NV</name></cpp:macro> <cpp:value>0x862D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV</name></cpp:macro> <cpp:value>0x862E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRACK_MATRICES_NV</name></cpp:macro> <cpp:value>0x862F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX0_NV</name></cpp:macro> <cpp:value>0x8630</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX1_NV</name></cpp:macro> <cpp:value>0x8631</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX2_NV</name></cpp:macro> <cpp:value>0x8632</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX3_NV</name></cpp:macro> <cpp:value>0x8633</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX4_NV</name></cpp:macro> <cpp:value>0x8634</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX5_NV</name></cpp:macro> <cpp:value>0x8635</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX6_NV</name></cpp:macro> <cpp:value>0x8636</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX7_NV</name></cpp:macro> <cpp:value>0x8637</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_STACK_DEPTH_NV</name></cpp:macro> <cpp:value>0x8640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_NV</name></cpp:macro> <cpp:value>0x8641</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE_NV</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE_NV</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PARAMETER_NV</name></cpp:macro> <cpp:value>0x8644</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_POINTER_NV</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TARGET_NV</name></cpp:macro> <cpp:value>0x8646</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_RESIDENT_NV</name></cpp:macro> <cpp:value>0x8647</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRACK_MATRIX_NV</name></cpp:macro> <cpp:value>0x8648</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRACK_MATRIX_TRANSFORM_NV</name></cpp:macro> <cpp:value>0x8649</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_BINDING_NV</name></cpp:macro> <cpp:value>0x864A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_POSITION_NV</name></cpp:macro> <cpp:value>0x864B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY0_NV</name></cpp:macro> <cpp:value>0x8650</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY1_NV</name></cpp:macro> <cpp:value>0x8651</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY2_NV</name></cpp:macro> <cpp:value>0x8652</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY3_NV</name></cpp:macro> <cpp:value>0x8653</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY4_NV</name></cpp:macro> <cpp:value>0x8654</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY5_NV</name></cpp:macro> <cpp:value>0x8655</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY6_NV</name></cpp:macro> <cpp:value>0x8656</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY7_NV</name></cpp:macro> <cpp:value>0x8657</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY8_NV</name></cpp:macro> <cpp:value>0x8658</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY9_NV</name></cpp:macro> <cpp:value>0x8659</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY10_NV</name></cpp:macro> <cpp:value>0x865A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY11_NV</name></cpp:macro> <cpp:value>0x865B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY12_NV</name></cpp:macro> <cpp:value>0x865C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY13_NV</name></cpp:macro> <cpp:value>0x865D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY14_NV</name></cpp:macro> <cpp:value>0x865E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY15_NV</name></cpp:macro> <cpp:value>0x865F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB0_4_NV</name></cpp:macro> <cpp:value>0x8660</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB1_4_NV</name></cpp:macro> <cpp:value>0x8661</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB2_4_NV</name></cpp:macro> <cpp:value>0x8662</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB3_4_NV</name></cpp:macro> <cpp:value>0x8663</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB4_4_NV</name></cpp:macro> <cpp:value>0x8664</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB5_4_NV</name></cpp:macro> <cpp:value>0x8665</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB6_4_NV</name></cpp:macro> <cpp:value>0x8666</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB7_4_NV</name></cpp:macro> <cpp:value>0x8667</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB8_4_NV</name></cpp:macro> <cpp:value>0x8668</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB9_4_NV</name></cpp:macro> <cpp:value>0x8669</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB10_4_NV</name></cpp:macro> <cpp:value>0x866A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB11_4_NV</name></cpp:macro> <cpp:value>0x866B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB12_4_NV</name></cpp:macro> <cpp:value>0x866C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB13_4_NV</name></cpp:macro> <cpp:value>0x866D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB14_4_NV</name></cpp:macro> <cpp:value>0x866E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB15_4_NV</name></cpp:macro> <cpp:value>0x866F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB0_4_NV</name></cpp:macro> <cpp:value>0x8670</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB1_4_NV</name></cpp:macro> <cpp:value>0x8671</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB2_4_NV</name></cpp:macro> <cpp:value>0x8672</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB3_4_NV</name></cpp:macro> <cpp:value>0x8673</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB4_4_NV</name></cpp:macro> <cpp:value>0x8674</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB5_4_NV</name></cpp:macro> <cpp:value>0x8675</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB6_4_NV</name></cpp:macro> <cpp:value>0x8676</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB7_4_NV</name></cpp:macro> <cpp:value>0x8677</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB8_4_NV</name></cpp:macro> <cpp:value>0x8678</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB9_4_NV</name></cpp:macro> <cpp:value>0x8679</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB10_4_NV</name></cpp:macro> <cpp:value>0x867A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB11_4_NV</name></cpp:macro> <cpp:value>0x867B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB12_4_NV</name></cpp:macro> <cpp:value>0x867C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB13_4_NV</name></cpp:macro> <cpp:value>0x867D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB14_4_NV</name></cpp:macro> <cpp:value>0x867E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB15_4_NV</name></cpp:macro> <cpp:value>0x867F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_EXT</name></cpp:macro> <cpp:value>0x8780</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8781</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_INDEX_EXT</name></cpp:macro> <cpp:value>0x8782</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_NEGATE_EXT</name></cpp:macro> <cpp:value>0x8783</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_DOT3_EXT</name></cpp:macro> <cpp:value>0x8784</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_DOT4_EXT</name></cpp:macro> <cpp:value>0x8785</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MUL_EXT</name></cpp:macro> <cpp:value>0x8786</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_ADD_EXT</name></cpp:macro> <cpp:value>0x8787</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MADD_EXT</name></cpp:macro> <cpp:value>0x8788</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_FRAC_EXT</name></cpp:macro> <cpp:value>0x8789</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MAX_EXT</name></cpp:macro> <cpp:value>0x878A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MIN_EXT</name></cpp:macro> <cpp:value>0x878B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SET_GE_EXT</name></cpp:macro> <cpp:value>0x878C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SET_LT_EXT</name></cpp:macro> <cpp:value>0x878D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_CLAMP_EXT</name></cpp:macro> <cpp:value>0x878E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_FLOOR_EXT</name></cpp:macro> <cpp:value>0x878F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_ROUND_EXT</name></cpp:macro> <cpp:value>0x8790</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_EXP_BASE_2_EXT</name></cpp:macro> <cpp:value>0x8791</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_LOG_BASE_2_EXT</name></cpp:macro> <cpp:value>0x8792</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_POWER_EXT</name></cpp:macro> <cpp:value>0x8793</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_RECIP_EXT</name></cpp:macro> <cpp:value>0x8794</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_RECIP_SQRT_EXT</name></cpp:macro> <cpp:value>0x8795</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SUB_EXT</name></cpp:macro> <cpp:value>0x8796</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_CROSS_PRODUCT_EXT</name></cpp:macro> <cpp:value>0x8797</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MULTIPLY_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8798</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MOV_EXT</name></cpp:macro> <cpp:value>0x8799</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_VERTEX_EXT</name></cpp:macro> <cpp:value>0x879A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_COLOR0_EXT</name></cpp:macro> <cpp:value>0x879B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_COLOR1_EXT</name></cpp:macro> <cpp:value>0x879C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD0_EXT</name></cpp:macro> <cpp:value>0x879D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD1_EXT</name></cpp:macro> <cpp:value>0x879E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD2_EXT</name></cpp:macro> <cpp:value>0x879F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD3_EXT</name></cpp:macro> <cpp:value>0x87A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD4_EXT</name></cpp:macro> <cpp:value>0x87A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD5_EXT</name></cpp:macro> <cpp:value>0x87A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD6_EXT</name></cpp:macro> <cpp:value>0x87A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD7_EXT</name></cpp:macro> <cpp:value>0x87A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD8_EXT</name></cpp:macro> <cpp:value>0x87A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD9_EXT</name></cpp:macro> <cpp:value>0x87A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD10_EXT</name></cpp:macro> <cpp:value>0x87A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD11_EXT</name></cpp:macro> <cpp:value>0x87A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD12_EXT</name></cpp:macro> <cpp:value>0x87A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD13_EXT</name></cpp:macro> <cpp:value>0x87AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD14_EXT</name></cpp:macro> <cpp:value>0x87AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD15_EXT</name></cpp:macro> <cpp:value>0x87AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD16_EXT</name></cpp:macro> <cpp:value>0x87AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD17_EXT</name></cpp:macro> <cpp:value>0x87AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD18_EXT</name></cpp:macro> <cpp:value>0x87AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD19_EXT</name></cpp:macro> <cpp:value>0x87B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD20_EXT</name></cpp:macro> <cpp:value>0x87B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD21_EXT</name></cpp:macro> <cpp:value>0x87B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD22_EXT</name></cpp:macro> <cpp:value>0x87B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD23_EXT</name></cpp:macro> <cpp:value>0x87B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD24_EXT</name></cpp:macro> <cpp:value>0x87B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD25_EXT</name></cpp:macro> <cpp:value>0x87B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD26_EXT</name></cpp:macro> <cpp:value>0x87B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD27_EXT</name></cpp:macro> <cpp:value>0x87B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD28_EXT</name></cpp:macro> <cpp:value>0x87B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD29_EXT</name></cpp:macro> <cpp:value>0x87BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD30_EXT</name></cpp:macro> <cpp:value>0x87BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD31_EXT</name></cpp:macro> <cpp:value>0x87BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_FOG_EXT</name></cpp:macro> <cpp:value>0x87BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALAR_EXT</name></cpp:macro> <cpp:value>0x87BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VECTOR_EXT</name></cpp:macro> <cpp:value>0x87BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_EXT</name></cpp:macro> <cpp:value>0x87C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_EXT</name></cpp:macro> <cpp:value>0x87C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_EXT</name></cpp:macro> <cpp:value>0x87C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_EXT</name></cpp:macro> <cpp:value>0x87C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_EXT</name></cpp:macro> <cpp:value>0x87C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_OPTIMIZED_EXT</name></cpp:macro> <cpp:value>0x87D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_X_EXT</name></cpp:macro> <cpp:value>0x87D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Y_EXT</name></cpp:macro> <cpp:value>0x87D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z_EXT</name></cpp:macro> <cpp:value>0x87D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_W_EXT</name></cpp:macro> <cpp:value>0x87D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_X_EXT</name></cpp:macro> <cpp:value>0x87D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_Y_EXT</name></cpp:macro> <cpp:value>0x87DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_Z_EXT</name></cpp:macro> <cpp:value>0x87DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_W_EXT</name></cpp:macro> <cpp:value>0x87DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO_EXT</name></cpp:macro> <cpp:value>0x87DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_EXT</name></cpp:macro> <cpp:value>0x87DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_ONE_EXT</name></cpp:macro> <cpp:value>0x87DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMALIZED_RANGE_EXT</name></cpp:macro> <cpp:value>0x87E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_RANGE_EXT</name></cpp:macro> <cpp:value>0x87E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_EXT</name></cpp:macro> <cpp:value>0x87E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MVP_MATRIX_EXT</name></cpp:macro> <cpp:value>0x87E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x87E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x87E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x87E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x87E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB_EXT</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB_EXT</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA_EXT</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA_EXT</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_PIXELS_APPLE</name></cpp:macro> <cpp:value>0x8A0A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_APPLE</name></cpp:macro> <cpp:value>0x8A0B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_MODELVIEW_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_PROJECTION_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_TEXTURE_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_COLOR_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_SOURCE_EXT</name></cpp:macro> <cpp:value>0x8450</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_EXT</name></cpp:macro> <cpp:value>0x8451</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_FOG_COORDINATE_EXT</name></cpp:macro> <cpp:value>0x8453</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8454</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8455</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8456</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8457</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8075</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8076</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8078</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8079</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x807A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x807B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x807C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x807D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x807E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x807F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8081</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8082</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8083</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8084</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8085</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8086</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8087</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8088</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8089</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x808A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x808B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x808C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x808D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x808E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x808F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8090</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8091</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8092</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8093</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA_EXT</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PAUSED</name></cpp:macro> <cpp:value>0x8E23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_ACTIVE</name></cpp:macro> <cpp:value>0x8E24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCB_SGIX</name></cpp:macro> <cpp:value>0x8318</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCBA_SGIX</name></cpp:macro> <cpp:value>0x8319</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_EXT</name></cpp:macro> <cpp:value>0x80E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_EXT</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x83F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x83F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TRANSFORM_2D_EXT</name></cpp:macro> <cpp:value>0x8330</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAG_FILTER_EXT</name></cpp:macro> <cpp:value>0x8331</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MIN_FILTER_EXT</name></cpp:macro> <cpp:value>0x8332</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_CUBIC_WEIGHT_EXT</name></cpp:macro> <cpp:value>0x8333</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CUBIC_EXT</name></cpp:macro> <cpp:value>0x8334</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AVERAGE_EXT</name></cpp:macro> <cpp:value>0x8335</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8336</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8337</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TRANSFORM_2D_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8338</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_ATI</name></cpp:macro> <cpp:value>0x8920</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_0_ATI</name></cpp:macro> <cpp:value>0x8921</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_1_ATI</name></cpp:macro> <cpp:value>0x8922</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_2_ATI</name></cpp:macro> <cpp:value>0x8923</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_3_ATI</name></cpp:macro> <cpp:value>0x8924</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_4_ATI</name></cpp:macro> <cpp:value>0x8925</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_5_ATI</name></cpp:macro> <cpp:value>0x8926</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_6_ATI</name></cpp:macro> <cpp:value>0x8927</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_7_ATI</name></cpp:macro> <cpp:value>0x8928</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_8_ATI</name></cpp:macro> <cpp:value>0x8929</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_9_ATI</name></cpp:macro> <cpp:value>0x892A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_10_ATI</name></cpp:macro> <cpp:value>0x892B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_11_ATI</name></cpp:macro> <cpp:value>0x892C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_12_ATI</name></cpp:macro> <cpp:value>0x892D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_13_ATI</name></cpp:macro> <cpp:value>0x892E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_14_ATI</name></cpp:macro> <cpp:value>0x892F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_15_ATI</name></cpp:macro> <cpp:value>0x8930</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_16_ATI</name></cpp:macro> <cpp:value>0x8931</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_17_ATI</name></cpp:macro> <cpp:value>0x8932</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_18_ATI</name></cpp:macro> <cpp:value>0x8933</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_19_ATI</name></cpp:macro> <cpp:value>0x8934</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_20_ATI</name></cpp:macro> <cpp:value>0x8935</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_21_ATI</name></cpp:macro> <cpp:value>0x8936</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_22_ATI</name></cpp:macro> <cpp:value>0x8937</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_23_ATI</name></cpp:macro> <cpp:value>0x8938</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_24_ATI</name></cpp:macro> <cpp:value>0x8939</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_25_ATI</name></cpp:macro> <cpp:value>0x893A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_26_ATI</name></cpp:macro> <cpp:value>0x893B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_27_ATI</name></cpp:macro> <cpp:value>0x893C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_28_ATI</name></cpp:macro> <cpp:value>0x893D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_29_ATI</name></cpp:macro> <cpp:value>0x893E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_30_ATI</name></cpp:macro> <cpp:value>0x893F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_31_ATI</name></cpp:macro> <cpp:value>0x8940</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_0_ATI</name></cpp:macro> <cpp:value>0x8941</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_1_ATI</name></cpp:macro> <cpp:value>0x8942</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_2_ATI</name></cpp:macro> <cpp:value>0x8943</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_3_ATI</name></cpp:macro> <cpp:value>0x8944</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_4_ATI</name></cpp:macro> <cpp:value>0x8945</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_5_ATI</name></cpp:macro> <cpp:value>0x8946</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_6_ATI</name></cpp:macro> <cpp:value>0x8947</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_7_ATI</name></cpp:macro> <cpp:value>0x8948</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_8_ATI</name></cpp:macro> <cpp:value>0x8949</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_9_ATI</name></cpp:macro> <cpp:value>0x894A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_10_ATI</name></cpp:macro> <cpp:value>0x894B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_11_ATI</name></cpp:macro> <cpp:value>0x894C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_12_ATI</name></cpp:macro> <cpp:value>0x894D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_13_ATI</name></cpp:macro> <cpp:value>0x894E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_14_ATI</name></cpp:macro> <cpp:value>0x894F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_15_ATI</name></cpp:macro> <cpp:value>0x8950</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_16_ATI</name></cpp:macro> <cpp:value>0x8951</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_17_ATI</name></cpp:macro> <cpp:value>0x8952</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_18_ATI</name></cpp:macro> <cpp:value>0x8953</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_19_ATI</name></cpp:macro> <cpp:value>0x8954</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_20_ATI</name></cpp:macro> <cpp:value>0x8955</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_21_ATI</name></cpp:macro> <cpp:value>0x8956</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_22_ATI</name></cpp:macro> <cpp:value>0x8957</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_23_ATI</name></cpp:macro> <cpp:value>0x8958</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_24_ATI</name></cpp:macro> <cpp:value>0x8959</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_25_ATI</name></cpp:macro> <cpp:value>0x895A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_26_ATI</name></cpp:macro> <cpp:value>0x895B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_27_ATI</name></cpp:macro> <cpp:value>0x895C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_28_ATI</name></cpp:macro> <cpp:value>0x895D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_29_ATI</name></cpp:macro> <cpp:value>0x895E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_30_ATI</name></cpp:macro> <cpp:value>0x895F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_31_ATI</name></cpp:macro> <cpp:value>0x8960</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MOV_ATI</name></cpp:macro> <cpp:value>0x8961</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_ATI</name></cpp:macro> <cpp:value>0x8963</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MUL_ATI</name></cpp:macro> <cpp:value>0x8964</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUB_ATI</name></cpp:macro> <cpp:value>0x8965</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_ATI</name></cpp:macro> <cpp:value>0x8966</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT4_ATI</name></cpp:macro> <cpp:value>0x8967</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAD_ATI</name></cpp:macro> <cpp:value>0x8968</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LERP_ATI</name></cpp:macro> <cpp:value>0x8969</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CND_ATI</name></cpp:macro> <cpp:value>0x896A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CND0_ATI</name></cpp:macro> <cpp:value>0x896B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT2_ADD_ATI</name></cpp:macro> <cpp:value>0x896C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_INTERPOLATOR_ATI</name></cpp:macro> <cpp:value>0x896D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FRAGMENT_REGISTERS_ATI</name></cpp:macro> <cpp:value>0x896E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FRAGMENT_CONSTANTS_ATI</name></cpp:macro> <cpp:value>0x896F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_PASSES_ATI</name></cpp:macro> <cpp:value>0x8970</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INSTRUCTIONS_PER_PASS_ATI</name></cpp:macro> <cpp:value>0x8971</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INSTRUCTIONS_TOTAL_ATI</name></cpp:macro> <cpp:value>0x8972</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI</name></cpp:macro> <cpp:value>0x8973</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_LOOPBACK_COMPONENTS_ATI</name></cpp:macro> <cpp:value>0x8974</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ALPHA_PAIRING_ATI</name></cpp:macro> <cpp:value>0x8975</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STR_ATI</name></cpp:macro> <cpp:value>0x8976</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STQ_ATI</name></cpp:macro> <cpp:value>0x8977</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STR_DR_ATI</name></cpp:macro> <cpp:value>0x8978</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STQ_DQ_ATI</name></cpp:macro> <cpp:value>0x8979</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STRQ_ATI</name></cpp:macro> <cpp:value>0x897A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STRQ_DQ_ATI</name></cpp:macro> <cpp:value>0x897B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_BIT_ATI</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_8X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIT_ATI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUARTER_BIT_ATI</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EIGHTH_BIT_ATI</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SATURATE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMP_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BIAS_BIT_ATI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESTART_SUN</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_MIDDLE_SUN</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_OLDEST_SUN</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_LIST_SUN</name></cpp:macro> <cpp:value>0x81D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_SUN</name></cpp:macro> <cpp:value>0x81D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_SUN</name></cpp:macro> <cpp:value>0x85C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN</name></cpp:macro> <cpp:value>0x85C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN</name></cpp:macro> <cpp:value>0x85C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN</name></cpp:macro> <cpp:value>0x85C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_V3F_SUN</name></cpp:macro> <cpp:value>0x85C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_C4UB_V3F_SUN</name></cpp:macro> <cpp:value>0x85C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_C3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_C4F_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_T2F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_T2F_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_T2F_C4F_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_EXT</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8_EXT</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8_EXT</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STENCIL_SIZE_EXT</name></cpp:macro> <cpp:value>0x88F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_EXT</name></cpp:macro> <cpp:value>0x8742</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_EDGE_EXT</name></cpp:macro> <cpp:value>0x8743</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_BORDER_EXT</name></cpp:macro> <cpp:value>0x8912</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_FILTER_HINT_NV</name></cpp:macro> <cpp:value>0x8534</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_APPLE</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_FLOAT_APPLE</name></cpp:macro> <cpp:value>0x8A0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_MARKER_SGIX</name></cpp:macro> <cpp:value>0x8329</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_LATC1_EXT</name></cpp:macro> <cpp:value>0x8C70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT</name></cpp:macro> <cpp:value>0x8C71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT</name></cpp:macro> <cpp:value>0x8C72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT</name></cpp:macro> <cpp:value>0x8C73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION_ARB</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_SINGLE_CONTEXT_INTEL</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_GLOBAL_CONTEXT_INTEL</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_WAIT_INTEL</name></cpp:macro> <cpp:value>0x83FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_FLUSH_INTEL</name></cpp:macro> <cpp:value>0x83FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_DONOT_FLUSH_INTEL</name></cpp:macro> <cpp:value>0x83F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_EVENT_INTEL</name></cpp:macro> <cpp:value>0x94F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL</name></cpp:macro> <cpp:value>0x94F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL</name></cpp:macro> <cpp:value>0x94F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL</name></cpp:macro> <cpp:value>0x94F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_RAW_INTEL</name></cpp:macro> <cpp:value>0x94F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL</name></cpp:macro> <cpp:value>0x94F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL</name></cpp:macro> <cpp:value>0x94F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL</name></cpp:macro> <cpp:value>0x94F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL</name></cpp:macro> <cpp:value>0x94FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL</name></cpp:macro> <cpp:value>0x94FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL</name></cpp:macro> <cpp:value>0x94FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL</name></cpp:macro> <cpp:value>0x94FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL</name></cpp:macro> <cpp:value>0x94FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL</name></cpp:macro> <cpp:value>0x94FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL</name></cpp:macro> <cpp:value>0x9500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT8_NV</name></cpp:macro> <cpp:value>0x8FE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT8_VEC2_NV</name></cpp:macro> <cpp:value>0x8FE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT8_VEC3_NV</name></cpp:macro> <cpp:value>0x8FE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT8_VEC4_NV</name></cpp:macro> <cpp:value>0x8FE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT16_NV</name></cpp:macro> <cpp:value>0x8FE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT16_VEC2_NV</name></cpp:macro> <cpp:value>0x8FE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT16_VEC3_NV</name></cpp:macro> <cpp:value>0x8FE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT16_VEC4_NV</name></cpp:macro> <cpp:value>0x8FE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT64_VEC2_NV</name></cpp:macro> <cpp:value>0x8FE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT64_VEC3_NV</name></cpp:macro> <cpp:value>0x8FEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT64_VEC4_NV</name></cpp:macro> <cpp:value>0x8FEB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT8_NV</name></cpp:macro> <cpp:value>0x8FEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT8_VEC2_NV</name></cpp:macro> <cpp:value>0x8FED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT8_VEC3_NV</name></cpp:macro> <cpp:value>0x8FEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT8_VEC4_NV</name></cpp:macro> <cpp:value>0x8FEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT16_NV</name></cpp:macro> <cpp:value>0x8FF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT16_VEC2_NV</name></cpp:macro> <cpp:value>0x8FF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT16_VEC3_NV</name></cpp:macro> <cpp:value>0x8FF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT16_VEC4_NV</name></cpp:macro> <cpp:value>0x8FF3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_VEC2_NV</name></cpp:macro> <cpp:value>0x8FF5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_VEC3_NV</name></cpp:macro> <cpp:value>0x8FF6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_VEC4_NV</name></cpp:macro> <cpp:value>0x8FF7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT16_NV</name></cpp:macro> <cpp:value>0x8FF8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT16_VEC2_NV</name></cpp:macro> <cpp:value>0x8FF9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT16_VEC3_NV</name></cpp:macro> <cpp:value>0x8FFA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT16_VEC4_NV</name></cpp:macro> <cpp:value>0x8FFB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PARAMETER_BUFFER_ARB</name></cpp:macro> <cpp:value>0x80EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PARAMETER_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x80EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT_NV</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8439</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_EXT</name></cpp:macro> <cpp:value>0x843A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_TANGENT_EXT</name></cpp:macro> <cpp:value>0x843B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_BINORMAL_EXT</name></cpp:macro> <cpp:value>0x843C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x843E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x843F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8440</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8441</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8442</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8443</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_TANGENT_EXT</name></cpp:macro> <cpp:value>0x8444</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_TANGENT_EXT</name></cpp:macro> <cpp:value>0x8445</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_BINORMAL_EXT</name></cpp:macro> <cpp:value>0x8446</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_BINORMAL_EXT</name></cpp:macro> <cpp:value>0x8447</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_ATI</name></cpp:macro> <cpp:value>0x8742</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_EDGE_ATI</name></cpp:macro> <cpp:value>0x8743</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTER_POSITION_UNCLIPPED_IBM</name></cpp:macro> <cpp:value>0x19262</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_SGIX</name></cpp:macro> <cpp:value>0x819A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_OPERATOR_SGIX</name></cpp:macro> <cpp:value>0x819B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LEQUAL_R_SGIX</name></cpp:macro> <cpp:value>0x819C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEQUAL_R_SGIX</name></cpp:macro> <cpp:value>0x819D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV</name></cpp:macro> <cpp:value>0x90D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV</name></cpp:macro> <cpp:value>0x90D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CALLIGRAPHIC_FRAGMENT_SGIX</name></cpp:macro> <cpp:value>0x8183</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_ELEMENT_LOCK_FIRST_EXT</name></cpp:macro> <cpp:value>0x81A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_ELEMENT_LOCK_COUNT_EXT</name></cpp:macro> <cpp:value>0x81A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F_NV</name></cpp:macro> <cpp:value>0x8DAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8_NV</name></cpp:macro> <cpp:value>0x8DAC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_FLOAT_MODE_NV</name></cpp:macro> <cpp:value>0x8DAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_COUNTER_BITS_NV</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_OCCLUSION_QUERY_ID_NV</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_COUNT_NV</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_COUNT_AVAILABLE_NV</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SERIALIZED_MODIFY_APPLE</name></cpp:macro> <cpp:value>0x8A12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_FLUSHING_UNMAP_APPLE</name></cpp:macro> <cpp:value>0x8A13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_1D</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_2D</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARABLE_2D</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_MODE</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_SCALE</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_BIAS</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REDUCE</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FORMAT</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_WIDTH</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_HEIGHT</name></cpp:macro> <cpp:value>0x8019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_WIDTH</name></cpp:macro> <cpp:value>0x801A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_HEIGHT</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_SCALE</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_SCALE</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_SCALE</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_SCALE</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_BIAS</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_BIAS</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_BIAS</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_BIAS</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM</name></cpp:macro> <cpp:value>0x8024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_HISTOGRAM</name></cpp:macro> <cpp:value>0x8025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_WIDTH</name></cpp:macro> <cpp:value>0x8026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_FORMAT</name></cpp:macro> <cpp:value>0x8027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_RED_SIZE</name></cpp:macro> <cpp:value>0x8028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8029</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_BLUE_SIZE</name></cpp:macro> <cpp:value>0x802A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x802B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_LUMINANCE_SIZE</name></cpp:macro> <cpp:value>0x802C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_SINK</name></cpp:macro> <cpp:value>0x802D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX</name></cpp:macro> <cpp:value>0x802E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_FORMAT</name></cpp:macro> <cpp:value>0x802F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_SINK</name></cpp:macro> <cpp:value>0x8030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TABLE_TOO_LARGE</name></cpp:macro> <cpp:value>0x8031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX</name></cpp:macro> <cpp:value>0x80B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX_STACK_DEPTH</name></cpp:macro> <cpp:value>0x80B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_MATRIX_STACK_DEPTH</name></cpp:macro> <cpp:value>0x80B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_SCALE</name></cpp:macro> <cpp:value>0x80B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_SCALE</name></cpp:macro> <cpp:value>0x80B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_SCALE</name></cpp:macro> <cpp:value>0x80B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_SCALE</name></cpp:macro> <cpp:value>0x80B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_BIAS</name></cpp:macro> <cpp:value>0x80B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_BIAS</name></cpp:macro> <cpp:value>0x80B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_BIAS</name></cpp:macro> <cpp:value>0x80BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_BIAS</name></cpp:macro> <cpp:value>0x80BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_CONVOLUTION_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_SCALE</name></cpp:macro> <cpp:value>0x80D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BIAS</name></cpp:macro> <cpp:value>0x80D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_FORMAT</name></cpp:macro> <cpp:value>0x80D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_WIDTH</name></cpp:macro> <cpp:value>0x80D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_RED_SIZE</name></cpp:macro> <cpp:value>0x80DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_GREEN_SIZE</name></cpp:macro> <cpp:value>0x80DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BLUE_SIZE</name></cpp:macro> <cpp:value>0x80DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x80DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_LUMINANCE_SIZE</name></cpp:macro> <cpp:value>0x80DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_INTENSITY_SIZE</name></cpp:macro> <cpp:value>0x80DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_BORDER</name></cpp:macro> <cpp:value>0x8151</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLICATE_BORDER</name></cpp:macro> <cpp:value>0x8153</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_COLOR</name></cpp:macro> <cpp:value>0x8154</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FACTOR_MIN_AMD</name></cpp:macro> <cpp:value>0x901C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FACTOR_MAX_AMD</name></cpp:macro> <cpp:value>0x901D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SRGB_DECODE_EXT</name></cpp:macro> <cpp:value>0x8A48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECODE_EXT</name></cpp:macro> <cpp:value>0x8A49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SKIP_DECODE_EXT</name></cpp:macro> <cpp:value>0x8A4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VBO_FREE_MEMORY_ATI</name></cpp:macro> <cpp:value>0x87FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FREE_MEMORY_ATI</name></cpp:macro> <cpp:value>0x87FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_FREE_MEMORY_ATI</name></cpp:macro> <cpp:value>0x87FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ABGR_EXT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9160</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_SNORM</name></cpp:macro> <cpp:value>0x9010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_SNORM</name></cpp:macro> <cpp:value>0x9011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_SNORM</name></cpp:macro> <cpp:value>0x9012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_SNORM</name></cpp:macro> <cpp:value>0x9013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_SNORM</name></cpp:macro> <cpp:value>0x9014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_SNORM</name></cpp:macro> <cpp:value>0x9015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_SNORM</name></cpp:macro> <cpp:value>0x9016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8_SNORM</name></cpp:macro> <cpp:value>0x9017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16_SNORM</name></cpp:macro> <cpp:value>0x9018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_SNORM</name></cpp:macro> <cpp:value>0x9019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_ALPHA16_SNORM</name></cpp:macro> <cpp:value>0x901A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16_SNORM</name></cpp:macro> <cpp:value>0x901B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_SNORM</name></cpp:macro> <cpp:value>0x8F90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_SNORM</name></cpp:macro> <cpp:value>0x8F91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SNORM</name></cpp:macro> <cpp:value>0x8F92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_SNORM</name></cpp:macro> <cpp:value>0x8F93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_CLAMP_S_SGIX</name></cpp:macro> <cpp:value>0x8369</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_CLAMP_T_SGIX</name></cpp:macro> <cpp:value>0x836A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_CLAMP_R_SGIX</name></cpp:macro> <cpp:value>0x836B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_ARB</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_ARB</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE_ARB</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT_ARB</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_ARB</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE_OBJECT_EXT</name></cpp:macro> <cpp:value>0x8A4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_OBJECT_EXT</name></cpp:macro> <cpp:value>0x8B40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OBJECT_EXT</name></cpp:macro> <cpp:value>0x8B48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_OBJECT_EXT</name></cpp:macro> <cpp:value>0x9151</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_OBJECT_EXT</name></cpp:macro> <cpp:value>0x9153</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_OBJECT_EXT</name></cpp:macro> <cpp:value>0x9154</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_SHADING_ARB</name></cpp:macro> <cpp:value>0x8C36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_SAMPLE_SHADING_VALUE_ARB</name></cpp:macro> <cpp:value>0x8C37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MEMORY_LAYOUT_INTEL</name></cpp:macro> <cpp:value>0x83FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAYOUT_DEFAULT_INTEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAYOUT_LINEAR_INTEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAYOUT_LINEAR_CPU_CACHED_INTEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_EXT</name></cpp:macro> <cpp:value>0x80CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_REV_EXT</name></cpp:macro> <cpp:value>0x80CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_AVERAGE_EXT</name></cpp:macro> <cpp:value>0x80CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_REV_AVERAGE_EXT</name></cpp:macro> <cpp:value>0x80CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_IBM</name></cpp:macro> <cpp:value>103050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103075</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103076</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103081</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103082</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103083</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103084</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103085</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103086</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103087</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT_MODE_ARB</name></cpp:macro> <cpp:value>0x8820</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_VERTEX_COLOR_ARB</name></cpp:macro> <cpp:value>0x891A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_FRAGMENT_COLOR_ARB</name></cpp:macro> <cpp:value>0x891B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_READ_COLOR_ARB</name></cpp:macro> <cpp:value>0x891C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_ONLY_ARB</name></cpp:macro> <cpp:value>0x891D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_ARB</name></cpp:macro> <cpp:value>0x140F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE_ARB</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC_ARB</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_R_TO_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT_ARB</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_IMAGE_UNITS_EXT</name></cpp:macro> <cpp:value>0x8F38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT</name></cpp:macro> <cpp:value>0x8F39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_NAME_EXT</name></cpp:macro> <cpp:value>0x8F3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_LEVEL_EXT</name></cpp:macro> <cpp:value>0x8F3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_LAYERED_EXT</name></cpp:macro> <cpp:value>0x8F3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_LAYER_EXT</name></cpp:macro> <cpp:value>0x8F3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_ACCESS_EXT</name></cpp:macro> <cpp:value>0x8F3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_1D_EXT</name></cpp:macro> <cpp:value>0x904C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_EXT</name></cpp:macro> <cpp:value>0x904D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_3D_EXT</name></cpp:macro> <cpp:value>0x904E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x904F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CUBE_EXT</name></cpp:macro> <cpp:value>0x9050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BUFFER_EXT</name></cpp:macro> <cpp:value>0x9051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9052</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9053</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CUBE_MAP_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9054</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x9055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_1D_EXT</name></cpp:macro> <cpp:value>0x9057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_EXT</name></cpp:macro> <cpp:value>0x9058</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_3D_EXT</name></cpp:macro> <cpp:value>0x9059</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x905A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_CUBE_EXT</name></cpp:macro> <cpp:value>0x905B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_BUFFER_EXT</name></cpp:macro> <cpp:value>0x905C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x905D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x905E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT</name></cpp:macro> <cpp:value>0x905F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x9060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_1D_EXT</name></cpp:macro> <cpp:value>0x9062</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_EXT</name></cpp:macro> <cpp:value>0x9063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_3D_EXT</name></cpp:macro> <cpp:value>0x9064</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x9065</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_CUBE_EXT</name></cpp:macro> <cpp:value>0x9066</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_BUFFER_EXT</name></cpp:macro> <cpp:value>0x9067</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9068</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x9069</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT</name></cpp:macro> <cpp:value>0x906A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x906B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT</name></cpp:macro> <cpp:value>0x906C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_IMAGE_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x906D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_BINDING_FORMAT_EXT</name></cpp:macro> <cpp:value>0x906E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FETCH_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMMAND_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_BUFFER_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_UPDATE_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_UPDATE_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BARRIER_BIT_EXT</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_BARRIER_BITS_EXT</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PER_STAGE_CONSTANTS_NV</name></cpp:macro> <cpp:value>0x8535</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IR_INSTRUMENT1_SGIX</name></cpp:macro> <cpp:value>0x817F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5_EXT</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV_EXT</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHARED_SIZE_EXT</name></cpp:macro> <cpp:value>0x8C3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_TO_RGBA_NV</name></cpp:macro> <cpp:value>0x886E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_TO_BGRA_NV</name></cpp:macro> <cpp:value>0x886F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BOUNDS_TEST_EXT</name></cpp:macro> <cpp:value>0x8890</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BOUNDS_EXT</name></cpp:macro> <cpp:value>0x8891</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_SCALE_X_HP</name></cpp:macro> <cpp:value>0x8155</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_SCALE_Y_HP</name></cpp:macro> <cpp:value>0x8156</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TRANSLATE_X_HP</name></cpp:macro> <cpp:value>0x8157</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TRANSLATE_Y_HP</name></cpp:macro> <cpp:value>0x8158</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_ROTATE_ANGLE_HP</name></cpp:macro> <cpp:value>0x8159</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_ROTATE_ORIGIN_X_HP</name></cpp:macro> <cpp:value>0x815A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_ROTATE_ORIGIN_Y_HP</name></cpp:macro> <cpp:value>0x815B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_MAG_FILTER_HP</name></cpp:macro> <cpp:value>0x815C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_MIN_FILTER_HP</name></cpp:macro> <cpp:value>0x815D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CUBIC_WEIGHT_HP</name></cpp:macro> <cpp:value>0x815E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CUBIC_HP</name></cpp:macro> <cpp:value>0x815F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AVERAGE_HP</name></cpp:macro> <cpp:value>0x8160</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TRANSFORM_2D_HP</name></cpp:macro> <cpp:value>0x8161</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP</name></cpp:macro> <cpp:value>0x8162</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP</name></cpp:macro> <cpp:value>0x8163</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_NV</name></cpp:macro> <cpp:value>0x9020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_BINDING_NV</name></cpp:macro> <cpp:value>0x9021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIELD_UPPER_NV</name></cpp:macro> <cpp:value>0x9022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIELD_LOWER_NV</name></cpp:macro> <cpp:value>0x9023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_VIDEO_CAPTURE_STREAMS_NV</name></cpp:macro> <cpp:value>0x9024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV</name></cpp:macro> <cpp:value>0x9025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV</name></cpp:macro> <cpp:value>0x9026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VIDEO_CAPTURE_STATUS_NV</name></cpp:macro> <cpp:value>0x9027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_PITCH_NV</name></cpp:macro> <cpp:value>0x9028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_MATRIX_NV</name></cpp:macro> <cpp:value>0x9029</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_MAX_NV</name></cpp:macro> <cpp:value>0x902A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_MIN_NV</name></cpp:macro> <cpp:value>0x902B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_OFFSET_NV</name></cpp:macro> <cpp:value>0x902C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV</name></cpp:macro> <cpp:value>0x902D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PARTIAL_SUCCESS_NV</name></cpp:macro> <cpp:value>0x902E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUCCESS_NV</name></cpp:macro> <cpp:value>0x902F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FAILURE_NV</name></cpp:macro> <cpp:value>0x9030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBYCR8_422_NV</name></cpp:macro> <cpp:value>0x9031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBAYCR8A_4224_NV</name></cpp:macro> <cpp:value>0x9032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV</name></cpp:macro> <cpp:value>0x9033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV</name></cpp:macro> <cpp:value>0x9034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV</name></cpp:macro> <cpp:value>0x9035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV</name></cpp:macro> <cpp:value>0x9036</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z4Y12Z4CB12Z4CR12_444_NV</name></cpp:macro> <cpp:value>0x9037</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FRAME_WIDTH_NV</name></cpp:macro> <cpp:value>0x9038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV</name></cpp:macro> <cpp:value>0x9039</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV</name></cpp:macro> <cpp:value>0x903A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV</name></cpp:macro> <cpp:value>0x903B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV</name></cpp:macro> <cpp:value>0x903C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_PALETTE_ARB</name></cpp:macro> <cpp:value>0x8840</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x8841</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PALETTE_MATRICES_ARB</name></cpp:macro> <cpp:value>0x8842</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PALETTE_MATRIX_ARB</name></cpp:macro> <cpp:value>0x8843</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_ARB</name></cpp:macro> <cpp:value>0x8844</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_INDEX_ARB</name></cpp:macro> <cpp:value>0x8845</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x8846</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8847</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x8848</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x8849</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COLOR_WRITEMASK_SGIS</name></cpp:macro> <cpp:value>0x81EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_3_3_2_EXT</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_EXT</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1_EXT</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8_EXT</name></cpp:macro> <cpp:value>0x8035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2_EXT</name></cpp:macro> <cpp:value>0x8036</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_ALPHA_ARB</name></cpp:macro> <cpp:value>0x84E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ARB</name></cpp:macro> <cpp:value>0x84EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA_ARB</name></cpp:macro> <cpp:value>0x84EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_INTENSITY_ARB</name></cpp:macro> <cpp:value>0x84EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_ARB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ARB</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT_ARB</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_ARB</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS_ARB</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX_DEPTH_STENCIL_APPLE</name></cpp:macro> <cpp:value>0x8A14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB_EXT</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB_CAPABLE_EXT</name></cpp:macro> <cpp:value>0x8DBA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC2_EXT</name></cpp:macro> <cpp:value>0x8FFC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC3_EXT</name></cpp:macro> <cpp:value>0x8FFD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC4_EXT</name></cpp:macro> <cpp:value>0x8FFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2_EXT</name></cpp:macro> <cpp:value>0x8F46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3_EXT</name></cpp:macro> <cpp:value>0x8F47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4_EXT</name></cpp:macro> <cpp:value>0x8F48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2x3_EXT</name></cpp:macro> <cpp:value>0x8F49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2x4_EXT</name></cpp:macro> <cpp:value>0x8F4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3x2_EXT</name></cpp:macro> <cpp:value>0x8F4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3x4_EXT</name></cpp:macro> <cpp:value>0x8F4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4x2_EXT</name></cpp:macro> <cpp:value>0x8F4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4x3_EXT</name></cpp:macro> <cpp:value>0x8F4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_ARB</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24_ARB</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_ARB</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE_ARB</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEXTURE_MODE_ARB</name></cpp:macro> <cpp:value>0x884B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RANGE_LENGTH_APPLE</name></cpp:macro> <cpp:value>0x85B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RANGE_POINTER_APPLE</name></cpp:macro> <cpp:value>0x85B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STORAGE_HINT_APPLE</name></cpp:macro> <cpp:value>0x85BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_PRIVATE_APPLE</name></cpp:macro> <cpp:value>0x85BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_CACHED_APPLE</name></cpp:macro> <cpp:value>0x85BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_SHARED_APPLE</name></cpp:macro> <cpp:value>0x85BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8F36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8F37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_OBJECT_APPLE</name></cpp:macro> <cpp:value>0x85B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELEASED_APPLE</name></cpp:macro> <cpp:value>0x8A19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VOLATILE_APPLE</name></cpp:macro> <cpp:value>0x8A1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RETAINED_APPLE</name></cpp:macro> <cpp:value>0x8A1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNDEFINED_APPLE</name></cpp:macro> <cpp:value>0x8A1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PURGEABLE_APPLE</name></cpp:macro> <cpp:value>0x8A1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_COUNTER_BITS_ARB</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY_ARB</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_ARB</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE_ARB</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_PASSED_ARB</name></cpp:macro> <cpp:value>0x8914</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8560</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8561</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8562</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8563</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8564</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8565</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8566</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8567</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_SCALE_SGI</name></cpp:macro> <cpp:value>0x80D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BIAS_SGI</name></cpp:macro> <cpp:value>0x80D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_FORMAT_SGI</name></cpp:macro> <cpp:value>0x80D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_WIDTH_SGI</name></cpp:macro> <cpp:value>0x80D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_RED_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_GREEN_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BLUE_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_ALPHA_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_LUMINANCE_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_INTENSITY_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_ARRAY_ARB</name></cpp:macro> <cpp:value>0x9009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB</name></cpp:macro> <cpp:value>0x900A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB</name></cpp:macro> <cpp:value>0x900B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_MAP_ARRAY_ARB</name></cpp:macro> <cpp:value>0x900C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB</name></cpp:macro> <cpp:value>0x900D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB</name></cpp:macro> <cpp:value>0x900E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB</name></cpp:macro> <cpp:value>0x900F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALEBIAS_HINT_SGIX</name></cpp:macro> <cpp:value>0x8322</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2_EXT</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3_EXT</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4_EXT</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_EXT</name></cpp:macro> <cpp:value>0x8DC9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_EXT</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D_EXT</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE_EXT</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x8DCD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_EXT</name></cpp:macro> <cpp:value>0x8DD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_EXT</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D_EXT</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE_EXT</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x8DD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DD8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8C26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_OUTPUT_VERTICES_NV</name></cpp:macro> <cpp:value>0x8C27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8C28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALED_RESOLVE_FASTEST_EXT</name></cpp:macro> <cpp:value>0x90BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALED_RESOLVE_NICEST_EXT</name></cpp:macro> <cpp:value>0x90BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH_AMD</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES_AMD</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES_AMD</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH_AMD</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM_AMD</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW_AMD</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_API_ERROR_AMD</name></cpp:macro> <cpp:value>0x9149</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD</name></cpp:macro> <cpp:value>0x914A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_DEPRECATION_AMD</name></cpp:macro> <cpp:value>0x914B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD</name></cpp:macro> <cpp:value>0x914C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_PERFORMANCE_AMD</name></cpp:macro> <cpp:value>0x914D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD</name></cpp:macro> <cpp:value>0x914E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_APPLICATION_AMD</name></cpp:macro> <cpp:value>0x914F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_OTHER_AMD</name></cpp:macro> <cpp:value>0x9150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER_ARB</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0_ARB</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1_ARB</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2_ARB</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3_ARB</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4_ARB</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5_ARB</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6_ARB</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7_ARB</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8_ARB</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9_ARB</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10_ARB</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11_ARB</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12_ARB</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13_ARB</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14_ARB</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15_ARB</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16_ARB</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17_ARB</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18_ARB</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19_ARB</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20_ARB</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21_ARB</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22_ARB</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23_ARB</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24_ARB</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25_ARB</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26_ARB</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27_ARB</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28_ARB</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29_ARB</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30_ARB</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31_ARB</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_ACTIVE_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x84E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_UNITS_ARB</name></cpp:macro> <cpp:value>0x84E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEFORMATION_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_DEFORMATION_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_DEFORMATION_SGIX</name></cpp:macro> <cpp:value>0x8194</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEFORMATION_SGIX</name></cpp:macro> <cpp:value>0x8195</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEFORMATIONS_MASK_SGIX</name></cpp:macro> <cpp:value>0x8196</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEFORMATION_ORDER_SGIX</name></cpp:macro> <cpp:value>0x8197</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT</name></cpp:macro> <cpp:value>0x8E4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_VERTEX_CONVENTION_EXT</name></cpp:macro> <cpp:value>0x8E4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VERTEX_CONVENTION_EXT</name></cpp:macro> <cpp:value>0x8E4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROVOKING_VERTEX_EXT</name></cpp:macro> <cpp:value>0x8E4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN_ARB</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX_ARB</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE_ARB</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_DISTANCE_ATTENUATION_ARB</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OCCLUSION_TEST_HP</name></cpp:macro> <cpp:value>0x8165</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OCCLUSION_TEST_RESULT_HP</name></cpp:macro> <cpp:value>0x8166</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEZOOM_SGIX</name></cpp:macro> <cpp:value>0x818B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEZOOM_FACTOR_SGIX</name></cpp:macro> <cpp:value>0x818C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEZOOM_FACTOR_SGIX</name></cpp:macro> <cpp:value>0x818D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MULTI_BUFFER_HINT_SGIX</name></cpp:macro> <cpp:value>0x812E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS_EXT</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS_EXT</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED_EXT</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD_EXT</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS_EXT</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_3DFX</name></cpp:macro> <cpp:value>0x86B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_3DFX</name></cpp:macro> <cpp:value>0x86B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_3DFX</name></cpp:macro> <cpp:value>0x86B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_3DFX</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGB_ARB</name></cpp:macro> <cpp:value>0x86AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGBA_ARB</name></cpp:macro> <cpp:value>0x86AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET_NV</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET_NV</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ATTRIB_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8906</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_RESULT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8907</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8908</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_RESULT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8909</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8DA5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_GENERIC_RESULTS_NV</name></cpp:macro> <cpp:value>0x8DA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV</name></cpp:macro> <cpp:value>0x8E5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV</name></cpp:macro> <cpp:value>0x8E5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV</name></cpp:macro> <cpp:value>0x8E5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV</name></cpp:macro> <cpp:value>0x8E5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV</name></cpp:macro> <cpp:value>0x8E5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV</name></cpp:macro> <cpp:value>0x8E5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV</name></cpp:macro> <cpp:value>0x8F44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_SUBROUTINE_NUM_NV</name></cpp:macro> <cpp:value>0x8F45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_R_NV</name></cpp:macro> <cpp:value>0x8880</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RG_NV</name></cpp:macro> <cpp:value>0x8881</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGB_NV</name></cpp:macro> <cpp:value>0x8882</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA_NV</name></cpp:macro> <cpp:value>0x8883</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_R16_NV</name></cpp:macro> <cpp:value>0x8884</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_R32_NV</name></cpp:macro> <cpp:value>0x8885</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RG16_NV</name></cpp:macro> <cpp:value>0x8886</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RG32_NV</name></cpp:macro> <cpp:value>0x8887</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGB16_NV</name></cpp:macro> <cpp:value>0x8888</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGB32_NV</name></cpp:macro> <cpp:value>0x8889</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA16_NV</name></cpp:macro> <cpp:value>0x888A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA32_NV</name></cpp:macro> <cpp:value>0x888B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FLOAT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x888C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_CLEAR_COLOR_VALUE_NV</name></cpp:macro> <cpp:value>0x888D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA_MODE_NV</name></cpp:macro> <cpp:value>0x888E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE_SGIS</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLICE_ACCUM_SUN</name></cpp:macro> <cpp:value>0x85CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE_ARB</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB</name></cpp:macro> <cpp:value>0x8DA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_ARB</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT_ARB</name></cpp:macro> <cpp:value>0x8DDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8DDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8DDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_VARYING_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_COLOR_CONTROL_EXT</name></cpp:macro> <cpp:value>0x81F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SINGLE_COLOR_EXT</name></cpp:macro> <cpp:value>0x81F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_SPECULAR_COLOR_EXT</name></cpp:macro> <cpp:value>0x81FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP_NEAR_AMD</name></cpp:macro> <cpp:value>0x901E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP_FAR_AMD</name></cpp:macro> <cpp:value>0x901F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRAP_BORDER_SUN</name></cpp:macro> <cpp:value>0x81D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_SGIX</name></cpp:macro> <cpp:value>0x8148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_MODE_SGIX</name></cpp:macro> <cpp:value>0x8149</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_AXIS_SGIX</name></cpp:macro> <cpp:value>0x814A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_TRANSLATION_SGIX</name></cpp:macro> <cpp:value>0x814B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_AXIAL_SGIX</name></cpp:macro> <cpp:value>0x814C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_OBJECT_ALIGNED_SGIX</name></cpp:macro> <cpp:value>0x814D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_EYE_ALIGNED_SGIX</name></cpp:macro> <cpp:value>0x814E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OCCLUSION_QUERY_EVENT_MASK_AMD</name></cpp:macro> <cpp:value>0x874F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_ALL_EVENT_BITS_AMD</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_SGIS</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_MASK_SGIS</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_SGIS</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_SGIS</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_1PASS_SGIS</name></cpp:macro> <cpp:value>0x80A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_0_SGIS</name></cpp:macro> <cpp:value>0x80A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_1_SGIS</name></cpp:macro> <cpp:value>0x80A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_0_SGIS</name></cpp:macro> <cpp:value>0x80A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_1_SGIS</name></cpp:macro> <cpp:value>0x80A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_2_SGIS</name></cpp:macro> <cpp:value>0x80A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_3_SGIS</name></cpp:macro> <cpp:value>0x80A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_SGIS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_SGIS</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE_SGIS</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_INVERT_SGIS</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_PATTERN_SGIS</name></cpp:macro> <cpp:value>0x80AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION_EXT</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE_EXT</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT</name></cpp:macro> <cpp:value>0x8CD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT</name></cpp:macro> <cpp:value>0x8CDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED_EXT</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS_EXT</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0_EXT</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1_EXT</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2_EXT</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3_EXT</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4_EXT</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5_EXT</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6_EXT</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7_EXT</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8_EXT</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9_EXT</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10_EXT</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11_EXT</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12_EXT</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13_EXT</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14_EXT</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15_EXT</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_EXT</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1_EXT</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4_EXT</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8_EXT</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16_EXT</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_APPLE</name></cpp:macro> <cpp:value>0x851D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE</name></cpp:macro> <cpp:value>0x851E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_STORAGE_HINT_APPLE</name></cpp:macro> <cpp:value>0x851F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_POINTER_APPLE</name></cpp:macro> <cpp:value>0x8521</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_CLIENT_APPLE</name></cpp:macro> <cpp:value>0x85B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER_BINDING_AMD</name></cpp:macro> <cpp:value>0x9193</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_NO_WAIT_AMD</name></cpp:macro> <cpp:value>0x9194</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REGISTER_COMBINERS_NV</name></cpp:macro> <cpp:value>0x8522</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_A_NV</name></cpp:macro> <cpp:value>0x8523</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_B_NV</name></cpp:macro> <cpp:value>0x8524</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_C_NV</name></cpp:macro> <cpp:value>0x8525</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_D_NV</name></cpp:macro> <cpp:value>0x8526</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_E_NV</name></cpp:macro> <cpp:value>0x8527</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_F_NV</name></cpp:macro> <cpp:value>0x8528</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_G_NV</name></cpp:macro> <cpp:value>0x8529</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR0_NV</name></cpp:macro> <cpp:value>0x852A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR1_NV</name></cpp:macro> <cpp:value>0x852B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR_NV</name></cpp:macro> <cpp:value>0x852C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x852D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARE0_NV</name></cpp:macro> <cpp:value>0x852E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARE1_NV</name></cpp:macro> <cpp:value>0x852F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCARD_NV</name></cpp:macro> <cpp:value>0x8530</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_E_TIMES_F_NV</name></cpp:macro> <cpp:value>0x8531</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARE0_PLUS_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x8532</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_IDENTITY_NV</name></cpp:macro> <cpp:value>0x8536</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INVERT_NV</name></cpp:macro> <cpp:value>0x8537</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXPAND_NORMAL_NV</name></cpp:macro> <cpp:value>0x8538</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXPAND_NEGATE_NV</name></cpp:macro> <cpp:value>0x8539</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIAS_NORMAL_NV</name></cpp:macro> <cpp:value>0x853A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIAS_NEGATE_NV</name></cpp:macro> <cpp:value>0x853B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_IDENTITY_NV</name></cpp:macro> <cpp:value>0x853C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NEGATE_NV</name></cpp:macro> <cpp:value>0x853D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALE_BY_TWO_NV</name></cpp:macro> <cpp:value>0x853E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALE_BY_FOUR_NV</name></cpp:macro> <cpp:value>0x853F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALE_BY_ONE_HALF_NV</name></cpp:macro> <cpp:value>0x8540</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV</name></cpp:macro> <cpp:value>0x8541</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_INPUT_NV</name></cpp:macro> <cpp:value>0x8542</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_MAPPING_NV</name></cpp:macro> <cpp:value>0x8543</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_COMPONENT_USAGE_NV</name></cpp:macro> <cpp:value>0x8544</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_AB_DOT_PRODUCT_NV</name></cpp:macro> <cpp:value>0x8545</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_CD_DOT_PRODUCT_NV</name></cpp:macro> <cpp:value>0x8546</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_MUX_SUM_NV</name></cpp:macro> <cpp:value>0x8547</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_SCALE_NV</name></cpp:macro> <cpp:value>0x8548</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_BIAS_NV</name></cpp:macro> <cpp:value>0x8549</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_AB_OUTPUT_NV</name></cpp:macro> <cpp:value>0x854A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_CD_OUTPUT_NV</name></cpp:macro> <cpp:value>0x854B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_SUM_OUTPUT_NV</name></cpp:macro> <cpp:value>0x854C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GENERAL_COMBINERS_NV</name></cpp:macro> <cpp:value>0x854D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_GENERAL_COMBINERS_NV</name></cpp:macro> <cpp:value>0x854E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_CLAMP_NV</name></cpp:macro> <cpp:value>0x854F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER0_NV</name></cpp:macro> <cpp:value>0x8550</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER1_NV</name></cpp:macro> <cpp:value>0x8551</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER2_NV</name></cpp:macro> <cpp:value>0x8552</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER3_NV</name></cpp:macro> <cpp:value>0x8553</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER4_NV</name></cpp:macro> <cpp:value>0x8554</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER5_NV</name></cpp:macro> <cpp:value>0x8555</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER6_NV</name></cpp:macro> <cpp:value>0x8556</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER7_NV</name></cpp:macro> <cpp:value>0x8557</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG</name></cpp:macro> <cpp:value>0x0B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_ARB</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_ARB</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_ARB</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_ARB</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_ARB</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_ARB</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_ARB</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_ARB</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_ARB</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_ARB</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_ARB</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_ARB</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_ARB</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_ARB</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_ARB</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_ARB</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION_ARB</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM_ARB</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API_ARB</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER_ARB</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY_ARB</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION_ARB</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER_ARB</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR_ARB</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY_ARB</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE_ARB</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER_ARB</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH_ARB</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES_ARB</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES_ARB</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH_ARB</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM_ARB</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW_ARB</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX_SGI</name></cpp:macro> <cpp:value>0x80B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX_STACK_DEPTH_SGI</name></cpp:macro> <cpp:value>0x80B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI</name></cpp:macro> <cpp:value>0x80B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_BIAS_SGI</name></cpp:macro> <cpp:value>0x80B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI</name></cpp:macro> <cpp:value>0x80B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI</name></cpp:macro> <cpp:value>0x80BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI</name></cpp:macro> <cpp:value>0x80BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_EXT</name></cpp:macro> <cpp:value>0x81AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_EYE_POSITION_EXT</name></cpp:macro> <cpp:value>0x81AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_OBJECT_POSITION_EXT</name></cpp:macro> <cpp:value>0x81AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_EXT</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_EXT</name></cpp:macro> <cpp:value>0x8C46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8C47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_EXT</name></cpp:macro> <cpp:value>0x8C4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x8C4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x8C4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x8C4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x8C4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ROW_BYTES_APPLE</name></cpp:macro> <cpp:value>0x8A15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_BYTES_APPLE</name></cpp:macro> <cpp:value>0x8A16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP_NV</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP_NV</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING_APPLE</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_FXT1_3DFX</name></cpp:macro> <cpp:value>0x86B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_FXT1_3DFX</name></cpp:macro> <cpp:value>0x86B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCB_422_SGIX</name></cpp:macro> <cpp:value>0x81BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCB_444_SGIX</name></cpp:macro> <cpp:value>0x81BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F_ARB</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F_ARB</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32F_ARB</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32F_ARB</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32F_ARB</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32F_ARB</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F_ARB</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F_ARB</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16F_ARB</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16F_ARB</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16F_ARB</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16F_ARB</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_2D_SGIS</name></cpp:macro> <cpp:value>0x8095</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_2D_BINDING_SGIS</name></cpp:macro> <cpp:value>0x8096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_DETAIL_SGIS</name></cpp:macro> <cpp:value>0x8097</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_DETAIL_ALPHA_SGIS</name></cpp:macro> <cpp:value>0x8098</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_DETAIL_COLOR_SGIS</name></cpp:macro> <cpp:value>0x8099</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_LEVEL_SGIS</name></cpp:macro> <cpp:value>0x809A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_MODE_SGIS</name></cpp:macro> <cpp:value>0x809B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x809C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_TYPE_OES</name></cpp:macro> <cpp:value>0x8B9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES</name></cpp:macro> <cpp:value>0x8B9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB</name></cpp:macro> <cpp:value>0x8E5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB</name></cpp:macro> <cpp:value>0x8E5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8F9F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_INCLUDE_ARB</name></cpp:macro> <cpp:value>0x8DAE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAMED_STRING_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8DE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAMED_STRING_TYPE_ARB</name></cpp:macro> <cpp:value>0x8DEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_CLIENT_STORAGE_APPLE</name></cpp:macro> <cpp:value>0x85B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PHONG_WIN</name></cpp:macro> <cpp:value>0x80EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PHONG_HINT_WIN</name></cpp:macro> <cpp:value>0x80EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FORMAT_SVG_NV</name></cpp:macro> <cpp:value>0x9070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FORMAT_PS_NV</name></cpp:macro> <cpp:value>0x9071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STANDARD_FONT_NAME_NV</name></cpp:macro> <cpp:value>0x9072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYSTEM_FONT_NAME_NV</name></cpp:macro> <cpp:value>0x9073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILE_NAME_NV</name></cpp:macro> <cpp:value>0x9074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STROKE_WIDTH_NV</name></cpp:macro> <cpp:value>0x9075</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_END_CAPS_NV</name></cpp:macro> <cpp:value>0x9076</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_INITIAL_END_CAP_NV</name></cpp:macro> <cpp:value>0x9077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_TERMINAL_END_CAP_NV</name></cpp:macro> <cpp:value>0x9078</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_JOIN_STYLE_NV</name></cpp:macro> <cpp:value>0x9079</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_MITER_LIMIT_NV</name></cpp:macro> <cpp:value>0x907A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_DASH_CAPS_NV</name></cpp:macro> <cpp:value>0x907B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_INITIAL_DASH_CAP_NV</name></cpp:macro> <cpp:value>0x907C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_TERMINAL_DASH_CAP_NV</name></cpp:macro> <cpp:value>0x907D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_DASH_OFFSET_NV</name></cpp:macro> <cpp:value>0x907E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_CLIENT_LENGTH_NV</name></cpp:macro> <cpp:value>0x907F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FILL_MODE_NV</name></cpp:macro> <cpp:value>0x9080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FILL_MASK_NV</name></cpp:macro> <cpp:value>0x9081</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FILL_COVER_MODE_NV</name></cpp:macro> <cpp:value>0x9082</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STROKE_COVER_MODE_NV</name></cpp:macro> <cpp:value>0x9083</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STROKE_MASK_NV</name></cpp:macro> <cpp:value>0x9084</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNT_UP_NV</name></cpp:macro> <cpp:value>0x9088</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNT_DOWN_NV</name></cpp:macro> <cpp:value>0x9089</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_OBJECT_BOUNDING_BOX_NV</name></cpp:macro> <cpp:value>0x908A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVEX_HULL_NV</name></cpp:macro> <cpp:value>0x908B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOUNDING_BOX_NV</name></cpp:macro> <cpp:value>0x908D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSLATE_X_NV</name></cpp:macro> <cpp:value>0x908E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSLATE_Y_NV</name></cpp:macro> <cpp:value>0x908F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSLATE_2D_NV</name></cpp:macro> <cpp:value>0x9090</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSLATE_3D_NV</name></cpp:macro> <cpp:value>0x9091</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AFFINE_2D_NV</name></cpp:macro> <cpp:value>0x9092</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AFFINE_3D_NV</name></cpp:macro> <cpp:value>0x9094</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_AFFINE_2D_NV</name></cpp:macro> <cpp:value>0x9096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_AFFINE_3D_NV</name></cpp:macro> <cpp:value>0x9098</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UTF8_NV</name></cpp:macro> <cpp:value>0x909A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UTF16_NV</name></cpp:macro> <cpp:value>0x909B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV</name></cpp:macro> <cpp:value>0x909C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_COMMAND_COUNT_NV</name></cpp:macro> <cpp:value>0x909D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_COORD_COUNT_NV</name></cpp:macro> <cpp:value>0x909E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_DASH_ARRAY_COUNT_NV</name></cpp:macro> <cpp:value>0x909F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_COMPUTED_LENGTH_NV</name></cpp:macro> <cpp:value>0x90A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FILL_BOUNDING_BOX_NV</name></cpp:macro> <cpp:value>0x90A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STROKE_BOUNDING_BOX_NV</name></cpp:macro> <cpp:value>0x90A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SQUARE_NV</name></cpp:macro> <cpp:value>0x90A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ROUND_NV</name></cpp:macro> <cpp:value>0x90A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGULAR_NV</name></cpp:macro> <cpp:value>0x90A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BEVEL_NV</name></cpp:macro> <cpp:value>0x90A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MITER_REVERT_NV</name></cpp:macro> <cpp:value>0x90A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MITER_TRUNCATE_NV</name></cpp:macro> <cpp:value>0x90A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SKIP_MISSING_GLYPH_NV</name></cpp:macro> <cpp:value>0x90A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_USE_MISSING_GLYPH_NV</name></cpp:macro> <cpp:value>0x90AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_ERROR_POSITION_NV</name></cpp:macro> <cpp:value>0x90AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_FOG_GEN_MODE_NV</name></cpp:macro> <cpp:value>0x90AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACCUM_ADJACENT_PAIRS_NV</name></cpp:macro> <cpp:value>0x90AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADJACENT_PAIRS_NV</name></cpp:macro> <cpp:value>0x90AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_TO_REST_NV</name></cpp:macro> <cpp:value>0x90AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_GEN_MODE_NV</name></cpp:macro> <cpp:value>0x90B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_GEN_COEFF_NV</name></cpp:macro> <cpp:value>0x90B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_GEN_COLOR_FORMAT_NV</name></cpp:macro> <cpp:value>0x90B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_GEN_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x90B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STENCIL_FUNC_NV</name></cpp:macro> <cpp:value>0x90B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STENCIL_REF_NV</name></cpp:macro> <cpp:value>0x90B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STENCIL_VALUE_MASK_NV</name></cpp:macro> <cpp:value>0x90B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV</name></cpp:macro> <cpp:value>0x90BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV</name></cpp:macro> <cpp:value>0x90BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_COVER_DEPTH_FUNC_NV</name></cpp:macro> <cpp:value>0x90BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATH_DASH_OFFSET_RESET_NV</name></cpp:macro> <cpp:value>0x90B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MOVE_TO_RESETS_NV</name></cpp:macro> <cpp:value>0x90B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MOVE_TO_CONTINUES_NV</name></cpp:macro> <cpp:value>0x90B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLOSE_PATH_NV</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MOVE_TO_NV</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_MOVE_TO_NV</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_TO_NV</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_LINE_TO_NV</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HORIZONTAL_LINE_TO_NV</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_HORIZONTAL_LINE_TO_NV</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTICAL_LINE_TO_NV</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_VERTICAL_LINE_TO_NV</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADRATIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x0A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_QUADRATIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CUBIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_CUBIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x0D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_QUADRATIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_CUBIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMALL_CCW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_SMALL_CCW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMALL_CW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_SMALL_CW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LARGE_CCW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_LARGE_CCW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LARGE_CW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_LARGE_CW_ARC_TO_NV</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESTART_PATH_NV</name></cpp:macro> <cpp:value>0xF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUP_FIRST_CUBIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0xF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUP_LAST_CUBIC_CURVE_TO_NV</name></cpp:macro> <cpp:value>0xF4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RECT_NV</name></cpp:macro> <cpp:value>0xF6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CIRCULAR_CCW_ARC_TO_NV</name></cpp:macro> <cpp:value>0xF8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CIRCULAR_CW_ARC_TO_NV</name></cpp:macro> <cpp:value>0xFA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CIRCULAR_TANGENT_ARC_TO_NV</name></cpp:macro> <cpp:value>0xFC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARC_TO_NV</name></cpp:macro> <cpp:value>0xFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELATIVE_ARC_TO_NV</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOLD_BIT_NV</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ITALIC_BIT_NV</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_WIDTH_BIT_NV</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_HEIGHT_BIT_NV</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_VERTICAL_BEARING_X_BIT_NV</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLYPH_HAS_KERNING_BIT_NV</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_X_MIN_BOUNDS_BIT_NV</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_Y_MIN_BOUNDS_BIT_NV</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_X_MAX_BOUNDS_BIT_NV</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_Y_MAX_BOUNDS_BIT_NV</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_UNITS_PER_EM_BIT_NV</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_ASCENDER_BIT_NV</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_DESCENDER_BIT_NV</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_HEIGHT_BIT_NV</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_UNDERLINE_POSITION_BIT_NV</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_UNDERLINE_THICKNESS_BIT_NV</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FONT_HAS_KERNING_BIT_NV</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_STREAMS_ATI</name></cpp:macro> <cpp:value>0x876B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM0_ATI</name></cpp:macro> <cpp:value>0x876C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM1_ATI</name></cpp:macro> <cpp:value>0x876D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM2_ATI</name></cpp:macro> <cpp:value>0x876E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM3_ATI</name></cpp:macro> <cpp:value>0x876F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM4_ATI</name></cpp:macro> <cpp:value>0x8770</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM5_ATI</name></cpp:macro> <cpp:value>0x8771</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM6_ATI</name></cpp:macro> <cpp:value>0x8772</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM7_ATI</name></cpp:macro> <cpp:value>0x8773</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SOURCE_ATI</name></cpp:macro> <cpp:value>0x8774</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_422_APPLE</name></cpp:macro> <cpp:value>0x8A1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_RAW_422_APPLE</name></cpp:macro> <cpp:value>0x8A51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS_EXT</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FILTER_CONTROL_EXT</name></cpp:macro> <cpp:value>0x8500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_EXT</name></cpp:macro> <cpp:value>0x8501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SURFACE_STATE_NV</name></cpp:macro> <cpp:value>0x86EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SURFACE_REGISTERED_NV</name></cpp:macro> <cpp:value>0x86FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SURFACE_MAPPED_NV</name></cpp:macro> <cpp:value>0x8700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_DISCARD_NV</name></cpp:macro> <cpp:value>0x88BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_DECODE_ARB</name></cpp:macro> <cpp:value>0x8299</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD_SGIS</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD_SGIS</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL_SGIS</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL_SGIS</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_FUNC_SGIS</name></cpp:macro> <cpp:value>0x812A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x812B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FOG_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x812C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_X11_FENCE_EXT</name></cpp:macro> <cpp:value>0x90E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB</name></cpp:macro> <cpp:value>0x9344</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB</name></cpp:macro> <cpp:value>0x90EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB</name></cpp:macro> <cpp:value>0x9345</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB</name></cpp:macro> <cpp:value>0x91BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_OES</name></cpp:macro> <cpp:value>0x140C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_VOLUMES_SGIS</name></cpp:macro> <cpp:value>0x8130</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_DEPTH_SGIS</name></cpp:macro> <cpp:value>0x8131</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_VOLUMES_SGIS</name></cpp:macro> <cpp:value>0x8132</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_DEPTH_SGIS</name></cpp:macro> <cpp:value>0x8133</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_4D_SGIS</name></cpp:macro> <cpp:value>0x8134</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_4D_SGIS</name></cpp:macro> <cpp:value>0x8135</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_4DSIZE_SGIS</name></cpp:macro> <cpp:value>0x8136</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_Q_SGIS</name></cpp:macro> <cpp:value>0x8137</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_4D_TEXTURE_SIZE_SGIS</name></cpp:macro> <cpp:value>0x8138</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_4D_BINDING_SGIS</name></cpp:macro> <cpp:value>0x814F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_IMAGES_EXT</name></cpp:macro> <cpp:value>0x806B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x806C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES_EXT</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D_EXT</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_3D_EXT</name></cpp:macro> <cpp:value>0x8070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R_EXT</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_MASK_EXT</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_EXT</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_EXT</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_1PASS_EXT</name></cpp:macro> <cpp:value>0x80A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_0_EXT</name></cpp:macro> <cpp:value>0x80A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_1_EXT</name></cpp:macro> <cpp:value>0x80A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_0_EXT</name></cpp:macro> <cpp:value>0x80A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_1_EXT</name></cpp:macro> <cpp:value>0x80A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_2_EXT</name></cpp:macro> <cpp:value>0x80A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_3_EXT</name></cpp:macro> <cpp:value>0x80A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE_EXT</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_INVERT_EXT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_PATTERN_EXT</name></cpp:macro> <cpp:value>0x80AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_EXT</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_EXT</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_SECONDARY_COLOR_EXT</name></cpp:macro> <cpp:value>0x8459</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x845A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x845B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x845C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x845D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_EXT</name></cpp:macro> <cpp:value>0x845E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_ATI</name></cpp:macro> <cpp:value>0x8760</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_ATI</name></cpp:macro> <cpp:value>0x8761</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESERVE_ATI</name></cpp:macro> <cpp:value>0x8762</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCARD_ATI</name></cpp:macro> <cpp:value>0x8763</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_BUFFER_SIZE_ATI</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_BUFFER_USAGE_ATI</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_OBJECT_BUFFER_ATI</name></cpp:macro> <cpp:value>0x8766</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_OBJECT_OFFSET_ATI</name></cpp:macro> <cpp:value>0x8767</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX</name></cpp:macro> <cpp:value>0x9047</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX</name></cpp:macro> <cpp:value>0x9048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX</name></cpp:macro> <cpp:value>0x9049</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX</name></cpp:macro> <cpp:value>0x904A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX</name></cpp:macro> <cpp:value>0x904B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SPARSE_ARB</name></cpp:macro> <cpp:value>0x91A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_INDEX_ARB</name></cpp:macro> <cpp:value>0x91A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_SPARSE_LEVEL_ARB</name></cpp:macro> <cpp:value>0x919B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_VIRTUAL_PAGE_SIZES_ARB</name></cpp:macro> <cpp:value>0x91A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_X_ARB</name></cpp:macro> <cpp:value>0x9195</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_Y_ARB</name></cpp:macro> <cpp:value>0x9196</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIRTUAL_PAGE_SIZE_Z_ARB</name></cpp:macro> <cpp:value>0x9197</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPARSE_TEXTURE_SIZE_ARB</name></cpp:macro> <cpp:value>0x9198</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB</name></cpp:macro> <cpp:value>0x9199</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB</name></cpp:macro> <cpp:value>0x919A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB</name></cpp:macro> <cpp:value>0x91A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_DISTANCE_TO_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_DISTANCE_TO_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_DISTANCE_TO_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_DISTANCE_TO_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES_EXT</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES_EXT</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MIN_SGIX</name></cpp:macro> <cpp:value>0x8320</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MAX_SGIX</name></cpp:macro> <cpp:value>0x8321</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_pixel_tiles</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_pixel_tiles</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_pixel_tiles</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_point_sprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_point_sprite</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_point_sprite</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERINVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERINVPROC</name></type> <name>glad_glPointParameteriNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteriNV</name></cpp:macro> <cpp:value>glad_glPointParameteriNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERIVNVPROC</name></type> <name>glad_glPointParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterivNV</name></cpp:macro> <cpp:value>glad_glPointParameterivNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_element_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_element_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_element_array</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLELEMENTPOINTERAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLELEMENTPOINTERAPPLEPROC</name></type> <name>glad_glElementPointerAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glElementPointerAPPLE</name></cpp:macro> <cpp:value>glad_glElementPointerAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTARRAYAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTARRAYAPPLEPROC</name></type> <name>glad_glDrawElementArrayAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementArrayAPPLE</name></cpp:macro> <cpp:value>glad_glDrawElementArrayAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC</name></type> <name>glad_glDrawRangeElementArrayAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementArrayAPPLE</name></cpp:macro> <cpp:value>glad_glDrawRangeElementArrayAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC</name></type> <name>glad_glMultiDrawElementArrayAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementArrayAPPLE</name></cpp:macro> <cpp:value>glad_glMultiDrawElementArrayAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC</name></type> <name>glad_glMultiDrawRangeElementArrayAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawRangeElementArrayAPPLE</name></cpp:macro> <cpp:value>glad_glMultiDrawRangeElementArrayAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_multi_draw_indirect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_multi_draw_indirect</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_multi_draw_indirect</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC</name></type> <name>glad_glMultiDrawArraysIndirectAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArraysIndirectAMD</name></cpp:macro> <cpp:value>glad_glMultiDrawArraysIndirectAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC</name></type> <name>glad_glMultiDrawElementsIndirectAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsIndirectAMD</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsIndirectAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_subtract</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_subtract</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_subtract</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_tag_sample_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_tag_sample_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_tag_sample_buffer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTAGSAMPLEBUFFERSGIXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTAGSAMPLEBUFFERSGIXPROC</name></type> <name>glad_glTagSampleBufferSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTagSampleBufferSGIX</name></cpp:macro> <cpp:value>glad_glTagSampleBufferSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_texture_mirrored_repeat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_texture_mirrored_repeat</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_IBM_texture_mirrored_repeat</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_transform_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_transform_hint</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_transform_hint</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_separate_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_separate_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_separate_stencil</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILOPSEPARATEATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILOPSEPARATEATIPROC</name></type> <name>glad_glStencilOpSeparateATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOpSeparateATI</name></cpp:macro> <cpp:value>glad_glStencilOpSeparateATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFUNCSEPARATEATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFUNCSEPARATEATIPROC</name></type> <name>glad_glStencilFuncSeparateATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFuncSeparateATI</name></cpp:macro> <cpp:value>glad_glStencilFuncSeparateATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program2_option</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program2_option</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_program2_option</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_buffer_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUFFEREXTPROC</name></type> <name>glad_glTexBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBufferEXT</name></cpp:macro> <cpp:value>glad_glTexBufferEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_blend</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_blend</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTBVARBPROC</name></type> <name>glad_glWeightbvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightbvARB</name></cpp:macro> <cpp:value>glad_glWeightbvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTSVARBPROC</name></type> <name>glad_glWeightsvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightsvARB</name></cpp:macro> <cpp:value>glad_glWeightsvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTIVARBPROC</name></type> <name>glad_glWeightivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightivARB</name></cpp:macro> <cpp:value>glad_glWeightivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTFVARBPROC</name></type> <name>glad_glWeightfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightfvARB</name></cpp:macro> <cpp:value>glad_glWeightfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTDVARBPROC</name></type> <name>glad_glWeightdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightdvARB</name></cpp:macro> <cpp:value>glad_glWeightdvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTUBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTUBVARBPROC</name></type> <name>glad_glWeightubvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightubvARB</name></cpp:macro> <cpp:value>glad_glWeightubvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTUSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTUSVARBPROC</name></type> <name>glad_glWeightusvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightusvARB</name></cpp:macro> <cpp:value>glad_glWeightusvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTUIVARBPROC</name></type> <name>glad_glWeightuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightuivARB</name></cpp:macro> <cpp:value>glad_glWeightuivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTPOINTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTPOINTERARBPROC</name></type> <name>glad_glWeightPointerARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightPointerARB</name></cpp:macro> <cpp:value>glad_glWeightPointerARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXBLENDARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXBLENDARBPROC</name></type> <name>glad_glVertexBlendARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexBlendARB</name></cpp:macro> <cpp:value>glad_glVertexBlendARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_program2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_program_interface_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_program_interface_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_program_interface_query</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_misc_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_misc_attribute</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_misc_attribute</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_multisample_coverage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_multisample_coverage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_multisample_coverage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shading_language_packing</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shading_language_packing</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shading_language_packing</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_cube_map</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_cube_map</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_cube_map</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_stencil8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_stencil8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_stencil8</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_func</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_func</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_index_func</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXFUNCEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLclampf</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXFUNCEXTPROC</name></type> <name>glad_glIndexFuncEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexFuncEXT</name></cpp:macro> <cpp:value>glad_glIndexFuncEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_compressed_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_compressed_paletted_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OES_compressed_paletted_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_depth_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_depth_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_depth_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_buffer_load</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_buffer_load</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_buffer_load</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKEBUFFERRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKEBUFFERRESIDENTNVPROC</name></type> <name>glad_glMakeBufferResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeBufferResidentNV</name></cpp:macro> <cpp:value>glad_glMakeBufferResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKEBUFFERNONRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKEBUFFERNONRESIDENTNVPROC</name></type> <name>glad_glMakeBufferNonResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeBufferNonResidentNV</name></cpp:macro> <cpp:value>glad_glMakeBufferNonResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISBUFFERRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISBUFFERRESIDENTNVPROC</name></type> <name>glad_glIsBufferResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsBufferResidentNV</name></cpp:macro> <cpp:value>glad_glIsBufferResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKENAMEDBUFFERRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKENAMEDBUFFERRESIDENTNVPROC</name></type> <name>glad_glMakeNamedBufferResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeNamedBufferResidentNV</name></cpp:macro> <cpp:value>glad_glMakeNamedBufferResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC</name></type> <name>glad_glMakeNamedBufferNonResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeNamedBufferNonResidentNV</name></cpp:macro> <cpp:value>glad_glMakeNamedBufferNonResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISNAMEDBUFFERRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISNAMEDBUFFERRESIDENTNVPROC</name></type> <name>glad_glIsNamedBufferResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsNamedBufferResidentNV</name></cpp:macro> <cpp:value>glad_glIsNamedBufferResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERUI64VNVPROC</name></type> <name>glad_glGetBufferParameterui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameterui64vNV</name></cpp:macro> <cpp:value>glad_glGetBufferParameterui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC</name></type> <name>glad_glGetNamedBufferParameterui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedBufferParameterui64vNV</name></cpp:macro> <cpp:value>glad_glGetNamedBufferParameterui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERUI64VNVPROC</name></type> <name>glad_glGetIntegerui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegerui64vNV</name></cpp:macro> <cpp:value>glad_glGetIntegerui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMUI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMUI64NVPROC</name></type> <name>glad_glUniformui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformui64NV</name></cpp:macro> <cpp:value>glad_glUniformui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMUI64VNVPROC</name></type> <name>glad_glUniformui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformui64vNV</name></cpp:macro> <cpp:value>glad_glUniformui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMUI64VNVPROC</name></type> <name>glad_glGetUniformui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformui64vNV</name></cpp:macro> <cpp:value>glad_glGetUniformui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMUI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMUI64NVPROC</name></type> <name>glad_glProgramUniformui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformui64NV</name></cpp:macro> <cpp:value>glad_glProgramUniformui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMUI64VNVPROC</name></type> <name>glad_glProgramUniformui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformui64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniformui64vNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_color_subtable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_color_subtable</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_color_subtable</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORSUBTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORSUBTABLEEXTPROC</name></type> <name>glad_glColorSubTableEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorSubTableEXT</name></cpp:macro> <cpp:value>glad_glColorSubTableEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCOLORSUBTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCOLORSUBTABLEEXTPROC</name></type> <name>glad_glCopyColorSubTableEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyColorSubTableEXT</name></cpp:macro> <cpp:value>glad_glCopyColorSubTableEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUNX_constant_data</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUNX_constant_data</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUNX_constant_data</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHTEXTURESUNXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHTEXTURESUNXPROC</name></type> <name>glad_glFinishTextureSUNX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinishTextureSUNX</name></cpp:macro> <cpp:value>glad_glFinishTextureSUNX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multi_draw_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multi_draw_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_multi_draw_arrays</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSEXTPROC</name></type> <name>glad_glMultiDrawArraysEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArraysEXT</name></cpp:macro> <cpp:value>glad_glMultiDrawArraysEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSEXTPROC</name></type> <name>glad_glMultiDrawElementsEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsEXT</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_atomic_counters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_atomic_counters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_atomic_counters</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_arrays_of_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_arrays_of_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_arrays_of_arrays</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_conditional_render</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_conditional_render</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_conditional_render</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINCONDITIONALRENDERNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINCONDITIONALRENDERNVPROC</name></type> <name>glad_glBeginConditionalRenderNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginConditionalRenderNV</name></cpp:macro> <cpp:value>glad_glBeginConditionalRenderNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDCONDITIONALRENDERNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDCONDITIONALRENDERNVPROC</name></type> <name>glad_glEndConditionalRenderNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndConditionalRenderNV</name></cpp:macro> <cpp:value>glad_glEndConditionalRenderNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_env_combine</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_env_combine</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_env_combine</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fog_distance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fog_distance</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_fog_distance</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_async_histogram</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_async_histogram</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_async_histogram</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_resize_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_resize_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_MESA_resize_buffers</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESIZEBUFFERSMESAPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESIZEBUFFERSMESAPROC</name></type> <name>glad_glResizeBuffersMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResizeBuffersMESA</name></cpp:macro> <cpp:value>glad_glResizeBuffersMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_light_max_exponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_light_max_exponent</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_light_max_exponent</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_env_combine4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_env_combine4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_env_combine4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_view</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_view</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_view</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_env_combine</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_env_combine</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_env_combine</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_map_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_map_buffer_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_map_buffer_range</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_convolution</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_convolution</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_convolution</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONFILTER1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONFILTER1DEXTPROC</name></type> <name>glad_glConvolutionFilter1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionFilter1DEXT</name></cpp:macro> <cpp:value>glad_glConvolutionFilter1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONFILTER2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONFILTER2DEXTPROC</name></type> <name>glad_glConvolutionFilter2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionFilter2DEXT</name></cpp:macro> <cpp:value>glad_glConvolutionFilter2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERFEXTPROC</name></type> <name>glad_glConvolutionParameterfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterfEXT</name></cpp:macro> <cpp:value>glad_glConvolutionParameterfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERFVEXTPROC</name></type> <name>glad_glConvolutionParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterfvEXT</name></cpp:macro> <cpp:value>glad_glConvolutionParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERIEXTPROC</name></type> <name>glad_glConvolutionParameteriEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameteriEXT</name></cpp:macro> <cpp:value>glad_glConvolutionParameteriEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERIVEXTPROC</name></type> <name>glad_glConvolutionParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterivEXT</name></cpp:macro> <cpp:value>glad_glConvolutionParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC</name></type> <name>glad_glCopyConvolutionFilter1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyConvolutionFilter1DEXT</name></cpp:macro> <cpp:value>glad_glCopyConvolutionFilter1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC</name></type> <name>glad_glCopyConvolutionFilter2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyConvolutionFilter2DEXT</name></cpp:macro> <cpp:value>glad_glCopyConvolutionFilter2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONFILTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONFILTEREXTPROC</name></type> <name>glad_glGetConvolutionFilterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionFilterEXT</name></cpp:macro> <cpp:value>glad_glGetConvolutionFilterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC</name></type> <name>glad_glGetConvolutionParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetConvolutionParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC</name></type> <name>glad_glGetConvolutionParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetConvolutionParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSEPARABLEFILTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSEPARABLEFILTEREXTPROC</name></type> <name>glad_glGetSeparableFilterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSeparableFilterEXT</name></cpp:macro> <cpp:value>glad_glGetSeparableFilterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSEPARABLEFILTER2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSEPARABLEFILTER2DEXTPROC</name></type> <name>glad_glSeparableFilter2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSeparableFilter2DEXT</name></cpp:macro> <cpp:value>glad_glSeparableFilter2DEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_compute_program5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_compute_program5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_compute_program5</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_attrib_integer_64bit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_attrib_integer_64bit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_attrib_integer_64bit</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1I64NVPROC</name></type> <name>glad_glVertexAttribL1i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1i64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL1i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2I64NVPROC</name></type> <name>glad_glVertexAttribL2i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2i64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL2i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3I64NVPROC</name></type> <name>glad_glVertexAttribL3i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3i64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL3i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4I64NVPROC</name></type> <name>glad_glVertexAttribL4i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4i64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL4i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1I64VNVPROC</name></type> <name>glad_glVertexAttribL1i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1i64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL1i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2I64VNVPROC</name></type> <name>glad_glVertexAttribL2i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2i64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL2i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3I64VNVPROC</name></type> <name>glad_glVertexAttribL3i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3i64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL3i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4I64VNVPROC</name></type> <name>glad_glVertexAttribL4i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4i64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL4i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1UI64NVPROC</name></type> <name>glad_glVertexAttribL1ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1ui64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL1ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2UI64NVPROC</name></type> <name>glad_glVertexAttribL2ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2ui64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL2ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3UI64NVPROC</name></type> <name>glad_glVertexAttribL3ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3ui64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL3ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4UI64NVPROC</name></type> <name>glad_glVertexAttribL4ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4ui64NV</name></cpp:macro> <cpp:value>glad_glVertexAttribL4ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1UI64VNVPROC</name></type> <name>glad_glVertexAttribL1ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1ui64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL1ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2UI64VNVPROC</name></type> <name>glad_glVertexAttribL2ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2ui64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL2ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3UI64VNVPROC</name></type> <name>glad_glVertexAttribL3ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3ui64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL3ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4UI64VNVPROC</name></type> <name>glad_glVertexAttribL4ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4ui64vNV</name></cpp:macro> <cpp:value>glad_glVertexAttribL4ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBLI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBLI64VNVPROC</name></type> <name>glad_glGetVertexAttribLi64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribLi64vNV</name></cpp:macro> <cpp:value>glad_glGetVertexAttribLi64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBLUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBLUI64VNVPROC</name></type> <name>glad_glGetVertexAttribLui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribLui64vNV</name></cpp:macro> <cpp:value>glad_glGetVertexAttribLui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBLFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBLFORMATNVPROC</name></type> <name>glad_glVertexAttribLFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribLFormatNV</name></cpp:macro> <cpp:value>glad_glVertexAttribLFormatNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_paletted_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_paletted_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLEEXTPROC</name></type> <name>glad_glColorTableEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTableEXT</name></cpp:macro> <cpp:value>glad_glColorTableEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEEXTPROC</name></type> <name>glad_glGetColorTableEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableEXT</name></cpp:macro> <cpp:value>glad_glGetColorTableEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPARAMETERIVEXTPROC</name></type> <name>glad_glGetColorTableParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetColorTableParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPARAMETERFVEXTPROC</name></type> <name>glad_glGetColorTableParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetColorTableParameterfvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_buffer_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUFFERARBPROC</name></type> <name>glad_glTexBufferARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBufferARB</name></cpp:macro> <cpp:value>glad_glTexBufferARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_pn_triangles</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_pn_triangles</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_pn_triangles</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPNTRIANGLESIATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPNTRIANGLESIATIPROC</name></type> <name>glad_glPNTrianglesiATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPNTrianglesiATI</name></cpp:macro> <cpp:value>glad_glPNTrianglesiATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPNTRIANGLESFATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPNTRIANGLESFATIPROC</name></type> <name>glad_glPNTrianglesfATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPNTrianglesfATI</name></cpp:macro> <cpp:value>glad_glPNTrianglesfATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_resample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_resample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_resample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_flush_raster</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_flush_raster</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_flush_raster</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHRASTERSGIXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHRASTERSGIXPROC</name></type> <name>glad_glFlushRasterSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushRasterSGIX</name></cpp:macro> <cpp:value>glad_glFlushRasterSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_light_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_light_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_light_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLAPPLYTEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLAPPLYTEXTUREEXTPROC</name></type> <name>glad_glApplyTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glApplyTextureEXT</name></cpp:macro> <cpp:value>glad_glApplyTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURELIGHTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURELIGHTEXTPROC</name></type> <name>glad_glTextureLightEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureLightEXT</name></cpp:macro> <cpp:value>glad_glTextureLightEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREMATERIALEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREMATERIALEXTPROC</name></type> <name>glad_glTextureMaterialEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureMaterialEXT</name></cpp:macro> <cpp:value>glad_glTextureMaterialEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_point_sprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_point_sprite</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_point_sprite</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_half_float_pixel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_half_float_pixel</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_half_float_pixel</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_tessellation_program5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_tessellation_program5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_tessellation_program5</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_REND_screen_coordinates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REND_screen_coordinates</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_REND_screen_coordinates</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shared_texture_palette</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shared_texture_palette</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_shared_texture_palette</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_packed_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_packed_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_packed_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OML_subsample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OML_subsample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OML_subsample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_vertex_preclip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_vertex_preclip</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_vertex_preclip</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_scale_bias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_scale_bias</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_texture_scale_bias</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_draw_buffers_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_draw_buffers_blend</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_draw_buffers_blend</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCINDEXEDAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCINDEXEDAMDPROC</name></type> <name>glad_glBlendFuncIndexedAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncIndexedAMD</name></cpp:macro> <cpp:value>glad_glBlendFuncIndexedAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC</name></type> <name>glad_glBlendFuncSeparateIndexedAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparateIndexedAMD</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparateIndexedAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONINDEXEDAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONINDEXEDAMDPROC</name></type> <name>glad_glBlendEquationIndexedAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationIndexedAMD</name></cpp:macro> <cpp:value>glad_glBlendEquationIndexedAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC</name></type> <name>glad_glBlendEquationSeparateIndexedAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparateIndexedAMD</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparateIndexedAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_window_pos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_window_pos</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_MESA_window_pos</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2DMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2DMESAPROC</name></type> <name>glad_glWindowPos2dMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2dMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2dMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2DVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2DVMESAPROC</name></type> <name>glad_glWindowPos2dvMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2dvMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2dvMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2FMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2FMESAPROC</name></type> <name>glad_glWindowPos2fMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2fMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2fMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2FVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2FVMESAPROC</name></type> <name>glad_glWindowPos2fvMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2fvMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2fvMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2IMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2IMESAPROC</name></type> <name>glad_glWindowPos2iMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2iMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2iMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2IVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2IVMESAPROC</name></type> <name>glad_glWindowPos2ivMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2ivMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2ivMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2SMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2SMESAPROC</name></type> <name>glad_glWindowPos2sMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2sMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2sMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2SVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2SVMESAPROC</name></type> <name>glad_glWindowPos2svMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2svMESA</name></cpp:macro> <cpp:value>glad_glWindowPos2svMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3DMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3DMESAPROC</name></type> <name>glad_glWindowPos3dMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3dMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3dMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3DVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3DVMESAPROC</name></type> <name>glad_glWindowPos3dvMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3dvMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3dvMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3FMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3FMESAPROC</name></type> <name>glad_glWindowPos3fMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3fMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3fMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3FVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3FVMESAPROC</name></type> <name>glad_glWindowPos3fvMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3fvMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3fvMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3IMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3IMESAPROC</name></type> <name>glad_glWindowPos3iMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3iMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3iMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3IVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3IVMESAPROC</name></type> <name>glad_glWindowPos3ivMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3ivMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3ivMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3SMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3SMESAPROC</name></type> <name>glad_glWindowPos3sMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3sMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3sMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3SVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3SVMESAPROC</name></type> <name>glad_glWindowPos3svMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3svMESA</name></cpp:macro> <cpp:value>glad_glWindowPos3svMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4DMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4DMESAPROC</name></type> <name>glad_glWindowPos4dMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4dMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4dMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4DVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4DVMESAPROC</name></type> <name>glad_glWindowPos4dvMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4dvMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4dvMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4FMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4FMESAPROC</name></type> <name>glad_glWindowPos4fMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4fMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4fMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4FVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4FVMESAPROC</name></type> <name>glad_glWindowPos4fvMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4fvMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4fvMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4IMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4IMESAPROC</name></type> <name>glad_glWindowPos4iMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4iMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4iMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4IVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4IVMESAPROC</name></type> <name>glad_glWindowPos4ivMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4ivMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4ivMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4SMESAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4SMESAPROC</name></type> <name>glad_glWindowPos4sMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4sMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4sMESA</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS4SVMESAPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS4SVMESAPROC</name></type> <name>glad_glWindowPos4svMESA</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos4svMESA</name></cpp:macro> <cpp:value>glad_glWindowPos4svMESA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_array</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_barrier</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_barrier</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_barrier</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREBARRIERNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREBARRIERNVPROC</name></type> <name>glad_glTextureBarrierNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureBarrierNV</name></cpp:macro> <cpp:value>glad_glTextureBarrierNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_query_levels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_query_levels</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_query_levels</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texgen_emboss</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texgen_emboss</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texgen_emboss</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_swizzle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_swizzle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_swizzle</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rg</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rg</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_rg</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_type_2_10_10_10_rev</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_type_2_10_10_10_rev</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_type_2_10_10_10_rev</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_shader</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_3DFX_tbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DFX_tbuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_3DFX_tbuffer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTBUFFERMASK3DFXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTBUFFERMASK3DFXPROC</name></type> <name>glad_glTbufferMask3DFX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTbufferMask3DFX</name></cpp:macro> <cpp:value>glad_glTbufferMask3DFX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_GREMEDY_frame_terminator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREMEDY_frame_terminator</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_GREMEDY_frame_terminator</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMETERMINATORGREMEDYPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMETERMINATORGREMEDYPROC</name></type> <name>glad_glFrameTerminatorGREMEDY</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrameTerminatorGREMEDY</name></cpp:macro> <cpp:value>glad_glFrameTerminatorGREMEDY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_blend_func_extended</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_blend_func_extended</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_blend_func_extended</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_separate_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_separate_shader_objects</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_separate_shader_objects</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUSESHADERPROGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUSESHADERPROGRAMEXTPROC</name></type> <name>glad_glUseShaderProgramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseShaderProgramEXT</name></cpp:macro> <cpp:value>glad_glUseShaderProgramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVEPROGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVEPROGRAMEXTPROC</name></type> <name>glad_glActiveProgramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveProgramEXT</name></cpp:macro> <cpp:value>glad_glActiveProgramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESHADERPROGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESHADERPROGRAMEXTPROC</name></type> <name>glad_glCreateShaderProgramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShaderProgramEXT</name></cpp:macro> <cpp:value>glad_glCreateShaderProgramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVESHADERPROGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVESHADERPROGRAMEXTPROC</name></type> <name>glad_glActiveShaderProgramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveShaderProgramEXT</name></cpp:macro> <cpp:value>glad_glActiveShaderProgramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPROGRAMPIPELINEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPROGRAMPIPELINEEXTPROC</name></type> <name>glad_glBindProgramPipelineEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindProgramPipelineEXT</name></cpp:macro> <cpp:value>glad_glBindProgramPipelineEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESHADERPROGRAMVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESHADERPROGRAMVEXTPROC</name></type> <name>glad_glCreateShaderProgramvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShaderProgramvEXT</name></cpp:macro> <cpp:value>glad_glCreateShaderProgramvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMPIPELINESEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMPIPELINESEXTPROC</name></type> <name>glad_glDeleteProgramPipelinesEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgramPipelinesEXT</name></cpp:macro> <cpp:value>glad_glDeleteProgramPipelinesEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPROGRAMPIPELINESEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPROGRAMPIPELINESEXTPROC</name></type> <name>glad_glGenProgramPipelinesEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenProgramPipelinesEXT</name></cpp:macro> <cpp:value>glad_glGenProgramPipelinesEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC</name></type> <name>glad_glGetProgramPipelineInfoLogEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramPipelineInfoLogEXT</name></cpp:macro> <cpp:value>glad_glGetProgramPipelineInfoLogEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMPIPELINEIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMPIPELINEIVEXTPROC</name></type> <name>glad_glGetProgramPipelineivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramPipelineivEXT</name></cpp:macro> <cpp:value>glad_glGetProgramPipelineivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMPIPELINEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMPIPELINEEXTPROC</name></type> <name>glad_glIsProgramPipelineEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgramPipelineEXT</name></cpp:macro> <cpp:value>glad_glIsProgramPipelineEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETERIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETERIEXTPROC</name></type> <name>glad_glProgramParameteriEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameteriEXT</name></cpp:macro> <cpp:value>glad_glProgramParameteriEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1FEXTPROC</name></type> <name>glad_glProgramUniform1fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1fEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1FVEXTPROC</name></type> <name>glad_glProgramUniform1fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1IEXTPROC</name></type> <name>glad_glProgramUniform1iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1iEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1IVEXTPROC</name></type> <name>glad_glProgramUniform1ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1ivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2FEXTPROC</name></type> <name>glad_glProgramUniform2fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2fEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2FVEXTPROC</name></type> <name>glad_glProgramUniform2fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2IEXTPROC</name></type> <name>glad_glProgramUniform2iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2iEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2IVEXTPROC</name></type> <name>glad_glProgramUniform2ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2ivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3FEXTPROC</name></type> <name>glad_glProgramUniform3fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3fEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3FVEXTPROC</name></type> <name>glad_glProgramUniform3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3IEXTPROC</name></type> <name>glad_glProgramUniform3iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3iEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3IVEXTPROC</name></type> <name>glad_glProgramUniform3ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3ivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4FEXTPROC</name></type> <name>glad_glProgramUniform4fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4fEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4FVEXTPROC</name></type> <name>glad_glProgramUniform4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4IEXTPROC</name></type> <name>glad_glProgramUniform4iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4iEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4IVEXTPROC</name></type> <name>glad_glProgramUniform4ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4ivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix2fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUSEPROGRAMSTAGESEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUSEPROGRAMSTAGESEXTPROC</name></type> <name>glad_glUseProgramStagesEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseProgramStagesEXT</name></cpp:macro> <cpp:value>glad_glUseProgramStagesEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVALIDATEPROGRAMPIPELINEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVALIDATEPROGRAMPIPELINEEXTPROC</name></type> <name>glad_glValidateProgramPipelineEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glValidateProgramPipelineEXT</name></cpp:macro> <cpp:value>glad_glValidateProgramPipelineEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1UIEXTPROC</name></type> <name>glad_glProgramUniform1uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1uiEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2UIEXTPROC</name></type> <name>glad_glProgramUniform2uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2uiEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3UIEXTPROC</name></type> <name>glad_glProgramUniform3uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3uiEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4UIEXTPROC</name></type> <name>glad_glProgramUniform4uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4uiEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1UIVEXTPROC</name></type> <name>glad_glProgramUniform1uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1uivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2UIVEXTPROC</name></type> <name>glad_glProgramUniform2uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2uivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3UIVEXTPROC</name></type> <name>glad_glProgramUniform3uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3uivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4UIVEXTPROC</name></type> <name>glad_glProgramUniform4uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4uivEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix2x3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x3fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x3fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix3x2fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x2fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x2fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix2x4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x4fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix4x2fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x2fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x2fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix3x4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x4fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC</name></type> <name>glad_glProgramUniformMatrix4x3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x3fvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x3fvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_multisample</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC</name></type> <name>glad_glTexImage2DMultisampleCoverageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2DMultisampleCoverageNV</name></cpp:macro> <cpp:value>glad_glTexImage2DMultisampleCoverageNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC</name></type> <name>glad_glTexImage3DMultisampleCoverageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3DMultisampleCoverageNV</name></cpp:macro> <cpp:value>glad_glTexImage3DMultisampleCoverageNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC</name></type> <name>glad_glTextureImage2DMultisampleNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage2DMultisampleNV</name></cpp:macro> <cpp:value>glad_glTextureImage2DMultisampleNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC</name></type> <name>glad_glTextureImage3DMultisampleNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage3DMultisampleNV</name></cpp:macro> <cpp:value>glad_glTextureImage3DMultisampleNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC</name></type> <name>glad_glTextureImage2DMultisampleCoverageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage2DMultisampleCoverageNV</name></cpp:macro> <cpp:value>glad_glTextureImage2DMultisampleCoverageNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC</name></type> <name>glad_glTextureImage3DMultisampleCoverageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage3DMultisampleCoverageNV</name></cpp:macro> <cpp:value>glad_glTextureImage3DMultisampleCoverageNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_objects</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_objects</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEOBJECTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEOBJECTARBPROC</name></type> <name>glad_glDeleteObjectARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteObjectARB</name></cpp:macro> <cpp:value>glad_glDeleteObjectARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLhandleARB</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHANDLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHANDLEARBPROC</name></type> <name>glad_glGetHandleARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHandleARB</name></cpp:macro> <cpp:value>glad_glGetHandleARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDETACHOBJECTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDETACHOBJECTARBPROC</name></type> <name>glad_glDetachObjectARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDetachObjectARB</name></cpp:macro> <cpp:value>glad_glDetachObjectARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLhandleARB</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESHADEROBJECTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESHADEROBJECTARBPROC</name></type> <name>glad_glCreateShaderObjectARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShaderObjectARB</name></cpp:macro> <cpp:value>glad_glCreateShaderObjectARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADERSOURCEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLcharARB</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADERSOURCEARBPROC</name></type> <name>glad_glShaderSourceARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderSourceARB</name></cpp:macro> <cpp:value>glad_glShaderSourceARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPILESHADERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPILESHADERARBPROC</name></type> <name>glad_glCompileShaderARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompileShaderARB</name></cpp:macro> <cpp:value>glad_glCompileShaderARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLhandleARB</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATEPROGRAMOBJECTARBPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATEPROGRAMOBJECTARBPROC</name></type> <name>glad_glCreateProgramObjectARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateProgramObjectARB</name></cpp:macro> <cpp:value>glad_glCreateProgramObjectARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLATTACHOBJECTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLATTACHOBJECTARBPROC</name></type> <name>glad_glAttachObjectARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAttachObjectARB</name></cpp:macro> <cpp:value>glad_glAttachObjectARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLINKPROGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLINKPROGRAMARBPROC</name></type> <name>glad_glLinkProgramARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLinkProgramARB</name></cpp:macro> <cpp:value>glad_glLinkProgramARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUSEPROGRAMOBJECTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUSEPROGRAMOBJECTARBPROC</name></type> <name>glad_glUseProgramObjectARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseProgramObjectARB</name></cpp:macro> <cpp:value>glad_glUseProgramObjectARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVALIDATEPROGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVALIDATEPROGRAMARBPROC</name></type> <name>glad_glValidateProgramARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glValidateProgramARB</name></cpp:macro> <cpp:value>glad_glValidateProgramARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1FARBPROC</name></type> <name>glad_glUniform1fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1fARB</name></cpp:macro> <cpp:value>glad_glUniform1fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2FARBPROC</name></type> <name>glad_glUniform2fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2fARB</name></cpp:macro> <cpp:value>glad_glUniform2fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3FARBPROC</name></type> <name>glad_glUniform3fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3fARB</name></cpp:macro> <cpp:value>glad_glUniform3fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4FARBPROC</name></type> <name>glad_glUniform4fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4fARB</name></cpp:macro> <cpp:value>glad_glUniform4fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1IARBPROC</name></type> <name>glad_glUniform1iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1iARB</name></cpp:macro> <cpp:value>glad_glUniform1iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2IARBPROC</name></type> <name>glad_glUniform2iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2iARB</name></cpp:macro> <cpp:value>glad_glUniform2iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3IARBPROC</name></type> <name>glad_glUniform3iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3iARB</name></cpp:macro> <cpp:value>glad_glUniform3iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4IARBPROC</name></type> <name>glad_glUniform4iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4iARB</name></cpp:macro> <cpp:value>glad_glUniform4iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1FVARBPROC</name></type> <name>glad_glUniform1fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1fvARB</name></cpp:macro> <cpp:value>glad_glUniform1fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2FVARBPROC</name></type> <name>glad_glUniform2fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2fvARB</name></cpp:macro> <cpp:value>glad_glUniform2fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3FVARBPROC</name></type> <name>glad_glUniform3fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3fvARB</name></cpp:macro> <cpp:value>glad_glUniform3fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4FVARBPROC</name></type> <name>glad_glUniform4fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4fvARB</name></cpp:macro> <cpp:value>glad_glUniform4fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1IVARBPROC</name></type> <name>glad_glUniform1ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1ivARB</name></cpp:macro> <cpp:value>glad_glUniform1ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2IVARBPROC</name></type> <name>glad_glUniform2ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2ivARB</name></cpp:macro> <cpp:value>glad_glUniform2ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3IVARBPROC</name></type> <name>glad_glUniform3ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3ivARB</name></cpp:macro> <cpp:value>glad_glUniform3ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4IVARBPROC</name></type> <name>glad_glUniform4ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4ivARB</name></cpp:macro> <cpp:value>glad_glUniform4ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2FVARBPROC</name></type> <name>glad_glUniformMatrix2fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2fvARB</name></cpp:macro> <cpp:value>glad_glUniformMatrix2fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3FVARBPROC</name></type> <name>glad_glUniformMatrix3fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3fvARB</name></cpp:macro> <cpp:value>glad_glUniformMatrix3fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4FVARBPROC</name></type> <name>glad_glUniformMatrix4fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4fvARB</name></cpp:macro> <cpp:value>glad_glUniformMatrix4fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTPARAMETERFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTPARAMETERFVARBPROC</name></type> <name>glad_glGetObjectParameterfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectParameterfvARB</name></cpp:macro> <cpp:value>glad_glGetObjectParameterfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTPARAMETERIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTPARAMETERIVARBPROC</name></type> <name>glad_glGetObjectParameterivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectParameterivARB</name></cpp:macro> <cpp:value>glad_glGetObjectParameterivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINFOLOGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINFOLOGARBPROC</name></type> <name>glad_glGetInfoLogARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInfoLogARB</name></cpp:macro> <cpp:value>glad_glGetInfoLogARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTACHEDOBJECTSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLhandleARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTACHEDOBJECTSARBPROC</name></type> <name>glad_glGetAttachedObjectsARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttachedObjectsARB</name></cpp:macro> <cpp:value>glad_glGetAttachedObjectsARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMLOCATIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMLOCATIONARBPROC</name></type> <name>glad_glGetUniformLocationARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformLocationARB</name></cpp:macro> <cpp:value>glad_glGetUniformLocationARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMARBPROC</name></type> <name>glad_glGetActiveUniformARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformARB</name></cpp:macro> <cpp:value>glad_glGetActiveUniformARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMFVARBPROC</name></type> <name>glad_glGetUniformfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformfvARB</name></cpp:macro> <cpp:value>glad_glGetUniformfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMIVARBPROC</name></type> <name>glad_glGetUniformivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformivARB</name></cpp:macro> <cpp:value>glad_glGetUniformivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERSOURCEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERSOURCEARBPROC</name></type> <name>glad_glGetShaderSourceARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderSourceARB</name></cpp:macro> <cpp:value>glad_glGetShaderSourceARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_framebuffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_envmap_bumpmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_envmap_bumpmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_envmap_bumpmap</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUMPPARAMETERIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUMPPARAMETERIVATIPROC</name></type> <name>glad_glTexBumpParameterivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBumpParameterivATI</name></cpp:macro> <cpp:value>glad_glTexBumpParameterivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUMPPARAMETERFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUMPPARAMETERFVATIPROC</name></type> <name>glad_glTexBumpParameterfvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBumpParameterfvATI</name></cpp:macro> <cpp:value>glad_glTexBumpParameterfvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXBUMPPARAMETERIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXBUMPPARAMETERIVATIPROC</name></type> <name>glad_glGetTexBumpParameterivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexBumpParameterivATI</name></cpp:macro> <cpp:value>glad_glGetTexBumpParameterivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXBUMPPARAMETERFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXBUMPPARAMETERFVATIPROC</name></type> <name>glad_glGetTexBumpParameterfvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexBumpParameterfvATI</name></cpp:macro> <cpp:value>glad_glGetTexBumpParameterfvATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_robust_buffer_access_behavior</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_robust_buffer_access_behavior</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_robust_buffer_access_behavior</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_stencil_export</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_stencil_export</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_stencil_export</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_rectangle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_rectangle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_rectangle</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_enhanced_layouts</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_enhanced_layouts</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_enhanced_layouts</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rectangle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rectangle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_rectangle</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_texture_color_table</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_texture_color_table</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGI_texture_color_table</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_map_object_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_map_object_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_map_object_buffer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPOBJECTBUFFERATIPROC</name></type> <name>glad_glMapObjectBufferATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapObjectBufferATI</name></cpp:macro> <cpp:value>glad_glMapObjectBufferATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPOBJECTBUFFERATIPROC</name></type> <name>glad_glUnmapObjectBufferATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapObjectBufferATI</name></cpp:macro> <cpp:value>glad_glUnmapObjectBufferATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_robustness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_robustness</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_robustness</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLGETGRAPHICSRESETSTATUSARBPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETGRAPHICSRESETSTATUSARBPROC</name></type> <name>glad_glGetGraphicsResetStatusARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetGraphicsResetStatusARB</name></cpp:macro> <cpp:value>glad_glGetGraphicsResetStatusARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNTEXIMAGEARBPROC</name></type> <name>glad_glGetnTexImageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnTexImageARB</name></cpp:macro> <cpp:value>glad_glGetnTexImageARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREADNPIXELSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREADNPIXELSARBPROC</name></type> <name>glad_glReadnPixelsARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadnPixelsARB</name></cpp:macro> <cpp:value>glad_glReadnPixelsARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC</name></type> <name>glad_glGetnCompressedTexImageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnCompressedTexImageARB</name></cpp:macro> <cpp:value>glad_glGetnCompressedTexImageARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNUNIFORMFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNUNIFORMFVARBPROC</name></type> <name>glad_glGetnUniformfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformfvARB</name></cpp:macro> <cpp:value>glad_glGetnUniformfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNUNIFORMIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNUNIFORMIVARBPROC</name></type> <name>glad_glGetnUniformivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformivARB</name></cpp:macro> <cpp:value>glad_glGetnUniformivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNUNIFORMUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNUNIFORMUIVARBPROC</name></type> <name>glad_glGetnUniformuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformuivARB</name></cpp:macro> <cpp:value>glad_glGetnUniformuivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNUNIFORMDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNUNIFORMDVARBPROC</name></type> <name>glad_glGetnUniformdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnUniformdvARB</name></cpp:macro> <cpp:value>glad_glGetnUniformdvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNMAPDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNMAPDVARBPROC</name></type> <name>glad_glGetnMapdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMapdvARB</name></cpp:macro> <cpp:value>glad_glGetnMapdvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNMAPFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNMAPFVARBPROC</name></type> <name>glad_glGetnMapfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMapfvARB</name></cpp:macro> <cpp:value>glad_glGetnMapfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNMAPIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNMAPIVARBPROC</name></type> <name>glad_glGetnMapivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMapivARB</name></cpp:macro> <cpp:value>glad_glGetnMapivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNPIXELMAPFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNPIXELMAPFVARBPROC</name></type> <name>glad_glGetnPixelMapfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPixelMapfvARB</name></cpp:macro> <cpp:value>glad_glGetnPixelMapfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNPIXELMAPUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNPIXELMAPUIVARBPROC</name></type> <name>glad_glGetnPixelMapuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPixelMapuivARB</name></cpp:macro> <cpp:value>glad_glGetnPixelMapuivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNPIXELMAPUSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNPIXELMAPUSVARBPROC</name></type> <name>glad_glGetnPixelMapusvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPixelMapusvARB</name></cpp:macro> <cpp:value>glad_glGetnPixelMapusvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNPOLYGONSTIPPLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNPOLYGONSTIPPLEARBPROC</name></type> <name>glad_glGetnPolygonStippleARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnPolygonStippleARB</name></cpp:macro> <cpp:value>glad_glGetnPolygonStippleARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNCOLORTABLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNCOLORTABLEARBPROC</name></type> <name>glad_glGetnColorTableARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnColorTableARB</name></cpp:macro> <cpp:value>glad_glGetnColorTableARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNCONVOLUTIONFILTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNCONVOLUTIONFILTERARBPROC</name></type> <name>glad_glGetnConvolutionFilterARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnConvolutionFilterARB</name></cpp:macro> <cpp:value>glad_glGetnConvolutionFilterARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNSEPARABLEFILTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNSEPARABLEFILTERARBPROC</name></type> <name>glad_glGetnSeparableFilterARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnSeparableFilterARB</name></cpp:macro> <cpp:value>glad_glGetnSeparableFilterARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNHISTOGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNHISTOGRAMARBPROC</name></type> <name>glad_glGetnHistogramARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnHistogramARB</name></cpp:macro> <cpp:value>glad_glGetnHistogramARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNMINMAXARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNMINMAXARBPROC</name></type> <name>glad_glGetnMinmaxARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetnMinmaxARB</name></cpp:macro> <cpp:value>glad_glGetnMinmaxARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_pixel_data_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_pixel_data_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_pixel_data_range</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELDATARANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELDATARANGENVPROC</name></type> <name>glad_glPixelDataRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelDataRangeNV</name></cpp:macro> <cpp:value>glad_glPixelDataRangeNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHPIXELDATARANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHPIXELDATARANGENVPROC</name></type> <name>glad_glFlushPixelDataRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushPixelDataRangeNV</name></cpp:macro> <cpp:value>glad_glFlushPixelDataRangeNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_blit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_blit</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLITFRAMEBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLITFRAMEBUFFEREXTPROC</name></type> <name>glad_glBlitFramebufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlitFramebufferEXT</name></cpp:macro> <cpp:value>glad_glBlitFramebufferEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_gpu_shader_fp64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_gpu_shader_fp64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_gpu_shader_fp64</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_depth_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_depth_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_weighting</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_weighting</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_weighting</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXWEIGHTFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXWEIGHTFEXTPROC</name></type> <name>glad_glVertexWeightfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexWeightfEXT</name></cpp:macro> <cpp:value>glad_glVertexWeightfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXWEIGHTFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXWEIGHTFVEXTPROC</name></type> <name>glad_glVertexWeightfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexWeightfvEXT</name></cpp:macro> <cpp:value>glad_glVertexWeightfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXWEIGHTPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXWEIGHTPOINTEREXTPROC</name></type> <name>glad_glVertexWeightPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexWeightPointerEXT</name></cpp:macro> <cpp:value>glad_glVertexWeightPointerEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_GREMEDY_string_marker</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREMEDY_string_marker</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_GREMEDY_string_marker</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTRINGMARKERGREMEDYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTRINGMARKERGREMEDYPROC</name></type> <name>glad_glStringMarkerGREMEDY</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStringMarkerGREMEDY</name></cpp:macro> <cpp:value>glad_glStringMarkerGREMEDY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression_bptc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression_bptc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_compression_bptc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_subtexture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_subtexture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_subtexture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE1DEXTPROC</name></type> <name>glad_glTexSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glTexSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE2DEXTPROC</name></type> <name>glad_glTexSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glTexSubImage2DEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_pixel_transform_color_table</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_pixel_transform_color_table</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_pixel_transform_color_table</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_rgtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_rgtc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_compression_rgtc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_depth_pass_instrument</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_depth_pass_instrument</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_depth_pass_instrument</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_precision</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_precision</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_precision</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_evaluators</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_evaluators</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_evaluators</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPCONTROLPOINTSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPCONTROLPOINTSNVPROC</name></type> <name>glad_glMapControlPointsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapControlPointsNV</name></cpp:macro> <cpp:value>glad_glMapControlPointsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPPARAMETERIVNVPROC</name></type> <name>glad_glMapParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapParameterivNV</name></cpp:macro> <cpp:value>glad_glMapParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPPARAMETERFVNVPROC</name></type> <name>glad_glMapParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapParameterfvNV</name></cpp:macro> <cpp:value>glad_glMapParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMAPCONTROLPOINTSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMAPCONTROLPOINTSNVPROC</name></type> <name>glad_glGetMapControlPointsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapControlPointsNV</name></cpp:macro> <cpp:value>glad_glGetMapControlPointsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMAPPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMAPPARAMETERIVNVPROC</name></type> <name>glad_glGetMapParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapParameterivNV</name></cpp:macro> <cpp:value>glad_glGetMapParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMAPPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMAPPARAMETERFVNVPROC</name></type> <name>glad_glGetMapParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetMapParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMAPATTRIBPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMAPATTRIBPARAMETERIVNVPROC</name></type> <name>glad_glGetMapAttribParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapAttribParameterivNV</name></cpp:macro> <cpp:value>glad_glGetMapAttribParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMAPATTRIBPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMAPATTRIBPARAMETERFVNVPROC</name></type> <name>glad_glGetMapAttribParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapAttribParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetMapAttribParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEVALMAPSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEVALMAPSNVPROC</name></type> <name>glad_glEvalMapsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalMapsNV</name></cpp:macro> <cpp:value>glad_glEvalMapsNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_filter4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_filter4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture_filter4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXFILTERFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXFILTERFUNCSGISPROC</name></type> <name>glad_glGetTexFilterFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexFilterFuncSGIS</name></cpp:macro> <cpp:value>glad_glGetTexFilterFuncSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXFILTERFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXFILTERFUNCSGISPROC</name></type> <name>glad_glTexFilterFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexFilterFuncSGIS</name></cpp:macro> <cpp:value>glad_glTexFilterFuncSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_performance_monitor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_performance_monitor</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_performance_monitor</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFMONITORGROUPSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFMONITORGROUPSAMDPROC</name></type> <name>glad_glGetPerfMonitorGroupsAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfMonitorGroupsAMD</name></cpp:macro> <cpp:value>glad_glGetPerfMonitorGroupsAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFMONITORCOUNTERSAMDPROC</name></type> <name>glad_glGetPerfMonitorCountersAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfMonitorCountersAMD</name></cpp:macro> <cpp:value>glad_glGetPerfMonitorCountersAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFMONITORGROUPSTRINGAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFMONITORGROUPSTRINGAMDPROC</name></type> <name>glad_glGetPerfMonitorGroupStringAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfMonitorGroupStringAMD</name></cpp:macro> <cpp:value>glad_glGetPerfMonitorGroupStringAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC</name></type> <name>glad_glGetPerfMonitorCounterStringAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfMonitorCounterStringAMD</name></cpp:macro> <cpp:value>glad_glGetPerfMonitorCounterStringAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERINFOAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFMONITORCOUNTERINFOAMDPROC</name></type> <name>glad_glGetPerfMonitorCounterInfoAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfMonitorCounterInfoAMD</name></cpp:macro> <cpp:value>glad_glGetPerfMonitorCounterInfoAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPERFMONITORSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPERFMONITORSAMDPROC</name></type> <name>glad_glGenPerfMonitorsAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenPerfMonitorsAMD</name></cpp:macro> <cpp:value>glad_glGenPerfMonitorsAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPERFMONITORSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPERFMONITORSAMDPROC</name></type> <name>glad_glDeletePerfMonitorsAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeletePerfMonitorsAMD</name></cpp:macro> <cpp:value>glad_glDeletePerfMonitorsAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSELECTPERFMONITORCOUNTERSAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSELECTPERFMONITORCOUNTERSAMDPROC</name></type> <name>glad_glSelectPerfMonitorCountersAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSelectPerfMonitorCountersAMD</name></cpp:macro> <cpp:value>glad_glSelectPerfMonitorCountersAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINPERFMONITORAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINPERFMONITORAMDPROC</name></type> <name>glad_glBeginPerfMonitorAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginPerfMonitorAMD</name></cpp:macro> <cpp:value>glad_glBeginPerfMonitorAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDPERFMONITORAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDPERFMONITORAMDPROC</name></type> <name>glad_glEndPerfMonitorAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndPerfMonitorAMD</name></cpp:macro> <cpp:value>glad_glEndPerfMonitorAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERDATAAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFMONITORCOUNTERDATAAMDPROC</name></type> <name>glad_glGetPerfMonitorCounterDataAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfMonitorCounterDataAMD</name></cpp:macro> <cpp:value>glad_glGetPerfMonitorCounterDataAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_geometry_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_geometry_shader4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_geometry_shader4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_stencil_clear_tag</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_stencil_clear_tag</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_stencil_clear_tag</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILCLEARTAGEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILCLEARTAGEXTPROC</name></type> <name>glad_glStencilClearTagEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilClearTagEXT</name></cpp:macro> <cpp:value>glad_glStencilClearTagEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_program1_1</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_present_video</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_present_video</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_present_video</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRESENTFRAMEKEYEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRESENTFRAMEKEYEDNVPROC</name></type> <name>glad_glPresentFrameKeyedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPresentFrameKeyedNV</name></cpp:macro> <cpp:value>glad_glPresentFrameKeyedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRESENTFRAMEDUALFILLNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRESENTFRAMEDUALFILLNVPROC</name></type> <name>glad_glPresentFrameDualFillNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPresentFrameDualFillNV</name></cpp:macro> <cpp:value>glad_glPresentFrameDualFillNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOIVNVPROC</name></type> <name>glad_glGetVideoivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoivNV</name></cpp:macro> <cpp:value>glad_glGetVideoivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOUIVNVPROC</name></type> <name>glad_glGetVideouivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideouivNV</name></cpp:macro> <cpp:value>glad_glGetVideouivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOI64VNVPROC</name></type> <name>glad_glGetVideoi64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoi64vNV</name></cpp:macro> <cpp:value>glad_glGetVideoi64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOUI64VNVPROC</name></type> <name>glad_glGetVideoui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoui64vNV</name></cpp:macro> <cpp:value>glad_glGetVideoui64vNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression_rgtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression_rgtc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_compression_rgtc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_convolution_border_modes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_convolution_border_modes</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_HP_convolution_border_modes</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_gpu_program_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_gpu_program_parameters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_gpu_program_parameters</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERS4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERS4FVEXTPROC</name></type> <name>glad_glProgramEnvParameters4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameters4fvEXT</name></cpp:macro> <cpp:value>glad_glProgramEnvParameters4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC</name></type> <name>glad_glProgramLocalParameters4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameters4fvEXT</name></cpp:macro> <cpp:value>glad_glProgramLocalParameters4fvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shader_integer_mix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shader_integer_mix</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_shader_integer_mix</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_stencil_texturing</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_stencil_texturing</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_stencil_texturing</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_fog_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_fog_offset</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_fog_offset</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_elements_base_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_elements_base_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_elements_base_vertex</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INGR_interlace_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INGR_interlace_read</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INGR_interlace_read</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_transform_feedback</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_transform_feedback</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_transform_feedback</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINTRANSFORMFEEDBACKNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINTRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glBeginTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glBeginTransformFeedbackNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDTRANSFORMFEEDBACKNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDTRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glEndTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glEndTransformFeedbackNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC</name></type> <name>glad_glTransformFeedbackAttribsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackAttribsNV</name></cpp:macro> <cpp:value>glad_glTransformFeedbackAttribsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERRANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERRANGENVPROC</name></type> <name>glad_glBindBufferRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferRangeNV</name></cpp:macro> <cpp:value>glad_glBindBufferRangeNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFEROFFSETNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFEROFFSETNVPROC</name></type> <name>glad_glBindBufferOffsetNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferOffsetNV</name></cpp:macro> <cpp:value>glad_glBindBufferOffsetNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERBASENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERBASENVPROC</name></type> <name>glad_glBindBufferBaseNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferBaseNV</name></cpp:macro> <cpp:value>glad_glBindBufferBaseNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC</name></type> <name>glad_glTransformFeedbackVaryingsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackVaryingsNV</name></cpp:macro> <cpp:value>glad_glTransformFeedbackVaryingsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVEVARYINGNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVEVARYINGNVPROC</name></type> <name>glad_glActiveVaryingNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveVaryingNV</name></cpp:macro> <cpp:value>glad_glActiveVaryingNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARYINGLOCATIONNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARYINGLOCATIONNVPROC</name></type> <name>glad_glGetVaryingLocationNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVaryingLocationNV</name></cpp:macro> <cpp:value>glad_glGetVaryingLocationNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEVARYINGNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEVARYINGNVPROC</name></type> <name>glad_glGetActiveVaryingNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveVaryingNV</name></cpp:macro> <cpp:value>glad_glGetActiveVaryingNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC</name></type> <name>glad_glGetTransformFeedbackVaryingNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTransformFeedbackVaryingNV</name></cpp:macro> <cpp:value>glad_glGetTransformFeedbackVaryingNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC</name></type> <name>glad_glTransformFeedbackStreamAttribsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackStreamAttribsNV</name></cpp:macro> <cpp:value>glad_glTransformFeedbackStreamAttribsNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_fragment_program</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMNAMEDPARAMETER4FNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMNAMEDPARAMETER4FNVPROC</name></type> <name>glad_glProgramNamedParameter4fNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramNamedParameter4fNV</name></cpp:macro> <cpp:value>glad_glProgramNamedParameter4fNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC</name></type> <name>glad_glProgramNamedParameter4fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramNamedParameter4fvNV</name></cpp:macro> <cpp:value>glad_glProgramNamedParameter4fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMNAMEDPARAMETER4DNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMNAMEDPARAMETER4DNVPROC</name></type> <name>glad_glProgramNamedParameter4dNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramNamedParameter4dNV</name></cpp:macro> <cpp:value>glad_glProgramNamedParameter4dNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC</name></type> <name>glad_glProgramNamedParameter4dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramNamedParameter4dvNV</name></cpp:macro> <cpp:value>glad_glProgramNamedParameter4dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC</name></type> <name>glad_glGetProgramNamedParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramNamedParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetProgramNamedParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC</name></type> <name>glad_glGetProgramNamedParameterdvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramNamedParameterdvNV</name></cpp:macro> <cpp:value>glad_glGetProgramNamedParameterdvNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_stencil_operation_extended</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_stencil_operation_extended</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_stencil_operation_extended</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILOPVALUEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILOPVALUEAMDPROC</name></type> <name>glad_glStencilOpValueAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOpValueAMD</name></cpp:macro> <cpp:value>glad_glStencilOpValueAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_seamless_cubemap_per_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_seamless_cubemap_per_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_seamless_cubemap_per_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_instanced_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_instanced_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_instanced_arrays</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBDIVISORARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBDIVISORARBPROC</name></type> <name>glad_glVertexAttribDivisorARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribDivisorARB</name></cpp:macro> <cpp:value>glad_glVertexAttribDivisorARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_polygon_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_polygon_offset</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_polygon_offset</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLYGONOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLYGONOFFSETEXTPROC</name></type> <name>glad_glPolygonOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonOffsetEXT</name></cpp:macro> <cpp:value>glad_glPolygonOffsetEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_array_range2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_array_range2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_array_range2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_sparse_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_sparse_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_sparse_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSTORAGESPARSEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSTORAGESPARSEAMDPROC</name></type> <name>glad_glTexStorageSparseAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexStorageSparseAMD</name></cpp:macro> <cpp:value>glad_glTexStorageSparseAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESTORAGESPARSEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESTORAGESPARSEAMDPROC</name></type> <name>glad_glTextureStorageSparseAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureStorageSparseAMD</name></cpp:macro> <cpp:value>glad_glTextureStorageSparseAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fence</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_fence</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFENCESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFENCESNVPROC</name></type> <name>glad_glDeleteFencesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFencesNV</name></cpp:macro> <cpp:value>glad_glDeleteFencesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFENCESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFENCESNVPROC</name></type> <name>glad_glGenFencesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFencesNV</name></cpp:macro> <cpp:value>glad_glGenFencesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISFENCENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISFENCENVPROC</name></type> <name>glad_glIsFenceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFenceNV</name></cpp:macro> <cpp:value>glad_glIsFenceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLTESTFENCENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTESTFENCENVPROC</name></type> <name>glad_glTestFenceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTestFenceNV</name></cpp:macro> <cpp:value>glad_glTestFenceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFENCEIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFENCEIVNVPROC</name></type> <name>glad_glGetFenceivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFenceivNV</name></cpp:macro> <cpp:value>glad_glGetFenceivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHFENCENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHFENCENVPROC</name></type> <name>glad_glFinishFenceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinishFenceNV</name></cpp:macro> <cpp:value>glad_glFinishFenceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETFENCENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETFENCENVPROC</name></type> <name>glad_glSetFenceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetFenceNV</name></cpp:macro> <cpp:value>glad_glSetFenceNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_buffer_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_buffer_range</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_mesh_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_mesh_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUN_mesh_array</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWMESHARRAYSSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWMESHARRAYSSUNPROC</name></type> <name>glad_glDrawMeshArraysSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawMeshArraysSUN</name></cpp:macro> <cpp:value>glad_glDrawMeshArraysSUN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_attrib_binding</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_attrib_binding</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_attrib_binding</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_no_attachments</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_no_attachments</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_framebuffer_no_attachments</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_cl_event</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_cl_event</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_cl_event</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESYNCFROMCLEVENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_cl_context</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_cl_event</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESYNCFROMCLEVENTARBPROC</name></type> <name>glad_glCreateSyncFromCLeventARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateSyncFromCLeventARB</name></cpp:macro> <cpp:value>glad_glCreateSyncFromCLeventARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_packed_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_packed_depth_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_packed_depth_stencil</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_single_precision</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_single_precision</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OES_single_precision</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHFOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLclampf</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHFOESPROC</name></type> <name>glad_glClearDepthfOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepthfOES</name></cpp:macro> <cpp:value>glad_glClearDepthfOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIPPLANEFOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIPPLANEFOESPROC</name></type> <name>glad_glClipPlanefOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClipPlanefOES</name></cpp:macro> <cpp:value>glad_glClipPlanefOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEFOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLclampf</name></type></decl></parameter>, <parameter><decl><type><name>GLclampf</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEFOESPROC</name></type> <name>glad_glDepthRangefOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangefOES</name></cpp:macro> <cpp:value>glad_glDepthRangefOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRUSTUMFOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRUSTUMFOESPROC</name></type> <name>glad_glFrustumfOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrustumfOES</name></cpp:macro> <cpp:value>glad_glFrustumfOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCLIPPLANEFOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCLIPPLANEFOESPROC</name></type> <name>glad_glGetClipPlanefOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetClipPlanefOES</name></cpp:macro> <cpp:value>glad_glGetClipPlanefOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLORTHOFOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLORTHOFOESPROC</name></type> <name>glad_glOrthofOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glOrthofOES</name></cpp:macro> <cpp:value>glad_glOrthofOES</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_primitive_restart</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_primitive_restart</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_primitive_restart</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRIMITIVERESTARTNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRIMITIVERESTARTNVPROC</name></type> <name>glad_glPrimitiveRestartNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrimitiveRestartNV</name></cpp:macro> <cpp:value>glad_glPrimitiveRestartNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRIMITIVERESTARTINDEXNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRIMITIVERESTARTINDEXNVPROC</name></type> <name>glad_glPrimitiveRestartIndexNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrimitiveRestartIndexNV</name></cpp:macro> <cpp:value>glad_glPrimitiveRestartIndexNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_global_alpha</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_global_alpha</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUN_global_alpha</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORBSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORBSUNPROC</name></type> <name>glad_glGlobalAlphaFactorbSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactorbSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactorbSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORSSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORSSUNPROC</name></type> <name>glad_glGlobalAlphaFactorsSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactorsSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactorsSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORISUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORISUNPROC</name></type> <name>glad_glGlobalAlphaFactoriSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactoriSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactoriSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORFSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORFSUNPROC</name></type> <name>glad_glGlobalAlphaFactorfSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactorfSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactorfSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORDSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORDSUNPROC</name></type> <name>glad_glGlobalAlphaFactordSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactordSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactordSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORUBSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORUBSUNPROC</name></type> <name>glad_glGlobalAlphaFactorubSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactorubSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactorubSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORUSSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORUSSUNPROC</name></type> <name>glad_glGlobalAlphaFactorusSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactorusSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactorusSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGLOBALALPHAFACTORUISUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGLOBALALPHAFACTORUISUNPROC</name></type> <name>glad_glGlobalAlphaFactoruiSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGlobalAlphaFactoruiSUN</name></cpp:macro> <cpp:value>glad_glGlobalAlphaFactoruiSUN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLARETEXTURESRESIDENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLARETEXTURESRESIDENTEXTPROC</name></type> <name>glad_glAreTexturesResidentEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAreTexturesResidentEXT</name></cpp:macro> <cpp:value>glad_glAreTexturesResidentEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXTUREEXTPROC</name></type> <name>glad_glBindTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTextureEXT</name></cpp:macro> <cpp:value>glad_glBindTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETETEXTURESEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETETEXTURESEXTPROC</name></type> <name>glad_glDeleteTexturesEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteTexturesEXT</name></cpp:macro> <cpp:value>glad_glDeleteTexturesEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENTEXTURESEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENTEXTURESEXTPROC</name></type> <name>glad_glGenTexturesEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenTexturesEXT</name></cpp:macro> <cpp:value>glad_glGenTexturesEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTEXTUREEXTPROC</name></type> <name>glad_glIsTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTextureEXT</name></cpp:macro> <cpp:value>glad_glIsTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRIORITIZETEXTURESEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLclampf</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRIORITIZETEXTURESEXTPROC</name></type> <name>glad_glPrioritizeTexturesEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrioritizeTexturesEXT</name></cpp:macro> <cpp:value>glad_glPrioritizeTexturesEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_name_gen_delete</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_name_gen_delete</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_name_gen_delete</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENNAMESAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENNAMESAMDPROC</name></type> <name>glad_glGenNamesAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenNamesAMD</name></cpp:macro> <cpp:value>glad_glGenNamesAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETENAMESAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETENAMESAMDPROC</name></type> <name>glad_glDeleteNamesAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteNamesAMD</name></cpp:macro> <cpp:value>glad_glDeleteNamesAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISNAMEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISNAMEAMDPROC</name></type> <name>glad_glIsNameAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsNameAMD</name></cpp:macro> <cpp:value>glad_glIsNameAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_compression_vtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_compression_vtc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_compression_vtc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ycrcb_subsample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ycrcb_subsample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_ycrcb_subsample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_shader3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_shader3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_shader3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_shader2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_shader2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_shader2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_buffer_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_buffer_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_buffer_storage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_shader_atomic_counter_ops</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_shader_atomic_counter_ops</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_shader_atomic_counter_ops</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_vertex_program_evaluators</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_vertex_program_evaluators</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_vertex_program_evaluators</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXATTRIBAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXATTRIBAPPLEPROC</name></type> <name>glad_glEnableVertexAttribAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexAttribAPPLE</name></cpp:macro> <cpp:value>glad_glEnableVertexAttribAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXATTRIBAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXATTRIBAPPLEPROC</name></type> <name>glad_glDisableVertexAttribAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexAttribAPPLE</name></cpp:macro> <cpp:value>glad_glDisableVertexAttribAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISVERTEXATTRIBENABLEDAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISVERTEXATTRIBENABLEDAPPLEPROC</name></type> <name>glad_glIsVertexAttribEnabledAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVertexAttribEnabledAPPLE</name></cpp:macro> <cpp:value>glad_glIsVertexAttribEnabledAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPVERTEXATTRIB1DAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPVERTEXATTRIB1DAPPLEPROC</name></type> <name>glad_glMapVertexAttrib1dAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapVertexAttrib1dAPPLE</name></cpp:macro> <cpp:value>glad_glMapVertexAttrib1dAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPVERTEXATTRIB1FAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPVERTEXATTRIB1FAPPLEPROC</name></type> <name>glad_glMapVertexAttrib1fAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapVertexAttrib1fAPPLE</name></cpp:macro> <cpp:value>glad_glMapVertexAttrib1fAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPVERTEXATTRIB2DAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPVERTEXATTRIB2DAPPLEPROC</name></type> <name>glad_glMapVertexAttrib2dAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapVertexAttrib2dAPPLE</name></cpp:macro> <cpp:value>glad_glMapVertexAttrib2dAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPVERTEXATTRIB2FAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPVERTEXATTRIB2FAPPLEPROC</name></type> <name>glad_glMapVertexAttrib2fAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapVertexAttrib2fAPPLE</name></cpp:macro> <cpp:value>glad_glMapVertexAttrib2fAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multi_bind</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multi_bind</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_multi_bind</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_explicit_uniform_location</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_explicit_uniform_location</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_explicit_uniform_location</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_buffer_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_depth_buffer_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_shadow_ambient</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_shadow_ambient</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_shadow_ambient</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_cube_map</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_cube_map</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_cube_map</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_vertex_shader_viewport_index</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_vertex_shader_viewport_index</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_vertex_shader_viewport_index</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_list_priority</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_list_priority</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_list_priority</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLISTPARAMETERFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLISTPARAMETERFVSGIXPROC</name></type> <name>glad_glGetListParameterfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetListParameterfvSGIX</name></cpp:macro> <cpp:value>glad_glGetListParameterfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLISTPARAMETERIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLISTPARAMETERIVSGIXPROC</name></type> <name>glad_glGetListParameterivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetListParameterivSGIX</name></cpp:macro> <cpp:value>glad_glGetListParameterivSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLISTPARAMETERFSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLISTPARAMETERFSGIXPROC</name></type> <name>glad_glListParameterfSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glListParameterfSGIX</name></cpp:macro> <cpp:value>glad_glListParameterfSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLISTPARAMETERFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLISTPARAMETERFVSGIXPROC</name></type> <name>glad_glListParameterfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glListParameterfvSGIX</name></cpp:macro> <cpp:value>glad_glListParameterfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLISTPARAMETERISGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLISTPARAMETERISGIXPROC</name></type> <name>glad_glListParameteriSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glListParameteriSGIX</name></cpp:macro> <cpp:value>glad_glListParameteriSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLISTPARAMETERIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLISTPARAMETERIVSGIXPROC</name></type> <name>glad_glListParameterivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glListParameterivSGIX</name></cpp:macro> <cpp:value>glad_glListParameterivSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_buffer_unified_memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_buffer_unified_memory</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_buffer_unified_memory</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERADDRESSRANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERADDRESSRANGENVPROC</name></type> <name>glad_glBufferAddressRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferAddressRangeNV</name></cpp:macro> <cpp:value>glad_glBufferAddressRangeNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXFORMATNVPROC</name></type> <name>glad_glVertexFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexFormatNV</name></cpp:macro> <cpp:value>glad_glVertexFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALFORMATNVPROC</name></type> <name>glad_glNormalFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalFormatNV</name></cpp:macro> <cpp:value>glad_glNormalFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFORMATNVPROC</name></type> <name>glad_glColorFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFormatNV</name></cpp:macro> <cpp:value>glad_glColorFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXFORMATNVPROC</name></type> <name>glad_glIndexFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexFormatNV</name></cpp:macro> <cpp:value>glad_glIndexFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDFORMATNVPROC</name></type> <name>glad_glTexCoordFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordFormatNV</name></cpp:macro> <cpp:value>glad_glTexCoordFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEDGEFLAGFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEDGEFLAGFORMATNVPROC</name></type> <name>glad_glEdgeFlagFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlagFormatNV</name></cpp:macro> <cpp:value>glad_glEdgeFlagFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORFORMATNVPROC</name></type> <name>glad_glSecondaryColorFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorFormatNV</name></cpp:macro> <cpp:value>glad_glSecondaryColorFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDFORMATNVPROC</name></type> <name>glad_glFogCoordFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordFormatNV</name></cpp:macro> <cpp:value>glad_glFogCoordFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBFORMATNVPROC</name></type> <name>glad_glVertexAttribFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribFormatNV</name></cpp:macro> <cpp:value>glad_glVertexAttribFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBIFORMATNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBIFORMATNVPROC</name></type> <name>glad_glVertexAttribIFormatNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIFormatNV</name></cpp:macro> <cpp:value>glad_glVertexAttribIFormatNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERUI64I_VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERUI64I_VNVPROC</name></type> <name>glad_glGetIntegerui64i_vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegerui64i_vNV</name></cpp:macro> <cpp:value>glad_glGetIntegerui64i_vNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_env_dot3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_env_dot3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_env_dot3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_texture_env_combine3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_texture_env_combine3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_texture_env_combine3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_map_buffer_alignment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_map_buffer_alignment</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_map_buffer_alignment</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_blend_equation_advanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_blend_equation_advanced</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_blend_equation_advanced</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDPARAMETERINVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDPARAMETERINVPROC</name></type> <name>glad_glBlendParameteriNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendParameteriNV</name></cpp:macro> <cpp:value>glad_glBlendParameteriNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDBARRIERNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDBARRIERNVPROC</name></type> <name>glad_glBlendBarrierNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendBarrierNV</name></cpp:macro> <cpp:value>glad_glBlendBarrierNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_sharpen_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_sharpen_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_sharpen_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHARPENTEXFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHARPENTEXFUNCSGISPROC</name></type> <name>glad_glSharpenTexFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSharpenTexFuncSGIS</name></cpp:macro> <cpp:value>glad_glSharpenTexFuncSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHARPENTEXFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHARPENTEXFUNCSGISPROC</name></type> <name>glad_glGetSharpenTexFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSharpenTexFuncSGIS</name></cpp:macro> <cpp:value>glad_glGetSharpenTexFuncSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_program</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_program</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DARBPROC</name></type> <name>glad_glVertexAttrib1dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DVARBPROC</name></type> <name>glad_glVertexAttrib1dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FARBPROC</name></type> <name>glad_glVertexAttrib1fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FVARBPROC</name></type> <name>glad_glVertexAttrib1fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SARBPROC</name></type> <name>glad_glVertexAttrib1sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SVARBPROC</name></type> <name>glad_glVertexAttrib1svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DARBPROC</name></type> <name>glad_glVertexAttrib2dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DVARBPROC</name></type> <name>glad_glVertexAttrib2dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FARBPROC</name></type> <name>glad_glVertexAttrib2fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FVARBPROC</name></type> <name>glad_glVertexAttrib2fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SARBPROC</name></type> <name>glad_glVertexAttrib2sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SVARBPROC</name></type> <name>glad_glVertexAttrib2svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DARBPROC</name></type> <name>glad_glVertexAttrib3dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DVARBPROC</name></type> <name>glad_glVertexAttrib3dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FARBPROC</name></type> <name>glad_glVertexAttrib3fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FVARBPROC</name></type> <name>glad_glVertexAttrib3fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SARBPROC</name></type> <name>glad_glVertexAttrib3sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SVARBPROC</name></type> <name>glad_glVertexAttrib3svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NBVARBPROC</name></type> <name>glad_glVertexAttrib4NbvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NbvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NbvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NIVARBPROC</name></type> <name>glad_glVertexAttrib4NivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NSVARBPROC</name></type> <name>glad_glVertexAttrib4NsvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NsvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NsvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBARBPROC</name></type> <name>glad_glVertexAttrib4NubARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NubARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NubARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBVARBPROC</name></type> <name>glad_glVertexAttrib4NubvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NubvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NubvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUIVARBPROC</name></type> <name>glad_glVertexAttrib4NuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NuivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NuivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUSVARBPROC</name></type> <name>glad_glVertexAttrib4NusvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NusvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NusvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4BVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4BVARBPROC</name></type> <name>glad_glVertexAttrib4bvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4bvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4bvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DARBPROC</name></type> <name>glad_glVertexAttrib4dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DVARBPROC</name></type> <name>glad_glVertexAttrib4dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FARBPROC</name></type> <name>glad_glVertexAttrib4fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FVARBPROC</name></type> <name>glad_glVertexAttrib4fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4IVARBPROC</name></type> <name>glad_glVertexAttrib4ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SARBPROC</name></type> <name>glad_glVertexAttrib4sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SVARBPROC</name></type> <name>glad_glVertexAttrib4svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UBVARBPROC</name></type> <name>glad_glVertexAttrib4ubvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UIVARBPROC</name></type> <name>glad_glVertexAttrib4uivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4uivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4uivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4USVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4USVARBPROC</name></type> <name>glad_glVertexAttrib4usvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4usvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4usvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBPOINTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBPOINTERARBPROC</name></type> <name>glad_glVertexAttribPointerARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribPointerARB</name></cpp:macro> <cpp:value>glad_glVertexAttribPointerARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name></type> <name>glad_glEnableVertexAttribArrayARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexAttribArrayARB</name></cpp:macro> <cpp:value>glad_glEnableVertexAttribArrayARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name></type> <name>glad_glDisableVertexAttribArrayARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexAttribArrayARB</name></cpp:macro> <cpp:value>glad_glDisableVertexAttribArrayARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMSTRINGARBPROC</name></type> <name>glad_glProgramStringARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramStringARB</name></cpp:macro> <cpp:value>glad_glProgramStringARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPROGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPROGRAMARBPROC</name></type> <name>glad_glBindProgramARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindProgramARB</name></cpp:macro> <cpp:value>glad_glBindProgramARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMSARBPROC</name></type> <name>glad_glDeleteProgramsARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgramsARB</name></cpp:macro> <cpp:value>glad_glDeleteProgramsARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPROGRAMSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPROGRAMSARBPROC</name></type> <name>glad_glGenProgramsARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenProgramsARB</name></cpp:macro> <cpp:value>glad_glGenProgramsARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name></type> <name>glad_glProgramEnvParameter4dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4dARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name></type> <name>glad_glProgramEnvParameter4dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4dvARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name></type> <name>glad_glProgramEnvParameter4fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4fARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name></type> <name>glad_glProgramEnvParameter4fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4fvARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name></type> <name>glad_glProgramLocalParameter4dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4dARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name></type> <name>glad_glProgramLocalParameter4dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4dvARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name></type> <name>glad_glProgramLocalParameter4fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4fARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name></type> <name>glad_glProgramLocalParameter4fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4fvARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name></type> <name>glad_glGetProgramEnvParameterdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramEnvParameterdvARB</name></cpp:macro> <cpp:value>glad_glGetProgramEnvParameterdvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name></type> <name>glad_glGetProgramEnvParameterfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramEnvParameterfvARB</name></cpp:macro> <cpp:value>glad_glGetProgramEnvParameterfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name></type> <name>glad_glGetProgramLocalParameterdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramLocalParameterdvARB</name></cpp:macro> <cpp:value>glad_glGetProgramLocalParameterdvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name></type> <name>glad_glGetProgramLocalParameterfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramLocalParameterfvARB</name></cpp:macro> <cpp:value>glad_glGetProgramLocalParameterfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMIVARBPROC</name></type> <name>glad_glGetProgramivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramivARB</name></cpp:macro> <cpp:value>glad_glGetProgramivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMSTRINGARBPROC</name></type> <name>glad_glGetProgramStringARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramStringARB</name></cpp:macro> <cpp:value>glad_glGetProgramStringARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBDVARBPROC</name></type> <name>glad_glGetVertexAttribdvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribdvARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribdvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBFVARBPROC</name></type> <name>glad_glGetVertexAttribfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribfvARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribfvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIVARBPROC</name></type> <name>glad_glGetVertexAttribivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribivARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name></type> <name>glad_glGetVertexAttribPointervARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribPointervARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribPointervARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMARBPROC</name></type> <name>glad_glIsProgramARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgramARB</name></cpp:macro> <cpp:value>glad_glIsProgramARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rgb10_a2ui</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rgb10_a2ui</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_rgb10_a2ui</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OML_interlace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OML_interlace</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OML_interlace</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_pixel_format_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_pixel_format_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_pixel_format_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_buffer_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERARBPROC</name></type> <name>glad_glBindBufferARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferARB</name></cpp:macro> <cpp:value>glad_glBindBufferARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEBUFFERSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEBUFFERSARBPROC</name></type> <name>glad_glDeleteBuffersARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteBuffersARB</name></cpp:macro> <cpp:value>glad_glDeleteBuffersARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENBUFFERSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENBUFFERSARBPROC</name></type> <name>glad_glGenBuffersARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenBuffersARB</name></cpp:macro> <cpp:value>glad_glGenBuffersARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISBUFFERARBPROC</name></type> <name>glad_glIsBufferARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsBufferARB</name></cpp:macro> <cpp:value>glad_glIsBufferARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERDATAARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptrARB</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERDATAARBPROC</name></type> <name>glad_glBufferDataARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferDataARB</name></cpp:macro> <cpp:value>glad_glBufferDataARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERSUBDATAARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptrARB</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptrARB</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERSUBDATAARBPROC</name></type> <name>glad_glBufferSubDataARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferSubDataARB</name></cpp:macro> <cpp:value>glad_glBufferSubDataARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERSUBDATAARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptrARB</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptrARB</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERSUBDATAARBPROC</name></type> <name>glad_glGetBufferSubDataARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferSubDataARB</name></cpp:macro> <cpp:value>glad_glGetBufferSubDataARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPBUFFERARBPROC</name></type> <name>glad_glMapBufferARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBufferARB</name></cpp:macro> <cpp:value>glad_glMapBufferARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPBUFFERARBPROC</name></type> <name>glad_glUnmapBufferARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapBufferARB</name></cpp:macro> <cpp:value>glad_glUnmapBufferARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERIVARBPROC</name></type> <name>glad_glGetBufferParameterivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameterivARB</name></cpp:macro> <cpp:value>glad_glGetBufferParameterivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPOINTERVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPOINTERVARBPROC</name></type> <name>glad_glGetBufferPointervARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferPointervARB</name></cpp:macro> <cpp:value>glad_glGetBufferPointervARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shadow_funcs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shadow_funcs</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_shadow_funcs</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_text_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_text_fragment_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_text_fragment_shader</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_array_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_array_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_array_range</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHVERTEXARRAYRANGENVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHVERTEXARRAYRANGENVPROC</name></type> <name>glad_glFlushVertexArrayRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushVertexArrayRangeNV</name></cpp:macro> <cpp:value>glad_glFlushVertexArrayRangeNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYRANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYRANGENVPROC</name></type> <name>glad_glVertexArrayRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayRangeNV</name></cpp:macro> <cpp:value>glad_glVertexArrayRangeNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_fragment_lighting</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_fragment_lighting</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_fragment_lighting</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTCOLORMATERIALSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTCOLORMATERIALSGIXPROC</name></type> <name>glad_glFragmentColorMaterialSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentColorMaterialSGIX</name></cpp:macro> <cpp:value>glad_glFragmentColorMaterialSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTFSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTFSGIXPROC</name></type> <name>glad_glFragmentLightfSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightfSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightfSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTFVSGIXPROC</name></type> <name>glad_glFragmentLightfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightfvSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTISGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTISGIXPROC</name></type> <name>glad_glFragmentLightiSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightiSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightiSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTIVSGIXPROC</name></type> <name>glad_glFragmentLightivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightivSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightivSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTMODELFSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTMODELFSGIXPROC</name></type> <name>glad_glFragmentLightModelfSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightModelfSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightModelfSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTMODELFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTMODELFVSGIXPROC</name></type> <name>glad_glFragmentLightModelfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightModelfvSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightModelfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTMODELISGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTMODELISGIXPROC</name></type> <name>glad_glFragmentLightModeliSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightModeliSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightModeliSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTLIGHTMODELIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTLIGHTMODELIVSGIXPROC</name></type> <name>glad_glFragmentLightModelivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentLightModelivSGIX</name></cpp:macro> <cpp:value>glad_glFragmentLightModelivSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTMATERIALFSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTMATERIALFSGIXPROC</name></type> <name>glad_glFragmentMaterialfSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentMaterialfSGIX</name></cpp:macro> <cpp:value>glad_glFragmentMaterialfSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTMATERIALFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTMATERIALFVSGIXPROC</name></type> <name>glad_glFragmentMaterialfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentMaterialfvSGIX</name></cpp:macro> <cpp:value>glad_glFragmentMaterialfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTMATERIALISGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTMATERIALISGIXPROC</name></type> <name>glad_glFragmentMaterialiSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentMaterialiSGIX</name></cpp:macro> <cpp:value>glad_glFragmentMaterialiSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAGMENTMATERIALIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAGMENTMATERIALIVSGIXPROC</name></type> <name>glad_glFragmentMaterialivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFragmentMaterialivSGIX</name></cpp:macro> <cpp:value>glad_glFragmentMaterialivSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGMENTLIGHTFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGMENTLIGHTFVSGIXPROC</name></type> <name>glad_glGetFragmentLightfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragmentLightfvSGIX</name></cpp:macro> <cpp:value>glad_glGetFragmentLightfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGMENTLIGHTIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGMENTLIGHTIVSGIXPROC</name></type> <name>glad_glGetFragmentLightivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragmentLightivSGIX</name></cpp:macro> <cpp:value>glad_glGetFragmentLightivSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGMENTMATERIALFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGMENTMATERIALFVSGIXPROC</name></type> <name>glad_glGetFragmentMaterialfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragmentMaterialfvSGIX</name></cpp:macro> <cpp:value>glad_glGetFragmentMaterialfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGMENTMATERIALIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGMENTMATERIALIVSGIXPROC</name></type> <name>glad_glGetFragmentMaterialivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragmentMaterialivSGIX</name></cpp:macro> <cpp:value>glad_glGetFragmentMaterialivSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLIGHTENVISGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLIGHTENVISGIXPROC</name></type> <name>glad_glLightEnviSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightEnviSGIX</name></cpp:macro> <cpp:value>glad_glLightEnviSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_expand_normal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_expand_normal</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_expand_normal</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_framebuffer_multisample_coverage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_framebuffer_multisample_coverage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_framebuffer_multisample_coverage</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC</name></type> <name>glad_glRenderbufferStorageMultisampleCoverageNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageMultisampleCoverageNV</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageMultisampleCoverageNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_timer_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_timer_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_timer_query</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTI64VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTI64VEXTPROC</name></type> <name>glad_glGetQueryObjecti64vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjecti64vEXT</name></cpp:macro> <cpp:value>glad_glGetQueryObjecti64vEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUI64VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTUI64VEXTPROC</name></type> <name>glad_glGetQueryObjectui64vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectui64vEXT</name></cpp:macro> <cpp:value>glad_glGetQueryObjectui64vEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_array_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_array_bgra</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_array_bgra</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_bindless_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_bindless_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_bindless_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLuint64</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREHANDLENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREHANDLENVPROC</name></type> <name>glad_glGetTextureHandleNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureHandleNV</name></cpp:macro> <cpp:value>glad_glGetTextureHandleNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint64</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTURESAMPLERHANDLENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTURESAMPLERHANDLENVPROC</name></type> <name>glad_glGetTextureSamplerHandleNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureSamplerHandleNV</name></cpp:macro> <cpp:value>glad_glGetTextureSamplerHandleNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKETEXTUREHANDLERESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKETEXTUREHANDLERESIDENTNVPROC</name></type> <name>glad_glMakeTextureHandleResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeTextureHandleResidentNV</name></cpp:macro> <cpp:value>glad_glMakeTextureHandleResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC</name></type> <name>glad_glMakeTextureHandleNonResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeTextureHandleNonResidentNV</name></cpp:macro> <cpp:value>glad_glMakeTextureHandleNonResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint64</name></type> (<name>APIENTRYP</name> <name>PFNGLGETIMAGEHANDLENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETIMAGEHANDLENVPROC</name></type> <name>glad_glGetImageHandleNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetImageHandleNV</name></cpp:macro> <cpp:value>glad_glGetImageHandleNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKEIMAGEHANDLERESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKEIMAGEHANDLERESIDENTNVPROC</name></type> <name>glad_glMakeImageHandleResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeImageHandleResidentNV</name></cpp:macro> <cpp:value>glad_glMakeImageHandleResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC</name></type> <name>glad_glMakeImageHandleNonResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeImageHandleNonResidentNV</name></cpp:macro> <cpp:value>glad_glMakeImageHandleNonResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMHANDLEUI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMHANDLEUI64NVPROC</name></type> <name>glad_glUniformHandleui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformHandleui64NV</name></cpp:macro> <cpp:value>glad_glUniformHandleui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMHANDLEUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMHANDLEUI64VNVPROC</name></type> <name>glad_glUniformHandleui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformHandleui64vNV</name></cpp:macro> <cpp:value>glad_glUniformHandleui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC</name></type> <name>glad_glProgramUniformHandleui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformHandleui64NV</name></cpp:macro> <cpp:value>glad_glProgramUniformHandleui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC</name></type> <name>glad_glProgramUniformHandleui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformHandleui64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniformHandleui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTEXTUREHANDLERESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTEXTUREHANDLERESIDENTNVPROC</name></type> <name>glad_glIsTextureHandleResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTextureHandleResidentNV</name></cpp:macro> <cpp:value>glad_glIsTextureHandleResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISIMAGEHANDLERESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISIMAGEHANDLERESIDENTNVPROC</name></type> <name>glad_glIsImageHandleResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsImageHandleResidentNV</name></cpp:macro> <cpp:value>glad_glIsImageHandleResidentNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_debug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KHR_debug</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_KHR_debug</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPOINTERVPROC</name></type> <name>glad_glGetPointerv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointerv</name></cpp:macro> <cpp:value>glad_glGetPointerv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECONTROLKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECONTROLKHRPROC</name></type> <name>glad_glDebugMessageControlKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageControlKHR</name></cpp:macro> <cpp:value>glad_glDebugMessageControlKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEINSERTKHRPROC</name></type> <name>glad_glDebugMessageInsertKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsertKHR</name></cpp:macro> <cpp:value>glad_glDebugMessageInsertKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROCKHR</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECALLBACKKHRPROC</name></type> <name>glad_glDebugMessageCallbackKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallbackKHR</name></cpp:macro> <cpp:value>glad_glDebugMessageCallbackKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDEBUGMESSAGELOGKHRPROC</name></type> <name>glad_glGetDebugMessageLogKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLogKHR</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLogKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPUSHDEBUGGROUPKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPUSHDEBUGGROUPKHRPROC</name></type> <name>glad_glPushDebugGroupKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushDebugGroupKHR</name></cpp:macro> <cpp:value>glad_glPushDebugGroupKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOPDEBUGGROUPKHRPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOPDEBUGGROUPKHRPROC</name></type> <name>glad_glPopDebugGroupKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopDebugGroupKHR</name></cpp:macro> <cpp:value>glad_glPopDebugGroupKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLOBJECTLABELKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLOBJECTLABELKHRPROC</name></type> <name>glad_glObjectLabelKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectLabelKHR</name></cpp:macro> <cpp:value>glad_glObjectLabelKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTLABELKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTLABELKHRPROC</name></type> <name>glad_glGetObjectLabelKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectLabelKHR</name></cpp:macro> <cpp:value>glad_glGetObjectLabelKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLOBJECTPTRLABELKHRPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLOBJECTPTRLABELKHRPROC</name></type> <name>glad_glObjectPtrLabelKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectPtrLabelKHR</name></cpp:macro> <cpp:value>glad_glObjectPtrLabelKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTPTRLABELKHRPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTPTRLABELKHRPROC</name></type> <name>glad_glGetObjectPtrLabelKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectPtrLabelKHR</name></cpp:macro> <cpp:value>glad_glGetObjectPtrLabelKHR</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPOINTERVKHRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPOINTERVKHRPROC</name></type> <name>glad_glGetPointervKHR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointervKHR</name></cpp:macro> <cpp:value>glad_glGetPointervKHR</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_border_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_border_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture_border_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_attrib_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_attrib_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_vertex_attrib_array_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBARRAYOBJECTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBARRAYOBJECTATIPROC</name></type> <name>glad_glVertexAttribArrayObjectATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribArrayObjectATI</name></cpp:macro> <cpp:value>glad_glVertexAttribArrayObjectATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetVertexAttribArrayObjectfvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribArrayObjectfvATI</name></cpp:macro> <cpp:value>glad_glGetVertexAttribArrayObjectfvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetVertexAttribArrayObjectivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribArrayObjectivATI</name></cpp:macro> <cpp:value>glad_glGetVertexAttribArrayObjectivATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_clipmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_clipmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_clipmap</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_geometry_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_geometry_shader4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_geometry_shader4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_ycbcr_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_ycbcr_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_MESA_ycbcr_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESAX_texture_stack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESAX_texture_stack</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_MESAX_texture_stack</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_seamless_cubemap_per_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_seamless_cubemap_per_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_seamless_cubemap_per_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_bindable_uniform</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_bindable_uniform</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_bindable_uniform</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMBUFFEREXTPROC</name></type> <name>glad_glUniformBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformBufferEXT</name></cpp:macro> <cpp:value>glad_glUniformBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMBUFFERSIZEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMBUFFERSIZEEXTPROC</name></type> <name>glad_glGetUniformBufferSizeEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformBufferSizeEXT</name></cpp:macro> <cpp:value>glad_glGetUniformBufferSizeEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLintptr</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMOFFSETEXTPROC</name></type> <name>glad_glGetUniformOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformOffsetEXT</name></cpp:macro> <cpp:value>glad_glGetUniformOffsetEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_texture_compression_astc_hdr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KHR_texture_compression_astc_hdr</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_KHR_texture_compression_astc_hdr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_program_shadow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_program_shadow</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_program_shadow</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_element_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_element_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_element_array</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLELEMENTPOINTERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLELEMENTPOINTERATIPROC</name></type> <name>glad_glElementPointerATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glElementPointerATI</name></cpp:macro> <cpp:value>glad_glElementPointerATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTARRAYATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTARRAYATIPROC</name></type> <name>glad_glDrawElementArrayATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementArrayATI</name></cpp:macro> <cpp:value>glad_glDrawElementArrayATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTARRAYATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTARRAYATIPROC</name></type> <name>glad_glDrawRangeElementArrayATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementArrayATI</name></cpp:macro> <cpp:value>glad_glDrawRangeElementArrayATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_texture_texture4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_texture_texture4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_texture_texture4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_reference_plane</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_reference_plane</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_reference_plane</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREFERENCEPLANESGIXPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREFERENCEPLANESGIXPROC</name></type> <name>glad_glReferencePlaneSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReferencePlaneSGIX</name></cpp:macro> <cpp:value>glad_glReferencePlaneSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_stencil_two_side</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_stencil_two_side</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_stencil_two_side</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVESTENCILFACEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVESTENCILFACEEXTPROC</name></type> <name>glad_glActiveStencilFaceEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveStencilFaceEXT</name></cpp:macro> <cpp:value>glad_glActiveStencilFaceEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_lod_bias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_lod_bias</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_texture_lod_bias</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_explicit_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_explicit_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_explicit_multisample</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTISAMPLEFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTISAMPLEFVNVPROC</name></type> <name>glad_glGetMultisamplefvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultisamplefvNV</name></cpp:macro> <cpp:value>glad_glGetMultisamplefvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMASKINDEXEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMASKINDEXEDNVPROC</name></type> <name>glad_glSampleMaskIndexedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMaskIndexedNV</name></cpp:macro> <cpp:value>glad_glSampleMaskIndexedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXRENDERBUFFERNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXRENDERBUFFERNVPROC</name></type> <name>glad_glTexRenderbufferNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexRenderbufferNV</name></cpp:macro> <cpp:value>glad_glTexRenderbufferNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_static_data</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_static_data</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_IBM_static_data</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHSTATICDATAIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHSTATICDATAIBMPROC</name></type> <name>glad_glFlushStaticDataIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushStaticDataIBM</name></cpp:macro> <cpp:value>glad_glFlushStaticDataIBM</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_clip_volume_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_clip_volume_hint</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_clip_volume_hint</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_perturb_normal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_perturb_normal</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_perturb_normal</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURENORMALEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURENORMALEXTPROC</name></type> <name>glad_glTextureNormalEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureNormalEXT</name></cpp:macro> <cpp:value>glad_glTextureNormalEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_fragment_program2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_fragment_program4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_point_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_point_parameters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_point_parameters</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFEXTPROC</name></type> <name>glad_glPointParameterfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfEXT</name></cpp:macro> <cpp:value>glad_glPointParameterfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFVEXTPROC</name></type> <name>glad_glPointParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfvEXT</name></cpp:macro> <cpp:value>glad_glPointParameterfvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_PGI_misc_hints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PGI_misc_hints</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_PGI_misc_hints</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLHINTPGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLHINTPGIPROC</name></type> <name>glad_glHintPGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glHintPGI</name></cpp:macro> <cpp:value>glad_glHintPGI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_subsample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_subsample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_subsample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_shader_stencil_export</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_shader_stencil_export</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_shader_stencil_export</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_texture_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_texture_lod</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_texture_lod</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_shader</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDATTRIBLOCATIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDATTRIBLOCATIONARBPROC</name></type> <name>glad_glBindAttribLocationARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindAttribLocationARB</name></cpp:macro> <cpp:value>glad_glBindAttribLocationARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEATTRIBARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEATTRIBARBPROC</name></type> <name>glad_glGetActiveAttribARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveAttribARB</name></cpp:macro> <cpp:value>glad_glGetActiveAttribARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTRIBLOCATIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLcharARB</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTRIBLOCATIONARBPROC</name></type> <name>glad_glGetAttribLocationARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttribLocationARB</name></cpp:macro> <cpp:value>glad_glGetAttribLocationARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_depth_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_select</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_select</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture_select</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texture_shader</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_tessellation_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_tessellation_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_tessellation_shader</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_buffers2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_buffers2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_draw_buffers2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORMASKINDEXEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORMASKINDEXEDEXTPROC</name></type> <name>glad_glColorMaskIndexedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMaskIndexedEXT</name></cpp:macro> <cpp:value>glad_glColorMaskIndexedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBOOLEANINDEXEDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBOOLEANINDEXEDVEXTPROC</name></type> <name>glad_glGetBooleanIndexedvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleanIndexedvEXT</name></cpp:macro> <cpp:value>glad_glGetBooleanIndexedvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERINDEXEDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERINDEXEDVEXTPROC</name></type> <name>glad_glGetIntegerIndexedvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegerIndexedvEXT</name></cpp:macro> <cpp:value>glad_glGetIntegerIndexedvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEINDEXEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEINDEXEDEXTPROC</name></type> <name>glad_glEnableIndexedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableIndexedEXT</name></cpp:macro> <cpp:value>glad_glEnableIndexedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEINDEXEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEINDEXEDEXTPROC</name></type> <name>glad_glDisableIndexedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableIndexedEXT</name></cpp:macro> <cpp:value>glad_glDisableIndexedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISENABLEDINDEXEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISENABLEDINDEXEDEXTPROC</name></type> <name>glad_glIsEnabledIndexedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabledIndexedEXT</name></cpp:macro> <cpp:value>glad_glIsEnabledIndexedEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_attrib_64bit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_attrib_64bit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_attrib_64bit</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_WIN_specular_fog</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WIN_specular_fog</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_WIN_specular_fog</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_interleaved_elements</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_interleaved_elements</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_interleaved_elements</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBPARAMETERIAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBPARAMETERIAMDPROC</name></type> <name>glad_glVertexAttribParameteriAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribParameteriAMD</name></cpp:macro> <cpp:value>glad_glVertexAttribParameteriAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_program</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_program</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OML_resample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OML_resample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OML_resample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_ycbcr_422</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_ycbcr_422</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_ycbcr_422</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_add_env</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_add_env</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_texture_add_env</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shadow_ambient</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shadow_ambient</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shadow_ambient</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_storage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_pixel_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_pixel_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_pixel_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_copy_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_copy_image</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_pixel_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_pixel_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_pixel_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTEXGENPARAMETERISGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTEXGENPARAMETERISGISPROC</name></type> <name>glad_glPixelTexGenParameteriSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTexGenParameteriSGIS</name></cpp:macro> <cpp:value>glad_glPixelTexGenParameteriSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTEXGENPARAMETERIVSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTEXGENPARAMETERIVSGISPROC</name></type> <name>glad_glPixelTexGenParameterivSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTexGenParameterivSGIS</name></cpp:macro> <cpp:value>glad_glPixelTexGenParameterivSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTEXGENPARAMETERFSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTEXGENPARAMETERFSGISPROC</name></type> <name>glad_glPixelTexGenParameterfSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTexGenParameterfSGIS</name></cpp:macro> <cpp:value>glad_glPixelTexGenParameterfSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTEXGENPARAMETERFVSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTEXGENPARAMETERFVSGISPROC</name></type> <name>glad_glPixelTexGenParameterfvSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTexGenParameterfvSGIS</name></cpp:macro> <cpp:value>glad_glPixelTexGenParameterfvSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC</name></type> <name>glad_glGetPixelTexGenParameterivSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelTexGenParameterivSGIS</name></cpp:macro> <cpp:value>glad_glGetPixelTexGenParameterivSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC</name></type> <name>glad_glGetPixelTexGenParameterfvSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelTexGenParameterfvSGIS</name></cpp:macro> <cpp:value>glad_glGetPixelTexGenParameterfvSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_generate_mipmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_generate_mipmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_generate_mipmap</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_instruments</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_instruments</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_instruments</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINSTRUMENTSSGIXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINSTRUMENTSSGIXPROC</name></type> <name>glad_glGetInstrumentsSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInstrumentsSGIX</name></cpp:macro> <cpp:value>glad_glGetInstrumentsSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINSTRUMENTSBUFFERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINSTRUMENTSBUFFERSGIXPROC</name></type> <name>glad_glInstrumentsBufferSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInstrumentsBufferSGIX</name></cpp:macro> <cpp:value>glad_glInstrumentsBufferSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLLINSTRUMENTSSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLLINSTRUMENTSSGIXPROC</name></type> <name>glad_glPollInstrumentsSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPollInstrumentsSGIX</name></cpp:macro> <cpp:value>glad_glPollInstrumentsSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREADINSTRUMENTSSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREADINSTRUMENTSSGIXPROC</name></type> <name>glad_glReadInstrumentsSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadInstrumentsSGIX</name></cpp:macro> <cpp:value>glad_glReadInstrumentsSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTARTINSTRUMENTSSGIXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTARTINSTRUMENTSSGIXPROC</name></type> <name>glad_glStartInstrumentsSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStartInstrumentsSGIX</name></cpp:macro> <cpp:value>glad_glStartInstrumentsSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTOPINSTRUMENTSSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTOPINSTRUMENTSSGIXPROC</name></type> <name>glad_glStopInstrumentsSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStopInstrumentsSGIX</name></cpp:macro> <cpp:value>glad_glStopInstrumentsSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_texture_lighting</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_texture_lighting</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_HP_texture_lighting</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_storage_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_storage_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_storage_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_minmax</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_minmax</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONEXTPROC</name></type> <name>glad_glBlendEquationEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationEXT</name></cpp:macro> <cpp:value>glad_glBlendEquationEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_pack_invert</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_pack_invert</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_MESA_pack_invert</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_base_instance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_base_instance</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_base_instance</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_convolution_accuracy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_convolution_accuracy</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_convolution_accuracy</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_PGI_vertex_hints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PGI_vertex_hints</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_PGI_vertex_hints</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_integer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_integer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_integer</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIIVEXTPROC</name></type> <name>glad_glTexParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIivEXT</name></cpp:macro> <cpp:value>glad_glTexParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIUIVEXTPROC</name></type> <name>glad_glTexParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glTexParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIIVEXTPROC</name></type> <name>glad_glGetTexParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIivEXT</name></cpp:macro> <cpp:value>glad_glGetTexParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIUIVEXTPROC</name></type> <name>glad_glGetTexParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glGetTexParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARCOLORIIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARCOLORIIEXTPROC</name></type> <name>glad_glClearColorIiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearColorIiEXT</name></cpp:macro> <cpp:value>glad_glClearColorIiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARCOLORIUIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARCOLORIUIEXTPROC</name></type> <name>glad_glClearColorIuiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearColorIuiEXT</name></cpp:macro> <cpp:value>glad_glClearColorIuiEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_S3_s3tc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_S3_s3tc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_S3_s3tc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_query_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_query_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_query_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_vertex_shader_tessellator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_vertex_shader_tessellator</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_vertex_shader_tessellator</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTESSELLATIONFACTORAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTESSELLATIONFACTORAMDPROC</name></type> <name>glad_glTessellationFactorAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTessellationFactorAMD</name></cpp:macro> <cpp:value>glad_glTessellationFactorAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTESSELLATIONMODEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTESSELLATIONMODEAMDPROC</name></type> <name>glad_glTessellationModeAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTessellationModeAMD</name></cpp:macro> <cpp:value>glad_glTessellationModeAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_invalidate_subdata</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_invalidate_subdata</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_invalidate_subdata</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_material</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_material</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_index_material</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXMATERIALEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXMATERIALEXTPROC</name></type> <name>glad_glIndexMaterialEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexMaterialEXT</name></cpp:macro> <cpp:value>glad_glIndexMaterialEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_blend_equation_advanced_coherent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_blend_equation_advanced_coherent</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_blend_equation_advanced_coherent</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INTEL_parallel_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTEL_parallel_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INTEL_parallel_arrays</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXPOINTERVINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXPOINTERVINTELPROC</name></type> <name>glad_glVertexPointervINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexPointervINTEL</name></cpp:macro> <cpp:value>glad_glVertexPointervINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALPOINTERVINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALPOINTERVINTELPROC</name></type> <name>glad_glNormalPointervINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalPointervINTEL</name></cpp:macro> <cpp:value>glad_glNormalPointervINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORPOINTERVINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORPOINTERVINTELPROC</name></type> <name>glad_glColorPointervINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorPointervINTEL</name></cpp:macro> <cpp:value>glad_glColorPointervINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDPOINTERVINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDPOINTERVINTELPROC</name></type> <name>glad_glTexCoordPointervINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordPointervINTEL</name></cpp:macro> <cpp:value>glad_glTexCoordPointervINTEL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_draw_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_draw_buffers</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERSATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERSATIPROC</name></type> <name>glad_glDrawBuffersATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffersATI</name></cpp:macro> <cpp:value>glad_glDrawBuffersATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_cmyka</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_cmyka</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_cmyka</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_pixel_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_pixel_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_pixel_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTEXGENSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTEXGENSGIXPROC</name></type> <name>glad_glPixelTexGenSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTexGenSGIX</name></cpp:macro> <cpp:value>glad_glPixelTexGenSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_specular_vector</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_specular_vector</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_specular_vector</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compatibility</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_compatibility</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_timer_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_timer_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_timer_query</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_interlace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_interlace</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_interlace</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_parameter_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_parameter_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_parameter_buffer_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC</name></type> <name>glad_glProgramBufferParametersfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramBufferParametersfvNV</name></cpp:macro> <cpp:value>glad_glProgramBufferParametersfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC</name></type> <name>glad_glProgramBufferParametersIivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramBufferParametersIivNV</name></cpp:macro> <cpp:value>glad_glProgramBufferParametersIivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC</name></type> <name>glad_glProgramBufferParametersIuivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramBufferParametersIuivNV</name></cpp:macro> <cpp:value>glad_glProgramBufferParametersIuivNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_shader_trinary_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_shader_trinary_minmax</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_shader_trinary_minmax</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_rescale_normal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_rescale_normal</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_rescale_normal</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_pixel_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_pixel_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_pixel_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_uniform_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_uniform_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_uniform_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_type_10f_11f_11f_rev</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_type_10f_11f_11f_rev</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_type_10f_11f_11f_rev</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_swizzle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_swizzle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_swizzle</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_transform_feedback2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_transform_feedback2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_transform_feedback2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTRANSFORMFEEDBACKNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glBindTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glBindTransformFeedbackNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETETRANSFORMFEEDBACKSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETETRANSFORMFEEDBACKSNVPROC</name></type> <name>glad_glDeleteTransformFeedbacksNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteTransformFeedbacksNV</name></cpp:macro> <cpp:value>glad_glDeleteTransformFeedbacksNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENTRANSFORMFEEDBACKSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENTRANSFORMFEEDBACKSNVPROC</name></type> <name>glad_glGenTransformFeedbacksNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenTransformFeedbacksNV</name></cpp:macro> <cpp:value>glad_glGenTransformFeedbacksNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTRANSFORMFEEDBACKNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glIsTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glIsTransformFeedbackNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPAUSETRANSFORMFEEDBACKNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPAUSETRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glPauseTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPauseTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glPauseTransformFeedbackNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESUMETRANSFORMFEEDBACKNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESUMETRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glResumeTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResumeTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glResumeTransformFeedbackNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWTRANSFORMFEEDBACKNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWTRANSFORMFEEDBACKNVPROC</name></type> <name>glad_glDrawTransformFeedbackNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawTransformFeedbackNV</name></cpp:macro> <cpp:value>glad_glDrawTransformFeedbackNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_async_pixel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_async_pixel</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_async_pixel</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program_option</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program_option</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_fragment_program_option</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_explicit_attrib_location</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_explicit_attrib_location</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_explicit_attrib_location</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_color</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_color</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDCOLOREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDCOLOREXTPROC</name></type> <name>glad_glBlendColorEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendColorEXT</name></cpp:macro> <cpp:value>glad_glBlendColorEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_thread_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_thread_group</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_thread_group</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_stencil_wrap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_stencil_wrap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_stencil_wrap</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_array_formats</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_array_formats</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_index_array_formats</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_histogram</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_histogram</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_histogram</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMEXTPROC</name></type> <name>glad_glGetHistogramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogramEXT</name></cpp:macro> <cpp:value>glad_glGetHistogramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMPARAMETERFVEXTPROC</name></type> <name>glad_glGetHistogramParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogramParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetHistogramParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMPARAMETERIVEXTPROC</name></type> <name>glad_glGetHistogramParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogramParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetHistogramParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMINMAXEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMINMAXEXTPROC</name></type> <name>glad_glGetMinmaxEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMinmaxEXT</name></cpp:macro> <cpp:value>glad_glGetMinmaxEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMINMAXPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMINMAXPARAMETERFVEXTPROC</name></type> <name>glad_glGetMinmaxParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMinmaxParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetMinmaxParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMINMAXPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMINMAXPARAMETERIVEXTPROC</name></type> <name>glad_glGetMinmaxParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMinmaxParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetMinmaxParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLHISTOGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLHISTOGRAMEXTPROC</name></type> <name>glad_glHistogramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glHistogramEXT</name></cpp:macro> <cpp:value>glad_glHistogramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMINMAXEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMINMAXEXTPROC</name></type> <name>glad_glMinmaxEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMinmaxEXT</name></cpp:macro> <cpp:value>glad_glMinmaxEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESETHISTOGRAMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESETHISTOGRAMEXTPROC</name></type> <name>glad_glResetHistogramEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResetHistogramEXT</name></cpp:macro> <cpp:value>glad_glResetHistogramEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESETMINMAXEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESETMINMAXEXTPROC</name></type> <name>glad_glResetMinmaxEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResetMinmaxEXT</name></cpp:macro> <cpp:value>glad_glResetMinmaxEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_point_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_point_parameters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_point_parameters</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFSGISPROC</name></type> <name>glad_glPointParameterfSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfSGIS</name></cpp:macro> <cpp:value>glad_glPointParameterfSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFVSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFVSGISPROC</name></type> <name>glad_glPointParameterfvSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfvSGIS</name></cpp:macro> <cpp:value>glad_glPointParameterfvSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_direct_state_access</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_direct_state_access</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_direct_state_access</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXLOADFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXLOADFEXTPROC</name></type> <name>glad_glMatrixLoadfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixLoadfEXT</name></cpp:macro> <cpp:value>glad_glMatrixLoadfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXLOADDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXLOADDEXTPROC</name></type> <name>glad_glMatrixLoaddEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixLoaddEXT</name></cpp:macro> <cpp:value>glad_glMatrixLoaddEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXMULTFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXMULTFEXTPROC</name></type> <name>glad_glMatrixMultfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixMultfEXT</name></cpp:macro> <cpp:value>glad_glMatrixMultfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXMULTDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXMULTDEXTPROC</name></type> <name>glad_glMatrixMultdEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixMultdEXT</name></cpp:macro> <cpp:value>glad_glMatrixMultdEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXLOADIDENTITYEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXLOADIDENTITYEXTPROC</name></type> <name>glad_glMatrixLoadIdentityEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixLoadIdentityEXT</name></cpp:macro> <cpp:value>glad_glMatrixLoadIdentityEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXROTATEFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXROTATEFEXTPROC</name></type> <name>glad_glMatrixRotatefEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixRotatefEXT</name></cpp:macro> <cpp:value>glad_glMatrixRotatefEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXROTATEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXROTATEDEXTPROC</name></type> <name>glad_glMatrixRotatedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixRotatedEXT</name></cpp:macro> <cpp:value>glad_glMatrixRotatedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXSCALEFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXSCALEFEXTPROC</name></type> <name>glad_glMatrixScalefEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixScalefEXT</name></cpp:macro> <cpp:value>glad_glMatrixScalefEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXSCALEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXSCALEDEXTPROC</name></type> <name>glad_glMatrixScaledEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixScaledEXT</name></cpp:macro> <cpp:value>glad_glMatrixScaledEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXTRANSLATEFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXTRANSLATEFEXTPROC</name></type> <name>glad_glMatrixTranslatefEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixTranslatefEXT</name></cpp:macro> <cpp:value>glad_glMatrixTranslatefEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXTRANSLATEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXTRANSLATEDEXTPROC</name></type> <name>glad_glMatrixTranslatedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixTranslatedEXT</name></cpp:macro> <cpp:value>glad_glMatrixTranslatedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXFRUSTUMEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXFRUSTUMEXTPROC</name></type> <name>glad_glMatrixFrustumEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixFrustumEXT</name></cpp:macro> <cpp:value>glad_glMatrixFrustumEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXORTHOEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXORTHOEXTPROC</name></type> <name>glad_glMatrixOrthoEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixOrthoEXT</name></cpp:macro> <cpp:value>glad_glMatrixOrthoEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXPOPEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXPOPEXTPROC</name></type> <name>glad_glMatrixPopEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixPopEXT</name></cpp:macro> <cpp:value>glad_glMatrixPopEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXPUSHEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXPUSHEXTPROC</name></type> <name>glad_glMatrixPushEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixPushEXT</name></cpp:macro> <cpp:value>glad_glMatrixPushEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIENTATTRIBDEFAULTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIENTATTRIBDEFAULTEXTPROC</name></type> <name>glad_glClientAttribDefaultEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientAttribDefaultEXT</name></cpp:macro> <cpp:value>glad_glClientAttribDefaultEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC</name></type> <name>glad_glPushClientAttribDefaultEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushClientAttribDefaultEXT</name></cpp:macro> <cpp:value>glad_glPushClientAttribDefaultEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPARAMETERFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPARAMETERFEXTPROC</name></type> <name>glad_glTextureParameterfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureParameterfEXT</name></cpp:macro> <cpp:value>glad_glTextureParameterfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPARAMETERFVEXTPROC</name></type> <name>glad_glTextureParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureParameterfvEXT</name></cpp:macro> <cpp:value>glad_glTextureParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPARAMETERIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPARAMETERIEXTPROC</name></type> <name>glad_glTextureParameteriEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureParameteriEXT</name></cpp:macro> <cpp:value>glad_glTextureParameteriEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPARAMETERIVEXTPROC</name></type> <name>glad_glTextureParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureParameterivEXT</name></cpp:macro> <cpp:value>glad_glTextureParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE1DEXTPROC</name></type> <name>glad_glTextureImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage1DEXT</name></cpp:macro> <cpp:value>glad_glTextureImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE2DEXTPROC</name></type> <name>glad_glTextureImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage2DEXT</name></cpp:macro> <cpp:value>glad_glTextureImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESUBIMAGE1DEXTPROC</name></type> <name>glad_glTextureSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glTextureSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESUBIMAGE2DEXTPROC</name></type> <name>glad_glTextureSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glTextureSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXTUREIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXTUREIMAGE1DEXTPROC</name></type> <name>glad_glCopyTextureImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTextureImage1DEXT</name></cpp:macro> <cpp:value>glad_glCopyTextureImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXTUREIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXTUREIMAGE2DEXTPROC</name></type> <name>glad_glCopyTextureImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTextureImage2DEXT</name></cpp:macro> <cpp:value>glad_glCopyTextureImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC</name></type> <name>glad_glCopyTextureSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTextureSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glCopyTextureSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC</name></type> <name>glad_glCopyTextureSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTextureSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glCopyTextureSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREIMAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREIMAGEEXTPROC</name></type> <name>glad_glGetTextureImageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureImageEXT</name></cpp:macro> <cpp:value>glad_glGetTextureImageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREPARAMETERFVEXTPROC</name></type> <name>glad_glGetTextureParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetTextureParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREPARAMETERIVEXTPROC</name></type> <name>glad_glGetTextureParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetTextureParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC</name></type> <name>glad_glGetTextureLevelParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureLevelParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetTextureLevelParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC</name></type> <name>glad_glGetTextureLevelParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureLevelParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetTextureLevelParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREIMAGE3DEXTPROC</name></type> <name>glad_glTextureImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureImage3DEXT</name></cpp:macro> <cpp:value>glad_glTextureImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESUBIMAGE3DEXTPROC</name></type> <name>glad_glTextureSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glTextureSubImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC</name></type> <name>glad_glCopyTextureSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTextureSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glCopyTextureSubImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDMULTITEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDMULTITEXTUREEXTPROC</name></type> <name>glad_glBindMultiTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindMultiTextureEXT</name></cpp:macro> <cpp:value>glad_glBindMultiTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDPOINTEREXTPROC</name></type> <name>glad_glMultiTexCoordPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordPointerEXT</name></cpp:macro> <cpp:value>glad_glMultiTexCoordPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXENVFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXENVFEXTPROC</name></type> <name>glad_glMultiTexEnvfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexEnvfEXT</name></cpp:macro> <cpp:value>glad_glMultiTexEnvfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXENVFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXENVFVEXTPROC</name></type> <name>glad_glMultiTexEnvfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexEnvfvEXT</name></cpp:macro> <cpp:value>glad_glMultiTexEnvfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXENVIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXENVIEXTPROC</name></type> <name>glad_glMultiTexEnviEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexEnviEXT</name></cpp:macro> <cpp:value>glad_glMultiTexEnviEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXENVIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXENVIVEXTPROC</name></type> <name>glad_glMultiTexEnvivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexEnvivEXT</name></cpp:macro> <cpp:value>glad_glMultiTexEnvivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXGENDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXGENDEXTPROC</name></type> <name>glad_glMultiTexGendEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexGendEXT</name></cpp:macro> <cpp:value>glad_glMultiTexGendEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXGENDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXGENDVEXTPROC</name></type> <name>glad_glMultiTexGendvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexGendvEXT</name></cpp:macro> <cpp:value>glad_glMultiTexGendvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXGENFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXGENFEXTPROC</name></type> <name>glad_glMultiTexGenfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexGenfEXT</name></cpp:macro> <cpp:value>glad_glMultiTexGenfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXGENFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXGENFVEXTPROC</name></type> <name>glad_glMultiTexGenfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexGenfvEXT</name></cpp:macro> <cpp:value>glad_glMultiTexGenfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXGENIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXGENIEXTPROC</name></type> <name>glad_glMultiTexGeniEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexGeniEXT</name></cpp:macro> <cpp:value>glad_glMultiTexGeniEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXGENIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXGENIVEXTPROC</name></type> <name>glad_glMultiTexGenivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexGenivEXT</name></cpp:macro> <cpp:value>glad_glMultiTexGenivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXENVFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXENVFVEXTPROC</name></type> <name>glad_glGetMultiTexEnvfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexEnvfvEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexEnvfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXENVIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXENVIVEXTPROC</name></type> <name>glad_glGetMultiTexEnvivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexEnvivEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexEnvivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXGENDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXGENDVEXTPROC</name></type> <name>glad_glGetMultiTexGendvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexGendvEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexGendvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXGENFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXGENFVEXTPROC</name></type> <name>glad_glGetMultiTexGenfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexGenfvEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexGenfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXGENIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXGENIVEXTPROC</name></type> <name>glad_glGetMultiTexGenivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexGenivEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexGenivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXPARAMETERIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXPARAMETERIEXTPROC</name></type> <name>glad_glMultiTexParameteriEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexParameteriEXT</name></cpp:macro> <cpp:value>glad_glMultiTexParameteriEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXPARAMETERIVEXTPROC</name></type> <name>glad_glMultiTexParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexParameterivEXT</name></cpp:macro> <cpp:value>glad_glMultiTexParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXPARAMETERFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXPARAMETERFEXTPROC</name></type> <name>glad_glMultiTexParameterfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexParameterfEXT</name></cpp:macro> <cpp:value>glad_glMultiTexParameterfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXPARAMETERFVEXTPROC</name></type> <name>glad_glMultiTexParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexParameterfvEXT</name></cpp:macro> <cpp:value>glad_glMultiTexParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXIMAGE1DEXTPROC</name></type> <name>glad_glMultiTexImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexImage1DEXT</name></cpp:macro> <cpp:value>glad_glMultiTexImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXIMAGE2DEXTPROC</name></type> <name>glad_glMultiTexImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexImage2DEXT</name></cpp:macro> <cpp:value>glad_glMultiTexImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXSUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXSUBIMAGE1DEXTPROC</name></type> <name>glad_glMultiTexSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glMultiTexSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXSUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXSUBIMAGE2DEXTPROC</name></type> <name>glad_glMultiTexSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glMultiTexSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYMULTITEXIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYMULTITEXIMAGE1DEXTPROC</name></type> <name>glad_glCopyMultiTexImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyMultiTexImage1DEXT</name></cpp:macro> <cpp:value>glad_glCopyMultiTexImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYMULTITEXIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYMULTITEXIMAGE2DEXTPROC</name></type> <name>glad_glCopyMultiTexImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyMultiTexImage2DEXT</name></cpp:macro> <cpp:value>glad_glCopyMultiTexImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC</name></type> <name>glad_glCopyMultiTexSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyMultiTexSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glCopyMultiTexSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC</name></type> <name>glad_glCopyMultiTexSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyMultiTexSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glCopyMultiTexSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXIMAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXIMAGEEXTPROC</name></type> <name>glad_glGetMultiTexImageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexImageEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexImageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXPARAMETERFVEXTPROC</name></type> <name>glad_glGetMultiTexParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXPARAMETERIVEXTPROC</name></type> <name>glad_glGetMultiTexParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC</name></type> <name>glad_glGetMultiTexLevelParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexLevelParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexLevelParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC</name></type> <name>glad_glGetMultiTexLevelParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexLevelParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexLevelParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXIMAGE3DEXTPROC</name></type> <name>glad_glMultiTexImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexImage3DEXT</name></cpp:macro> <cpp:value>glad_glMultiTexImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXSUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXSUBIMAGE3DEXTPROC</name></type> <name>glad_glMultiTexSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glMultiTexSubImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC</name></type> <name>glad_glCopyMultiTexSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyMultiTexSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glCopyMultiTexSubImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLECLIENTSTATEINDEXEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLECLIENTSTATEINDEXEDEXTPROC</name></type> <name>glad_glEnableClientStateIndexedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableClientStateIndexedEXT</name></cpp:macro> <cpp:value>glad_glEnableClientStateIndexedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC</name></type> <name>glad_glDisableClientStateIndexedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableClientStateIndexedEXT</name></cpp:macro> <cpp:value>glad_glDisableClientStateIndexedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFLOATINDEXEDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFLOATINDEXEDVEXTPROC</name></type> <name>glad_glGetFloatIndexedvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFloatIndexedvEXT</name></cpp:macro> <cpp:value>glad_glGetFloatIndexedvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDOUBLEINDEXEDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDOUBLEINDEXEDVEXTPROC</name></type> <name>glad_glGetDoubleIndexedvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDoubleIndexedvEXT</name></cpp:macro> <cpp:value>glad_glGetDoubleIndexedvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPOINTERINDEXEDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPOINTERINDEXEDVEXTPROC</name></type> <name>glad_glGetPointerIndexedvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointerIndexedvEXT</name></cpp:macro> <cpp:value>glad_glGetPointerIndexedvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC</name></type> <name>glad_glCompressedTextureImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTextureImage3DEXT</name></cpp:macro> <cpp:value>glad_glCompressedTextureImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC</name></type> <name>glad_glCompressedTextureImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTextureImage2DEXT</name></cpp:macro> <cpp:value>glad_glCompressedTextureImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC</name></type> <name>glad_glCompressedTextureImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTextureImage1DEXT</name></cpp:macro> <cpp:value>glad_glCompressedTextureImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC</name></type> <name>glad_glCompressedTextureSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTextureSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glCompressedTextureSubImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC</name></type> <name>glad_glCompressedTextureSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTextureSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glCompressedTextureSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC</name></type> <name>glad_glCompressedTextureSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTextureSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glCompressedTextureSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC</name></type> <name>glad_glGetCompressedTextureImageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedTextureImageEXT</name></cpp:macro> <cpp:value>glad_glGetCompressedTextureImageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC</name></type> <name>glad_glCompressedMultiTexImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedMultiTexImage3DEXT</name></cpp:macro> <cpp:value>glad_glCompressedMultiTexImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC</name></type> <name>glad_glCompressedMultiTexImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedMultiTexImage2DEXT</name></cpp:macro> <cpp:value>glad_glCompressedMultiTexImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC</name></type> <name>glad_glCompressedMultiTexImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedMultiTexImage1DEXT</name></cpp:macro> <cpp:value>glad_glCompressedMultiTexImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC</name></type> <name>glad_glCompressedMultiTexSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedMultiTexSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glCompressedMultiTexSubImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC</name></type> <name>glad_glCompressedMultiTexSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedMultiTexSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glCompressedMultiTexSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC</name></type> <name>glad_glCompressedMultiTexSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedMultiTexSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glCompressedMultiTexSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC</name></type> <name>glad_glGetCompressedMultiTexImageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedMultiTexImageEXT</name></cpp:macro> <cpp:value>glad_glGetCompressedMultiTexImageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXLOADTRANSPOSEFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXLOADTRANSPOSEFEXTPROC</name></type> <name>glad_glMatrixLoadTransposefEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixLoadTransposefEXT</name></cpp:macro> <cpp:value>glad_glMatrixLoadTransposefEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXLOADTRANSPOSEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXLOADTRANSPOSEDEXTPROC</name></type> <name>glad_glMatrixLoadTransposedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixLoadTransposedEXT</name></cpp:macro> <cpp:value>glad_glMatrixLoadTransposedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXMULTTRANSPOSEFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXMULTTRANSPOSEFEXTPROC</name></type> <name>glad_glMatrixMultTransposefEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixMultTransposefEXT</name></cpp:macro> <cpp:value>glad_glMatrixMultTransposefEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXMULTTRANSPOSEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXMULTTRANSPOSEDEXTPROC</name></type> <name>glad_glMatrixMultTransposedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixMultTransposedEXT</name></cpp:macro> <cpp:value>glad_glMatrixMultTransposedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDBUFFERDATAEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDBUFFERDATAEXTPROC</name></type> <name>glad_glNamedBufferDataEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedBufferDataEXT</name></cpp:macro> <cpp:value>glad_glNamedBufferDataEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDBUFFERSUBDATAEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDBUFFERSUBDATAEXTPROC</name></type> <name>glad_glNamedBufferSubDataEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedBufferSubDataEXT</name></cpp:macro> <cpp:value>glad_glNamedBufferSubDataEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPNAMEDBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPNAMEDBUFFEREXTPROC</name></type> <name>glad_glMapNamedBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapNamedBufferEXT</name></cpp:macro> <cpp:value>glad_glMapNamedBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPNAMEDBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPNAMEDBUFFEREXTPROC</name></type> <name>glad_glUnmapNamedBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapNamedBufferEXT</name></cpp:macro> <cpp:value>glad_glUnmapNamedBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetNamedBufferParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedBufferParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedBufferParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDBUFFERPOINTERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDBUFFERPOINTERVEXTPROC</name></type> <name>glad_glGetNamedBufferPointervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedBufferPointervEXT</name></cpp:macro> <cpp:value>glad_glGetNamedBufferPointervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDBUFFERSUBDATAEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDBUFFERSUBDATAEXTPROC</name></type> <name>glad_glGetNamedBufferSubDataEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedBufferSubDataEXT</name></cpp:macro> <cpp:value>glad_glGetNamedBufferSubDataEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREBUFFEREXTPROC</name></type> <name>glad_glTextureBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureBufferEXT</name></cpp:macro> <cpp:value>glad_glTextureBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXBUFFEREXTPROC</name></type> <name>glad_glMultiTexBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexBufferEXT</name></cpp:macro> <cpp:value>glad_glMultiTexBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPARAMETERIIVEXTPROC</name></type> <name>glad_glTextureParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureParameterIivEXT</name></cpp:macro> <cpp:value>glad_glTextureParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPARAMETERIUIVEXTPROC</name></type> <name>glad_glTextureParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glTextureParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREPARAMETERIIVEXTPROC</name></type> <name>glad_glGetTextureParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureParameterIivEXT</name></cpp:macro> <cpp:value>glad_glGetTextureParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREPARAMETERIUIVEXTPROC</name></type> <name>glad_glGetTextureParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glGetTextureParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXPARAMETERIIVEXTPROC</name></type> <name>glad_glMultiTexParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexParameterIivEXT</name></cpp:macro> <cpp:value>glad_glMultiTexParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXPARAMETERIUIVEXTPROC</name></type> <name>glad_glMultiTexParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glMultiTexParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXPARAMETERIIVEXTPROC</name></type> <name>glad_glGetMultiTexParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexParameterIivEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTITEXPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTITEXPARAMETERIUIVEXTPROC</name></type> <name>glad_glGetMultiTexParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultiTexParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glGetMultiTexParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC</name></type> <name>glad_glNamedProgramLocalParameters4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameters4fvEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameters4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC</name></type> <name>glad_glNamedProgramLocalParameterI4iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameterI4iEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameterI4iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC</name></type> <name>glad_glNamedProgramLocalParameterI4ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameterI4ivEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameterI4ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC</name></type> <name>glad_glNamedProgramLocalParametersI4ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParametersI4ivEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParametersI4ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC</name></type> <name>glad_glNamedProgramLocalParameterI4uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameterI4uiEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameterI4uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC</name></type> <name>glad_glNamedProgramLocalParameterI4uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameterI4uivEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameterI4uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC</name></type> <name>glad_glNamedProgramLocalParametersI4uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParametersI4uivEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParametersI4uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC</name></type> <name>glad_glGetNamedProgramLocalParameterIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedProgramLocalParameterIivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedProgramLocalParameterIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC</name></type> <name>glad_glGetNamedProgramLocalParameterIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedProgramLocalParameterIuivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedProgramLocalParameterIuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLECLIENTSTATEIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLECLIENTSTATEIEXTPROC</name></type> <name>glad_glEnableClientStateiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableClientStateiEXT</name></cpp:macro> <cpp:value>glad_glEnableClientStateiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLECLIENTSTATEIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLECLIENTSTATEIEXTPROC</name></type> <name>glad_glDisableClientStateiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableClientStateiEXT</name></cpp:macro> <cpp:value>glad_glDisableClientStateiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFLOATI_VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFLOATI_VEXTPROC</name></type> <name>glad_glGetFloati_vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFloati_vEXT</name></cpp:macro> <cpp:value>glad_glGetFloati_vEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDOUBLEI_VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDOUBLEI_VEXTPROC</name></type> <name>glad_glGetDoublei_vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDoublei_vEXT</name></cpp:macro> <cpp:value>glad_glGetDoublei_vEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPOINTERI_VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPOINTERI_VEXTPROC</name></type> <name>glad_glGetPointeri_vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointeri_vEXT</name></cpp:macro> <cpp:value>glad_glGetPointeri_vEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMSTRINGEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMSTRINGEXTPROC</name></type> <name>glad_glNamedProgramStringEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramStringEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramStringEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC</name></type> <name>glad_glNamedProgramLocalParameter4dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameter4dEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameter4dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC</name></type> <name>glad_glNamedProgramLocalParameter4dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameter4dvEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameter4dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC</name></type> <name>glad_glNamedProgramLocalParameter4fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameter4fEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameter4fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC</name></type> <name>glad_glNamedProgramLocalParameter4fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedProgramLocalParameter4fvEXT</name></cpp:macro> <cpp:value>glad_glNamedProgramLocalParameter4fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC</name></type> <name>glad_glGetNamedProgramLocalParameterdvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedProgramLocalParameterdvEXT</name></cpp:macro> <cpp:value>glad_glGetNamedProgramLocalParameterdvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC</name></type> <name>glad_glGetNamedProgramLocalParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedProgramLocalParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetNamedProgramLocalParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDPROGRAMIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDPROGRAMIVEXTPROC</name></type> <name>glad_glGetNamedProgramivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedProgramivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedProgramivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDPROGRAMSTRINGEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDPROGRAMSTRINGEXTPROC</name></type> <name>glad_glGetNamedProgramStringEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedProgramStringEXT</name></cpp:macro> <cpp:value>glad_glGetNamedProgramStringEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC</name></type> <name>glad_glNamedRenderbufferStorageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedRenderbufferStorageEXT</name></cpp:macro> <cpp:value>glad_glNamedRenderbufferStorageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetNamedRenderbufferParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedRenderbufferParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedRenderbufferParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name></type> <name>glad_glNamedRenderbufferStorageMultisampleEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedRenderbufferStorageMultisampleEXT</name></cpp:macro> <cpp:value>glad_glNamedRenderbufferStorageMultisampleEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC</name></type> <name>glad_glNamedRenderbufferStorageMultisampleCoverageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedRenderbufferStorageMultisampleCoverageEXT</name></cpp:macro> <cpp:value>glad_glNamedRenderbufferStorageMultisampleCoverageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC</name></type> <name>glad_glCheckNamedFramebufferStatusEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCheckNamedFramebufferStatusEXT</name></cpp:macro> <cpp:value>glad_glCheckNamedFramebufferStatusEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC</name></type> <name>glad_glNamedFramebufferTexture1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferTexture1DEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferTexture1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC</name></type> <name>glad_glNamedFramebufferTexture2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferTexture2DEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferTexture2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC</name></type> <name>glad_glNamedFramebufferTexture3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferTexture3DEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferTexture3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC</name></type> <name>glad_glNamedFramebufferRenderbufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferRenderbufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name></type> <name>glad_glGetNamedFramebufferAttachmentParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedFramebufferAttachmentParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedFramebufferAttachmentParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENERATETEXTUREMIPMAPEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENERATETEXTUREMIPMAPEXTPROC</name></type> <name>glad_glGenerateTextureMipmapEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateTextureMipmapEXT</name></cpp:macro> <cpp:value>glad_glGenerateTextureMipmapEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENERATEMULTITEXMIPMAPEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENERATEMULTITEXMIPMAPEXTPROC</name></type> <name>glad_glGenerateMultiTexMipmapEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateMultiTexMipmapEXT</name></cpp:macro> <cpp:value>glad_glGenerateMultiTexMipmapEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC</name></type> <name>glad_glFramebufferDrawBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferDrawBufferEXT</name></cpp:macro> <cpp:value>glad_glFramebufferDrawBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC</name></type> <name>glad_glFramebufferDrawBuffersEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferDrawBuffersEXT</name></cpp:macro> <cpp:value>glad_glFramebufferDrawBuffersEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERREADBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERREADBUFFEREXTPROC</name></type> <name>glad_glFramebufferReadBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferReadBufferEXT</name></cpp:macro> <cpp:value>glad_glFramebufferReadBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetFramebufferParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetFramebufferParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC</name></type> <name>glad_glNamedCopyBufferSubDataEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedCopyBufferSubDataEXT</name></cpp:macro> <cpp:value>glad_glNamedCopyBufferSubDataEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC</name></type> <name>glad_glNamedFramebufferTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferTextureEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC</name></type> <name>glad_glNamedFramebufferTextureLayerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferTextureLayerEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferTextureLayerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC</name></type> <name>glad_glNamedFramebufferTextureFaceEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferTextureFaceEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferTextureFaceEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURERENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURERENDERBUFFEREXTPROC</name></type> <name>glad_glTextureRenderbufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glTextureRenderbufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXRENDERBUFFEREXTPROC</name></type> <name>glad_glMultiTexRenderbufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glMultiTexRenderbufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC</name></type> <name>glad_glVertexArrayVertexOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYCOLOROFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYCOLOROFFSETEXTPROC</name></type> <name>glad_glVertexArrayColorOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayColorOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayColorOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC</name></type> <name>glad_glVertexArrayEdgeFlagOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayEdgeFlagOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayEdgeFlagOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYINDEXOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYINDEXOFFSETEXTPROC</name></type> <name>glad_glVertexArrayIndexOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayIndexOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayIndexOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYNORMALOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYNORMALOFFSETEXTPROC</name></type> <name>glad_glVertexArrayNormalOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayNormalOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayNormalOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC</name></type> <name>glad_glVertexArrayTexCoordOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayTexCoordOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayTexCoordOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC</name></type> <name>glad_glVertexArrayMultiTexCoordOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayMultiTexCoordOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayMultiTexCoordOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC</name></type> <name>glad_glVertexArrayFogCoordOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayFogCoordOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayFogCoordOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC</name></type> <name>glad_glVertexArraySecondaryColorOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArraySecondaryColorOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArraySecondaryColorOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribIOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribIOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribIOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXARRAYEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXARRAYEXTPROC</name></type> <name>glad_glEnableVertexArrayEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexArrayEXT</name></cpp:macro> <cpp:value>glad_glEnableVertexArrayEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXARRAYEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXARRAYEXTPROC</name></type> <name>glad_glDisableVertexArrayEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexArrayEXT</name></cpp:macro> <cpp:value>glad_glDisableVertexArrayEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXARRAYATTRIBEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXARRAYATTRIBEXTPROC</name></type> <name>glad_glEnableVertexArrayAttribEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexArrayAttribEXT</name></cpp:macro> <cpp:value>glad_glEnableVertexArrayAttribEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC</name></type> <name>glad_glDisableVertexArrayAttribEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexArrayAttribEXT</name></cpp:macro> <cpp:value>glad_glDisableVertexArrayAttribEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXARRAYINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXARRAYINTEGERVEXTPROC</name></type> <name>glad_glGetVertexArrayIntegervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexArrayIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetVertexArrayIntegervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXARRAYPOINTERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXARRAYPOINTERVEXTPROC</name></type> <name>glad_glGetVertexArrayPointervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexArrayPointervEXT</name></cpp:macro> <cpp:value>glad_glGetVertexArrayPointervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC</name></type> <name>glad_glGetVertexArrayIntegeri_vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexArrayIntegeri_vEXT</name></cpp:macro> <cpp:value>glad_glGetVertexArrayIntegeri_vEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC</name></type> <name>glad_glGetVertexArrayPointeri_vEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexArrayPointeri_vEXT</name></cpp:macro> <cpp:value>glad_glGetVertexArrayPointeri_vEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPNAMEDBUFFERRANGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPNAMEDBUFFERRANGEEXTPROC</name></type> <name>glad_glMapNamedBufferRangeEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapNamedBufferRangeEXT</name></cpp:macro> <cpp:value>glad_glMapNamedBufferRangeEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC</name></type> <name>glad_glFlushMappedNamedBufferRangeEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushMappedNamedBufferRangeEXT</name></cpp:macro> <cpp:value>glad_glFlushMappedNamedBufferRangeEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDBUFFERSTORAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDBUFFERSTORAGEEXTPROC</name></type> <name>glad_glNamedBufferStorageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedBufferStorageEXT</name></cpp:macro> <cpp:value>glad_glNamedBufferStorageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARNAMEDBUFFERDATAEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARNAMEDBUFFERDATAEXTPROC</name></type> <name>glad_glClearNamedBufferDataEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearNamedBufferDataEXT</name></cpp:macro> <cpp:value>glad_glClearNamedBufferDataEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC</name></type> <name>glad_glClearNamedBufferSubDataEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearNamedBufferSubDataEXT</name></cpp:macro> <cpp:value>glad_glClearNamedBufferSubDataEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC</name></type> <name>glad_glNamedFramebufferParameteriEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferParameteriEXT</name></cpp:macro> <cpp:value>glad_glNamedFramebufferParameteriEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetNamedFramebufferParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedFramebufferParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetNamedFramebufferParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1DEXTPROC</name></type> <name>glad_glProgramUniform1dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1dEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2DEXTPROC</name></type> <name>glad_glProgramUniform2dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2dEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3DEXTPROC</name></type> <name>glad_glProgramUniform3dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3dEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4DEXTPROC</name></type> <name>glad_glProgramUniform4dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4dEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1DVEXTPROC</name></type> <name>glad_glProgramUniform1dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform1dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2DVEXTPROC</name></type> <name>glad_glProgramUniform2dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform2dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3DVEXTPROC</name></type> <name>glad_glProgramUniform3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4DVEXTPROC</name></type> <name>glad_glProgramUniform4dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniform4dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix2dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix4dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix2x3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x3dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix2x4dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix2x4dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix2x4dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix3x2dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x2dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x2dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix3x4dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix3x4dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix3x4dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix4x2dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x2dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x2dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC</name></type> <name>glad_glProgramUniformMatrix4x3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformMatrix4x3dvEXT</name></cpp:macro> <cpp:value>glad_glProgramUniformMatrix4x3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREBUFFERRANGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREBUFFERRANGEEXTPROC</name></type> <name>glad_glTextureBufferRangeEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureBufferRangeEXT</name></cpp:macro> <cpp:value>glad_glTextureBufferRangeEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESTORAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESTORAGE1DEXTPROC</name></type> <name>glad_glTextureStorage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureStorage1DEXT</name></cpp:macro> <cpp:value>glad_glTextureStorage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESTORAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESTORAGE2DEXTPROC</name></type> <name>glad_glTextureStorage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureStorage2DEXT</name></cpp:macro> <cpp:value>glad_glTextureStorage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESTORAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESTORAGE3DEXTPROC</name></type> <name>glad_glTextureStorage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureStorage3DEXT</name></cpp:macro> <cpp:value>glad_glTextureStorage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC</name></type> <name>glad_glTextureStorage2DMultisampleEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureStorage2DMultisampleEXT</name></cpp:macro> <cpp:value>glad_glTextureStorage2DMultisampleEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC</name></type> <name>glad_glTextureStorage3DMultisampleEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureStorage3DMultisampleEXT</name></cpp:macro> <cpp:value>glad_glTextureStorage3DMultisampleEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC</name></type> <name>glad_glVertexArrayBindVertexBufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayBindVertexBufferEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayBindVertexBufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribFormatEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribFormatEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribFormatEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribIFormatEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribIFormatEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribIFormatEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribLFormatEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribLFormatEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribLFormatEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribBindingEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribBindingEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribBindingEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC</name></type> <name>glad_glVertexArrayVertexBindingDivisorEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexBindingDivisorEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexBindingDivisorEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC</name></type> <name>glad_glVertexArrayVertexAttribLOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribLOffsetEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribLOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTUREPAGECOMMITMENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTUREPAGECOMMITMENTEXTPROC</name></type> <name>glad_glTexturePageCommitmentEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexturePageCommitmentEXT</name></cpp:macro> <cpp:value>glad_glTexturePageCommitmentEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC</name></type> <name>glad_glVertexArrayVertexAttribDivisorEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayVertexAttribDivisorEXT</name></cpp:macro> <cpp:value>glad_glVertexArrayVertexAttribDivisorEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_sample_positions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_sample_positions</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_sample_positions</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETMULTISAMPLEFVAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETMULTISAMPLEFVAMDPROC</name></type> <name>glad_glSetMultisamplefvAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetMultisamplefvAMD</name></cpp:macro> <cpp:value>glad_glSetMultisamplefvAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_program</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLAREPROGRAMSRESIDENTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLAREPROGRAMSRESIDENTNVPROC</name></type> <name>glad_glAreProgramsResidentNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAreProgramsResidentNV</name></cpp:macro> <cpp:value>glad_glAreProgramsResidentNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPROGRAMNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPROGRAMNVPROC</name></type> <name>glad_glBindProgramNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindProgramNV</name></cpp:macro> <cpp:value>glad_glBindProgramNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMSNVPROC</name></type> <name>glad_glDeleteProgramsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgramsNV</name></cpp:macro> <cpp:value>glad_glDeleteProgramsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEXECUTEPROGRAMNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEXECUTEPROGRAMNVPROC</name></type> <name>glad_glExecuteProgramNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glExecuteProgramNV</name></cpp:macro> <cpp:value>glad_glExecuteProgramNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPROGRAMSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPROGRAMSNVPROC</name></type> <name>glad_glGenProgramsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenProgramsNV</name></cpp:macro> <cpp:value>glad_glGenProgramsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMPARAMETERDVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMPARAMETERDVNVPROC</name></type> <name>glad_glGetProgramParameterdvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramParameterdvNV</name></cpp:macro> <cpp:value>glad_glGetProgramParameterdvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMPARAMETERFVNVPROC</name></type> <name>glad_glGetProgramParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetProgramParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMIVNVPROC</name></type> <name>glad_glGetProgramivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramivNV</name></cpp:macro> <cpp:value>glad_glGetProgramivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMSTRINGNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMSTRINGNVPROC</name></type> <name>glad_glGetProgramStringNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramStringNV</name></cpp:macro> <cpp:value>glad_glGetProgramStringNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTRACKMATRIXIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTRACKMATRIXIVNVPROC</name></type> <name>glad_glGetTrackMatrixivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTrackMatrixivNV</name></cpp:macro> <cpp:value>glad_glGetTrackMatrixivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBDVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBDVNVPROC</name></type> <name>glad_glGetVertexAttribdvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribdvNV</name></cpp:macro> <cpp:value>glad_glGetVertexAttribdvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBFVNVPROC</name></type> <name>glad_glGetVertexAttribfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribfvNV</name></cpp:macro> <cpp:value>glad_glGetVertexAttribfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIVNVPROC</name></type> <name>glad_glGetVertexAttribivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribivNV</name></cpp:macro> <cpp:value>glad_glGetVertexAttribivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBPOINTERVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBPOINTERVNVPROC</name></type> <name>glad_glGetVertexAttribPointervNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribPointervNV</name></cpp:macro> <cpp:value>glad_glGetVertexAttribPointervNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMNVPROC</name></type> <name>glad_glIsProgramNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgramNV</name></cpp:macro> <cpp:value>glad_glIsProgramNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOADPROGRAMNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOADPROGRAMNVPROC</name></type> <name>glad_glLoadProgramNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadProgramNV</name></cpp:macro> <cpp:value>glad_glLoadProgramNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETER4DNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETER4DNVPROC</name></type> <name>glad_glProgramParameter4dNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameter4dNV</name></cpp:macro> <cpp:value>glad_glProgramParameter4dNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETER4DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETER4DVNVPROC</name></type> <name>glad_glProgramParameter4dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameter4dvNV</name></cpp:macro> <cpp:value>glad_glProgramParameter4dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETER4FNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETER4FNVPROC</name></type> <name>glad_glProgramParameter4fNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameter4fNV</name></cpp:macro> <cpp:value>glad_glProgramParameter4fNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETER4FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETER4FVNVPROC</name></type> <name>glad_glProgramParameter4fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameter4fvNV</name></cpp:macro> <cpp:value>glad_glProgramParameter4fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETERS4DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETERS4DVNVPROC</name></type> <name>glad_glProgramParameters4dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameters4dvNV</name></cpp:macro> <cpp:value>glad_glProgramParameters4dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETERS4FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETERS4FVNVPROC</name></type> <name>glad_glProgramParameters4fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameters4fvNV</name></cpp:macro> <cpp:value>glad_glProgramParameters4fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREQUESTRESIDENTPROGRAMSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREQUESTRESIDENTPROGRAMSNVPROC</name></type> <name>glad_glRequestResidentProgramsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRequestResidentProgramsNV</name></cpp:macro> <cpp:value>glad_glRequestResidentProgramsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRACKMATRIXNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRACKMATRIXNVPROC</name></type> <name>glad_glTrackMatrixNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTrackMatrixNV</name></cpp:macro> <cpp:value>glad_glTrackMatrixNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBPOINTERNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBPOINTERNVPROC</name></type> <name>glad_glVertexAttribPointerNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribPointerNV</name></cpp:macro> <cpp:value>glad_glVertexAttribPointerNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DNVPROC</name></type> <name>glad_glVertexAttrib1dNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DVNVPROC</name></type> <name>glad_glVertexAttrib1dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FNVPROC</name></type> <name>glad_glVertexAttrib1fNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FVNVPROC</name></type> <name>glad_glVertexAttrib1fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SNVPROC</name></type> <name>glad_glVertexAttrib1sNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1sNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1sNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SVNVPROC</name></type> <name>glad_glVertexAttrib1svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1svNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DNVPROC</name></type> <name>glad_glVertexAttrib2dNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DVNVPROC</name></type> <name>glad_glVertexAttrib2dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FNVPROC</name></type> <name>glad_glVertexAttrib2fNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FVNVPROC</name></type> <name>glad_glVertexAttrib2fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SNVPROC</name></type> <name>glad_glVertexAttrib2sNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2sNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2sNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SVNVPROC</name></type> <name>glad_glVertexAttrib2svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2svNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DNVPROC</name></type> <name>glad_glVertexAttrib3dNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DVNVPROC</name></type> <name>glad_glVertexAttrib3dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FNVPROC</name></type> <name>glad_glVertexAttrib3fNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FVNVPROC</name></type> <name>glad_glVertexAttrib3fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SNVPROC</name></type> <name>glad_glVertexAttrib3sNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3sNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3sNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SVNVPROC</name></type> <name>glad_glVertexAttrib3svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3svNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DNVPROC</name></type> <name>glad_glVertexAttrib4dNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DVNVPROC</name></type> <name>glad_glVertexAttrib4dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FNVPROC</name></type> <name>glad_glVertexAttrib4fNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FVNVPROC</name></type> <name>glad_glVertexAttrib4fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SNVPROC</name></type> <name>glad_glVertexAttrib4sNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4sNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4sNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SVNVPROC</name></type> <name>glad_glVertexAttrib4svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4svNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UBNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UBNVPROC</name></type> <name>glad_glVertexAttrib4ubNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UBVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UBVNVPROC</name></type> <name>glad_glVertexAttrib4ubvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS1DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS1DVNVPROC</name></type> <name>glad_glVertexAttribs1dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs1dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs1dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS1FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS1FVNVPROC</name></type> <name>glad_glVertexAttribs1fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs1fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs1fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS1SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS1SVNVPROC</name></type> <name>glad_glVertexAttribs1svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs1svNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs1svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS2DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS2DVNVPROC</name></type> <name>glad_glVertexAttribs2dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs2dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs2dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS2FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS2FVNVPROC</name></type> <name>glad_glVertexAttribs2fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs2fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs2fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS2SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS2SVNVPROC</name></type> <name>glad_glVertexAttribs2svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs2svNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs2svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS3DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS3DVNVPROC</name></type> <name>glad_glVertexAttribs3dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs3dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs3dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS3FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS3FVNVPROC</name></type> <name>glad_glVertexAttribs3fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs3fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs3fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS3SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS3SVNVPROC</name></type> <name>glad_glVertexAttribs3svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs3svNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs3svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS4DVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS4DVNVPROC</name></type> <name>glad_glVertexAttribs4dvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs4dvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs4dvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS4FVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS4FVNVPROC</name></type> <name>glad_glVertexAttribs4fvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs4fvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs4fvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS4SVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS4SVNVPROC</name></type> <name>glad_glVertexAttribs4svNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs4svNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs4svNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS4UBVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS4UBVNVPROC</name></type> <name>glad_glVertexAttribs4ubvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs4ubvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs4ubvNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_thread_shuffle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_thread_shuffle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_thread_shuffle</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NVX_conditional_render</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NVX_conditional_render</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NVX_conditional_render</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINCONDITIONALRENDERNVXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINCONDITIONALRENDERNVXPROC</name></type> <name>glad_glBeginConditionalRenderNVX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginConditionalRenderNVX</name></cpp:macro> <cpp:value>glad_glBeginConditionalRenderNVX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDCONDITIONALRENDERNVXPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDCONDITIONALRENDERNVXPROC</name></type> <name>glad_glEndConditionalRenderNVX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndConditionalRenderNVX</name></cpp:macro> <cpp:value>glad_glEndConditionalRenderNVX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_shader</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINVERTEXSHADEREXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINVERTEXSHADEREXTPROC</name></type> <name>glad_glBeginVertexShaderEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glBeginVertexShaderEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDVERTEXSHADEREXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDVERTEXSHADEREXTPROC</name></type> <name>glad_glEndVertexShaderEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glEndVertexShaderEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXSHADEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXSHADEREXTPROC</name></type> <name>glad_glBindVertexShaderEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glBindVertexShaderEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENVERTEXSHADERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENVERTEXSHADERSEXTPROC</name></type> <name>glad_glGenVertexShadersEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenVertexShadersEXT</name></cpp:macro> <cpp:value>glad_glGenVertexShadersEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEVERTEXSHADEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEVERTEXSHADEREXTPROC</name></type> <name>glad_glDeleteVertexShaderEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glDeleteVertexShaderEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADEROP1EXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADEROP1EXTPROC</name></type> <name>glad_glShaderOp1EXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderOp1EXT</name></cpp:macro> <cpp:value>glad_glShaderOp1EXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADEROP2EXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADEROP2EXTPROC</name></type> <name>glad_glShaderOp2EXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderOp2EXT</name></cpp:macro> <cpp:value>glad_glShaderOp2EXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADEROP3EXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADEROP3EXTPROC</name></type> <name>glad_glShaderOp3EXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderOp3EXT</name></cpp:macro> <cpp:value>glad_glShaderOp3EXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSWIZZLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSWIZZLEEXTPROC</name></type> <name>glad_glSwizzleEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSwizzleEXT</name></cpp:macro> <cpp:value>glad_glSwizzleEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWRITEMASKEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWRITEMASKEXTPROC</name></type> <name>glad_glWriteMaskEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWriteMaskEXT</name></cpp:macro> <cpp:value>glad_glWriteMaskEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINSERTCOMPONENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINSERTCOMPONENTEXTPROC</name></type> <name>glad_glInsertComponentEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInsertComponentEXT</name></cpp:macro> <cpp:value>glad_glInsertComponentEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEXTRACTCOMPONENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEXTRACTCOMPONENTEXTPROC</name></type> <name>glad_glExtractComponentEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glExtractComponentEXT</name></cpp:macro> <cpp:value>glad_glExtractComponentEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENSYMBOLSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENSYMBOLSEXTPROC</name></type> <name>glad_glGenSymbolsEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenSymbolsEXT</name></cpp:macro> <cpp:value>glad_glGenSymbolsEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETINVARIANTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETINVARIANTEXTPROC</name></type> <name>glad_glSetInvariantEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetInvariantEXT</name></cpp:macro> <cpp:value>glad_glSetInvariantEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETLOCALCONSTANTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETLOCALCONSTANTEXTPROC</name></type> <name>glad_glSetLocalConstantEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetLocalConstantEXT</name></cpp:macro> <cpp:value>glad_glSetLocalConstantEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTBVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTBVEXTPROC</name></type> <name>glad_glVariantbvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantbvEXT</name></cpp:macro> <cpp:value>glad_glVariantbvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTSVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTSVEXTPROC</name></type> <name>glad_glVariantsvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantsvEXT</name></cpp:macro> <cpp:value>glad_glVariantsvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTIVEXTPROC</name></type> <name>glad_glVariantivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantivEXT</name></cpp:macro> <cpp:value>glad_glVariantivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTFVEXTPROC</name></type> <name>glad_glVariantfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantfvEXT</name></cpp:macro> <cpp:value>glad_glVariantfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTDVEXTPROC</name></type> <name>glad_glVariantdvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantdvEXT</name></cpp:macro> <cpp:value>glad_glVariantdvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTUBVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTUBVEXTPROC</name></type> <name>glad_glVariantubvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantubvEXT</name></cpp:macro> <cpp:value>glad_glVariantubvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTUSVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTUSVEXTPROC</name></type> <name>glad_glVariantusvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantusvEXT</name></cpp:macro> <cpp:value>glad_glVariantusvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTUIVEXTPROC</name></type> <name>glad_glVariantuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantuivEXT</name></cpp:macro> <cpp:value>glad_glVariantuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTPOINTEREXTPROC</name></type> <name>glad_glVariantPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantPointerEXT</name></cpp:macro> <cpp:value>glad_glVariantPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVARIANTCLIENTSTATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVARIANTCLIENTSTATEEXTPROC</name></type> <name>glad_glEnableVariantClientStateEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVariantClientStateEXT</name></cpp:macro> <cpp:value>glad_glEnableVariantClientStateEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</name></type> <name>glad_glDisableVariantClientStateEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVariantClientStateEXT</name></cpp:macro> <cpp:value>glad_glDisableVariantClientStateEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDLIGHTPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDLIGHTPARAMETEREXTPROC</name></type> <name>glad_glBindLightParameterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindLightParameterEXT</name></cpp:macro> <cpp:value>glad_glBindLightParameterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDMATERIALPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDMATERIALPARAMETEREXTPROC</name></type> <name>glad_glBindMaterialParameterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindMaterialParameterEXT</name></cpp:macro> <cpp:value>glad_glBindMaterialParameterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXGENPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXGENPARAMETEREXTPROC</name></type> <name>glad_glBindTexGenParameterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTexGenParameterEXT</name></cpp:macro> <cpp:value>glad_glBindTexGenParameterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXTUREUNITPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXTUREUNITPARAMETEREXTPROC</name></type> <name>glad_glBindTextureUnitParameterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTextureUnitParameterEXT</name></cpp:macro> <cpp:value>glad_glBindTextureUnitParameterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPARAMETEREXTPROC</name></type> <name>glad_glBindParameterEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindParameterEXT</name></cpp:macro> <cpp:value>glad_glBindParameterEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISVARIANTENABLEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISVARIANTENABLEDEXTPROC</name></type> <name>glad_glIsVariantEnabledEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVariantEnabledEXT</name></cpp:macro> <cpp:value>glad_glIsVariantEnabledEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTBOOLEANVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTBOOLEANVEXTPROC</name></type> <name>glad_glGetVariantBooleanvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantBooleanvEXT</name></cpp:macro> <cpp:value>glad_glGetVariantBooleanvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTINTEGERVEXTPROC</name></type> <name>glad_glGetVariantIntegervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetVariantIntegervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTFLOATVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTFLOATVEXTPROC</name></type> <name>glad_glGetVariantFloatvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantFloatvEXT</name></cpp:macro> <cpp:value>glad_glGetVariantFloatvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTPOINTERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTPOINTERVEXTPROC</name></type> <name>glad_glGetVariantPointervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantPointervEXT</name></cpp:macro> <cpp:value>glad_glGetVariantPointervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINVARIANTBOOLEANVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINVARIANTBOOLEANVEXTPROC</name></type> <name>glad_glGetInvariantBooleanvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInvariantBooleanvEXT</name></cpp:macro> <cpp:value>glad_glGetInvariantBooleanvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINVARIANTINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINVARIANTINTEGERVEXTPROC</name></type> <name>glad_glGetInvariantIntegervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInvariantIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetInvariantIntegervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINVARIANTFLOATVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINVARIANTFLOATVEXTPROC</name></type> <name>glad_glGetInvariantFloatvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInvariantFloatvEXT</name></cpp:macro> <cpp:value>glad_glGetInvariantFloatvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</name></type> <name>glad_glGetLocalConstantBooleanvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLocalConstantBooleanvEXT</name></cpp:macro> <cpp:value>glad_glGetLocalConstantBooleanvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLOCALCONSTANTINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLOCALCONSTANTINTEGERVEXTPROC</name></type> <name>glad_glGetLocalConstantIntegervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLocalConstantIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetLocalConstantIntegervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLOCALCONSTANTFLOATVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLOCALCONSTANTFLOATVEXTPROC</name></type> <name>glad_glGetLocalConstantFloatvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLocalConstantFloatvEXT</name></cpp:macro> <cpp:value>glad_glGetLocalConstantFloatvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_func_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_func_separate</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_func_separate</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEEXTPROC</name></type> <name>glad_glBlendFuncSeparateEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparateEXT</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparateEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_fence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_fence</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_fence</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFENCESAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFENCESAPPLEPROC</name></type> <name>glad_glGenFencesAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFencesAPPLE</name></cpp:macro> <cpp:value>glad_glGenFencesAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFENCESAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFENCESAPPLEPROC</name></type> <name>glad_glDeleteFencesAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFencesAPPLE</name></cpp:macro> <cpp:value>glad_glDeleteFencesAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETFENCEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETFENCEAPPLEPROC</name></type> <name>glad_glSetFenceAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetFenceAPPLE</name></cpp:macro> <cpp:value>glad_glSetFenceAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISFENCEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISFENCEAPPLEPROC</name></type> <name>glad_glIsFenceAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFenceAPPLE</name></cpp:macro> <cpp:value>glad_glIsFenceAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLTESTFENCEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTESTFENCEAPPLEPROC</name></type> <name>glad_glTestFenceAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTestFenceAPPLE</name></cpp:macro> <cpp:value>glad_glTestFenceAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHFENCEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHFENCEAPPLEPROC</name></type> <name>glad_glFinishFenceAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinishFenceAPPLE</name></cpp:macro> <cpp:value>glad_glFinishFenceAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLTESTOBJECTAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTESTOBJECTAPPLEPROC</name></type> <name>glad_glTestObjectAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTestObjectAPPLE</name></cpp:macro> <cpp:value>glad_glTestObjectAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHOBJECTAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHOBJECTAPPLEPROC</name></type> <name>glad_glFinishObjectAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinishObjectAPPLE</name></cpp:macro> <cpp:value>glad_glFinishObjectAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_byte_coordinates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_byte_coordinates</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OES_byte_coordinates</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1BOESPROC</name></type> <name>glad_glMultiTexCoord1bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1bOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1BVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1BVOESPROC</name></type> <name>glad_glMultiTexCoord1bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1bvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2BOESPROC</name></type> <name>glad_glMultiTexCoord2bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2bOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2BVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2BVOESPROC</name></type> <name>glad_glMultiTexCoord2bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2bvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3BOESPROC</name></type> <name>glad_glMultiTexCoord3bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3bOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3BVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3BVOESPROC</name></type> <name>glad_glMultiTexCoord3bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3bvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4BOESPROC</name></type> <name>glad_glMultiTexCoord4bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4bOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4BVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4BVOESPROC</name></type> <name>glad_glMultiTexCoord4bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4bvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD1BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD1BOESPROC</name></type> <name>glad_glTexCoord1bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1bOES</name></cpp:macro> <cpp:value>glad_glTexCoord1bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD1BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD1BVOESPROC</name></type> <name>glad_glTexCoord1bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1bvOES</name></cpp:macro> <cpp:value>glad_glTexCoord1bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2BOESPROC</name></type> <name>glad_glTexCoord2bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2bOES</name></cpp:macro> <cpp:value>glad_glTexCoord2bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2BVOESPROC</name></type> <name>glad_glTexCoord2bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2bvOES</name></cpp:macro> <cpp:value>glad_glTexCoord2bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD3BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD3BOESPROC</name></type> <name>glad_glTexCoord3bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3bOES</name></cpp:macro> <cpp:value>glad_glTexCoord3bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD3BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD3BVOESPROC</name></type> <name>glad_glTexCoord3bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3bvOES</name></cpp:macro> <cpp:value>glad_glTexCoord3bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4BOESPROC</name></type> <name>glad_glTexCoord4bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4bOES</name></cpp:macro> <cpp:value>glad_glTexCoord4bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4BVOESPROC</name></type> <name>glad_glTexCoord4bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4bvOES</name></cpp:macro> <cpp:value>glad_glTexCoord4bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX2BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX2BOESPROC</name></type> <name>glad_glVertex2bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2bOES</name></cpp:macro> <cpp:value>glad_glVertex2bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX2BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX2BVOESPROC</name></type> <name>glad_glVertex2bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2bvOES</name></cpp:macro> <cpp:value>glad_glVertex2bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX3BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX3BOESPROC</name></type> <name>glad_glVertex3bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3bOES</name></cpp:macro> <cpp:value>glad_glVertex3bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX3BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX3BVOESPROC</name></type> <name>glad_glVertex3bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3bvOES</name></cpp:macro> <cpp:value>glad_glVertex3bvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX4BOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX4BOESPROC</name></type> <name>glad_glVertex4bOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4bOES</name></cpp:macro> <cpp:value>glad_glVertex4bOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX4BVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX4BVOESPROC</name></type> <name>glad_glVertex4bvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4bvOES</name></cpp:macro> <cpp:value>glad_glVertex4bvOES</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transpose_matrix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transpose_matrix</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_transpose_matrix</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOADTRANSPOSEMATRIXFARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOADTRANSPOSEMATRIXFARBPROC</name></type> <name>glad_glLoadTransposeMatrixfARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadTransposeMatrixfARB</name></cpp:macro> <cpp:value>glad_glLoadTransposeMatrixfARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOADTRANSPOSEMATRIXDARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOADTRANSPOSEMATRIXDARBPROC</name></type> <name>glad_glLoadTransposeMatrixdARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadTransposeMatrixdARB</name></cpp:macro> <cpp:value>glad_glLoadTransposeMatrixdARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTTRANSPOSEMATRIXFARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTTRANSPOSEMATRIXFARBPROC</name></type> <name>glad_glMultTransposeMatrixfARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultTransposeMatrixfARB</name></cpp:macro> <cpp:value>glad_glMultTransposeMatrixfARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTTRANSPOSEMATRIXDARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTTRANSPOSEMATRIXDARBPROC</name></type> <name>glad_glMultTransposeMatrixdARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultTransposeMatrixdARB</name></cpp:macro> <cpp:value>glad_glMultTransposeMatrixdARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_provoking_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_provoking_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_provoking_vertex</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_fog_coord</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_fog_coord</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_fog_coord</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDFEXTPROC</name></type> <name>glad_glFogCoordfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordfEXT</name></cpp:macro> <cpp:value>glad_glFogCoordfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDFVEXTPROC</name></type> <name>glad_glFogCoordfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordfvEXT</name></cpp:macro> <cpp:value>glad_glFogCoordfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDDEXTPROC</name></type> <name>glad_glFogCoorddEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoorddEXT</name></cpp:macro> <cpp:value>glad_glFogCoorddEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDDVEXTPROC</name></type> <name>glad_glFogCoorddvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoorddvEXT</name></cpp:macro> <cpp:value>glad_glFogCoorddvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDPOINTEREXTPROC</name></type> <name>glad_glFogCoordPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordPointerEXT</name></cpp:macro> <cpp:value>glad_glFogCoordPointerEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_array</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLARRAYELEMENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLARRAYELEMENTEXTPROC</name></type> <name>glad_glArrayElementEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glArrayElementEXT</name></cpp:macro> <cpp:value>glad_glArrayElementEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORPOINTEREXTPROC</name></type> <name>glad_glColorPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorPointerEXT</name></cpp:macro> <cpp:value>glad_glColorPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSEXTPROC</name></type> <name>glad_glDrawArraysEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysEXT</name></cpp:macro> <cpp:value>glad_glDrawArraysEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEDGEFLAGPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEDGEFLAGPOINTEREXTPROC</name></type> <name>glad_glEdgeFlagPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlagPointerEXT</name></cpp:macro> <cpp:value>glad_glEdgeFlagPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPOINTERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPOINTERVEXTPROC</name></type> <name>glad_glGetPointervEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointervEXT</name></cpp:macro> <cpp:value>glad_glGetPointervEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXPOINTEREXTPROC</name></type> <name>glad_glIndexPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexPointerEXT</name></cpp:macro> <cpp:value>glad_glIndexPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALPOINTEREXTPROC</name></type> <name>glad_glNormalPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalPointerEXT</name></cpp:macro> <cpp:value>glad_glNormalPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDPOINTEREXTPROC</name></type> <name>glad_glTexCoordPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordPointerEXT</name></cpp:macro> <cpp:value>glad_glTexCoordPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXPOINTEREXTPROC</name></type> <name>glad_glVertexPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexPointerEXT</name></cpp:macro> <cpp:value>glad_glVertexPointerEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_half_float_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_half_float_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_half_float_vertex</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_equation_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_equation_separate</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_equation_separate</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEEXTPROC</name></type> <name>glad_glBlendEquationSeparateEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparateEXT</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparateEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multi_draw_indirect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multi_draw_indirect</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_multi_draw_indirect</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_copy_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_copy_image</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYIMAGESUBDATANVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYIMAGESUBDATANVPROC</name></type> <name>glad_glCopyImageSubDataNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyImageSubDataNV</name></cpp:macro> <cpp:value>glad_glCopyImageSubDataNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_layer_viewport</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_layer_viewport</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_layer_viewport</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transform_feedback2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transform_feedback2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_transform_feedback2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transform_feedback3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transform_feedback3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_transform_feedback3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ycrcba</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ycrcba</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_ycrcba</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_debug_marker</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_debug_marker</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_debug_marker</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINSERTEVENTMARKEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINSERTEVENTMARKEREXTPROC</name></type> <name>glad_glInsertEventMarkerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInsertEventMarkerEXT</name></cpp:macro> <cpp:value>glad_glInsertEventMarkerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPUSHGROUPMARKEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPUSHGROUPMARKEREXTPROC</name></type> <name>glad_glPushGroupMarkerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushGroupMarkerEXT</name></cpp:macro> <cpp:value>glad_glPushGroupMarkerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOPGROUPMARKEREXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOPGROUPMARKEREXTPROC</name></type> <name>glad_glPopGroupMarkerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopGroupMarkerEXT</name></cpp:macro> <cpp:value>glad_glPopGroupMarkerEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_bgra</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_bgra</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_s3tc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_s3tc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_compression_s3tc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_pixel_transform</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_pixel_transform</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_pixel_transform</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTRANSFORMPARAMETERIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTRANSFORMPARAMETERIEXTPROC</name></type> <name>glad_glPixelTransformParameteriEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransformParameteriEXT</name></cpp:macro> <cpp:value>glad_glPixelTransformParameteriEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTRANSFORMPARAMETERFEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTRANSFORMPARAMETERFEXTPROC</name></type> <name>glad_glPixelTransformParameterfEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransformParameterfEXT</name></cpp:macro> <cpp:value>glad_glPixelTransformParameterfEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC</name></type> <name>glad_glPixelTransformParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransformParameterivEXT</name></cpp:macro> <cpp:value>glad_glPixelTransformParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC</name></type> <name>glad_glPixelTransformParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransformParameterfvEXT</name></cpp:macro> <cpp:value>glad_glPixelTransformParameterfvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC</name></type> <name>glad_glGetPixelTransformParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelTransformParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetPixelTransformParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC</name></type> <name>glad_glGetPixelTransformParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelTransformParameterfvEXT</name></cpp:macro> <cpp:value>glad_glGetPixelTransformParameterfvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_conservative_depth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_conservative_depth</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_conservative_depth</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_fragment_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_fragment_shader</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFRAGMENTSHADERSATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFRAGMENTSHADERSATIPROC</name></type> <name>glad_glGenFragmentShadersATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFragmentShadersATI</name></cpp:macro> <cpp:value>glad_glGenFragmentShadersATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGMENTSHADERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGMENTSHADERATIPROC</name></type> <name>glad_glBindFragmentShaderATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glBindFragmentShaderATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFRAGMENTSHADERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFRAGMENTSHADERATIPROC</name></type> <name>glad_glDeleteFragmentShaderATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glDeleteFragmentShaderATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINFRAGMENTSHADERATIPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINFRAGMENTSHADERATIPROC</name></type> <name>glad_glBeginFragmentShaderATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glBeginFragmentShaderATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDFRAGMENTSHADERATIPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDFRAGMENTSHADERATIPROC</name></type> <name>glad_glEndFragmentShaderATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glEndFragmentShaderATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPASSTEXCOORDATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPASSTEXCOORDATIPROC</name></type> <name>glad_glPassTexCoordATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPassTexCoordATI</name></cpp:macro> <cpp:value>glad_glPassTexCoordATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMAPATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMAPATIPROC</name></type> <name>glad_glSampleMapATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMapATI</name></cpp:macro> <cpp:value>glad_glSampleMapATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFRAGMENTOP1ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFRAGMENTOP1ATIPROC</name></type> <name>glad_glColorFragmentOp1ATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFragmentOp1ATI</name></cpp:macro> <cpp:value>glad_glColorFragmentOp1ATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFRAGMENTOP2ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFRAGMENTOP2ATIPROC</name></type> <name>glad_glColorFragmentOp2ATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFragmentOp2ATI</name></cpp:macro> <cpp:value>glad_glColorFragmentOp2ATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFRAGMENTOP3ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFRAGMENTOP3ATIPROC</name></type> <name>glad_glColorFragmentOp3ATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFragmentOp3ATI</name></cpp:macro> <cpp:value>glad_glColorFragmentOp3ATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFRAGMENTOP1ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFRAGMENTOP1ATIPROC</name></type> <name>glad_glAlphaFragmentOp1ATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFragmentOp1ATI</name></cpp:macro> <cpp:value>glad_glAlphaFragmentOp1ATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFRAGMENTOP2ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFRAGMENTOP2ATIPROC</name></type> <name>glad_glAlphaFragmentOp2ATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFragmentOp2ATI</name></cpp:macro> <cpp:value>glad_glAlphaFragmentOp2ATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFRAGMENTOP3ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFRAGMENTOP3ATIPROC</name></type> <name>glad_glAlphaFragmentOp3ATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFragmentOp3ATI</name></cpp:macro> <cpp:value>glad_glAlphaFragmentOp3ATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETFRAGMENTSHADERCONSTANTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETFRAGMENTSHADERCONSTANTATIPROC</name></type> <name>glad_glSetFragmentShaderConstantATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetFragmentShaderConstantATI</name></cpp:macro> <cpp:value>glad_glSetFragmentShaderConstantATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_array_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_triangle_list</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_triangle_list</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUN_triangle_list</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUISUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUISUNPROC</name></type> <name>glad_glReplacementCodeuiSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUSSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUSSUNPROC</name></type> <name>glad_glReplacementCodeusSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeusSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeusSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUBSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUBSUNPROC</name></type> <name>glad_glReplacementCodeubSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeubSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeubSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUIVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUIVSUNPROC</name></type> <name>glad_glReplacementCodeuivSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuivSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuivSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUSVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUSVSUNPROC</name></type> <name>glad_glReplacementCodeusvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeusvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeusvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUBVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUBVSUNPROC</name></type> <name>glad_glReplacementCodeubvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeubvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeubvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEPOINTERSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEPOINTERSUNPROC</name></type> <name>glad_glReplacementCodePointerSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodePointerSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodePointerSUN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_env_add</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_env_add</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_env_add</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_packed_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_packed_depth_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_packed_depth_stencil</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_mirror_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_mirror_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_mirror_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_multisample_filter_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_multisample_filter_hint</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_multisample_filter_hint</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_float_pixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_float_pixels</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_float_pixels</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transform_feedback_instanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transform_feedback_instanced</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_transform_feedback_instanced</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_async</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_async</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_async</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLASYNCMARKERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLASYNCMARKERSGIXPROC</name></type> <name>glad_glAsyncMarkerSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAsyncMarkerSGIX</name></cpp:macro> <cpp:value>glad_glAsyncMarkerSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHASYNCSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHASYNCSGIXPROC</name></type> <name>glad_glFinishAsyncSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinishAsyncSGIX</name></cpp:macro> <cpp:value>glad_glFinishAsyncSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLLASYNCSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLLASYNCSGIXPROC</name></type> <name>glad_glPollAsyncSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPollAsyncSGIX</name></cpp:macro> <cpp:value>glad_glPollAsyncSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENASYNCMARKERSSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENASYNCMARKERSSGIXPROC</name></type> <name>glad_glGenAsyncMarkersSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenAsyncMarkersSGIX</name></cpp:macro> <cpp:value>glad_glGenAsyncMarkersSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEASYNCMARKERSSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEASYNCMARKERSSGIXPROC</name></type> <name>glad_glDeleteAsyncMarkersSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteAsyncMarkersSGIX</name></cpp:macro> <cpp:value>glad_glDeleteAsyncMarkersSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISASYNCMARKERSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISASYNCMARKERSGIXPROC</name></type> <name>glad_glIsAsyncMarkerSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsAsyncMarkerSGIX</name></cpp:macro> <cpp:value>glad_glIsAsyncMarkerSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_latc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_latc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_compression_latc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_atomic_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_atomic_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_atomic_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shading_language_100</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shading_language_100</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shading_language_100</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INTEL_performance_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTEL_performance_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INTEL_performance_query</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINPERFQUERYINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINPERFQUERYINTELPROC</name></type> <name>glad_glBeginPerfQueryINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginPerfQueryINTEL</name></cpp:macro> <cpp:value>glad_glBeginPerfQueryINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATEPERFQUERYINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATEPERFQUERYINTELPROC</name></type> <name>glad_glCreatePerfQueryINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreatePerfQueryINTEL</name></cpp:macro> <cpp:value>glad_glCreatePerfQueryINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPERFQUERYINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPERFQUERYINTELPROC</name></type> <name>glad_glDeletePerfQueryINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeletePerfQueryINTEL</name></cpp:macro> <cpp:value>glad_glDeletePerfQueryINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDPERFQUERYINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDPERFQUERYINTELPROC</name></type> <name>glad_glEndPerfQueryINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndPerfQueryINTEL</name></cpp:macro> <cpp:value>glad_glEndPerfQueryINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFIRSTPERFQUERYIDINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFIRSTPERFQUERYIDINTELPROC</name></type> <name>glad_glGetFirstPerfQueryIdINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFirstPerfQueryIdINTEL</name></cpp:macro> <cpp:value>glad_glGetFirstPerfQueryIdINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNEXTPERFQUERYIDINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNEXTPERFQUERYIDINTELPROC</name></type> <name>glad_glGetNextPerfQueryIdINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNextPerfQueryIdINTEL</name></cpp:macro> <cpp:value>glad_glGetNextPerfQueryIdINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFCOUNTERINFOINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFCOUNTERINFOINTELPROC</name></type> <name>glad_glGetPerfCounterInfoINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfCounterInfoINTEL</name></cpp:macro> <cpp:value>glad_glGetPerfCounterInfoINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFQUERYDATAINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFQUERYDATAINTELPROC</name></type> <name>glad_glGetPerfQueryDataINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfQueryDataINTEL</name></cpp:macro> <cpp:value>glad_glGetPerfQueryDataINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFQUERYIDBYNAMEINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFQUERYIDBYNAMEINTELPROC</name></type> <name>glad_glGetPerfQueryIdByNameINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfQueryIdByNameINTEL</name></cpp:macro> <cpp:value>glad_glGetPerfQueryIdByNameINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPERFQUERYINFOINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPERFQUERYINFOINTELPROC</name></type> <name>glad_glGetPerfQueryInfoINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPerfQueryInfoINTEL</name></cpp:macro> <cpp:value>glad_glGetPerfQueryInfoINTEL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_mirror_clamp_to_edge</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_mirror_clamp_to_edge</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_mirror_clamp_to_edge</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_gpu_shader5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_gpu_shader5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_gpu_shader5</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1I64NVPROC</name></type> <name>glad_glUniform1i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1i64NV</name></cpp:macro> <cpp:value>glad_glUniform1i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2I64NVPROC</name></type> <name>glad_glUniform2i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2i64NV</name></cpp:macro> <cpp:value>glad_glUniform2i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3I64NVPROC</name></type> <name>glad_glUniform3i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3i64NV</name></cpp:macro> <cpp:value>glad_glUniform3i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4I64NVPROC</name></type> <name>glad_glUniform4i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4i64NV</name></cpp:macro> <cpp:value>glad_glUniform4i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1I64VNVPROC</name></type> <name>glad_glUniform1i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1i64vNV</name></cpp:macro> <cpp:value>glad_glUniform1i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2I64VNVPROC</name></type> <name>glad_glUniform2i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2i64vNV</name></cpp:macro> <cpp:value>glad_glUniform2i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3I64VNVPROC</name></type> <name>glad_glUniform3i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3i64vNV</name></cpp:macro> <cpp:value>glad_glUniform3i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4I64VNVPROC</name></type> <name>glad_glUniform4i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4i64vNV</name></cpp:macro> <cpp:value>glad_glUniform4i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UI64NVPROC</name></type> <name>glad_glUniform1ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1ui64NV</name></cpp:macro> <cpp:value>glad_glUniform1ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UI64NVPROC</name></type> <name>glad_glUniform2ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2ui64NV</name></cpp:macro> <cpp:value>glad_glUniform2ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UI64NVPROC</name></type> <name>glad_glUniform3ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3ui64NV</name></cpp:macro> <cpp:value>glad_glUniform3ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UI64NVPROC</name></type> <name>glad_glUniform4ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4ui64NV</name></cpp:macro> <cpp:value>glad_glUniform4ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UI64VNVPROC</name></type> <name>glad_glUniform1ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1ui64vNV</name></cpp:macro> <cpp:value>glad_glUniform1ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UI64VNVPROC</name></type> <name>glad_glUniform2ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2ui64vNV</name></cpp:macro> <cpp:value>glad_glUniform2ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UI64VNVPROC</name></type> <name>glad_glUniform3ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3ui64vNV</name></cpp:macro> <cpp:value>glad_glUniform3ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UI64VNVPROC</name></type> <name>glad_glUniform4ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4ui64vNV</name></cpp:macro> <cpp:value>glad_glUniform4ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMI64VNVPROC</name></type> <name>glad_glGetUniformi64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformi64vNV</name></cpp:macro> <cpp:value>glad_glGetUniformi64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1I64NVPROC</name></type> <name>glad_glProgramUniform1i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1i64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform1i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2I64NVPROC</name></type> <name>glad_glProgramUniform2i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2i64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform2i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3I64NVPROC</name></type> <name>glad_glProgramUniform3i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3i64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform3i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4I64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4I64NVPROC</name></type> <name>glad_glProgramUniform4i64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4i64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform4i64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1I64VNVPROC</name></type> <name>glad_glProgramUniform1i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1i64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform1i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2I64VNVPROC</name></type> <name>glad_glProgramUniform2i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2i64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform2i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3I64VNVPROC</name></type> <name>glad_glProgramUniform3i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3i64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform3i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4I64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4I64VNVPROC</name></type> <name>glad_glProgramUniform4i64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4i64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform4i64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1UI64NVPROC</name></type> <name>glad_glProgramUniform1ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1ui64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform1ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2UI64NVPROC</name></type> <name>glad_glProgramUniform2ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2ui64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform2ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3UI64NVPROC</name></type> <name>glad_glProgramUniform3ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3ui64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform3ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4UI64NVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4UI64NVPROC</name></type> <name>glad_glProgramUniform4ui64NV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4ui64NV</name></cpp:macro> <cpp:value>glad_glProgramUniform4ui64NV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM1UI64VNVPROC</name></type> <name>glad_glProgramUniform1ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform1ui64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform1ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM2UI64VNVPROC</name></type> <name>glad_glProgramUniform2ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform2ui64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform2ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM3UI64VNVPROC</name></type> <name>glad_glProgramUniform3ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform3ui64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform3ui64vNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4UI64VNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORM4UI64VNVPROC</name></type> <name>glad_glProgramUniform4ui64vNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniform4ui64vNV</name></cpp:macro> <cpp:value>glad_glProgramUniform4ui64vNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_ES2_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_ES2_compatibility</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_ES2_compatibility</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_indirect_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_indirect_parameters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_indirect_parameters</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC</name></type> <name>glad_glMultiDrawArraysIndirectCountARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArraysIndirectCountARB</name></cpp:macro> <cpp:value>glad_glMultiDrawArraysIndirectCountARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC</name></type> <name>glad_glMultiDrawElementsIndirectCountARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsIndirectCountARB</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsIndirectCountARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_half_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_half_float</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX2HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX2HNVPROC</name></type> <name>glad_glVertex2hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2hNV</name></cpp:macro> <cpp:value>glad_glVertex2hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX2HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX2HVNVPROC</name></type> <name>glad_glVertex2hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2hvNV</name></cpp:macro> <cpp:value>glad_glVertex2hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX3HNVPROC</name></type> <name>glad_glVertex3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3hNV</name></cpp:macro> <cpp:value>glad_glVertex3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX3HVNVPROC</name></type> <name>glad_glVertex3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3hvNV</name></cpp:macro> <cpp:value>glad_glVertex3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX4HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX4HNVPROC</name></type> <name>glad_glVertex4hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4hNV</name></cpp:macro> <cpp:value>glad_glVertex4hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX4HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX4HVNVPROC</name></type> <name>glad_glVertex4hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4hvNV</name></cpp:macro> <cpp:value>glad_glVertex4hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMAL3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMAL3HNVPROC</name></type> <name>glad_glNormal3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3hNV</name></cpp:macro> <cpp:value>glad_glNormal3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMAL3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMAL3HVNVPROC</name></type> <name>glad_glNormal3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3hvNV</name></cpp:macro> <cpp:value>glad_glNormal3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR3HNVPROC</name></type> <name>glad_glColor3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3hNV</name></cpp:macro> <cpp:value>glad_glColor3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR3HVNVPROC</name></type> <name>glad_glColor3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3hvNV</name></cpp:macro> <cpp:value>glad_glColor3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4HNVPROC</name></type> <name>glad_glColor4hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4hNV</name></cpp:macro> <cpp:value>glad_glColor4hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4HVNVPROC</name></type> <name>glad_glColor4hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4hvNV</name></cpp:macro> <cpp:value>glad_glColor4hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD1HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD1HNVPROC</name></type> <name>glad_glTexCoord1hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1hNV</name></cpp:macro> <cpp:value>glad_glTexCoord1hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD1HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD1HVNVPROC</name></type> <name>glad_glTexCoord1hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1hvNV</name></cpp:macro> <cpp:value>glad_glTexCoord1hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2HNVPROC</name></type> <name>glad_glTexCoord2hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2hNV</name></cpp:macro> <cpp:value>glad_glTexCoord2hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2HVNVPROC</name></type> <name>glad_glTexCoord2hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2hvNV</name></cpp:macro> <cpp:value>glad_glTexCoord2hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD3HNVPROC</name></type> <name>glad_glTexCoord3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3hNV</name></cpp:macro> <cpp:value>glad_glTexCoord3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD3HVNVPROC</name></type> <name>glad_glTexCoord3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3hvNV</name></cpp:macro> <cpp:value>glad_glTexCoord3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4HNVPROC</name></type> <name>glad_glTexCoord4hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4hNV</name></cpp:macro> <cpp:value>glad_glTexCoord4hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4HVNVPROC</name></type> <name>glad_glTexCoord4hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4hvNV</name></cpp:macro> <cpp:value>glad_glTexCoord4hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1HNVPROC</name></type> <name>glad_glMultiTexCoord1hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1hNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1HVNVPROC</name></type> <name>glad_glMultiTexCoord1hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1hvNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2HNVPROC</name></type> <name>glad_glMultiTexCoord2hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2hNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2HVNVPROC</name></type> <name>glad_glMultiTexCoord2hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2hvNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3HNVPROC</name></type> <name>glad_glMultiTexCoord3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3hNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3HVNVPROC</name></type> <name>glad_glMultiTexCoord3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3hvNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4HNVPROC</name></type> <name>glad_glMultiTexCoord4hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4hNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4HVNVPROC</name></type> <name>glad_glMultiTexCoord4hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4hvNV</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDHNVPROC</name></type> <name>glad_glFogCoordhNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordhNV</name></cpp:macro> <cpp:value>glad_glFogCoordhNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDHVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDHVNVPROC</name></type> <name>glad_glFogCoordhvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordhvNV</name></cpp:macro> <cpp:value>glad_glFogCoordhvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3HNVPROC</name></type> <name>glad_glSecondaryColor3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3hNV</name></cpp:macro> <cpp:value>glad_glSecondaryColor3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3HVNVPROC</name></type> <name>glad_glSecondaryColor3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3hvNV</name></cpp:macro> <cpp:value>glad_glSecondaryColor3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXWEIGHTHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXWEIGHTHNVPROC</name></type> <name>glad_glVertexWeighthNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexWeighthNV</name></cpp:macro> <cpp:value>glad_glVertexWeighthNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXWEIGHTHVNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXWEIGHTHVNVPROC</name></type> <name>glad_glVertexWeighthvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexWeighthvNV</name></cpp:macro> <cpp:value>glad_glVertexWeighthvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1HNVPROC</name></type> <name>glad_glVertexAttrib1hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1hNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1HVNVPROC</name></type> <name>glad_glVertexAttrib1hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib1hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2HNVPROC</name></type> <name>glad_glVertexAttrib2hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2hNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2HVNVPROC</name></type> <name>glad_glVertexAttrib2hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib2hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3HNVPROC</name></type> <name>glad_glVertexAttrib3hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3hNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3HVNVPROC</name></type> <name>glad_glVertexAttrib3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4HNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>, <parameter><decl><type><name>GLhalfNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4HNVPROC</name></type> <name>glad_glVertexAttrib4hNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4hNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4hNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4HVNVPROC</name></type> <name>glad_glVertexAttrib4hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttrib4hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS1HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS1HVNVPROC</name></type> <name>glad_glVertexAttribs1hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs1hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs1hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS2HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS2HVNVPROC</name></type> <name>glad_glVertexAttribs2hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs2hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs2hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS3HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS3HVNVPROC</name></type> <name>glad_glVertexAttribs3hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs3hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs3hvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBS4HVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLhalfNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBS4HVNVPROC</name></type> <name>glad_glVertexAttribs4hvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribs4hvNV</name></cpp:macro> <cpp:value>glad_glVertexAttribs4hvNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_coordinate_frame</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_coordinate_frame</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_coordinate_frame</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3BEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3BEXTPROC</name></type> <name>glad_glTangent3bEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3bEXT</name></cpp:macro> <cpp:value>glad_glTangent3bEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3BVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3BVEXTPROC</name></type> <name>glad_glTangent3bvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3bvEXT</name></cpp:macro> <cpp:value>glad_glTangent3bvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3DEXTPROC</name></type> <name>glad_glTangent3dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3dEXT</name></cpp:macro> <cpp:value>glad_glTangent3dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3DVEXTPROC</name></type> <name>glad_glTangent3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3dvEXT</name></cpp:macro> <cpp:value>glad_glTangent3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3FEXTPROC</name></type> <name>glad_glTangent3fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3fEXT</name></cpp:macro> <cpp:value>glad_glTangent3fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3FVEXTPROC</name></type> <name>glad_glTangent3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3fvEXT</name></cpp:macro> <cpp:value>glad_glTangent3fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3IEXTPROC</name></type> <name>glad_glTangent3iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3iEXT</name></cpp:macro> <cpp:value>glad_glTangent3iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3IVEXTPROC</name></type> <name>glad_glTangent3ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3ivEXT</name></cpp:macro> <cpp:value>glad_glTangent3ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3SEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3SEXTPROC</name></type> <name>glad_glTangent3sEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3sEXT</name></cpp:macro> <cpp:value>glad_glTangent3sEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENT3SVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENT3SVEXTPROC</name></type> <name>glad_glTangent3svEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangent3svEXT</name></cpp:macro> <cpp:value>glad_glTangent3svEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3BEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3BEXTPROC</name></type> <name>glad_glBinormal3bEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3bEXT</name></cpp:macro> <cpp:value>glad_glBinormal3bEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3BVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3BVEXTPROC</name></type> <name>glad_glBinormal3bvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3bvEXT</name></cpp:macro> <cpp:value>glad_glBinormal3bvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3DEXTPROC</name></type> <name>glad_glBinormal3dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3dEXT</name></cpp:macro> <cpp:value>glad_glBinormal3dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3DVEXTPROC</name></type> <name>glad_glBinormal3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3dvEXT</name></cpp:macro> <cpp:value>glad_glBinormal3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3FEXTPROC</name></type> <name>glad_glBinormal3fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3fEXT</name></cpp:macro> <cpp:value>glad_glBinormal3fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3FVEXTPROC</name></type> <name>glad_glBinormal3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3fvEXT</name></cpp:macro> <cpp:value>glad_glBinormal3fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3IEXTPROC</name></type> <name>glad_glBinormal3iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3iEXT</name></cpp:macro> <cpp:value>glad_glBinormal3iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3IVEXTPROC</name></type> <name>glad_glBinormal3ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3ivEXT</name></cpp:macro> <cpp:value>glad_glBinormal3ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3SEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3SEXTPROC</name></type> <name>glad_glBinormal3sEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3sEXT</name></cpp:macro> <cpp:value>glad_glBinormal3sEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMAL3SVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMAL3SVEXTPROC</name></type> <name>glad_glBinormal3svEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormal3svEXT</name></cpp:macro> <cpp:value>glad_glBinormal3svEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTANGENTPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTANGENTPOINTEREXTPROC</name></type> <name>glad_glTangentPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTangentPointerEXT</name></cpp:macro> <cpp:value>glad_glTangentPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINORMALPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINORMALPOINTEREXTPROC</name></type> <name>glad_glBinormalPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBinormalPointerEXT</name></cpp:macro> <cpp:value>glad_glBinormalPointerEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_texture_mirror_once</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_texture_mirror_once</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_texture_mirror_once</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_rasterpos_clip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_rasterpos_clip</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_IBM_rasterpos_clip</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_shadow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_shadow</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_shadow</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_deep_texture3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_deep_texture3D</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_deep_texture3D</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_draw_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_draw_parameters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_draw_parameters</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_calligraphic_fragment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_calligraphic_fragment</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_calligraphic_fragment</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_bit_encoding</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_bit_encoding</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_bit_encoding</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_compiled_vertex_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_compiled_vertex_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_compiled_vertex_array</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOCKARRAYSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOCKARRAYSEXTPROC</name></type> <name>glad_glLockArraysEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLockArraysEXT</name></cpp:macro> <cpp:value>glad_glLockArraysEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNLOCKARRAYSEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNLOCKARRAYSEXTPROC</name></type> <name>glad_glUnlockArraysEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnlockArraysEXT</name></cpp:macro> <cpp:value>glad_glUnlockArraysEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_depth_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_depth_buffer_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_depth_buffer_float</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEDNVPROC</name></type> <name>glad_glDepthRangedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangedNV</name></cpp:macro> <cpp:value>glad_glDepthRangedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHDNVPROC</name></type> <name>glad_glClearDepthdNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepthdNV</name></cpp:macro> <cpp:value>glad_glClearDepthdNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHBOUNDSDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHBOUNDSDNVPROC</name></type> <name>glad_glDepthBoundsdNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthBoundsdNV</name></cpp:macro> <cpp:value>glad_glDepthBoundsdNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_occlusion_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_occlusion_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_occlusion_query</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENOCCLUSIONQUERIESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENOCCLUSIONQUERIESNVPROC</name></type> <name>glad_glGenOcclusionQueriesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenOcclusionQueriesNV</name></cpp:macro> <cpp:value>glad_glGenOcclusionQueriesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEOCCLUSIONQUERIESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEOCCLUSIONQUERIESNVPROC</name></type> <name>glad_glDeleteOcclusionQueriesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteOcclusionQueriesNV</name></cpp:macro> <cpp:value>glad_glDeleteOcclusionQueriesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISOCCLUSIONQUERYNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISOCCLUSIONQUERYNVPROC</name></type> <name>glad_glIsOcclusionQueryNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsOcclusionQueryNV</name></cpp:macro> <cpp:value>glad_glIsOcclusionQueryNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINOCCLUSIONQUERYNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINOCCLUSIONQUERYNVPROC</name></type> <name>glad_glBeginOcclusionQueryNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginOcclusionQueryNV</name></cpp:macro> <cpp:value>glad_glBeginOcclusionQueryNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDOCCLUSIONQUERYNVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDOCCLUSIONQUERYNVPROC</name></type> <name>glad_glEndOcclusionQueryNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndOcclusionQueryNV</name></cpp:macro> <cpp:value>glad_glEndOcclusionQueryNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOCCLUSIONQUERYIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOCCLUSIONQUERYIVNVPROC</name></type> <name>glad_glGetOcclusionQueryivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetOcclusionQueryivNV</name></cpp:macro> <cpp:value>glad_glGetOcclusionQueryivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOCCLUSIONQUERYUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOCCLUSIONQUERYUIVNVPROC</name></type> <name>glad_glGetOcclusionQueryuivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetOcclusionQueryuivNV</name></cpp:macro> <cpp:value>glad_glGetOcclusionQueryuivNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_flush_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_flush_buffer_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_flush_buffer_range</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERPARAMETERIAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERPARAMETERIAPPLEPROC</name></type> <name>glad_glBufferParameteriAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferParameteriAPPLE</name></cpp:macro> <cpp:value>glad_glBufferParameteriAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC</name></type> <name>glad_glFlushMappedBufferRangeAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushMappedBufferRangeAPPLE</name></cpp:macro> <cpp:value>glad_glFlushMappedBufferRangeAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_imaging</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_imaging</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_imaging</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLEPROC</name></type> <name>glad_glColorTable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTable</name></cpp:macro> <cpp:value>glad_glColorTable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLEPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLEPARAMETERFVPROC</name></type> <name>glad_glColorTableParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTableParameterfv</name></cpp:macro> <cpp:value>glad_glColorTableParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLEPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLEPARAMETERIVPROC</name></type> <name>glad_glColorTableParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTableParameteriv</name></cpp:macro> <cpp:value>glad_glColorTableParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCOLORTABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCOLORTABLEPROC</name></type> <name>glad_glCopyColorTable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyColorTable</name></cpp:macro> <cpp:value>glad_glCopyColorTable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPROC</name></type> <name>glad_glGetColorTable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTable</name></cpp:macro> <cpp:value>glad_glGetColorTable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPARAMETERFVPROC</name></type> <name>glad_glGetColorTableParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableParameterfv</name></cpp:macro> <cpp:value>glad_glGetColorTableParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPARAMETERIVPROC</name></type> <name>glad_glGetColorTableParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableParameteriv</name></cpp:macro> <cpp:value>glad_glGetColorTableParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORSUBTABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORSUBTABLEPROC</name></type> <name>glad_glColorSubTable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorSubTable</name></cpp:macro> <cpp:value>glad_glColorSubTable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCOLORSUBTABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCOLORSUBTABLEPROC</name></type> <name>glad_glCopyColorSubTable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyColorSubTable</name></cpp:macro> <cpp:value>glad_glCopyColorSubTable</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONFILTER1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONFILTER1DPROC</name></type> <name>glad_glConvolutionFilter1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionFilter1D</name></cpp:macro> <cpp:value>glad_glConvolutionFilter1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONFILTER2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONFILTER2DPROC</name></type> <name>glad_glConvolutionFilter2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionFilter2D</name></cpp:macro> <cpp:value>glad_glConvolutionFilter2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERFPROC</name></type> <name>glad_glConvolutionParameterf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterf</name></cpp:macro> <cpp:value>glad_glConvolutionParameterf</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERFVPROC</name></type> <name>glad_glConvolutionParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterfv</name></cpp:macro> <cpp:value>glad_glConvolutionParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERIPROC</name></type> <name>glad_glConvolutionParameteri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameteri</name></cpp:macro> <cpp:value>glad_glConvolutionParameteri</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERIVPROC</name></type> <name>glad_glConvolutionParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameteriv</name></cpp:macro> <cpp:value>glad_glConvolutionParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCONVOLUTIONFILTER1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCONVOLUTIONFILTER1DPROC</name></type> <name>glad_glCopyConvolutionFilter1D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyConvolutionFilter1D</name></cpp:macro> <cpp:value>glad_glCopyConvolutionFilter1D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCONVOLUTIONFILTER2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCONVOLUTIONFILTER2DPROC</name></type> <name>glad_glCopyConvolutionFilter2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyConvolutionFilter2D</name></cpp:macro> <cpp:value>glad_glCopyConvolutionFilter2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONFILTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONFILTERPROC</name></type> <name>glad_glGetConvolutionFilter</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionFilter</name></cpp:macro> <cpp:value>glad_glGetConvolutionFilter</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONPARAMETERFVPROC</name></type> <name>glad_glGetConvolutionParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionParameterfv</name></cpp:macro> <cpp:value>glad_glGetConvolutionParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONPARAMETERIVPROC</name></type> <name>glad_glGetConvolutionParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionParameteriv</name></cpp:macro> <cpp:value>glad_glGetConvolutionParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSEPARABLEFILTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSEPARABLEFILTERPROC</name></type> <name>glad_glGetSeparableFilter</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSeparableFilter</name></cpp:macro> <cpp:value>glad_glGetSeparableFilter</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSEPARABLEFILTER2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSEPARABLEFILTER2DPROC</name></type> <name>glad_glSeparableFilter2D</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSeparableFilter2D</name></cpp:macro> <cpp:value>glad_glSeparableFilter2D</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMPROC</name></type> <name>glad_glGetHistogram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogram</name></cpp:macro> <cpp:value>glad_glGetHistogram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMPARAMETERFVPROC</name></type> <name>glad_glGetHistogramParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogramParameterfv</name></cpp:macro> <cpp:value>glad_glGetHistogramParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMPARAMETERIVPROC</name></type> <name>glad_glGetHistogramParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogramParameteriv</name></cpp:macro> <cpp:value>glad_glGetHistogramParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMINMAXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMINMAXPROC</name></type> <name>glad_glGetMinmax</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMinmax</name></cpp:macro> <cpp:value>glad_glGetMinmax</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMINMAXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMINMAXPARAMETERFVPROC</name></type> <name>glad_glGetMinmaxParameterfv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMinmaxParameterfv</name></cpp:macro> <cpp:value>glad_glGetMinmaxParameterfv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMINMAXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMINMAXPARAMETERIVPROC</name></type> <name>glad_glGetMinmaxParameteriv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMinmaxParameteriv</name></cpp:macro> <cpp:value>glad_glGetMinmaxParameteriv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLHISTOGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLHISTOGRAMPROC</name></type> <name>glad_glHistogram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glHistogram</name></cpp:macro> <cpp:value>glad_glHistogram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMINMAXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMINMAXPROC</name></type> <name>glad_glMinmax</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMinmax</name></cpp:macro> <cpp:value>glad_glMinmax</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESETHISTOGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESETHISTOGRAMPROC</name></type> <name>glad_glResetHistogram</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResetHistogram</name></cpp:macro> <cpp:value>glad_glResetHistogram</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRESETMINMAXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRESETMINMAXPROC</name></type> <name>glad_glResetMinmax</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glResetMinmax</name></cpp:macro> <cpp:value>glad_glResetMinmax</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_buffers_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_buffers_blend</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_buffers_blend</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONIARBPROC</name></type> <name>glad_glBlendEquationiARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationiARB</name></cpp:macro> <cpp:value>glad_glBlendEquationiARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEIARBPROC</name></type> <name>glad_glBlendEquationSeparateiARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparateiARB</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparateiARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCIARBPROC</name></type> <name>glad_glBlendFunciARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFunciARB</name></cpp:macro> <cpp:value>glad_glBlendFunciARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEIARBPROC</name></type> <name>glad_glBlendFuncSeparateiARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparateiARB</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparateiARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_blend_square</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_blend_square</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_blend_square</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_blend_minmax_factor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_blend_minmax_factor</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_blend_minmax_factor</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_sRGB_decode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_sRGB_decode</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_sRGB_decode</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shading_language_420pack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shading_language_420pack</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shading_language_420pack</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_meminfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_meminfo</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_meminfo</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_abgr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_abgr</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_abgr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_pinned_memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_pinned_memory</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_pinned_memory</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_snorm</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_snorm</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_snorm</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_coordinate_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_coordinate_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_texture_coordinate_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_clear_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_clear_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_clear_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_multisample</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLECOVERAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLECOVERAGEARBPROC</name></type> <name>glad_glSampleCoverageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverageARB</name></cpp:macro> <cpp:value>glad_glSampleCoverageARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_debug_label</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_debug_label</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_debug_label</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLABELOBJECTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLABELOBJECTEXTPROC</name></type> <name>glad_glLabelObjectEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLabelObjectEXT</name></cpp:macro> <cpp:value>glad_glLabelObjectEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTLABELEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTLABELEXTPROC</name></type> <name>glad_glGetObjectLabelEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectLabelEXT</name></cpp:macro> <cpp:value>glad_glGetObjectLabelEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sample_shading</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sample_shading</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_sample_shading</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMINSAMPLESHADINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMINSAMPLESHADINGARBPROC</name></type> <name>glad_glMinSampleShadingARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMinSampleShadingARB</name></cpp:macro> <cpp:value>glad_glMinSampleShadingARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INTEL_map_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTEL_map_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INTEL_map_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSYNCTEXTUREINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSYNCTEXTUREINTELPROC</name></type> <name>glad_glSyncTextureINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSyncTextureINTEL</name></cpp:macro> <cpp:value>glad_glSyncTextureINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPTEXTURE2DINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPTEXTURE2DINTELPROC</name></type> <name>glad_glUnmapTexture2DINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapTexture2DINTEL</name></cpp:macro> <cpp:value>glad_glUnmapTexture2DINTEL</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPTEXTURE2DINTELPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPTEXTURE2DINTELPROC</name></type> <name>glad_glMapTexture2DINTEL</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapTexture2DINTEL</name></cpp:macro> <cpp:value>glad_glMapTexture2DINTEL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_env_crossbar</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_env_crossbar</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_env_crossbar</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_422_pixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_422_pixels</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_422_pixels</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compute_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compute_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_compute_shader</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_logic_op</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_logic_op</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_logic_op</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_cull_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_cull_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_IBM_cull_vertex</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_vertex_array_lists</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_vertex_array_lists</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_IBM_vertex_array_lists</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORPOINTERLISTIBMPROC</name></type> <name>glad_glColorPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorPointerListIBM</name></cpp:macro> <cpp:value>glad_glColorPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORPOINTERLISTIBMPROC</name></type> <name>glad_glSecondaryColorPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorPointerListIBM</name></cpp:macro> <cpp:value>glad_glSecondaryColorPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEDGEFLAGPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLboolean</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEDGEFLAGPOINTERLISTIBMPROC</name></type> <name>glad_glEdgeFlagPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlagPointerListIBM</name></cpp:macro> <cpp:value>glad_glEdgeFlagPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGCOORDPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGCOORDPOINTERLISTIBMPROC</name></type> <name>glad_glFogCoordPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogCoordPointerListIBM</name></cpp:macro> <cpp:value>glad_glFogCoordPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXPOINTERLISTIBMPROC</name></type> <name>glad_glIndexPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexPointerListIBM</name></cpp:macro> <cpp:value>glad_glIndexPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALPOINTERLISTIBMPROC</name></type> <name>glad_glNormalPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalPointerListIBM</name></cpp:macro> <cpp:value>glad_glNormalPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDPOINTERLISTIBMPROC</name></type> <name>glad_glTexCoordPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordPointerListIBM</name></cpp:macro> <cpp:value>glad_glTexCoordPointerListIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXPOINTERLISTIBMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXPOINTERLISTIBMPROC</name></type> <name>glad_glVertexPointerListIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexPointerListIBM</name></cpp:macro> <cpp:value>glad_glVertexPointerListIBM</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_color_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_color_buffer_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_color_buffer_float</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLAMPCOLORARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLAMPCOLORARBPROC</name></type> <name>glad_glClampColorARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClampColorARB</name></cpp:macro> <cpp:value>glad_glClampColorARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_bindless_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_bindless_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_bindless_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLuint64</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTUREHANDLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTUREHANDLEARBPROC</name></type> <name>glad_glGetTextureHandleARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureHandleARB</name></cpp:macro> <cpp:value>glad_glGetTextureHandleARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint64</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXTURESAMPLERHANDLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXTURESAMPLERHANDLEARBPROC</name></type> <name>glad_glGetTextureSamplerHandleARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTextureSamplerHandleARB</name></cpp:macro> <cpp:value>glad_glGetTextureSamplerHandleARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKETEXTUREHANDLERESIDENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKETEXTUREHANDLERESIDENTARBPROC</name></type> <name>glad_glMakeTextureHandleResidentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeTextureHandleResidentARB</name></cpp:macro> <cpp:value>glad_glMakeTextureHandleResidentARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC</name></type> <name>glad_glMakeTextureHandleNonResidentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeTextureHandleNonResidentARB</name></cpp:macro> <cpp:value>glad_glMakeTextureHandleNonResidentARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint64</name></type> (<name>APIENTRYP</name> <name>PFNGLGETIMAGEHANDLEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETIMAGEHANDLEARBPROC</name></type> <name>glad_glGetImageHandleARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetImageHandleARB</name></cpp:macro> <cpp:value>glad_glGetImageHandleARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKEIMAGEHANDLERESIDENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKEIMAGEHANDLERESIDENTARBPROC</name></type> <name>glad_glMakeImageHandleResidentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeImageHandleResidentARB</name></cpp:macro> <cpp:value>glad_glMakeImageHandleResidentARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC</name></type> <name>glad_glMakeImageHandleNonResidentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMakeImageHandleNonResidentARB</name></cpp:macro> <cpp:value>glad_glMakeImageHandleNonResidentARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMHANDLEUI64ARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMHANDLEUI64ARBPROC</name></type> <name>glad_glUniformHandleui64ARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformHandleui64ARB</name></cpp:macro> <cpp:value>glad_glUniformHandleui64ARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMHANDLEUI64VARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMHANDLEUI64VARBPROC</name></type> <name>glad_glUniformHandleui64vARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformHandleui64vARB</name></cpp:macro> <cpp:value>glad_glUniformHandleui64vARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC</name></type> <name>glad_glProgramUniformHandleui64ARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformHandleui64ARB</name></cpp:macro> <cpp:value>glad_glProgramUniformHandleui64ARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC</name></type> <name>glad_glProgramUniformHandleui64vARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramUniformHandleui64vARB</name></cpp:macro> <cpp:value>glad_glProgramUniformHandleui64vARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTEXTUREHANDLERESIDENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTEXTUREHANDLERESIDENTARBPROC</name></type> <name>glad_glIsTextureHandleResidentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTextureHandleResidentARB</name></cpp:macro> <cpp:value>glad_glIsTextureHandleResidentARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISIMAGEHANDLERESIDENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISIMAGEHANDLERESIDENTARBPROC</name></type> <name>glad_glIsImageHandleResidentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsImageHandleResidentARB</name></cpp:macro> <cpp:value>glad_glIsImageHandleResidentARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1UI64ARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1UI64ARBPROC</name></type> <name>glad_glVertexAttribL1ui64ARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1ui64ARB</name></cpp:macro> <cpp:value>glad_glVertexAttribL1ui64ARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1UI64VARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1UI64VARBPROC</name></type> <name>glad_glVertexAttribL1ui64vARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1ui64vARB</name></cpp:macro> <cpp:value>glad_glVertexAttribL1ui64vARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBLUI64VARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBLUI64VARBPROC</name></type> <name>glad_glGetVertexAttribLui64vARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribLui64vARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribLui64vARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_window_pos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_window_pos</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_window_pos</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2DARBPROC</name></type> <name>glad_glWindowPos2dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2dARB</name></cpp:macro> <cpp:value>glad_glWindowPos2dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2DVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2DVARBPROC</name></type> <name>glad_glWindowPos2dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2dvARB</name></cpp:macro> <cpp:value>glad_glWindowPos2dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2FARBPROC</name></type> <name>glad_glWindowPos2fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2fARB</name></cpp:macro> <cpp:value>glad_glWindowPos2fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2FVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2FVARBPROC</name></type> <name>glad_glWindowPos2fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2fvARB</name></cpp:macro> <cpp:value>glad_glWindowPos2fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2IARBPROC</name></type> <name>glad_glWindowPos2iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2iARB</name></cpp:macro> <cpp:value>glad_glWindowPos2iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2IVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2IVARBPROC</name></type> <name>glad_glWindowPos2ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2ivARB</name></cpp:macro> <cpp:value>glad_glWindowPos2ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2SARBPROC</name></type> <name>glad_glWindowPos2sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2sARB</name></cpp:macro> <cpp:value>glad_glWindowPos2sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS2SVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS2SVARBPROC</name></type> <name>glad_glWindowPos2svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos2svARB</name></cpp:macro> <cpp:value>glad_glWindowPos2svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3DARBPROC</name></type> <name>glad_glWindowPos3dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3dARB</name></cpp:macro> <cpp:value>glad_glWindowPos3dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3DVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3DVARBPROC</name></type> <name>glad_glWindowPos3dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3dvARB</name></cpp:macro> <cpp:value>glad_glWindowPos3dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3FARBPROC</name></type> <name>glad_glWindowPos3fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3fARB</name></cpp:macro> <cpp:value>glad_glWindowPos3fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3FVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3FVARBPROC</name></type> <name>glad_glWindowPos3fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3fvARB</name></cpp:macro> <cpp:value>glad_glWindowPos3fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3IARBPROC</name></type> <name>glad_glWindowPos3iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3iARB</name></cpp:macro> <cpp:value>glad_glWindowPos3iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3IVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3IVARBPROC</name></type> <name>glad_glWindowPos3ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3ivARB</name></cpp:macro> <cpp:value>glad_glWindowPos3ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3SARBPROC</name></type> <name>glad_glWindowPos3sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3sARB</name></cpp:macro> <cpp:value>glad_glWindowPos3sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWINDOWPOS3SVARBPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWINDOWPOS3SVARBPROC</name></type> <name>glad_glWindowPos3svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWindowPos3svARB</name></cpp:macro> <cpp:value>glad_glWindowPos3svARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_internalformat_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_internalformat_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_internalformat_query</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shadow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shadow</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shadow</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_mirrored_repeat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_mirrored_repeat</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_mirrored_repeat</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shader_image_load_store</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shader_image_load_store</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_shader_image_load_store</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDIMAGETEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDIMAGETEXTUREEXTPROC</name></type> <name>glad_glBindImageTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindImageTextureEXT</name></cpp:macro> <cpp:value>glad_glBindImageTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMEMORYBARRIEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMEMORYBARRIEREXTPROC</name></type> <name>glad_glMemoryBarrierEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMemoryBarrierEXT</name></cpp:macro> <cpp:value>glad_glMemoryBarrierEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_copy_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_copy_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_copy_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXIMAGE1DEXTPROC</name></type> <name>glad_glCopyTexImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage1DEXT</name></cpp:macro> <cpp:value>glad_glCopyTexImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXIMAGE2DEXTPROC</name></type> <name>glad_glCopyTexImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage2DEXT</name></cpp:macro> <cpp:value>glad_glCopyTexImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE1DEXTPROC</name></type> <name>glad_glCopyTexSubImage1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage1DEXT</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE2DEXTPROC</name></type> <name>glad_glCopyTexSubImage2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage2DEXT</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE3DEXTPROC</name></type> <name>glad_glCopyTexSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage3DEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_register_combiners2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_register_combiners2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_register_combiners2</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINERSTAGEPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINERSTAGEPARAMETERFVNVPROC</name></type> <name>glad_glCombinerStageParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerStageParameterfvNV</name></cpp:macro> <cpp:value>glad_glCombinerStageParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC</name></type> <name>glad_glGetCombinerStageParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCombinerStageParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetCombinerStageParameterfvNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ir_instrument1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ir_instrument1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_ir_instrument1</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_draw_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_draw_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_draw_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWTEXTURENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWTEXTURENVPROC</name></type> <name>glad_glDrawTextureNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawTextureNV</name></cpp:macro> <cpp:value>glad_glDrawTextureNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_shared_exponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_shared_exponent</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_shared_exponent</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_instanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_instanced</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_draw_instanced</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSINSTANCEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSINSTANCEDEXTPROC</name></type> <name>glad_glDrawArraysInstancedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysInstancedEXT</name></cpp:macro> <cpp:value>glad_glDrawArraysInstancedEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDEXTPROC</name></type> <name>glad_glDrawElementsInstancedEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedEXT</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_copy_depth_to_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_copy_depth_to_color</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_copy_depth_to_color</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_viewport_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_viewport_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_viewport_array</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_separate_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_separate_shader_objects</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_separate_shader_objects</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_depth_bounds_test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_depth_bounds_test</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_depth_bounds_test</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHBOUNDSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLclampd</name></type></decl></parameter>, <parameter><decl><type><name>GLclampd</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHBOUNDSEXTPROC</name></type> <name>glad_glDepthBoundsEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthBoundsEXT</name></cpp:macro> <cpp:value>glad_glDepthBoundsEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_image_transform</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_image_transform</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_HP_image_transform</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLIMAGETRANSFORMPARAMETERIHPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLIMAGETRANSFORMPARAMETERIHPPROC</name></type> <name>glad_glImageTransformParameteriHP</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glImageTransformParameteriHP</name></cpp:macro> <cpp:value>glad_glImageTransformParameteriHP</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLIMAGETRANSFORMPARAMETERFHPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLIMAGETRANSFORMPARAMETERFHPPROC</name></type> <name>glad_glImageTransformParameterfHP</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glImageTransformParameterfHP</name></cpp:macro> <cpp:value>glad_glImageTransformParameterfHP</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLIMAGETRANSFORMPARAMETERIVHPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLIMAGETRANSFORMPARAMETERIVHPPROC</name></type> <name>glad_glImageTransformParameterivHP</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glImageTransformParameterivHP</name></cpp:macro> <cpp:value>glad_glImageTransformParameterivHP</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLIMAGETRANSFORMPARAMETERFVHPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLIMAGETRANSFORMPARAMETERFVHPPROC</name></type> <name>glad_glImageTransformParameterfvHP</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glImageTransformParameterfvHP</name></cpp:macro> <cpp:value>glad_glImageTransformParameterfvHP</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC</name></type> <name>glad_glGetImageTransformParameterivHP</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetImageTransformParameterivHP</name></cpp:macro> <cpp:value>glad_glGetImageTransformParameterivHP</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC</name></type> <name>glad_glGetImageTransformParameterfvHP</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetImageTransformParameterfvHP</name></cpp:macro> <cpp:value>glad_glGetImageTransformParameterfvHP</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_env_add</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_env_add</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_env_add</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_video_capture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_video_capture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINVIDEOCAPTURENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINVIDEOCAPTURENVPROC</name></type> <name>glad_glBeginVideoCaptureNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginVideoCaptureNV</name></cpp:macro> <cpp:value>glad_glBeginVideoCaptureNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptrARB</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC</name></type> <name>glad_glBindVideoCaptureStreamBufferNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVideoCaptureStreamBufferNV</name></cpp:macro> <cpp:value>glad_glBindVideoCaptureStreamBufferNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC</name></type> <name>glad_glBindVideoCaptureStreamTextureNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVideoCaptureStreamTextureNV</name></cpp:macro> <cpp:value>glad_glBindVideoCaptureStreamTextureNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDVIDEOCAPTURENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDVIDEOCAPTURENVPROC</name></type> <name>glad_glEndVideoCaptureNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndVideoCaptureNV</name></cpp:macro> <cpp:value>glad_glEndVideoCaptureNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOCAPTUREIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOCAPTUREIVNVPROC</name></type> <name>glad_glGetVideoCaptureivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoCaptureivNV</name></cpp:macro> <cpp:value>glad_glGetVideoCaptureivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOCAPTURESTREAMIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOCAPTURESTREAMIVNVPROC</name></type> <name>glad_glGetVideoCaptureStreamivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoCaptureStreamivNV</name></cpp:macro> <cpp:value>glad_glGetVideoCaptureStreamivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOCAPTURESTREAMFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOCAPTURESTREAMFVNVPROC</name></type> <name>glad_glGetVideoCaptureStreamfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoCaptureStreamfvNV</name></cpp:macro> <cpp:value>glad_glGetVideoCaptureStreamfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVIDEOCAPTURESTREAMDVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVIDEOCAPTURESTREAMDVNVPROC</name></type> <name>glad_glGetVideoCaptureStreamdvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVideoCaptureStreamdvNV</name></cpp:macro> <cpp:value>glad_glGetVideoCaptureStreamdvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLVIDEOCAPTURENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint64EXT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIDEOCAPTURENVPROC</name></type> <name>glad_glVideoCaptureNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVideoCaptureNV</name></cpp:macro> <cpp:value>glad_glVideoCaptureNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC</name></type> <name>glad_glVideoCaptureStreamParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVideoCaptureStreamParameterivNV</name></cpp:macro> <cpp:value>glad_glVideoCaptureStreamParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC</name></type> <name>glad_glVideoCaptureStreamParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVideoCaptureStreamParameterfvNV</name></cpp:macro> <cpp:value>glad_glVideoCaptureStreamParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC</name></type> <name>glad_glVideoCaptureStreamParameterdvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVideoCaptureStreamParameterdvNV</name></cpp:macro> <cpp:value>glad_glVideoCaptureStreamParameterdvNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sampler_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sampler_objects</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_sampler_objects</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_matrix_palette</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_matrix_palette</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_matrix_palette</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCURRENTPALETTEMATRIXARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCURRENTPALETTEMATRIXARBPROC</name></type> <name>glad_glCurrentPaletteMatrixARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCurrentPaletteMatrixARB</name></cpp:macro> <cpp:value>glad_glCurrentPaletteMatrixARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXINDEXUBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXINDEXUBVARBPROC</name></type> <name>glad_glMatrixIndexubvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixIndexubvARB</name></cpp:macro> <cpp:value>glad_glMatrixIndexubvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXINDEXUSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXINDEXUSVARBPROC</name></type> <name>glad_glMatrixIndexusvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixIndexusvARB</name></cpp:macro> <cpp:value>glad_glMatrixIndexusvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXINDEXUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXINDEXUIVARBPROC</name></type> <name>glad_glMatrixIndexuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixIndexuivARB</name></cpp:macro> <cpp:value>glad_glMatrixIndexuivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATRIXINDEXPOINTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATRIXINDEXPOINTERARBPROC</name></type> <name>glad_glMatrixIndexPointerARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMatrixIndexPointerARB</name></cpp:macro> <cpp:value>glad_glMatrixIndexPointerARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_color_mask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_color_mask</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture_color_mask</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURECOLORMASKSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURECOLORMASKSGISPROC</name></type> <name>glad_glTextureColorMaskSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureColorMaskSGIS</name></cpp:macro> <cpp:value>glad_glTextureColorMaskSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_packed_pixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_packed_pixels</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_packed_pixels</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_compression</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DARBPROC</name></type> <name>glad_glCompressedTexImage3DARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage3DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexImage3DARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DARBPROC</name></type> <name>glad_glCompressedTexImage2DARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage2DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexImage2DARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DARBPROC</name></type> <name>glad_glCompressedTexImage1DARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage1DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexImage1DARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</name></type> <name>glad_glCompressedTexSubImage3DARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage3DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage3DARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</name></type> <name>glad_glCompressedTexSubImage2DARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage2DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage2DARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</name></type> <name>glad_glCompressedTexSubImage1DARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage1DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage1DARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEARBPROC</name></type> <name>glad_glGetCompressedTexImageARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedTexImageARB</name></cpp:macro> <cpp:value>glad_glGetCompressedTexImageARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_aux_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_aux_depth_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_aux_depth_stencil</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_subroutine</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_subroutine</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_subroutine</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_storage_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_storage_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_storage_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_attrib_64bit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_attrib_64bit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_attrib_64bit</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1DEXTPROC</name></type> <name>glad_glVertexAttribL1dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1dEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL1dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2DEXTPROC</name></type> <name>glad_glVertexAttribL2dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2dEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL2dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3DEXTPROC</name></type> <name>glad_glVertexAttribL3dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3dEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL3dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4DEXTPROC</name></type> <name>glad_glVertexAttribL4dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4dEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL4dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL1DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL1DVEXTPROC</name></type> <name>glad_glVertexAttribL1dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL1dvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL1dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL2DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL2DVEXTPROC</name></type> <name>glad_glVertexAttribL2dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL2dvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL2dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL3DVEXTPROC</name></type> <name>glad_glVertexAttribL3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL3dvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBL4DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBL4DVEXTPROC</name></type> <name>glad_glVertexAttribL4dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribL4dvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribL4dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBLPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBLPOINTEREXTPROC</name></type> <name>glad_glVertexAttribLPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribLPointerEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribLPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBLDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBLDVEXTPROC</name></type> <name>glad_glGetVertexAttribLdvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribLdvEXT</name></cpp:macro> <cpp:value>glad_glGetVertexAttribLdvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_depth_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_buffer_store</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_buffer_store</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_buffer_store</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_query_matrix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_query_matrix</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OES_query_matrix</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLbitfield</name></type> (<name>APIENTRYP</name> <name>PFNGLQUERYMATRIXXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLQUERYMATRIXXOESPROC</name></type> <name>glad_glQueryMatrixxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glQueryMatrixxOES</name></cpp:macro> <cpp:value>glad_glQueryMatrixxOES</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_texture_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_texture_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_texture_range</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXTURERANGEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXTURERANGEAPPLEPROC</name></type> <name>glad_glTextureRangeAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTextureRangeAPPLE</name></cpp:macro> <cpp:value>glad_glTextureRangeAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC</name></type> <name>glad_glGetTexParameterPointervAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterPointervAPPLE</name></cpp:macro> <cpp:value>glad_glGetTexParameterPointervAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_storage_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_storage_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_storage_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_query_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_query_lod</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_query_lod</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_copy_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_copy_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_copy_buffer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_image_size</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_image_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_image_size</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_atomic_counters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_atomic_counters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_shader_atomic_counters</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_object_purgeable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_object_purgeable</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_object_purgeable</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLOBJECTPURGEABLEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLOBJECTPURGEABLEAPPLEPROC</name></type> <name>glad_glObjectPurgeableAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectPurgeableAPPLE</name></cpp:macro> <cpp:value>glad_glObjectPurgeableAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLOBJECTUNPURGEABLEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLOBJECTUNPURGEABLEAPPLEPROC</name></type> <name>glad_glObjectUnpurgeableAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glObjectUnpurgeableAPPLE</name></cpp:macro> <cpp:value>glad_glObjectUnpurgeableAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTPARAMETERIVAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTPARAMETERIVAPPLEPROC</name></type> <name>glad_glGetObjectParameterivAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectParameterivAPPLE</name></cpp:macro> <cpp:value>glad_glGetObjectParameterivAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_occlusion_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_occlusion_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_occlusion_query</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENQUERIESARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENQUERIESARBPROC</name></type> <name>glad_glGenQueriesARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenQueriesARB</name></cpp:macro> <cpp:value>glad_glGenQueriesARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEQUERIESARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEQUERIESARBPROC</name></type> <name>glad_glDeleteQueriesARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteQueriesARB</name></cpp:macro> <cpp:value>glad_glDeleteQueriesARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISQUERYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISQUERYARBPROC</name></type> <name>glad_glIsQueryARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsQueryARB</name></cpp:macro> <cpp:value>glad_glIsQueryARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINQUERYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINQUERYARBPROC</name></type> <name>glad_glBeginQueryARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginQueryARB</name></cpp:macro> <cpp:value>glad_glBeginQueryARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDQUERYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDQUERYARBPROC</name></type> <name>glad_glEndQueryARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndQueryARB</name></cpp:macro> <cpp:value>glad_glEndQueryARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYIVARBPROC</name></type> <name>glad_glGetQueryivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryivARB</name></cpp:macro> <cpp:value>glad_glGetQueryivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTIVARBPROC</name></type> <name>glad_glGetQueryObjectivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectivARB</name></cpp:macro> <cpp:value>glad_glGetQueryObjectivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTUIVARBPROC</name></type> <name>glad_glGetQueryObjectuivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectuivARB</name></cpp:macro> <cpp:value>glad_glGetQueryObjectuivARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INGR_color_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INGR_color_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INGR_color_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_color_table</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_color_table</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGI_color_table</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLESGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLESGIPROC</name></type> <name>glad_glColorTableSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTableSGI</name></cpp:macro> <cpp:value>glad_glColorTableSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLEPARAMETERFVSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLEPARAMETERFVSGIPROC</name></type> <name>glad_glColorTableParameterfvSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTableParameterfvSGI</name></cpp:macro> <cpp:value>glad_glColorTableParameterfvSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORTABLEPARAMETERIVSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORTABLEPARAMETERIVSGIPROC</name></type> <name>glad_glColorTableParameterivSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorTableParameterivSGI</name></cpp:macro> <cpp:value>glad_glColorTableParameterivSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYCOLORTABLESGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYCOLORTABLESGIPROC</name></type> <name>glad_glCopyColorTableSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyColorTableSGI</name></cpp:macro> <cpp:value>glad_glCopyColorTableSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLESGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLESGIPROC</name></type> <name>glad_glGetColorTableSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableSGI</name></cpp:macro> <cpp:value>glad_glGetColorTableSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPARAMETERFVSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPARAMETERFVSGIPROC</name></type> <name>glad_glGetColorTableParameterfvSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableParameterfvSGI</name></cpp:macro> <cpp:value>glad_glGetColorTableParameterfvSGI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOLORTABLEPARAMETERIVSGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOLORTABLEPARAMETERIVSGIPROC</name></type> <name>glad_glGetColorTableParameterivSGI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetColorTableParameterivSGI</name></cpp:macro> <cpp:value>glad_glGetColorTableParameterivSGI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_gpu_program5_mem_extended</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_gpu_program5_mem_extended</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_gpu_program5_mem_extended</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_cube_map_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_cube_map_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_cube_map_array</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_scalebias_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_scalebias_hint</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_scalebias_hint</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_gpu_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_gpu_shader4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_gpu_shader4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMUIVEXTPROC</name></type> <name>glad_glGetUniformuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformuivEXT</name></cpp:macro> <cpp:value>glad_glGetUniformuivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGDATALOCATIONEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGDATALOCATIONEXTPROC</name></type> <name>glad_glBindFragDataLocationEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocationEXT</name></cpp:macro> <cpp:value>glad_glBindFragDataLocationEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGDATALOCATIONEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGDATALOCATIONEXTPROC</name></type> <name>glad_glGetFragDataLocationEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataLocationEXT</name></cpp:macro> <cpp:value>glad_glGetFragDataLocationEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UIEXTPROC</name></type> <name>glad_glUniform1uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1uiEXT</name></cpp:macro> <cpp:value>glad_glUniform1uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UIEXTPROC</name></type> <name>glad_glUniform2uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2uiEXT</name></cpp:macro> <cpp:value>glad_glUniform2uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UIEXTPROC</name></type> <name>glad_glUniform3uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3uiEXT</name></cpp:macro> <cpp:value>glad_glUniform3uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UIEXTPROC</name></type> <name>glad_glUniform4uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4uiEXT</name></cpp:macro> <cpp:value>glad_glUniform4uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UIVEXTPROC</name></type> <name>glad_glUniform1uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1uivEXT</name></cpp:macro> <cpp:value>glad_glUniform1uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UIVEXTPROC</name></type> <name>glad_glUniform2uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2uivEXT</name></cpp:macro> <cpp:value>glad_glUniform2uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UIVEXTPROC</name></type> <name>glad_glUniform3uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3uivEXT</name></cpp:macro> <cpp:value>glad_glUniform3uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UIVEXTPROC</name></type> <name>glad_glUniform4uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4uivEXT</name></cpp:macro> <cpp:value>glad_glUniform4uivEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_geometry_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_geometry_program4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_geometry_program4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMVERTEXLIMITNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMVERTEXLIMITNVPROC</name></type> <name>glad_glProgramVertexLimitNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramVertexLimitNV</name></cpp:macro> <cpp:value>glad_glProgramVertexLimitNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTUREEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTUREEXTPROC</name></type> <name>glad_glFramebufferTextureEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTextureEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC</name></type> <name>glad_glFramebufferTextureLayerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureLayerEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTextureLayerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC</name></type> <name>glad_glFramebufferTextureFaceEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureFaceEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTextureFaceEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_multisample_blit_scaled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_multisample_blit_scaled</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_multisample_blit_scaled</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_debug_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_debug_output</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_debug_output</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEENABLEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEENABLEAMDPROC</name></type> <name>glad_glDebugMessageEnableAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageEnableAMD</name></cpp:macro> <cpp:value>glad_glDebugMessageEnableAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEINSERTAMDPROC</name></type> <name>glad_glDebugMessageInsertAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsertAMD</name></cpp:macro> <cpp:value>glad_glDebugMessageInsertAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROCAMD</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECALLBACKAMDPROC</name></type> <name>glad_glDebugMessageCallbackAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallbackAMD</name></cpp:macro> <cpp:value>glad_glDebugMessageCallbackAMD</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDEBUGMESSAGELOGAMDPROC</name></type> <name>glad_glGetDebugMessageLogAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLogAMD</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLogAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_border_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_border_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_border_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_coord_conventions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_coord_conventions</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_coord_conventions</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multitexture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multitexture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_multitexture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVETEXTUREARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVETEXTUREARBPROC</name></type> <name>glad_glActiveTextureARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveTextureARB</name></cpp:macro> <cpp:value>glad_glActiveTextureARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIENTACTIVETEXTUREARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIENTACTIVETEXTUREARBPROC</name></type> <name>glad_glClientActiveTextureARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientActiveTextureARB</name></cpp:macro> <cpp:value>glad_glClientActiveTextureARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1DARBPROC</name></type> <name>glad_glMultiTexCoord1dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1dARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1DVARBPROC</name></type> <name>glad_glMultiTexCoord1dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1dvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1FARBPROC</name></type> <name>glad_glMultiTexCoord1fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1fARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1FVARBPROC</name></type> <name>glad_glMultiTexCoord1fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1fvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1IARBPROC</name></type> <name>glad_glMultiTexCoord1iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1iARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1IVARBPROC</name></type> <name>glad_glMultiTexCoord1ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1ivARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1SARBPROC</name></type> <name>glad_glMultiTexCoord1sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1sARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1SVARBPROC</name></type> <name>glad_glMultiTexCoord1svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1svARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2DARBPROC</name></type> <name>glad_glMultiTexCoord2dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2dARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2DVARBPROC</name></type> <name>glad_glMultiTexCoord2dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2dvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2FARBPROC</name></type> <name>glad_glMultiTexCoord2fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2fARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2FVARBPROC</name></type> <name>glad_glMultiTexCoord2fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2fvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2IARBPROC</name></type> <name>glad_glMultiTexCoord2iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2iARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2IVARBPROC</name></type> <name>glad_glMultiTexCoord2ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2ivARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2SARBPROC</name></type> <name>glad_glMultiTexCoord2sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2sARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2SVARBPROC</name></type> <name>glad_glMultiTexCoord2svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2svARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3DARBPROC</name></type> <name>glad_glMultiTexCoord3dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3dARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3DVARBPROC</name></type> <name>glad_glMultiTexCoord3dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3dvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3FARBPROC</name></type> <name>glad_glMultiTexCoord3fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3fARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3FVARBPROC</name></type> <name>glad_glMultiTexCoord3fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3fvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3IARBPROC</name></type> <name>glad_glMultiTexCoord3iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3iARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3IVARBPROC</name></type> <name>glad_glMultiTexCoord3ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3ivARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3SARBPROC</name></type> <name>glad_glMultiTexCoord3sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3sARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3SVARBPROC</name></type> <name>glad_glMultiTexCoord3svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3svARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3svARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4DARBPROC</name></type> <name>glad_glMultiTexCoord4dARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4dARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4dARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4DVARBPROC</name></type> <name>glad_glMultiTexCoord4dvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4dvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4dvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4FARBPROC</name></type> <name>glad_glMultiTexCoord4fARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4fARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4fARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4FVARBPROC</name></type> <name>glad_glMultiTexCoord4fvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4fvARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4fvARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4IARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4IARBPROC</name></type> <name>glad_glMultiTexCoord4iARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4iARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4iARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4IVARBPROC</name></type> <name>glad_glMultiTexCoord4ivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4ivARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4ivARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4SARBPROC</name></type> <name>glad_glMultiTexCoord4sARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4sARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4sARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4SVARBPROC</name></type> <name>glad_glMultiTexCoord4svARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4svARB</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4svARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_polynomial_ffd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_polynomial_ffd</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_polynomial_ffd</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEFORMATIONMAP3DSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEFORMATIONMAP3DSGIXPROC</name></type> <name>glad_glDeformationMap3dSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeformationMap3dSGIX</name></cpp:macro> <cpp:value>glad_glDeformationMap3dSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEFORMATIONMAP3FSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEFORMATIONMAP3FSGIXPROC</name></type> <name>glad_glDeformationMap3fSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeformationMap3fSGIX</name></cpp:macro> <cpp:value>glad_glDeformationMap3fSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEFORMSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEFORMSGIXPROC</name></type> <name>glad_glDeformSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeformSGIX</name></cpp:macro> <cpp:value>glad_glDeformSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC</name></type> <name>glad_glLoadIdentityDeformationMapSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadIdentityDeformationMapSGIX</name></cpp:macro> <cpp:value>glad_glLoadIdentityDeformationMapSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_provoking_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_provoking_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_provoking_vertex</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROVOKINGVERTEXEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROVOKINGVERTEXEXTPROC</name></type> <name>glad_glProvokingVertexEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProvokingVertexEXT</name></cpp:macro> <cpp:value>glad_glProvokingVertexEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_point_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_point_parameters</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_point_parameters</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFARBPROC</name></type> <name>glad_glPointParameterfARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfARB</name></cpp:macro> <cpp:value>glad_glPointParameterfARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFVARBPROC</name></type> <name>glad_glPointParameterfvARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfvARB</name></cpp:macro> <cpp:value>glad_glPointParameterfvARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_image_load_store</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_image_load_store</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_image_load_store</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_occlusion_test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_occlusion_test</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_HP_occlusion_test</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_ES3_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_ES3_compatibility</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_ES3_compatibility</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_framezoom</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_framezoom</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_framezoom</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEZOOMSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEZOOMSGIXPROC</name></type> <name>glad_glFrameZoomSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrameZoomSGIX</name></cpp:macro> <cpp:value>glad_glFrameZoomSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_buffer_object_rgb32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_buffer_object_rgb32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_buffer_object_rgb32</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_bindless_multi_draw_indirect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_bindless_multi_draw_indirect</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_bindless_multi_draw_indirect</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC</name></type> <name>glad_glMultiDrawArraysIndirectBindlessNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArraysIndirectBindlessNV</name></cpp:macro> <cpp:value>glad_glMultiDrawArraysIndirectBindlessNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC</name></type> <name>glad_glMultiDrawElementsIndirectBindlessNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsIndirectBindlessNV</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsIndirectBindlessNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_multi_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_multi_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_texture_multi_buffer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_transform_feedback</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_transform_feedback</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_transform_feedback</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINTRANSFORMFEEDBACKEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINTRANSFORMFEEDBACKEXTPROC</name></type> <name>glad_glBeginTransformFeedbackEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginTransformFeedbackEXT</name></cpp:macro> <cpp:value>glad_glBeginTransformFeedbackEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDTRANSFORMFEEDBACKEXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDTRANSFORMFEEDBACKEXTPROC</name></type> <name>glad_glEndTransformFeedbackEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndTransformFeedbackEXT</name></cpp:macro> <cpp:value>glad_glEndTransformFeedbackEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERRANGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERRANGEEXTPROC</name></type> <name>glad_glBindBufferRangeEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferRangeEXT</name></cpp:macro> <cpp:value>glad_glBindBufferRangeEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFEROFFSETEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFEROFFSETEXTPROC</name></type> <name>glad_glBindBufferOffsetEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferOffsetEXT</name></cpp:macro> <cpp:value>glad_glBindBufferOffsetEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERBASEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERBASEEXTPROC</name></type> <name>glad_glBindBufferBaseEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferBaseEXT</name></cpp:macro> <cpp:value>glad_glBindBufferBaseEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC</name></type> <name>glad_glTransformFeedbackVaryingsEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackVaryingsEXT</name></cpp:macro> <cpp:value>glad_glTransformFeedbackVaryingsEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC</name></type> <name>glad_glGetTransformFeedbackVaryingEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTransformFeedbackVaryingEXT</name></cpp:macro> <cpp:value>glad_glGetTransformFeedbackVaryingEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_texture_compression_astc_ldr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KHR_texture_compression_astc_ldr</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_KHR_texture_compression_astc_ldr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_3DFX_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DFX_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_3DFX_multisample</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INTEL_fragment_shader_ordering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTEL_fragment_shader_ordering</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INTEL_fragment_shader_ordering</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_env_dot3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_env_dot3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_env_dot3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_gpu_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_gpu_program4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_gpu_program4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERI4INVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERI4INVPROC</name></type> <name>glad_glProgramLocalParameterI4iNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameterI4iNV</name></cpp:macro> <cpp:value>glad_glProgramLocalParameterI4iNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC</name></type> <name>glad_glProgramLocalParameterI4ivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameterI4ivNV</name></cpp:macro> <cpp:value>glad_glProgramLocalParameterI4ivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC</name></type> <name>glad_glProgramLocalParametersI4ivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParametersI4ivNV</name></cpp:macro> <cpp:value>glad_glProgramLocalParametersI4ivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERI4UINVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERI4UINVPROC</name></type> <name>glad_glProgramLocalParameterI4uiNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameterI4uiNV</name></cpp:macro> <cpp:value>glad_glProgramLocalParameterI4uiNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC</name></type> <name>glad_glProgramLocalParameterI4uivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameterI4uivNV</name></cpp:macro> <cpp:value>glad_glProgramLocalParameterI4uivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC</name></type> <name>glad_glProgramLocalParametersI4uivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParametersI4uivNV</name></cpp:macro> <cpp:value>glad_glProgramLocalParametersI4uivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERI4INVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERI4INVPROC</name></type> <name>glad_glProgramEnvParameterI4iNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameterI4iNV</name></cpp:macro> <cpp:value>glad_glProgramEnvParameterI4iNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERI4IVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERI4IVNVPROC</name></type> <name>glad_glProgramEnvParameterI4ivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameterI4ivNV</name></cpp:macro> <cpp:value>glad_glProgramEnvParameterI4ivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERSI4IVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERSI4IVNVPROC</name></type> <name>glad_glProgramEnvParametersI4ivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParametersI4ivNV</name></cpp:macro> <cpp:value>glad_glProgramEnvParametersI4ivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERI4UINVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERI4UINVPROC</name></type> <name>glad_glProgramEnvParameterI4uiNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameterI4uiNV</name></cpp:macro> <cpp:value>glad_glProgramEnvParameterI4uiNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERI4UIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERI4UIVNVPROC</name></type> <name>glad_glProgramEnvParameterI4uivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameterI4uivNV</name></cpp:macro> <cpp:value>glad_glProgramEnvParameterI4uivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC</name></type> <name>glad_glProgramEnvParametersI4uivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParametersI4uivNV</name></cpp:macro> <cpp:value>glad_glProgramEnvParametersI4uivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC</name></type> <name>glad_glGetProgramLocalParameterIivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramLocalParameterIivNV</name></cpp:macro> <cpp:value>glad_glGetProgramLocalParameterIivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC</name></type> <name>glad_glGetProgramLocalParameterIuivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramLocalParameterIuivNV</name></cpp:macro> <cpp:value>glad_glGetProgramLocalParameterIuivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMENVPARAMETERIIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMENVPARAMETERIIVNVPROC</name></type> <name>glad_glGetProgramEnvParameterIivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramEnvParameterIivNV</name></cpp:macro> <cpp:value>glad_glGetProgramEnvParameterIivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC</name></type> <name>glad_glGetProgramEnvParameterIuivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramEnvParameterIuivNV</name></cpp:macro> <cpp:value>glad_glGetProgramEnvParameterIuivNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_gpu_program5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_gpu_program5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_gpu_program5</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC</name></type> <name>glad_glProgramSubroutineParametersuivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramSubroutineParametersuivNV</name></cpp:macro> <cpp:value>glad_glProgramSubroutineParametersuivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC</name></type> <name>glad_glGetProgramSubroutineParameteruivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramSubroutineParameteruivNV</name></cpp:macro> <cpp:value>glad_glGetProgramSubroutineParameteruivNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_float_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_float_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_float_buffer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_edge_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_edge_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture_edge_clamp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_slice_accum</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_slice_accum</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUN_slice_accum</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_index_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shader_image_load_formatted</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shader_image_load_formatted</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_shader_image_load_formatted</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_geometry_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_geometry_shader4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_geometry_shader4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMPARAMETERIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMPARAMETERIARBPROC</name></type> <name>glad_glProgramParameteriARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramParameteriARB</name></cpp:macro> <cpp:value>glad_glProgramParameteriARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTUREARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTUREARBPROC</name></type> <name>glad_glFramebufferTextureARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureARB</name></cpp:macro> <cpp:value>glad_glFramebufferTextureARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERARBPROC</name></type> <name>glad_glFramebufferTextureLayerARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureLayerARB</name></cpp:macro> <cpp:value>glad_glFramebufferTextureLayerARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTUREFACEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTUREFACEARBPROC</name></type> <name>glad_glFramebufferTextureFaceARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureFaceARB</name></cpp:macro> <cpp:value>glad_glFramebufferTextureFaceARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_separate_specular_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_separate_specular_color</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_separate_specular_color</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_depth_clamp_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_depth_clamp_separate</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_depth_clamp_separate</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_convolution_border_modes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_convolution_border_modes</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUN_convolution_border_modes</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_sprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_sprite</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_sprite</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSPRITEPARAMETERFSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSPRITEPARAMETERFSGIXPROC</name></type> <name>glad_glSpriteParameterfSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSpriteParameterfSGIX</name></cpp:macro> <cpp:value>glad_glSpriteParameterfSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSPRITEPARAMETERFVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSPRITEPARAMETERFVSGIXPROC</name></type> <name>glad_glSpriteParameterfvSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSpriteParameterfvSGIX</name></cpp:macro> <cpp:value>glad_glSpriteParameterfvSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSPRITEPARAMETERISGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSPRITEPARAMETERISGIXPROC</name></type> <name>glad_glSpriteParameteriSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSpriteParameteriSGIX</name></cpp:macro> <cpp:value>glad_glSpriteParameteriSGIX</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSPRITEPARAMETERIVSGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSPRITEPARAMETERIVSGIXPROC</name></type> <name>glad_glSpriteParameterivSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSpriteParameterivSGIX</name></cpp:macro> <cpp:value>glad_glSpriteParameterivSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_get_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_get_program_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_get_program_binary</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_occlusion_query_event</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_occlusion_query_event</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_occlusion_query_event</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLQUERYOBJECTPARAMETERUIAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLQUERYOBJECTPARAMETERUIAMDPROC</name></type> <name>glad_glQueryObjectParameteruiAMD</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glQueryObjectParameteruiAMD</name></cpp:macro> <cpp:value>glad_glQueryObjectParameteruiAMD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_multisample</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMASKSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLclampf</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMASKSGISPROC</name></type> <name>glad_glSampleMaskSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMaskSGIS</name></cpp:macro> <cpp:value>glad_glSampleMaskSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEPATTERNSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEPATTERNSGISPROC</name></type> <name>glad_glSamplePatternSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplePatternSGIS</name></cpp:macro> <cpp:value>glad_glSamplePatternSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISRENDERBUFFEREXTPROC</name></type> <name>glad_glIsRenderbufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glIsRenderbufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDRENDERBUFFEREXTPROC</name></type> <name>glad_glBindRenderbufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glBindRenderbufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETERENDERBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETERENDERBUFFERSEXTPROC</name></type> <name>glad_glDeleteRenderbuffersEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteRenderbuffersEXT</name></cpp:macro> <cpp:value>glad_glDeleteRenderbuffersEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENRENDERBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENRENDERBUFFERSEXTPROC</name></type> <name>glad_glGenRenderbuffersEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenRenderbuffersEXT</name></cpp:macro> <cpp:value>glad_glGenRenderbuffersEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEEXTPROC</name></type> <name>glad_glRenderbufferStorageEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageEXT</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetRenderbufferParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetRenderbufferParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetRenderbufferParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISFRAMEBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISFRAMEBUFFEREXTPROC</name></type> <name>glad_glIsFramebufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFramebufferEXT</name></cpp:macro> <cpp:value>glad_glIsFramebufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAMEBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAMEBUFFEREXTPROC</name></type> <name>glad_glBindFramebufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFramebufferEXT</name></cpp:macro> <cpp:value>glad_glBindFramebufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFRAMEBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFRAMEBUFFERSEXTPROC</name></type> <name>glad_glDeleteFramebuffersEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFramebuffersEXT</name></cpp:macro> <cpp:value>glad_glDeleteFramebuffersEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFRAMEBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFRAMEBUFFERSEXTPROC</name></type> <name>glad_glGenFramebuffersEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFramebuffersEXT</name></cpp:macro> <cpp:value>glad_glGenFramebuffersEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</name></type> <name>glad_glCheckFramebufferStatusEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCheckFramebufferStatusEXT</name></cpp:macro> <cpp:value>glad_glCheckFramebufferStatusEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE1DEXTPROC</name></type> <name>glad_glFramebufferTexture1DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture1DEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTexture1DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE2DEXTPROC</name></type> <name>glad_glFramebufferTexture2DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture2DEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTexture2DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE3DEXTPROC</name></type> <name>glad_glFramebufferTexture3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture3DEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTexture3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</name></type> <name>glad_glFramebufferRenderbufferEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glFramebufferRenderbufferEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name></type> <name>glad_glGetFramebufferAttachmentParameterivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferAttachmentParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetFramebufferAttachmentParameterivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENERATEMIPMAPEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENERATEMIPMAPEXTPROC</name></type> <name>glad_glGenerateMipmapEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateMipmapEXT</name></cpp:macro> <cpp:value>glad_glGenerateMipmapEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_robustness_isolation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_robustness_isolation</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_robustness_isolation</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_array_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_array_bgra</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_array_bgra</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_vertex_array_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_vertex_array_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_vertex_array_range</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYRANGEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYRANGEAPPLEPROC</name></type> <name>glad_glVertexArrayRangeAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayRangeAPPLE</name></cpp:macro> <cpp:value>glad_glVertexArrayRangeAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC</name></type> <name>glad_glFlushVertexArrayRangeAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushVertexArrayRangeAPPLE</name></cpp:macro> <cpp:value>glad_glFlushVertexArrayRangeAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXARRAYPARAMETERIAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXARRAYPARAMETERIAPPLEPROC</name></type> <name>glad_glVertexArrayParameteriAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexArrayParameteriAPPLE</name></cpp:macro> <cpp:value>glad_glVertexArrayParameteriAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_query_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_query_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_query_buffer_object</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_register_combiners</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_register_combiners</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_register_combiners</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINERPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINERPARAMETERFVNVPROC</name></type> <name>glad_glCombinerParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerParameterfvNV</name></cpp:macro> <cpp:value>glad_glCombinerParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINERPARAMETERFNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINERPARAMETERFNVPROC</name></type> <name>glad_glCombinerParameterfNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerParameterfNV</name></cpp:macro> <cpp:value>glad_glCombinerParameterfNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINERPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINERPARAMETERIVNVPROC</name></type> <name>glad_glCombinerParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerParameterivNV</name></cpp:macro> <cpp:value>glad_glCombinerParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINERPARAMETERINVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINERPARAMETERINVPROC</name></type> <name>glad_glCombinerParameteriNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerParameteriNV</name></cpp:macro> <cpp:value>glad_glCombinerParameteriNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINERINPUTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINERINPUTNVPROC</name></type> <name>glad_glCombinerInputNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerInputNV</name></cpp:macro> <cpp:value>glad_glCombinerInputNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMBINEROUTPUTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMBINEROUTPUTNVPROC</name></type> <name>glad_glCombinerOutputNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCombinerOutputNV</name></cpp:macro> <cpp:value>glad_glCombinerOutputNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINALCOMBINERINPUTNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINALCOMBINERINPUTNVPROC</name></type> <name>glad_glFinalCombinerInputNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinalCombinerInputNV</name></cpp:macro> <cpp:value>glad_glFinalCombinerInputNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC</name></type> <name>glad_glGetCombinerInputParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCombinerInputParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetCombinerInputParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC</name></type> <name>glad_glGetCombinerInputParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCombinerInputParameterivNV</name></cpp:macro> <cpp:value>glad_glGetCombinerInputParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC</name></type> <name>glad_glGetCombinerOutputParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCombinerOutputParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetCombinerOutputParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC</name></type> <name>glad_glGetCombinerOutputParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCombinerOutputParameterivNV</name></cpp:macro> <cpp:value>glad_glGetCombinerOutputParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC</name></type> <name>glad_glGetFinalCombinerInputParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFinalCombinerInputParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetFinalCombinerInputParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC</name></type> <name>glad_glGetFinalCombinerInputParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFinalCombinerInputParameterivNV</name></cpp:macro> <cpp:value>glad_glGetFinalCombinerInputParameterivNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_buffers</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERSARBPROC</name></type> <name>glad_glDrawBuffersARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffersARB</name></cpp:macro> <cpp:value>glad_glDrawBuffersARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_clear_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_clear_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_clear_texture</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_debug_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_debug_output</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_debug_output</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECONTROLARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECONTROLARBPROC</name></type> <name>glad_glDebugMessageControlARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageControlARB</name></cpp:macro> <cpp:value>glad_glDebugMessageControlARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEINSERTARBPROC</name></type> <name>glad_glDebugMessageInsertARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsertARB</name></cpp:macro> <cpp:value>glad_glDebugMessageInsertARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROCARB</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECALLBACKARBPROC</name></type> <name>glad_glDebugMessageCallbackARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallbackARB</name></cpp:macro> <cpp:value>glad_glDebugMessageCallbackARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDEBUGMESSAGELOGARBPROC</name></type> <name>glad_glGetDebugMessageLogARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLogARB</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLogARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_color_matrix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_color_matrix</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGI_color_matrix</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_cull_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_cull_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_cull_vertex</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCULLPARAMETERDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCULLPARAMETERDVEXTPROC</name></type> <name>glad_glCullParameterdvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCullParameterdvEXT</name></cpp:macro> <cpp:value>glad_glCullParameterdvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCULLPARAMETERFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCULLPARAMETERFVEXTPROC</name></type> <name>glad_glCullParameterfvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCullParameterfvEXT</name></cpp:macro> <cpp:value>glad_glCullParameterfvEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_sRGB</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_row_bytes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_row_bytes</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_row_bytes</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texgen_reflection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texgen_reflection</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_texgen_reflection</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_multimode_draw_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_multimode_draw_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_IBM_multimode_draw_arrays</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIMODEDRAWARRAYSIBMPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIMODEDRAWARRAYSIBMPROC</name></type> <name>glad_glMultiModeDrawArraysIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiModeDrawArraysIBM</name></cpp:macro> <cpp:value>glad_glMultiModeDrawArraysIBM</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIMODEDRAWELEMENTSIBMPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIMODEDRAWELEMENTSIBMPROC</name></type> <name>glad_glMultiModeDrawElementsIBM</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiModeDrawElementsIBM</name></cpp:macro> <cpp:value>glad_glMultiModeDrawElementsIBM</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_vertex_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_vertex_array_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXARRAYAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXARRAYAPPLEPROC</name></type> <name>glad_glBindVertexArrayAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexArrayAPPLE</name></cpp:macro> <cpp:value>glad_glBindVertexArrayAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEVERTEXARRAYSAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEVERTEXARRAYSAPPLEPROC</name></type> <name>glad_glDeleteVertexArraysAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteVertexArraysAPPLE</name></cpp:macro> <cpp:value>glad_glDeleteVertexArraysAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENVERTEXARRAYSAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENVERTEXARRAYSAPPLEPROC</name></type> <name>glad_glGenVertexArraysAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenVertexArraysAPPLE</name></cpp:macro> <cpp:value>glad_glGenVertexArraysAPPLE</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISVERTEXARRAYAPPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISVERTEXARRAYAPPLEPROC</name></type> <name>glad_glIsVertexArrayAPPLE</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVertexArrayAPPLE</name></cpp:macro> <cpp:value>glad_glIsVertexArrayAPPLE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_3DFX_texture_compression_FXT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DFX_texture_compression_FXT1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_3DFX_texture_compression_FXT1</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ycrcb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ycrcb</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_ycrcb</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_conservative_depth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_conservative_depth</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_conservative_depth</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compressed_texture_pixel_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compressed_texture_pixel_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_compressed_texture_pixel_storage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_detail_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_detail_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_detail_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDETAILTEXFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDETAILTEXFUNCSGISPROC</name></type> <name>glad_glDetailTexFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDetailTexFuncSGIS</name></cpp:macro> <cpp:value>glad_glDetailTexFuncSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDETAILTEXFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDETAILTEXFUNCSGISPROC</name></type> <name>glad_glGetDetailTexFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDetailTexFuncSGIS</name></cpp:macro> <cpp:value>glad_glGetDetailTexFuncSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_instanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_instanced</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_instanced</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSINSTANCEDARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSINSTANCEDARBPROC</name></type> <name>glad_glDrawArraysInstancedARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysInstancedARB</name></cpp:macro> <cpp:value>glad_glDrawArraysInstancedARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDARBPROC</name></type> <name>glad_glDrawElementsInstancedARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedARB</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_read_format</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_read_format</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OES_read_format</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_texture_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_texture_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_texture_float</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_gather</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_gather</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_gather</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_vertex_shader_layer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_vertex_shader_layer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_vertex_shader_layer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shading_language_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shading_language_include</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shading_language_include</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDSTRINGARBPROC</name></type> <name>glad_glNamedStringARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedStringARB</name></cpp:macro> <cpp:value>glad_glNamedStringARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETENAMEDSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETENAMEDSTRINGARBPROC</name></type> <name>glad_glDeleteNamedStringARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteNamedStringARB</name></cpp:macro> <cpp:value>glad_glDeleteNamedStringARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPILESHADERINCLUDEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPILESHADERINCLUDEARBPROC</name></type> <name>glad_glCompileShaderIncludeARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompileShaderIncludeARB</name></cpp:macro> <cpp:value>glad_glCompileShaderIncludeARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISNAMEDSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISNAMEDSTRINGARBPROC</name></type> <name>glad_glIsNamedStringARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsNamedStringARB</name></cpp:macro> <cpp:value>glad_glIsNamedStringARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDSTRINGARBPROC</name></type> <name>glad_glGetNamedStringARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedStringARB</name></cpp:macro> <cpp:value>glad_glGetNamedStringARB</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETNAMEDSTRINGIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETNAMEDSTRINGIVARBPROC</name></type> <name>glad_glGetNamedStringivARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetNamedStringivARB</name></cpp:macro> <cpp:value>glad_glGetNamedStringivARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_client_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_client_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_client_storage</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_WIN_phong_shading</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WIN_phong_shading</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_WIN_phong_shading</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INGR_blend_func_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INGR_blend_func_separate</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_INGR_blend_func_separate</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEINGRPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEINGRPROC</name></type> <name>glad_glBlendFuncSeparateINGR</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparateINGR</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparateINGR</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_path_rendering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_path_rendering</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_path_rendering</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPATHSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPATHSNVPROC</name></type> <name>glad_glGenPathsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenPathsNV</name></cpp:macro> <cpp:value>glad_glGenPathsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPATHSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPATHSNVPROC</name></type> <name>glad_glDeletePathsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeletePathsNV</name></cpp:macro> <cpp:value>glad_glDeletePathsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPATHNVPROC</name></type> <name>glad_glIsPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsPathNV</name></cpp:macro> <cpp:value>glad_glIsPathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHCOMMANDSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHCOMMANDSNVPROC</name></type> <name>glad_glPathCommandsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathCommandsNV</name></cpp:macro> <cpp:value>glad_glPathCommandsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHCOORDSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHCOORDSNVPROC</name></type> <name>glad_glPathCoordsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathCoordsNV</name></cpp:macro> <cpp:value>glad_glPathCoordsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHSUBCOMMANDSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHSUBCOMMANDSNVPROC</name></type> <name>glad_glPathSubCommandsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathSubCommandsNV</name></cpp:macro> <cpp:value>glad_glPathSubCommandsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHSUBCOORDSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHSUBCOORDSNVPROC</name></type> <name>glad_glPathSubCoordsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathSubCoordsNV</name></cpp:macro> <cpp:value>glad_glPathSubCoordsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHSTRINGNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHSTRINGNVPROC</name></type> <name>glad_glPathStringNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathStringNV</name></cpp:macro> <cpp:value>glad_glPathStringNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHGLYPHSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHGLYPHSNVPROC</name></type> <name>glad_glPathGlyphsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathGlyphsNV</name></cpp:macro> <cpp:value>glad_glPathGlyphsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHGLYPHRANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHGLYPHRANGENVPROC</name></type> <name>glad_glPathGlyphRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathGlyphRangeNV</name></cpp:macro> <cpp:value>glad_glPathGlyphRangeNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWEIGHTPATHSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWEIGHTPATHSNVPROC</name></type> <name>glad_glWeightPathsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWeightPathsNV</name></cpp:macro> <cpp:value>glad_glWeightPathsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYPATHNVPROC</name></type> <name>glad_glCopyPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyPathNV</name></cpp:macro> <cpp:value>glad_glCopyPathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINTERPOLATEPATHSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINTERPOLATEPATHSNVPROC</name></type> <name>glad_glInterpolatePathsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInterpolatePathsNV</name></cpp:macro> <cpp:value>glad_glInterpolatePathsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMPATHNVPROC</name></type> <name>glad_glTransformPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformPathNV</name></cpp:macro> <cpp:value>glad_glTransformPathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHPARAMETERIVNVPROC</name></type> <name>glad_glPathParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathParameterivNV</name></cpp:macro> <cpp:value>glad_glPathParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHPARAMETERINVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHPARAMETERINVPROC</name></type> <name>glad_glPathParameteriNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathParameteriNV</name></cpp:macro> <cpp:value>glad_glPathParameteriNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHPARAMETERFVNVPROC</name></type> <name>glad_glPathParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathParameterfvNV</name></cpp:macro> <cpp:value>glad_glPathParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHPARAMETERFNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHPARAMETERFNVPROC</name></type> <name>glad_glPathParameterfNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathParameterfNV</name></cpp:macro> <cpp:value>glad_glPathParameterfNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHDASHARRAYNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHDASHARRAYNVPROC</name></type> <name>glad_glPathDashArrayNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathDashArrayNV</name></cpp:macro> <cpp:value>glad_glPathDashArrayNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHSTENCILFUNCNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHSTENCILFUNCNVPROC</name></type> <name>glad_glPathStencilFuncNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathStencilFuncNV</name></cpp:macro> <cpp:value>glad_glPathStencilFuncNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHSTENCILDEPTHOFFSETNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHSTENCILDEPTHOFFSETNVPROC</name></type> <name>glad_glPathStencilDepthOffsetNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathStencilDepthOffsetNV</name></cpp:macro> <cpp:value>glad_glPathStencilDepthOffsetNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFILLPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFILLPATHNVPROC</name></type> <name>glad_glStencilFillPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFillPathNV</name></cpp:macro> <cpp:value>glad_glStencilFillPathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILSTROKEPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILSTROKEPATHNVPROC</name></type> <name>glad_glStencilStrokePathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilStrokePathNV</name></cpp:macro> <cpp:value>glad_glStencilStrokePathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFILLPATHINSTANCEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFILLPATHINSTANCEDNVPROC</name></type> <name>glad_glStencilFillPathInstancedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFillPathInstancedNV</name></cpp:macro> <cpp:value>glad_glStencilFillPathInstancedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC</name></type> <name>glad_glStencilStrokePathInstancedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilStrokePathInstancedNV</name></cpp:macro> <cpp:value>glad_glStencilStrokePathInstancedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHCOVERDEPTHFUNCNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHCOVERDEPTHFUNCNVPROC</name></type> <name>glad_glPathCoverDepthFuncNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathCoverDepthFuncNV</name></cpp:macro> <cpp:value>glad_glPathCoverDepthFuncNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHCOLORGENNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHCOLORGENNVPROC</name></type> <name>glad_glPathColorGenNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathColorGenNV</name></cpp:macro> <cpp:value>glad_glPathColorGenNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHTEXGENNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHTEXGENNVPROC</name></type> <name>glad_glPathTexGenNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathTexGenNV</name></cpp:macro> <cpp:value>glad_glPathTexGenNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPATHFOGGENNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPATHFOGGENNVPROC</name></type> <name>glad_glPathFogGenNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPathFogGenNV</name></cpp:macro> <cpp:value>glad_glPathFogGenNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOVERFILLPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOVERFILLPATHNVPROC</name></type> <name>glad_glCoverFillPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCoverFillPathNV</name></cpp:macro> <cpp:value>glad_glCoverFillPathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOVERSTROKEPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOVERSTROKEPATHNVPROC</name></type> <name>glad_glCoverStrokePathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCoverStrokePathNV</name></cpp:macro> <cpp:value>glad_glCoverStrokePathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOVERFILLPATHINSTANCEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOVERFILLPATHINSTANCEDNVPROC</name></type> <name>glad_glCoverFillPathInstancedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCoverFillPathInstancedNV</name></cpp:macro> <cpp:value>glad_glCoverFillPathInstancedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOVERSTROKEPATHINSTANCEDNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOVERSTROKEPATHINSTANCEDNVPROC</name></type> <name>glad_glCoverStrokePathInstancedNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCoverStrokePathInstancedNV</name></cpp:macro> <cpp:value>glad_glCoverStrokePathInstancedNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHPARAMETERIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHPARAMETERIVNVPROC</name></type> <name>glad_glGetPathParameterivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathParameterivNV</name></cpp:macro> <cpp:value>glad_glGetPathParameterivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHPARAMETERFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHPARAMETERFVNVPROC</name></type> <name>glad_glGetPathParameterfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathParameterfvNV</name></cpp:macro> <cpp:value>glad_glGetPathParameterfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHCOMMANDSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHCOMMANDSNVPROC</name></type> <name>glad_glGetPathCommandsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathCommandsNV</name></cpp:macro> <cpp:value>glad_glGetPathCommandsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHCOORDSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHCOORDSNVPROC</name></type> <name>glad_glGetPathCoordsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathCoordsNV</name></cpp:macro> <cpp:value>glad_glGetPathCoordsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHDASHARRAYNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHDASHARRAYNVPROC</name></type> <name>glad_glGetPathDashArrayNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathDashArrayNV</name></cpp:macro> <cpp:value>glad_glGetPathDashArrayNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHMETRICSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHMETRICSNVPROC</name></type> <name>glad_glGetPathMetricsNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathMetricsNV</name></cpp:macro> <cpp:value>glad_glGetPathMetricsNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHMETRICRANGENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHMETRICRANGENVPROC</name></type> <name>glad_glGetPathMetricRangeNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathMetricRangeNV</name></cpp:macro> <cpp:value>glad_glGetPathMetricRangeNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHSPACINGNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHSPACINGNVPROC</name></type> <name>glad_glGetPathSpacingNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathSpacingNV</name></cpp:macro> <cpp:value>glad_glGetPathSpacingNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHCOLORGENIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHCOLORGENIVNVPROC</name></type> <name>glad_glGetPathColorGenivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathColorGenivNV</name></cpp:macro> <cpp:value>glad_glGetPathColorGenivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHCOLORGENFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHCOLORGENFVNVPROC</name></type> <name>glad_glGetPathColorGenfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathColorGenfvNV</name></cpp:macro> <cpp:value>glad_glGetPathColorGenfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHTEXGENIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHTEXGENIVNVPROC</name></type> <name>glad_glGetPathTexGenivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathTexGenivNV</name></cpp:macro> <cpp:value>glad_glGetPathTexGenivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHTEXGENFVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHTEXGENFVNVPROC</name></type> <name>glad_glGetPathTexGenfvNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathTexGenfvNV</name></cpp:macro> <cpp:value>glad_glGetPathTexGenfvNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPOINTINFILLPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPOINTINFILLPATHNVPROC</name></type> <name>glad_glIsPointInFillPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsPointInFillPathNV</name></cpp:macro> <cpp:value>glad_glIsPointInFillPathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPOINTINSTROKEPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPOINTINSTROKEPATHNVPROC</name></type> <name>glad_glIsPointInStrokePathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsPointInStrokePathNV</name></cpp:macro> <cpp:value>glad_glIsPointInStrokePathNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLfloat</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPATHLENGTHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPATHLENGTHNVPROC</name></type> <name>glad_glGetPathLengthNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPathLengthNV</name></cpp:macro> <cpp:value>glad_glGetPathLengthNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTALONGPATHNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTALONGPATHNVPROC</name></type> <name>glad_glPointAlongPathNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointAlongPathNV</name></cpp:macro> <cpp:value>glad_glPointAlongPathNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_streams</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_streams</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_vertex_streams</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1SATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1SATIPROC</name></type> <name>glad_glVertexStream1sATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1sATI</name></cpp:macro> <cpp:value>glad_glVertexStream1sATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1SVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1SVATIPROC</name></type> <name>glad_glVertexStream1svATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1svATI</name></cpp:macro> <cpp:value>glad_glVertexStream1svATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1IATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1IATIPROC</name></type> <name>glad_glVertexStream1iATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1iATI</name></cpp:macro> <cpp:value>glad_glVertexStream1iATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1IVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1IVATIPROC</name></type> <name>glad_glVertexStream1ivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1ivATI</name></cpp:macro> <cpp:value>glad_glVertexStream1ivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1FATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1FATIPROC</name></type> <name>glad_glVertexStream1fATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1fATI</name></cpp:macro> <cpp:value>glad_glVertexStream1fATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1FVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1FVATIPROC</name></type> <name>glad_glVertexStream1fvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1fvATI</name></cpp:macro> <cpp:value>glad_glVertexStream1fvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1DATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1DATIPROC</name></type> <name>glad_glVertexStream1dATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1dATI</name></cpp:macro> <cpp:value>glad_glVertexStream1dATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM1DVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM1DVATIPROC</name></type> <name>glad_glVertexStream1dvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream1dvATI</name></cpp:macro> <cpp:value>glad_glVertexStream1dvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2SATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2SATIPROC</name></type> <name>glad_glVertexStream2sATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2sATI</name></cpp:macro> <cpp:value>glad_glVertexStream2sATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2SVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2SVATIPROC</name></type> <name>glad_glVertexStream2svATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2svATI</name></cpp:macro> <cpp:value>glad_glVertexStream2svATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2IATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2IATIPROC</name></type> <name>glad_glVertexStream2iATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2iATI</name></cpp:macro> <cpp:value>glad_glVertexStream2iATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2IVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2IVATIPROC</name></type> <name>glad_glVertexStream2ivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2ivATI</name></cpp:macro> <cpp:value>glad_glVertexStream2ivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2FATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2FATIPROC</name></type> <name>glad_glVertexStream2fATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2fATI</name></cpp:macro> <cpp:value>glad_glVertexStream2fATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2FVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2FVATIPROC</name></type> <name>glad_glVertexStream2fvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2fvATI</name></cpp:macro> <cpp:value>glad_glVertexStream2fvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2DATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2DATIPROC</name></type> <name>glad_glVertexStream2dATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2dATI</name></cpp:macro> <cpp:value>glad_glVertexStream2dATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM2DVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM2DVATIPROC</name></type> <name>glad_glVertexStream2dvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream2dvATI</name></cpp:macro> <cpp:value>glad_glVertexStream2dvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3SATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3SATIPROC</name></type> <name>glad_glVertexStream3sATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3sATI</name></cpp:macro> <cpp:value>glad_glVertexStream3sATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3SVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3SVATIPROC</name></type> <name>glad_glVertexStream3svATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3svATI</name></cpp:macro> <cpp:value>glad_glVertexStream3svATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3IATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3IATIPROC</name></type> <name>glad_glVertexStream3iATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3iATI</name></cpp:macro> <cpp:value>glad_glVertexStream3iATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3IVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3IVATIPROC</name></type> <name>glad_glVertexStream3ivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3ivATI</name></cpp:macro> <cpp:value>glad_glVertexStream3ivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3FATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3FATIPROC</name></type> <name>glad_glVertexStream3fATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3fATI</name></cpp:macro> <cpp:value>glad_glVertexStream3fATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3FVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3FVATIPROC</name></type> <name>glad_glVertexStream3fvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3fvATI</name></cpp:macro> <cpp:value>glad_glVertexStream3fvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3DATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3DATIPROC</name></type> <name>glad_glVertexStream3dATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3dATI</name></cpp:macro> <cpp:value>glad_glVertexStream3dATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM3DVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM3DVATIPROC</name></type> <name>glad_glVertexStream3dvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream3dvATI</name></cpp:macro> <cpp:value>glad_glVertexStream3dvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4SATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4SATIPROC</name></type> <name>glad_glVertexStream4sATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4sATI</name></cpp:macro> <cpp:value>glad_glVertexStream4sATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4SVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4SVATIPROC</name></type> <name>glad_glVertexStream4svATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4svATI</name></cpp:macro> <cpp:value>glad_glVertexStream4svATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4IATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4IATIPROC</name></type> <name>glad_glVertexStream4iATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4iATI</name></cpp:macro> <cpp:value>glad_glVertexStream4iATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4IVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4IVATIPROC</name></type> <name>glad_glVertexStream4ivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4ivATI</name></cpp:macro> <cpp:value>glad_glVertexStream4ivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4FATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4FATIPROC</name></type> <name>glad_glVertexStream4fATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4fATI</name></cpp:macro> <cpp:value>glad_glVertexStream4fATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4FVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4FVATIPROC</name></type> <name>glad_glVertexStream4fvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4fvATI</name></cpp:macro> <cpp:value>glad_glVertexStream4fvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4DATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4DATIPROC</name></type> <name>glad_glVertexStream4dATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4dATI</name></cpp:macro> <cpp:value>glad_glVertexStream4dATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXSTREAM4DVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXSTREAM4DVATIPROC</name></type> <name>glad_glVertexStream4dvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexStream4dvATI</name></cpp:macro> <cpp:value>glad_glVertexStream4dvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3BATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3BATIPROC</name></type> <name>glad_glNormalStream3bATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3bATI</name></cpp:macro> <cpp:value>glad_glNormalStream3bATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3BVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3BVATIPROC</name></type> <name>glad_glNormalStream3bvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3bvATI</name></cpp:macro> <cpp:value>glad_glNormalStream3bvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3SATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3SATIPROC</name></type> <name>glad_glNormalStream3sATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3sATI</name></cpp:macro> <cpp:value>glad_glNormalStream3sATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3SVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3SVATIPROC</name></type> <name>glad_glNormalStream3svATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3svATI</name></cpp:macro> <cpp:value>glad_glNormalStream3svATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3IATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3IATIPROC</name></type> <name>glad_glNormalStream3iATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3iATI</name></cpp:macro> <cpp:value>glad_glNormalStream3iATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3IVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3IVATIPROC</name></type> <name>glad_glNormalStream3ivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3ivATI</name></cpp:macro> <cpp:value>glad_glNormalStream3ivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3FATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3FATIPROC</name></type> <name>glad_glNormalStream3fATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3fATI</name></cpp:macro> <cpp:value>glad_glNormalStream3fATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3FVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3FVATIPROC</name></type> <name>glad_glNormalStream3fvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3fvATI</name></cpp:macro> <cpp:value>glad_glNormalStream3fvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3DATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3DATIPROC</name></type> <name>glad_glNormalStream3dATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3dATI</name></cpp:macro> <cpp:value>glad_glNormalStream3dATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALSTREAM3DVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALSTREAM3DVATIPROC</name></type> <name>glad_glNormalStream3dvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalStream3dvATI</name></cpp:macro> <cpp:value>glad_glNormalStream3dvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC</name></type> <name>glad_glClientActiveVertexStreamATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientActiveVertexStreamATI</name></cpp:macro> <cpp:value>glad_glClientActiveVertexStreamATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXBLENDENVIATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXBLENDENVIATIPROC</name></type> <name>glad_glVertexBlendEnviATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexBlendEnviATI</name></cpp:macro> <cpp:value>glad_glVertexBlendEnviATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXBLENDENVFATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXBLENDENVFATIPROC</name></type> <name>glad_glVertexBlendEnvfATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexBlendEnvfATI</name></cpp:macro> <cpp:value>glad_glVertexBlendEnvfATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_non_power_of_two</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_non_power_of_two</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_non_power_of_two</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_rgb_422</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_rgb_422</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_APPLE_rgb_422</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_lod_bias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_lod_bias</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_lod_bias</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_seamless_cube_map</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_seamless_cube_map</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_seamless_cube_map</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_group_vote</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_group_vote</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_shader_group_vote</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vdpau_interop</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vdpau_interop</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vdpau_interop</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUINITNVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUINITNVPROC</name></type> <name>glad_glVDPAUInitNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUInitNV</name></cpp:macro> <cpp:value>glad_glVDPAUInitNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUFININVPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUFININVPROC</name></type> <name>glad_glVDPAUFiniNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUFiniNV</name></cpp:macro> <cpp:value>glad_glVDPAUFiniNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLvdpauSurfaceNV</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUREGISTERVIDEOSURFACENVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUREGISTERVIDEOSURFACENVPROC</name></type> <name>glad_glVDPAURegisterVideoSurfaceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAURegisterVideoSurfaceNV</name></cpp:macro> <cpp:value>glad_glVDPAURegisterVideoSurfaceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLvdpauSurfaceNV</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC</name></type> <name>glad_glVDPAURegisterOutputSurfaceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAURegisterOutputSurfaceNV</name></cpp:macro> <cpp:value>glad_glVDPAURegisterOutputSurfaceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUISSURFACENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLvdpauSurfaceNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUISSURFACENVPROC</name></type> <name>glad_glVDPAUIsSurfaceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUIsSurfaceNV</name></cpp:macro> <cpp:value>glad_glVDPAUIsSurfaceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUUNREGISTERSURFACENVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLvdpauSurfaceNV</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUUNREGISTERSURFACENVPROC</name></type> <name>glad_glVDPAUUnregisterSurfaceNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUUnregisterSurfaceNV</name></cpp:macro> <cpp:value>glad_glVDPAUUnregisterSurfaceNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUGETSURFACEIVNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLvdpauSurfaceNV</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUGETSURFACEIVNVPROC</name></type> <name>glad_glVDPAUGetSurfaceivNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUGetSurfaceivNV</name></cpp:macro> <cpp:value>glad_glVDPAUGetSurfaceivNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUSURFACEACCESSNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLvdpauSurfaceNV</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUSURFACEACCESSNVPROC</name></type> <name>glad_glVDPAUSurfaceAccessNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUSurfaceAccessNV</name></cpp:macro> <cpp:value>glad_glVDPAUSurfaceAccessNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUMAPSURFACESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvdpauSurfaceNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUMAPSURFACESNVPROC</name></type> <name>glad_glVDPAUMapSurfacesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUMapSurfacesNV</name></cpp:macro> <cpp:value>glad_glVDPAUMapSurfacesNV</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVDPAUUNMAPSURFACESNVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvdpauSurfaceNV</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVDPAUUNMAPSURFACESNVPROC</name></type> <name>glad_glVDPAUUnmapSurfacesNV</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVDPAUUnmapSurfacesNV</name></cpp:macro> <cpp:value>glad_glVDPAUUnmapSurfacesNV</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_occlusion_query2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_occlusion_query2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_occlusion_query2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_internalformat_query2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_internalformat_query2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_internalformat_query2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_filter_anisotropic</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_filter_anisotropic</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_filter_anisotropic</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_vertex</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SUN_vertex</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4UBVERTEX2FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4UBVERTEX2FSUNPROC</name></type> <name>glad_glColor4ubVertex2fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ubVertex2fSUN</name></cpp:macro> <cpp:value>glad_glColor4ubVertex2fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4UBVERTEX2FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4UBVERTEX2FVSUNPROC</name></type> <name>glad_glColor4ubVertex2fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ubVertex2fvSUN</name></cpp:macro> <cpp:value>glad_glColor4ubVertex2fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4UBVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4UBVERTEX3FSUNPROC</name></type> <name>glad_glColor4ubVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ubVertex3fSUN</name></cpp:macro> <cpp:value>glad_glColor4ubVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4UBVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4UBVERTEX3FVSUNPROC</name></type> <name>glad_glColor4ubVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4ubVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glColor4ubVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR3FVERTEX3FSUNPROC</name></type> <name>glad_glColor3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glColor3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR3FVERTEX3FVSUNPROC</name></type> <name>glad_glColor3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glColor3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glColor4fNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4fNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glColor4fNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glColor4fNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4fNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glColor4fNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FVERTEX3FSUNPROC</name></type> <name>glad_glTexCoord2fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FVERTEX3FVSUNPROC</name></type> <name>glad_glTexCoord2fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4FVERTEX4FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4FVERTEX4FSUNPROC</name></type> <name>glad_glTexCoord4fVertex4fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4fVertex4fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord4fVertex4fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4FVERTEX4FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4FVERTEX4FVSUNPROC</name></type> <name>glad_glTexCoord4fVertex4fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4fVertex4fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord4fVertex4fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC</name></type> <name>glad_glTexCoord2fColor4ubVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fColor4ubVertex3fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fColor4ubVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC</name></type> <name>glad_glTexCoord2fColor4ubVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fColor4ubVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fColor4ubVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC</name></type> <name>glad_glTexCoord2fColor3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fColor3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fColor3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC</name></type> <name>glad_glTexCoord2fColor3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fColor3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fColor3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glTexCoord2fNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glTexCoord2fNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glTexCoord2fColor4fNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fColor4fNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fColor4fNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glTexCoord2fColor4fNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2fColor4fNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord2fColor4fNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC</name></type> <name>glad_glTexCoord4fColor4fNormal3fVertex4fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4fColor4fNormal3fVertex4fSUN</name></cpp:macro> <cpp:value>glad_glTexCoord4fColor4fNormal3fVertex4fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC</name></type> <name>glad_glTexCoord4fColor4fNormal3fVertex4fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4fColor4fNormal3fVertex4fvSUN</name></cpp:macro> <cpp:value>glad_glTexCoord4fColor4fNormal3fVertex4fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiColor4ubVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiColor4ubVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiColor4ubVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiColor4ubVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiColor4ubVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiColor4ubVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiColor3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiColor3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiColor3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiColor3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiColor3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiColor3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiColor4fNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiColor4fNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiTexCoord2fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiTexCoord2fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiTexCoord2fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiTexCoord2fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiTexCoord2fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiTexCoord2fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC</name></type> <name>glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC</name></type> <name>glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</name></cpp:macro> <cpp:value>glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_igloo_interface</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_igloo_interface</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_igloo_interface</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLIGLOOINTERFACESGIXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLIGLOOINTERFACESGIXPROC</name></type> <name>glad_glIglooInterfaceSGIX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIglooInterfaceSGIX</name></cpp:macro> <cpp:value>glad_glIglooInterfaceSGIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_lod</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture_lod</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_program3</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_indirect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_indirect</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_indirect</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_vertex_program4</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1IEXTPROC</name></type> <name>glad_glVertexAttribI1iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1iEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI1iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2IEXTPROC</name></type> <name>glad_glVertexAttribI2iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2iEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI2iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3IEXTPROC</name></type> <name>glad_glVertexAttribI3iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3iEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI3iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4IEXTPROC</name></type> <name>glad_glVertexAttribI4iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4iEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1UIEXTPROC</name></type> <name>glad_glVertexAttribI1uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1uiEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI1uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2UIEXTPROC</name></type> <name>glad_glVertexAttribI2uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2uiEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI2uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3UIEXTPROC</name></type> <name>glad_glVertexAttribI3uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3uiEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI3uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UIEXTPROC</name></type> <name>glad_glVertexAttribI4uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4uiEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1IVEXTPROC</name></type> <name>glad_glVertexAttribI1ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1ivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI1ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2IVEXTPROC</name></type> <name>glad_glVertexAttribI2ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2ivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI2ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3IVEXTPROC</name></type> <name>glad_glVertexAttribI3ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3ivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI3ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4IVEXTPROC</name></type> <name>glad_glVertexAttribI4ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1UIVEXTPROC</name></type> <name>glad_glVertexAttribI1uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1uivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI1uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2UIVEXTPROC</name></type> <name>glad_glVertexAttribI2uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2uivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI2uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3UIVEXTPROC</name></type> <name>glad_glVertexAttribI3uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3uivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI3uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UIVEXTPROC</name></type> <name>glad_glVertexAttribI4uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4uivEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4BVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4BVEXTPROC</name></type> <name>glad_glVertexAttribI4bvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4bvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4bvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4SVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4SVEXTPROC</name></type> <name>glad_glVertexAttribI4svEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4svEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4svEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UBVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UBVEXTPROC</name></type> <name>glad_glVertexAttribI4ubvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ubvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ubvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4USVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4USVEXTPROC</name></type> <name>glad_glVertexAttribI4usvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4usvEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribI4usvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBIPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBIPOINTEREXTPROC</name></type> <name>glad_glVertexAttribIPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIPointerEXT</name></cpp:macro> <cpp:value>glad_glVertexAttribIPointerEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIIVEXTPROC</name></type> <name>glad_glGetVertexAttribIivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIivEXT</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIUIVEXTPROC</name></type> <name>glad_glGetVertexAttribIuivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIuivEXT</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIuivEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_transform_feedback3_lines_triangles</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_transform_feedback3_lines_triangles</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_transform_feedback3_lines_triangles</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_fog_function</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_fog_function</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_fog_function</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGFUNCSGISPROC</name></type> <name>glad_glFogFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogFuncSGIS</name></cpp:macro> <cpp:value>glad_glFogFuncSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFOGFUNCSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFOGFUNCSGISPROC</name></type> <name>glad_glGetFogFuncSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFogFuncSGIS</name></cpp:macro> <cpp:value>glad_glGetFogFuncSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_x11_sync_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_x11_sync_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_x11_sync_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>APIENTRYP</name> <name>PFNGLIMPORTSYNCEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLIMPORTSYNCEXTPROC</name></type> <name>glad_glImportSyncEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glImportSyncEXT</name></cpp:macro> <cpp:value>glad_glImportSyncEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_sync</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compute_variable_group_size</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compute_variable_group_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_compute_variable_group_size</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC</name></type> <name>glad_glDispatchComputeGroupSizeARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDispatchComputeGroupSizeARB</name></cpp:macro> <cpp:value>glad_glDispatchComputeGroupSizeARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_fixed_point</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_fixed_point</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_OES_fixed_point</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFUNCXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFUNCXOESPROC</name></type> <name>glad_glAlphaFuncxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFuncxOES</name></cpp:macro> <cpp:value>glad_glAlphaFuncxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARCOLORXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARCOLORXOESPROC</name></type> <name>glad_glClearColorxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearColorxOES</name></cpp:macro> <cpp:value>glad_glClearColorxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHXOESPROC</name></type> <name>glad_glClearDepthxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepthxOES</name></cpp:macro> <cpp:value>glad_glClearDepthxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIPPLANEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIPPLANEXOESPROC</name></type> <name>glad_glClipPlanexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClipPlanexOES</name></cpp:macro> <cpp:value>glad_glClipPlanexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4XOESPROC</name></type> <name>glad_glColor4xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4xOES</name></cpp:macro> <cpp:value>glad_glColor4xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEXOESPROC</name></type> <name>glad_glDepthRangexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangexOES</name></cpp:macro> <cpp:value>glad_glDepthRangexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGXOESPROC</name></type> <name>glad_glFogxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogxOES</name></cpp:macro> <cpp:value>glad_glFogxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFOGXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFOGXVOESPROC</name></type> <name>glad_glFogxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFogxvOES</name></cpp:macro> <cpp:value>glad_glFogxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRUSTUMXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRUSTUMXOESPROC</name></type> <name>glad_glFrustumxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrustumxOES</name></cpp:macro> <cpp:value>glad_glFrustumxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCLIPPLANEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCLIPPLANEXOESPROC</name></type> <name>glad_glGetClipPlanexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetClipPlanexOES</name></cpp:macro> <cpp:value>glad_glGetClipPlanexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFIXEDVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFIXEDVOESPROC</name></type> <name>glad_glGetFixedvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFixedvOES</name></cpp:macro> <cpp:value>glad_glGetFixedvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXENVXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXENVXVOESPROC</name></type> <name>glad_glGetTexEnvxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexEnvxvOES</name></cpp:macro> <cpp:value>glad_glGetTexEnvxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERXVOESPROC</name></type> <name>glad_glGetTexParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterxvOES</name></cpp:macro> <cpp:value>glad_glGetTexParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLIGHTMODELXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLIGHTMODELXOESPROC</name></type> <name>glad_glLightModelxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightModelxOES</name></cpp:macro> <cpp:value>glad_glLightModelxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLIGHTMODELXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLIGHTMODELXVOESPROC</name></type> <name>glad_glLightModelxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightModelxvOES</name></cpp:macro> <cpp:value>glad_glLightModelxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLIGHTXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLIGHTXOESPROC</name></type> <name>glad_glLightxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightxOES</name></cpp:macro> <cpp:value>glad_glLightxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLIGHTXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLIGHTXVOESPROC</name></type> <name>glad_glLightxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLightxvOES</name></cpp:macro> <cpp:value>glad_glLightxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLINEWIDTHXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLINEWIDTHXOESPROC</name></type> <name>glad_glLineWidthxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLineWidthxOES</name></cpp:macro> <cpp:value>glad_glLineWidthxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOADMATRIXXOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOADMATRIXXOESPROC</name></type> <name>glad_glLoadMatrixxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadMatrixxOES</name></cpp:macro> <cpp:value>glad_glLoadMatrixxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATERIALXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATERIALXOESPROC</name></type> <name>glad_glMaterialxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMaterialxOES</name></cpp:macro> <cpp:value>glad_glMaterialxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMATERIALXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMATERIALXVOESPROC</name></type> <name>glad_glMaterialxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMaterialxvOES</name></cpp:macro> <cpp:value>glad_glMaterialxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTMATRIXXOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTMATRIXXOESPROC</name></type> <name>glad_glMultMatrixxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultMatrixxOES</name></cpp:macro> <cpp:value>glad_glMultMatrixxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4XOESPROC</name></type> <name>glad_glMultiTexCoord4xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4xOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMAL3XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMAL3XOESPROC</name></type> <name>glad_glNormal3xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3xOES</name></cpp:macro> <cpp:value>glad_glNormal3xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLORTHOXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLORTHOXOESPROC</name></type> <name>glad_glOrthoxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glOrthoxOES</name></cpp:macro> <cpp:value>glad_glOrthoxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERXVOESPROC</name></type> <name>glad_glPointParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterxvOES</name></cpp:macro> <cpp:value>glad_glPointParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTSIZEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTSIZEXOESPROC</name></type> <name>glad_glPointSizexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointSizexOES</name></cpp:macro> <cpp:value>glad_glPointSizexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLYGONOFFSETXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLYGONOFFSETXOESPROC</name></type> <name>glad_glPolygonOffsetxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonOffsetxOES</name></cpp:macro> <cpp:value>glad_glPolygonOffsetxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLROTATEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLROTATEXOESPROC</name></type> <name>glad_glRotatexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRotatexOES</name></cpp:macro> <cpp:value>glad_glRotatexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLECOVERAGEOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLECOVERAGEOESPROC</name></type> <name>glad_glSampleCoverageOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverageOES</name></cpp:macro> <cpp:value>glad_glSampleCoverageOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSCALEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSCALEXOESPROC</name></type> <name>glad_glScalexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScalexOES</name></cpp:macro> <cpp:value>glad_glScalexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXENVXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXENVXOESPROC</name></type> <name>glad_glTexEnvxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexEnvxOES</name></cpp:macro> <cpp:value>glad_glTexEnvxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXENVXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXENVXVOESPROC</name></type> <name>glad_glTexEnvxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexEnvxvOES</name></cpp:macro> <cpp:value>glad_glTexEnvxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERXOESPROC</name></type> <name>glad_glTexParameterxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterxOES</name></cpp:macro> <cpp:value>glad_glTexParameterxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERXVOESPROC</name></type> <name>glad_glTexParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterxvOES</name></cpp:macro> <cpp:value>glad_glTexParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSLATEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSLATEXOESPROC</name></type> <name>glad_glTranslatexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTranslatexOES</name></cpp:macro> <cpp:value>glad_glTranslatexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLIGHTXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLIGHTXVOESPROC</name></type> <name>glad_glGetLightxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLightxvOES</name></cpp:macro> <cpp:value>glad_glGetLightxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMATERIALXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMATERIALXVOESPROC</name></type> <name>glad_glGetMaterialxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMaterialxvOES</name></cpp:macro> <cpp:value>glad_glGetMaterialxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERXOESPROC</name></type> <name>glad_glPointParameterxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterxOES</name></cpp:macro> <cpp:value>glad_glPointParameterxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLECOVERAGEXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLclampx</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLECOVERAGEXOESPROC</name></type> <name>glad_glSampleCoveragexOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoveragexOES</name></cpp:macro> <cpp:value>glad_glSampleCoveragexOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACCUMXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACCUMXOESPROC</name></type> <name>glad_glAccumxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAccumxOES</name></cpp:macro> <cpp:value>glad_glAccumxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBITMAPXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBITMAPXOESPROC</name></type> <name>glad_glBitmapxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBitmapxOES</name></cpp:macro> <cpp:value>glad_glBitmapxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDCOLORXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDCOLORXOESPROC</name></type> <name>glad_glBlendColorxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendColorxOES</name></cpp:macro> <cpp:value>glad_glBlendColorxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARACCUMXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARACCUMXOESPROC</name></type> <name>glad_glClearAccumxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearAccumxOES</name></cpp:macro> <cpp:value>glad_glClearAccumxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR3XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR3XOESPROC</name></type> <name>glad_glColor3xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3xOES</name></cpp:macro> <cpp:value>glad_glColor3xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR3XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR3XVOESPROC</name></type> <name>glad_glColor3xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor3xvOES</name></cpp:macro> <cpp:value>glad_glColor3xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLOR4XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLOR4XVOESPROC</name></type> <name>glad_glColor4xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColor4xvOES</name></cpp:macro> <cpp:value>glad_glColor4xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERXOESPROC</name></type> <name>glad_glConvolutionParameterxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterxOES</name></cpp:macro> <cpp:value>glad_glConvolutionParameterxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCONVOLUTIONPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCONVOLUTIONPARAMETERXVOESPROC</name></type> <name>glad_glConvolutionParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glConvolutionParameterxvOES</name></cpp:macro> <cpp:value>glad_glConvolutionParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEVALCOORD1XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEVALCOORD1XOESPROC</name></type> <name>glad_glEvalCoord1xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord1xOES</name></cpp:macro> <cpp:value>glad_glEvalCoord1xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEVALCOORD1XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEVALCOORD1XVOESPROC</name></type> <name>glad_glEvalCoord1xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord1xvOES</name></cpp:macro> <cpp:value>glad_glEvalCoord1xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEVALCOORD2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEVALCOORD2XOESPROC</name></type> <name>glad_glEvalCoord2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord2xOES</name></cpp:macro> <cpp:value>glad_glEvalCoord2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEVALCOORD2XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEVALCOORD2XVOESPROC</name></type> <name>glad_glEvalCoord2xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvalCoord2xvOES</name></cpp:macro> <cpp:value>glad_glEvalCoord2xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFEEDBACKBUFFERXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFEEDBACKBUFFERXOESPROC</name></type> <name>glad_glFeedbackBufferxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFeedbackBufferxOES</name></cpp:macro> <cpp:value>glad_glFeedbackBufferxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCONVOLUTIONPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCONVOLUTIONPARAMETERXVOESPROC</name></type> <name>glad_glGetConvolutionParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetConvolutionParameterxvOES</name></cpp:macro> <cpp:value>glad_glGetConvolutionParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETHISTOGRAMPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETHISTOGRAMPARAMETERXVOESPROC</name></type> <name>glad_glGetHistogramParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetHistogramParameterxvOES</name></cpp:macro> <cpp:value>glad_glGetHistogramParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLIGHTXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLIGHTXOESPROC</name></type> <name>glad_glGetLightxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLightxOES</name></cpp:macro> <cpp:value>glad_glGetLightxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMAPXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMAPXVOESPROC</name></type> <name>glad_glGetMapxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMapxvOES</name></cpp:macro> <cpp:value>glad_glGetMapxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMATERIALXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMATERIALXOESPROC</name></type> <name>glad_glGetMaterialxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMaterialxOES</name></cpp:macro> <cpp:value>glad_glGetMaterialxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPIXELMAPXVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPIXELMAPXVPROC</name></type> <name>glad_glGetPixelMapxv</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPixelMapxv</name></cpp:macro> <cpp:value>glad_glGetPixelMapxv</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXGENXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXGENXVOESPROC</name></type> <name>glad_glGetTexGenxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexGenxvOES</name></cpp:macro> <cpp:value>glad_glGetTexGenxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXLEVELPARAMETERXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXLEVELPARAMETERXVOESPROC</name></type> <name>glad_glGetTexLevelParameterxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameterxvOES</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameterxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXXOESPROC</name></type> <name>glad_glIndexxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexxOES</name></cpp:macro> <cpp:value>glad_glIndexxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXXVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXXVOESPROC</name></type> <name>glad_glIndexxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexxvOES</name></cpp:macro> <cpp:value>glad_glIndexxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOADTRANSPOSEMATRIXXOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOADTRANSPOSEMATRIXXOESPROC</name></type> <name>glad_glLoadTransposeMatrixxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLoadTransposeMatrixxOES</name></cpp:macro> <cpp:value>glad_glLoadTransposeMatrixxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAP1XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAP1XOESPROC</name></type> <name>glad_glMap1xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMap1xOES</name></cpp:macro> <cpp:value>glad_glMap1xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAP2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAP2XOESPROC</name></type> <name>glad_glMap2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMap2xOES</name></cpp:macro> <cpp:value>glad_glMap2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPGRID1XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPGRID1XOESPROC</name></type> <name>glad_glMapGrid1xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapGrid1xOES</name></cpp:macro> <cpp:value>glad_glMapGrid1xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMAPGRID2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPGRID2XOESPROC</name></type> <name>glad_glMapGrid2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapGrid2xOES</name></cpp:macro> <cpp:value>glad_glMapGrid2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTTRANSPOSEMATRIXXOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTTRANSPOSEMATRIXXOESPROC</name></type> <name>glad_glMultTransposeMatrixxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultTransposeMatrixxOES</name></cpp:macro> <cpp:value>glad_glMultTransposeMatrixxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1XOESPROC</name></type> <name>glad_glMultiTexCoord1xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1xOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD1XVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD1XVOESPROC</name></type> <name>glad_glMultiTexCoord1xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord1xvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord1xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2XOESPROC</name></type> <name>glad_glMultiTexCoord2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2xOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD2XVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD2XVOESPROC</name></type> <name>glad_glMultiTexCoord2xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord2xvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord2xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3XOESPROC</name></type> <name>glad_glMultiTexCoord3xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3xOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD3XVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD3XVOESPROC</name></type> <name>glad_glMultiTexCoord3xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord3xvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord3xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORD4XVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORD4XVOESPROC</name></type> <name>glad_glMultiTexCoord4xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoord4xvOES</name></cpp:macro> <cpp:value>glad_glMultiTexCoord4xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMAL3XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMAL3XVOESPROC</name></type> <name>glad_glNormal3xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormal3xvOES</name></cpp:macro> <cpp:value>glad_glNormal3xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPASSTHROUGHXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPASSTHROUGHXOESPROC</name></type> <name>glad_glPassThroughxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPassThroughxOES</name></cpp:macro> <cpp:value>glad_glPassThroughxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELMAPXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELMAPXPROC</name></type> <name>glad_glPixelMapx</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelMapx</name></cpp:macro> <cpp:value>glad_glPixelMapx</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELSTOREXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELSTOREXPROC</name></type> <name>glad_glPixelStorex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStorex</name></cpp:macro> <cpp:value>glad_glPixelStorex</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELTRANSFERXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELTRANSFERXOESPROC</name></type> <name>glad_glPixelTransferxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelTransferxOES</name></cpp:macro> <cpp:value>glad_glPixelTransferxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELZOOMXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELZOOMXOESPROC</name></type> <name>glad_glPixelZoomxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelZoomxOES</name></cpp:macro> <cpp:value>glad_glPixelZoomxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRIORITIZETEXTURESXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRIORITIZETEXTURESXOESPROC</name></type> <name>glad_glPrioritizeTexturesxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrioritizeTexturesxOES</name></cpp:macro> <cpp:value>glad_glPrioritizeTexturesxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRASTERPOS2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRASTERPOS2XOESPROC</name></type> <name>glad_glRasterPos2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2xOES</name></cpp:macro> <cpp:value>glad_glRasterPos2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRASTERPOS2XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRASTERPOS2XVOESPROC</name></type> <name>glad_glRasterPos2xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos2xvOES</name></cpp:macro> <cpp:value>glad_glRasterPos2xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRASTERPOS3XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRASTERPOS3XOESPROC</name></type> <name>glad_glRasterPos3xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3xOES</name></cpp:macro> <cpp:value>glad_glRasterPos3xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRASTERPOS3XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRASTERPOS3XVOESPROC</name></type> <name>glad_glRasterPos3xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos3xvOES</name></cpp:macro> <cpp:value>glad_glRasterPos3xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRASTERPOS4XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRASTERPOS4XOESPROC</name></type> <name>glad_glRasterPos4xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4xOES</name></cpp:macro> <cpp:value>glad_glRasterPos4xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRASTERPOS4XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRASTERPOS4XVOESPROC</name></type> <name>glad_glRasterPos4xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRasterPos4xvOES</name></cpp:macro> <cpp:value>glad_glRasterPos4xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRECTXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRECTXOESPROC</name></type> <name>glad_glRectxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectxOES</name></cpp:macro> <cpp:value>glad_glRectxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRECTXVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRECTXVOESPROC</name></type> <name>glad_glRectxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRectxvOES</name></cpp:macro> <cpp:value>glad_glRectxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD1XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD1XOESPROC</name></type> <name>glad_glTexCoord1xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1xOES</name></cpp:macro> <cpp:value>glad_glTexCoord1xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD1XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD1XVOESPROC</name></type> <name>glad_glTexCoord1xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord1xvOES</name></cpp:macro> <cpp:value>glad_glTexCoord1xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2XOESPROC</name></type> <name>glad_glTexCoord2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2xOES</name></cpp:macro> <cpp:value>glad_glTexCoord2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD2XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD2XVOESPROC</name></type> <name>glad_glTexCoord2xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord2xvOES</name></cpp:macro> <cpp:value>glad_glTexCoord2xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD3XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD3XOESPROC</name></type> <name>glad_glTexCoord3xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3xOES</name></cpp:macro> <cpp:value>glad_glTexCoord3xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD3XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD3XVOESPROC</name></type> <name>glad_glTexCoord3xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord3xvOES</name></cpp:macro> <cpp:value>glad_glTexCoord3xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4XOESPROC</name></type> <name>glad_glTexCoord4xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4xOES</name></cpp:macro> <cpp:value>glad_glTexCoord4xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORD4XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORD4XVOESPROC</name></type> <name>glad_glTexCoord4xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoord4xvOES</name></cpp:macro> <cpp:value>glad_glTexCoord4xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXGENXOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXGENXOESPROC</name></type> <name>glad_glTexGenxOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGenxOES</name></cpp:macro> <cpp:value>glad_glTexGenxOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXGENXVOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXGENXVOESPROC</name></type> <name>glad_glTexGenxvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexGenxvOES</name></cpp:macro> <cpp:value>glad_glTexGenxvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX2XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX2XOESPROC</name></type> <name>glad_glVertex2xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2xOES</name></cpp:macro> <cpp:value>glad_glVertex2xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX2XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX2XVOESPROC</name></type> <name>glad_glVertex2xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex2xvOES</name></cpp:macro> <cpp:value>glad_glVertex2xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX3XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX3XOESPROC</name></type> <name>glad_glVertex3xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3xOES</name></cpp:macro> <cpp:value>glad_glVertex3xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX3XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX3XVOESPROC</name></type> <name>glad_glVertex3xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex3xvOES</name></cpp:macro> <cpp:value>glad_glVertex3xvOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX4XOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>, <parameter><decl><type><name>GLfixed</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX4XOESPROC</name></type> <name>glad_glVertex4xOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4xOES</name></cpp:macro> <cpp:value>glad_glVertex4xOES</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEX4XVOESPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfixed</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEX4XVOESPROC</name></type> <name>glad_glVertex4xvOES</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertex4xvOES</name></cpp:macro> <cpp:value>glad_glVertex4xvOES</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_multisample</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name></type> <name>glad_glRenderbufferStorageMultisampleEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageMultisampleEXT</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageMultisampleEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_gpu_shader5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_gpu_shader5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_gpu_shader5</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture4D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture4D</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_texture4D</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE4DSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE4DSGISPROC</name></type> <name>glad_glTexImage4DSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage4DSGIS</name></cpp:macro> <cpp:value>glad_glTexImage4DSGIS</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE4DSGISPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE4DSGISPROC</name></type> <name>glad_glTexSubImage4DSGIS</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage4DSGIS</name></cpp:macro> <cpp:value>glad_glTexSubImage4DSGIS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture3D</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture3D</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE3DEXTPROC</name></type> <name>glad_glTexImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3DEXT</name></cpp:macro> <cpp:value>glad_glTexImage3DEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE3DEXTPROC</name></type> <name>glad_glTexSubImage3DEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage3DEXT</name></cpp:macro> <cpp:value>glad_glTexSubImage3DEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_multisample</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMASKEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLclampf</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMASKEXTPROC</name></type> <name>glad_glSampleMaskEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMaskEXT</name></cpp:macro> <cpp:value>glad_glSampleMaskEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEPATTERNEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEPATTERNEXTPROC</name></type> <name>glad_glSamplePatternEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplePatternEXT</name></cpp:macro> <cpp:value>glad_glSamplePatternEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_secondary_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_secondary_color</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_secondary_color</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3BEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>, <parameter><decl><type><name>GLbyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3BEXTPROC</name></type> <name>glad_glSecondaryColor3bEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3bEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3bEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3BVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3BVEXTPROC</name></type> <name>glad_glSecondaryColor3bvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3bvEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3bvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3DEXTPROC</name></type> <name>glad_glSecondaryColor3dEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3dEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3dEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3DVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3DVEXTPROC</name></type> <name>glad_glSecondaryColor3dvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3dvEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3dvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3FEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3FEXTPROC</name></type> <name>glad_glSecondaryColor3fEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3fEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3fEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3FVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3FVEXTPROC</name></type> <name>glad_glSecondaryColor3fvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3fvEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3fvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3IEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3IEXTPROC</name></type> <name>glad_glSecondaryColor3iEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3iEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3iEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3IVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3IVEXTPROC</name></type> <name>glad_glSecondaryColor3ivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3ivEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3ivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3SEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>, <parameter><decl><type><name>GLshort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3SEXTPROC</name></type> <name>glad_glSecondaryColor3sEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3sEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3sEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3SVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3SVEXTPROC</name></type> <name>glad_glSecondaryColor3svEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3svEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3svEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3UBEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3UBEXTPROC</name></type> <name>glad_glSecondaryColor3ubEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3ubEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3ubEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3UBVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3UBVEXTPROC</name></type> <name>glad_glSecondaryColor3ubvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3ubvEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3ubvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3UIEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3UIEXTPROC</name></type> <name>glad_glSecondaryColor3uiEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3uiEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3uiEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3UIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3UIVEXTPROC</name></type> <name>glad_glSecondaryColor3uivEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3uivEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3uivEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3USEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLushort</name></type></decl></parameter>, <parameter><decl><type><name>GLushort</name></type></decl></parameter>, <parameter><decl><type><name>GLushort</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3USEXTPROC</name></type> <name>glad_glSecondaryColor3usEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3usEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3usEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLOR3USVEXTPROC</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLOR3USVEXTPROC</name></type> <name>glad_glSecondaryColor3usvEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColor3usvEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColor3usvEXT</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORPOINTEREXTPROC</name></type> <name>glad_glSecondaryColorPointerEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorPointerEXT</name></cpp:macro> <cpp:value>glad_glSecondaryColorPointerEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_parameter_buffer_object2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_parameter_buffer_object2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NV_parameter_buffer_object2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_vertex_array_object</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLNEWOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNEWOBJECTBUFFERATIPROC</name></type> <name>glad_glNewObjectBufferATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNewObjectBufferATI</name></cpp:macro> <cpp:value>glad_glNewObjectBufferATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISOBJECTBUFFERATIPROC</name></type> <name>glad_glIsObjectBufferATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsObjectBufferATI</name></cpp:macro> <cpp:value>glad_glIsObjectBufferATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUPDATEOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUPDATEOBJECTBUFFERATIPROC</name></type> <name>glad_glUpdateObjectBufferATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUpdateObjectBufferATI</name></cpp:macro> <cpp:value>glad_glUpdateObjectBufferATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTBUFFERFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTBUFFERFVATIPROC</name></type> <name>glad_glGetObjectBufferfvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectBufferfvATI</name></cpp:macro> <cpp:value>glad_glGetObjectBufferfvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTBUFFERIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTBUFFERIVATIPROC</name></type> <name>glad_glGetObjectBufferivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectBufferivATI</name></cpp:macro> <cpp:value>glad_glGetObjectBufferivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFREEOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFREEOBJECTBUFFERATIPROC</name></type> <name>glad_glFreeObjectBufferATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFreeObjectBufferATI</name></cpp:macro> <cpp:value>glad_glFreeObjectBufferATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLARRAYOBJECTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLARRAYOBJECTATIPROC</name></type> <name>glad_glArrayObjectATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glArrayObjectATI</name></cpp:macro> <cpp:value>glad_glArrayObjectATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETARRAYOBJECTFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetArrayObjectfvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetArrayObjectfvATI</name></cpp:macro> <cpp:value>glad_glGetArrayObjectfvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETARRAYOBJECTIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetArrayObjectivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetArrayObjectivATI</name></cpp:macro> <cpp:value>glad_glGetArrayObjectivATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTARRAYOBJECTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTARRAYOBJECTATIPROC</name></type> <name>glad_glVariantArrayObjectATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantArrayObjectATI</name></cpp:macro> <cpp:value>glad_glVariantArrayObjectATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTARRAYOBJECTFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetVariantArrayObjectfvATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantArrayObjectfvATI</name></cpp:macro> <cpp:value>glad_glGetVariantArrayObjectfvATI</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTARRAYOBJECTIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetVariantArrayObjectivATI</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantArrayObjectivATI</name></cpp:macro> <cpp:value>glad_glGetVariantArrayObjectivATI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NVX_gpu_memory_info</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NVX_gpu_memory_info</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_NVX_gpu_memory_info</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sparse_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sparse_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_sparse_texture</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPAGECOMMITMENTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPAGECOMMITMENTARBPROC</name></type> <name>glad_glTexPageCommitmentARB</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexPageCommitmentARB</name></cpp:macro> <cpp:value>glad_glTexPageCommitmentARB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_point_line_texgen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_point_line_texgen</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIS_point_line_texgen</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_range_elements</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_range_elements</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_draw_range_elements</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTSEXTPROC</name></type> <name>glad_glDrawRangeElementsEXT</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementsEXT</name></cpp:macro> <cpp:value>glad_glDrawRangeElementsEXT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_blend_alpha_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_blend_alpha_minmax</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_SGIX_blend_alpha_minmax</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
