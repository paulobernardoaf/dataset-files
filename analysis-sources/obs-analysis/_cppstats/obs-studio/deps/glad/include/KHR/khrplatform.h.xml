<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\glad\include\KHR\khrplatform.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APICALL</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APICALL</name></cpp:macro> <cpp:value>IMPORT_C</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APICALL</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APIENTRY</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APIENTRY</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__ARMCC_2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APIATTRIBUTES</name></cpp:macro> <cpp:value>__softfp</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_APIATTRIBUTES</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__USLC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int32_t</name></type> <name>khronos_int32_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>khronos_uint32_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>khronos_int64_t</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>khronos_uint64_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_INT64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int32_t</name></type> <name>khronos_int32_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>khronos_uint32_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>khronos_int64_t</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>khronos_uint64_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_INT64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name>__int32</name></type> <name>khronos_int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>khronos_uint32_t</name>;</typedef>

<typedef>typedef <type><name>__int64</name></type> <name>khronos_int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>khronos_uint64_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_INT64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__digital__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><name>int</name></type> <name>khronos_int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>khronos_uint32_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>long</name> <name>int</name></type> <name>khronos_int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>khronos_uint64_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>khronos_int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>khronos_uint64_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_INT64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:elif>

<typedef>typedef <type><name>int</name></type> <name>khronos_int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>khronos_uint32_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_INT64</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_FLOAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int32_t</name></type> <name>khronos_int32_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>khronos_uint32_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>khronos_int64_t</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>khronos_uint64_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_INT64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_SUPPORT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>khronos_int8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>khronos_uint8_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>short</name> <name>int</name></type> <name>khronos_int16_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>khronos_uint16_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name> <name>int</name></type> <name>khronos_intptr_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>khronos_uintptr_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name> <name>int</name></type> <name>khronos_ssize_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>khronos_usize_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>signed</name> <name>long</name> <name>int</name></type> <name>khronos_intptr_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>khronos_uintptr_t</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>long</name> <name>int</name></type> <name>khronos_ssize_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>khronos_usize_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>KHRONOS_SUPPORT_FLOAT</name></expr></cpp:if>

<typedef>typedef <type><name>float</name></type> <name>khronos_float_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>KHRONOS_SUPPORT_INT64</name></expr></cpp:if>

<typedef>typedef <type><name>khronos_uint64_t</name></type> <name>khronos_utime_nanoseconds_t</name>;</typedef>

<typedef>typedef <type><name>khronos_int64_t</name></type> <name>khronos_stime_nanoseconds_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KHRONOS_MAX_ENUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHRONOS_MAX_ENUM</name></cpp:macro> <cpp:value>0x7FFFFFFF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KHRONOS_FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>KHRONOS_TRUE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>KHRONOS_BOOLEAN_ENUM_FORCE_SIZE</name> <init>= <expr><name>KHRONOS_MAX_ENUM</name></expr></init></decl>

}</block></enum></type> <name>khronos_boolean_enum_t</name>;</typedef>

</unit>
