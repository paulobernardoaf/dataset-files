<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\index_hash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>blocks_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_check_state</name></type> <name>check</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_index_hash_info</name>;</typedef>

<struct>struct <name>lzma_index_hash_s</name> <block>{

<enum>enum <block>{

<decl><name>SEQ_BLOCK</name></decl>,

<decl><name>SEQ_COUNT</name></decl>,

<decl><name>SEQ_UNPADDED</name></decl>,

<decl><name>SEQ_UNCOMPRESSED</name></decl>,

<decl><name>SEQ_PADDING_INIT</name></decl>,

<decl><name>SEQ_PADDING</name></decl>,

<decl><name>SEQ_CRC32</name></decl>,

}</block> <decl><name>sequence</name></decl>;</enum>

<decl_stmt><decl><type><name>lzma_index_hash_info</name></type> <name>blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_index_hash_info</name></type> <name>records</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>remaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>unpadded_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc32</name></decl>;</decl_stmt>

}</block>;</struct>

<extern>extern LZMA_API(lzma_index_hash *</extern>)

<macro><name>lzma_index_hash_init</name><argument_list>(<argument>lzma_index_hash *index_hash</argument>, <argument>lzma_allocator *allocator</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index_hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index_hash</name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_index_hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>blocks_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>index_list_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>blocks_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>index_list_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>unpadded_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lzma_check_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>check</name></name></expr></argument>, <argument><expr><name>LZMA_CHECK_BEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lzma_check_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>check</name></name></expr></argument>, <argument><expr><name>LZMA_CHECK_BEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>index_hash</name></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(void</extern>)

<macro><name>lzma_index_hash_end</name><argument_list>(<argument>lzma_index_hash *index_hash</argument>, <argument>lzma_allocator *allocator</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>index_hash</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block>

<extern>extern LZMA_API(lzma_vli</extern>)

<macro><name>lzma_index_hash_size</name><argument_list>(<argument>const lzma_index_hash *index_hash</argument>)</argument_list></macro>

<block>{<block_content>

<return>return <expr><call><name>index_size</name><argument_list>(<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>count</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>hash_append</name><parameter_list>(<parameter><decl><type><name>lzma_index_hash_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>unpadded_size</name></decl></parameter>,

<parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>blocks_size</name></name> <operator>+=</operator> <call><name>vli_ceil4</name><argument_list>(<argument><expr><name>unpadded_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>index_list_size</name></name> <operator>+=</operator> <call><name>lzma_vli_size</name><argument_list>(<argument><expr><name>unpadded_size</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>lzma_vli_size</name><argument_list>(<argument><expr><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>info</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name><name>sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>unpadded_size</name></expr>, <expr><name>uncompressed_size</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lzma_check_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>check</name></name></expr></argument>, <argument><expr><name>LZMA_CHECK_BEST</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>sizes</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_index_hash_append</name><argument_list>(<argument>lzma_index_hash *index_hash</argument>, <argument>lzma_vli unpadded_size</argument>,

<argument>lzma_vli uncompressed_size</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>!=</operator> <name>SEQ_BLOCK</name>

<operator>||</operator> <name><name>unpadded_size</name> <argument_list type="generic">&lt; <argument><expr><name>UNPADDED_SIZE_MIN</name>

<operator>||</operator> <name>unpadded_size</name></expr></argument> &gt;</argument_list></name> <name>UNPADDED_SIZE_MAX</name>

<operator>||</operator> <name>uncompressed_size</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>hash_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>,

<argument><expr><name>unpadded_size</name></expr></argument>, <argument><expr><name>uncompressed_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>blocks_size</name></name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name>

<operator>||</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name>

<operator>||</operator> <call><name>index_size</name><argument_list>(<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>count</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call>

<operator>&gt;</operator> <name>LZMA_BACKWARD_SIZE_MAX</name>

<operator>||</operator> <call><name>index_stream_size</name><argument_list>(<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>blocks_size</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>count</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call>

<operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_index_hash_decode</name><argument_list>(<argument>lzma_index_hash *index_hash</argument>, <argument>const uint8_t *in</argument>,

<argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&gt;=</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_start</name> <init>= <expr><operator>*</operator><name>in_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><name>LZMA_OK</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&lt;</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEQ_BLOCK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_COUNT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEQ_COUNT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_vli_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>remaining</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>remaining</name></name> <operator>!=</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <ternary><condition><expr><name><name>index_hash</name><operator>-&gt;</operator><name>remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name>SEQ_PADDING_INIT</name></expr> </then><else>: <expr><name>SEQ_UNPADDED</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SEQ_UNPADDED</name></expr>:</case>

<case>case <expr><name>SEQ_UNCOMPRESSED</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>lzma_vli</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><ternary><condition><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>SEQ_UNPADDED</name></expr>

?</condition><then> <expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>unpadded_size</name></name></expr>

</then><else>: <expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_vli_decode</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>SEQ_UNPADDED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>unpadded_size</name></name> <operator>&lt;</operator> <name>UNPADDED_SIZE_MIN</name>

<operator>||</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>unpadded_size</name></name>

<operator>&gt;</operator> <name>UNPADDED_SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_UNCOMPRESSED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>hash_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>records</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>unpadded_size</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>blocks_size</name></name>

<operator>&lt;</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>blocks_size</name></name>

<operator>||</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>uncompressed_size</name></name>

<operator>&lt;</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>uncompressed_size</name></name>

<operator>||</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>index_list_size</name></name>

<operator>&lt;</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>index_list_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <ternary><condition><expr><operator>--</operator><name><name>index_hash</name><operator>-&gt;</operator><name>remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name>SEQ_PADDING_INIT</name></expr> </then><else>: <expr><name>SEQ_UNPADDED</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SEQ_PADDING_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><call><name>LZMA_VLI_C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>index_size_unpadded</name><argument_list>(

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>count</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>index_list_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_PADDING</name></expr>;</expr_stmt>

<case>case <expr><name>SEQ_PADDING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>blocks_size</name></name>

<operator>!=</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>blocks_size</name></name>

<operator>||</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>uncompressed_size</name></name>

<operator>!=</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>uncompressed_size</name></name>

<operator>||</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>index_list_size</name></name>

<operator>!=</operator> <name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>index_list_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_check_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>check</name></name></expr></argument>, <argument><expr><name>LZMA_CHECK_BEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_check_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>check</name></name></expr></argument>, <argument><expr><name>LZMA_CHECK_BEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>blocks</name><operator>.</operator><name>check</name><operator>.</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>,

<argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>records</name><operator>.</operator><name>check</name><operator>.</operator><name>buffer</name><operator>.</operator><name>u8</name></name></expr></argument>,

<argument><expr><call><name>lzma_check_size</name><argument_list>(<argument><expr><name>LZMA_CHECK_BEST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <call><name>lzma_crc32</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name>in_start</name></expr></argument>,

<argument><expr><operator>*</operator><name>in_pos</name> <operator>-</operator> <name>in_start</name></expr></argument>, <argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CRC32</name></expr>;</expr_stmt>

<case>case <expr><name>SEQ_CRC32</name></expr>:</case>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>index_hash</name><operator>-&gt;</operator><name>crc32</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>

<operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>!=</operator> <name><name>in</name><index>[<expr><operator>(</operator><operator>*</operator><name>in_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name><name>index_hash</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>;</do>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>

</block_content>}</block></switch></block_content></block></while>

<label><name>out</name>:</label>

<expr_stmt><expr><name><name>index_hash</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <call><name>lzma_crc32</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name>in_start</name></expr></argument>,

<argument><expr><operator>*</operator><name>in_pos</name> <operator>-</operator> <name>in_start</name></expr></argument>, <argument><expr><name><name>index_hash</name><operator>-&gt;</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

</unit>
