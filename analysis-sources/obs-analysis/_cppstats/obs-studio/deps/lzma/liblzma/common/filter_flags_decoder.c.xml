<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\filter_flags_decoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_decoder.h"</cpp:file></cpp:include>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_filter_flags_decode</name><argument_list>(

<argument>lzma_filter *filter</argument>, <argument>lzma_allocator *allocator</argument>,

<argument>const uint8_t *in</argument>, <argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_vli_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <name>LZMA_FILTER_RESERVED_START</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>props_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_vli_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>props_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>-</operator> <operator>*</operator><name>in_pos</name> <operator>&lt;</operator> <name>props_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_properties_decode</name><argument_list>(

<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <operator>*</operator><name>in_pos</name></expr></argument>, <argument><expr><name>props_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>in_pos</name> <operator>+=</operator> <name>props_size</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

</unit>
