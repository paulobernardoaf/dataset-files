<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\vli_decoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_vli_decode</name><argument_list>(<argument>lzma_vli *restrict vli</argument>, <argument>size_t *vli_pos</argument>,

<argument>const uint8_t *restrict in</argument>, <argument>size_t *restrict in_pos</argument>,

<argument>size_t in_size</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>vli_pos_internal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vli_pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vli_pos</name> <operator>=</operator> <operator>&amp;</operator><name>vli_pos_internal</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vli</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&gt;=</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vli_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>vli</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vli_pos</name> <operator>&gt;=</operator> <name>LZMA_VLI_BYTES_MAX</name>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>vli</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>*</operator><name>vli_pos</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&gt;=</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_BUF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>byte</name> <init>= <expr><name><name>in</name><index>[<expr><operator>*</operator><name>in_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>in_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vli</name> <operator>+=</operator> <operator>(</operator><name>lzma_vli</name><operator>)</operator><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><name>vli_pos</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>vli_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>vli_pos</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>vli_pos</name> <operator>==</operator> <operator>&amp;</operator><name>vli_pos_internal</name></expr>

?</condition><then> <expr><name>LZMA_OK</name></expr> </then><else>: <expr><name>LZMA_STREAM_END</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vli_pos</name> <operator>==</operator> <name>LZMA_VLI_BYTES_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>&lt;</operator> <name>in_size</name></expr>)</condition>;</do>

<return>return <expr><ternary><condition><expr><name>vli_pos</name> <operator>==</operator> <operator>&amp;</operator><name>vli_pos_internal</name></expr> ?</condition><then> <expr><name>LZMA_DATA_ERROR</name></expr> </then><else>: <expr><name>LZMA_OK</name></expr></else></ternary></expr>;</return>

</block_content>}</block>

</unit>
