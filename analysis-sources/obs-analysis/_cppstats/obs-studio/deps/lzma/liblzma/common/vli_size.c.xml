<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\vli_size.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<extern>extern LZMA_API(uint32_t</extern>)

<macro><name>lzma_vli_size</name><argument_list>(<argument>lzma_vli vli</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vli</name> <operator>&gt;</operator> <name>LZMA_VLI_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>vli</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>vli</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>LZMA_VLI_BYTES_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block>

</unit>
