<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\alone_encoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALONE_HEADER_SIZE</name></cpp:macro> <cpp:value>(1 + 4 + 8)</cpp:value></cpp:define>

<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>next</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>SEQ_HEADER</name></decl>,

<decl><name>SEQ_CODE</name></decl>,

}</block> <decl><name>sequence</name></decl>;</enum>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><name>ALONE_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>alone_encode</name><argument_list>(<argument><expr><name>lzma_coder</name> <operator>*</operator><name>coder</name></expr></argument>,

<argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>restrict</specifier> <name>in</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><specifier>restrict</specifier> <name>in_pos</name></expr></argument>,

<argument><expr><name>size_t</name> <name>in_size</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><specifier>restrict</specifier> <name>out</name></expr></argument>,

<argument><expr><name>size_t</name> <operator>*</operator><specifier>restrict</specifier> <name>out_pos</name></expr></argument>, <argument><expr><name>size_t</name> <name>out_size</name></expr></argument>,

<argument><expr><name>lzma_action</name> <name>action</name></expr></argument>)</argument_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEQ_HEADER</name></expr>:</case>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>header_pos</name></name></expr></argument>,

<argument><expr><name>ALONE_HEADER_SIZE</name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>header_pos</name></name> <operator>&lt;</operator> <name>ALONE_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_CODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEQ_CODE</name></expr>:</case>

<return>return <expr><call><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,

<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>

</block_content>}</block></switch></block_content></block></while>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>alone_encoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>alone_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_coder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alone_encoder_init</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>alone_encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>alone_encoder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>header_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_lzma_lclppb_encode</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>&lt;</operator> <name>LZMA_DICT_SIZE_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>d</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unaligned_write32le</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_filter_info</name></type> <name><name>filters</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_lzma_encoder_init</name></expr>,

<expr><operator>.</operator><name>options</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>options</name><operator>)</operator></expr>,

}</block></expr>, <expr><block>{

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>lzma_next_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_alone_encoder</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>const lzma_options_lzma *options</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_strm_init</name><argument_list>(<argument><expr><name>alone_encoder_init</name></expr></argument>, <argument><expr><name>strm</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block>

</unit>
