<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<extern>extern LZMA_API(uint32_t</extern>)

<macro><name>lzma_version_number</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<block>{<block_content>

<return>return <expr><name>LZMA_VERSION</name></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(const char *</extern>)

<macro><name>lzma_version_string</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<block>{<block_content>

<return>return <expr><name>LZMA_VERSION_STRING</name></expr>;</return>

</block_content>}</block>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type> <name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__malloc__</name><operator>)</operator></expr></argument>)</argument_list> <name>lzma_attr_alloc_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>

<name>lzma_alloc</name><argument_list>(<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name></expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>allocator</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>allocator</name><operator>-&gt;</operator><name>alloc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name><name>allocator</name><operator>-&gt;</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>extern</specifier> <name>void</name></type>

<name>lzma_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>allocator</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>allocator</name><operator>-&gt;</operator><name>free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>size_t</name></type>

<name>lzma_bufcpy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_avail</name> <init>= <expr><name>in_size</name> <operator>-</operator> <operator>*</operator><name>in_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_avail</name> <init>= <expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_size</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>in_avail</name></expr></argument>, <argument><expr><name>out_avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <operator>*</operator><name>in_pos</name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in_pos</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<return>return <expr><name>copy_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_next_filter_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_coder_init</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>init</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name>LZMA_OK</name></expr> </then><else>: <expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_next_filter_update</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>reversed_filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reversed_filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name><name>next</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reversed_filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>update</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>next</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reversed_filters</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>

<name>lzma_next_end</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>init</name></name> <operator>!=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>next</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_strm_init</name><parameter_list>(<parameter><decl><type><name>lzma_stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_internal</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_SYNC_FLUSH</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FULL_FLUSH</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_RUN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allow_buf_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_code</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>lzma_action action</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>action</name><operator>)</operator> <operator>&gt;</operator> <name>LZMA_FINISH</name>

<operator>||</operator> <operator>!</operator><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>action</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>reserved_ptr1</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_ptr2</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_ptr3</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_ptr4</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_int1</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_int2</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_int3</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_int4</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_enum1</name></name> <operator>!=</operator> <name>LZMA_RESERVED_ENUM</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>reserved_enum2</name></name> <operator>!=</operator> <name>LZMA_RESERVED_ENUM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ISEQ_RUN</name></expr>:</case>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LZMA_RUN</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>LZMA_SYNC_FLUSH</name></expr>:</case>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_SYNC_FLUSH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LZMA_FULL_FLUSH</name></expr>:</case>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_FULL_FLUSH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LZMA_FINISH</name></expr>:</case>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_FINISH</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>ISEQ_SYNC_FLUSH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>LZMA_SYNC_FLUSH</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>!=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ISEQ_FULL_FLUSH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>LZMA_FULL_FLUSH</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>!=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ISEQ_FINISH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>LZMA_FINISH</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>!=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ISEQ_END</name></expr>:</case>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return>

<case>case <expr><name>ISEQ_ERROR</name></expr>:</case>

<default>default:</default>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>size_t</name></type> <name>in_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>out_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(

<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument>,

<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_pos</name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr></argument>,

<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_pos</name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>in_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>in_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>+=</operator> <name>in_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>+=</operator> <name>out_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>-=</operator> <name>out_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name>out_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LZMA_OK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>in_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allow_buf_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_BUF_ERROR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allow_buf_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allow_buf_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>LZMA_STREAM_END</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>ISEQ_SYNC_FLUSH</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>ISEQ_FULL_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_RUN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_END</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<case>case <expr><name>LZMA_NO_CHECK</name></expr>:</case>

<case>case <expr><name>LZMA_UNSUPPORTED_CHECK</name></expr>:</case>

<case>case <expr><name>LZMA_GET_CHECK</name></expr>:</case>

<case>case <expr><name>LZMA_MEMLIMIT_ERROR</name></expr>:</case>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allow_buf_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>LZMA_BUF_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>ISEQ_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(void</extern>)

<macro><name>lzma_end</name><argument_list>(<argument>lzma_stream *strm</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block>

<extern>extern LZMA_API(lzma_check</extern>)

<macro><name>lzma_get_check</name><argument_list>(<argument>const lzma_stream *strm</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>get_check</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_CHECK_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>get_check</name></name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(uint64_t</extern>)

<macro><name>lzma_memusage</name><argument_list>(<argument>const lzma_stream *strm</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>memusage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_memlimit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>memconfig</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>memconfig</name></name><argument_list>(

<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>memusage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_memlimit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>memusage</name></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(uint64_t</extern>)

<macro><name>lzma_memlimit_get</name><argument_list>(<argument>const lzma_stream *strm</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_memlimit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>memusage</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>memconfig</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>memconfig</name></name><argument_list>(

<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>memusage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_memlimit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>old_memlimit</name></expr>;</return>

</block_content>}</block>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_memlimit_set</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>uint64_t new_memlimit</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_memlimit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>memusage</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>memconfig</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_memlimit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_memlimit</name> <operator>&lt;</operator> <name>LZMA_MEMUSAGE_BASE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEMLIMIT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>memconfig</name></name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>memusage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_memlimit</name></expr></argument>, <argument><expr><name>new_memlimit</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

</unit>
