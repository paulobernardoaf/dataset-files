<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\stream_encoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index_encoder.h"</cpp:file></cpp:include>

<struct>struct <name>lzma_coder_s</name> <block>{

<enum>enum <block>{

<decl><name>SEQ_STREAM_HEADER</name></decl>,

<decl><name>SEQ_BLOCK_INIT</name></decl>,

<decl><name>SEQ_BLOCK_HEADER</name></decl>,

<decl><name>SEQ_BLOCK_ENCODE</name></decl>,

<decl><name>SEQ_INDEX_ENCODE</name></decl>,

<decl><name>SEQ_STREAM_FOOTER</name></decl>,

}</block> <decl><name>sequence</name></decl>;</enum>

<decl_stmt><decl><type><name>bool</name></type> <name>block_encoder_is_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>block_encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_block</name></type> <name>block_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_filter</name></type> <name><name>filters</name><index>[<expr><name>LZMA_FILTERS_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>index_encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>LZMA_BLOCK_HEADER_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>block_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>compressed_size</name></name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>uncompressed_size</name></name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_block_header_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_block_encoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_encoder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>stream_encode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEQ_STREAM_HEADER</name></expr>:</case>

<case>case <expr><name>SEQ_BLOCK_HEADER</name></expr>:</case>

<case>case <expr><name>SEQ_STREAM_FOOTER</name></expr>:</case>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>SEQ_STREAM_FOOTER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEQ_BLOCK_INIT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>LZMA_FINISH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>action</name> <operator>==</operator> <name>LZMA_RUN</name></expr>

?</condition><then> <expr><name>LZMA_OK</name></expr> </then><else>: <expr><name>LZMA_STREAM_END</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_index_encoder_init</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>index_encoder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_INDEX_ENCODE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>block_encoder_is_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>block_encoder_init</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_encoder_is_initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_block_header_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_BLOCK_HEADER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SEQ_BLOCK_ENCODE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lzma_action</name></type> <name><name>convert</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>LZMA_RUN</name></expr>,

<expr><name>LZMA_SYNC_FLUSH</name></expr>,

<expr><name>LZMA_FINISH</name></expr>,

<expr><name>LZMA_FINISH</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>block_encoder</name><operator>.</operator><name>code</name></name><argument_list>(

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block_encoder</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name><name>convert</name><index>[<expr><name>action</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>LZMA_SYNC_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_vli</name></type> <name>unpadded_size</name> <init>= <expr><call><name>lzma_block_unpadded_size</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unpadded_size</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_index_append</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>unpadded_size</name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_BLOCK_INIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SEQ_INDEX_ENCODE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>index_encoder</name><operator>.</operator><name>code</name></name><argument_list>(

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index_encoder</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>LZMA_RUN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_stream_flags</name></type> <name>stream_flags</name> <init>= <expr><block>{

<expr><operator>.</operator><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>backward_size</name> <operator>=</operator> <call><name>lzma_index_size</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>check</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>check</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_stream_footer_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_flags</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_STREAM_FOOTER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>

</block_content>}</block></switch></block_content></block></while>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>stream_encoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>block_encoder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>index_encoder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_index_end</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>coder</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>stream_encoder_update</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>reversed_filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>&lt;=</operator> <name>SEQ_BLOCK_INIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_encoder_is_initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>filters</name></name> <operator>=</operator> <operator>(</operator><name>lzma_filter</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>filters</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>block_encoder_init</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>filters</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>filters</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>block_encoder_is_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>&lt;=</operator> <name>SEQ_BLOCK_ENCODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name><name>coder</name><operator>-&gt;</operator><name>block_encoder</name><operator>.</operator><name>update</name></name><argument_list>(

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>block_encoder</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>reversed_filters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>coder</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>lzma_filters_copy</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_stream_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>lzma_check</name></type> <name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_coder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lzma_stream_encoder_init</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filters</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_encoder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>&amp;</operator><name>stream_encoder_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>block_encoder</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>index_encoder</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_STREAM_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>block_options</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_index_end</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>lzma_index_init</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_stream_flags</name></type> <name>stream_flags</name> <init>= <expr><block>{

<expr><operator>.</operator><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>check</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_stream_header_encode</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>stream_flags</name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</expr_stmt>

<return>return <expr><call><name>stream_encoder_update</name><argument_list>(

<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_stream_encoder</name><argument_list>(<argument>lzma_stream *strm</argument>,

<argument>const lzma_filter *filters</argument>, <argument>lzma_check check</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_strm_init</name><argument_list>(<argument><expr><name>lzma_stream_encoder_init</name></expr></argument>, <argument><expr><name>strm</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_RUN</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_SYNC_FLUSH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FULL_FLUSH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>supported_actions</name><index>[<expr><name>LZMA_FINISH</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block>

</unit>
