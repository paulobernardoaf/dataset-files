<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\block_buffer_decoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block_decoder.h"</cpp:file></cpp:include>

<extern>extern LZMA_API(lzma_ret</extern>)

<macro><name>lzma_block_buffer_decode</name><argument_list>(<argument>lzma_block *block</argument>, <argument>lzma_allocator *allocator</argument>,

<argument>const uint8_t *in</argument>, <argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>,

<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_pos</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>in_pos</name> <operator>!=</operator> <name>in_size</name><operator>)</operator>

<operator>||</operator> <operator>*</operator><name>in_pos</name> <operator>&gt;</operator> <name>in_size</name> <operator>||</operator> <name>out_pos</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>out</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>out_pos</name> <operator>!=</operator> <name>out_size</name><operator>)</operator>

<operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>&gt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_next_coder</name></type> <name>block_decoder</name> <init>= <expr><name>LZMA_NEXT_CODER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_block_decoder_init</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>block_decoder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>in_start</name> <init>= <expr><operator>*</operator><name>in_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>block_decoder</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><name><name>block_decoder</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>,

<argument><expr><name>LZMA_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_OK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name>

<operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>==</operator> <name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_DATA_ERROR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_BUF_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>in_pos</name> <operator>=</operator> <name>in_start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>=</operator> <name>out_start</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block_decoder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

</unit>
