<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\common\index.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNPADDED_SIZE_MIN</name></cpp:macro> <cpp:value>LZMA_VLI_C(5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNPADDED_SIZE_MAX</name></cpp:macro> <cpp:value>(LZMA_VLI_MAX &amp; ~LZMA_VLI_C(3))</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_index_padding_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_index</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_index_prealloc</name><parameter_list>(<parameter><decl><type><name>lzma_index</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>records</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lzma_vli</name></type>

<name>vli_ceil4</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>vli</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vli</name> <operator>&lt;=</operator> <name>LZMA_VLI_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>vli</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><call><name>LZMA_VLI_C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lzma_vli</name></type>

<name>index_size_unpadded</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>lzma_vli_size</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>index_list_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lzma_vli</name></type>

<name>index_size</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vli_ceil4</name><argument_list>(<argument><expr><call><name>index_size_unpadded</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>index_list_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>lzma_vli</name></type>

<name>index_stream_size</name><parameter_list>(<parameter><decl><type><name>lzma_vli</name></type> <name>blocks_size</name></decl></parameter>,

<parameter><decl><type><name>lzma_vli</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>index_list_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>LZMA_STREAM_HEADER_SIZE</name> <operator>+</operator> <name>blocks_size</name>

<operator>+</operator> <call><name>index_size</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>index_list_size</name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>LZMA_STREAM_HEADER_SIZE</name></expr>;</return>

</block_content>}</block></function>

</unit>
