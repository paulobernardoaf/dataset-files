<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\simple\ia64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type>

<name>ia64_code</name><argument_list>(<argument><expr><name>lzma_simple</name> <operator>*</operator><name>simple</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>uint32_t</name> <name>now_pos</name></expr></argument>, <argument><expr><name>bool</name> <name>is_encoder</name></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>BRANCH_TABLE</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">16</literal> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>instr_template</name> <init>= <expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mask</name> <init>= <expr><name><name>BRANCH_TABLE</name><index>[<expr><name>instr_template</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_pos</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>slot</name></expr><operator>,</operator> <expr><name>bit_pos</name> <operator>+=</operator> <literal type="number">41</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>mask</name> <operator>&gt;&gt;</operator> <name>slot</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>byte_pos</name> <init>= <expr><operator>(</operator><name>bit_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit_res</name> <init>= <expr><name>bit_pos</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>instruction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>instruction</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator>

<name><name>buffer</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>byte_pos</name></expr>]</index></name><operator>)</operator>

<operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>inst_norm</name> <init>= <expr><name>instruction</name> <operator>&gt;&gt;</operator> <name>bit_res</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst_norm</name> <operator>&gt;&gt;</operator> <literal type="number">37</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x5</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>inst_norm</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator><name>inst_norm</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>inst_norm</name> <operator>&gt;&gt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_encoder</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>now_pos</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>)</operator> <operator>+</operator> <name>src</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>src</name> <operator>-</operator> <operator>(</operator><name>now_pos</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inst_norm</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">0x8FFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inst_norm</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inst_norm</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">0x100000</literal><operator>)</operator>

<operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">36</literal> <operator>-</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>instruction</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_res</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>instruction</name> <operator>|=</operator> <operator>(</operator><name>inst_norm</name> <operator>&lt;&lt;</operator> <name>bit_res</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>byte_pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator>

<name>instruction</name>

<operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>j</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>ia64_coder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lzma_simple_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ia64_code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>is_encoder</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_simple_ia64_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,

<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ia64_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_simple_ia64_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,

<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ia64_coder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
