<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\simple\simple_coder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_private.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>copy_or_code</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>is_encoder</name></name> <operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>LZMA_FINISH</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>in_pos</name> <operator>==</operator> <name>in_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>code</name></name><argument_list>(

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>is_encoder</name></name>

<operator>||</operator> <name>action</name> <operator>==</operator> <name>LZMA_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>call_filter</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>filtered</name> <init>= <expr><call><name><name>coder</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>simple</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>now_pos</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_encoder</name></name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>now_pos</name></name> <operator>+=</operator> <name>filtered</name></expr>;</expr_stmt>

<return>return <expr><name>filtered</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>simple_code</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>lzma_action</name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>LZMA_SYNC_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name> <operator>==</operator> <name><name>coder</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_avail</name> <init>= <expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buf_avail</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out_avail</name> <operator>&gt;</operator> <name>buf_avail</name> <operator>||</operator> <name>buf_avail</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_start</name> <init>= <expr><operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>buf_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>buf_avail</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>copy_or_code</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><operator>*</operator><name>out_pos</name> <operator>-</operator> <name>out_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>filtered</name> <init>= <expr><call><name>call_filter</name><argument_list>(

<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>out_start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>unfiltered</name> <init>= <expr><name>size</name> <operator>-</operator> <name>filtered</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unfiltered</name> <operator>&lt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>allocated</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>unfiltered</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>unfiltered</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>-=</operator> <name>unfiltered</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name>unfiltered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>buf_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>copy_or_code</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name> <operator>=</operator> <call><name>call_filter</name><argument_list>(

<argument><expr><name>coder</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>filtered</name></name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name> <operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>coder</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>simple_coder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>simple</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>simple_coder_update</name><argument_list>(<argument><expr><name>lzma_coder</name> <operator>*</operator><name>coder</name></expr></argument>, <argument><expr><name>lzma_allocator</name> <operator>*</operator><name>allocator</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>lzma_filter</name> <operator>*</operator><name>filters_null</name> <call><name>lzma_attribute</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><specifier>const</specifier> <name>lzma_filter</name> <operator>*</operator><name>reversed_filters</name></expr></argument>)</argument_list>

<block>{<block_content>

<return>return <expr><call><name>lzma_next_filter_update</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>reversed_filters</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_simple_coder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>lzma_simple</name> <modifier>*</modifier></type><name>simple</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>now_pos</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>simple_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>unfiltered_max</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof>

<operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>unfiltered_max</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>simple_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>simple_coder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>&amp;</operator><name>simple_coder_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>unfiltered_max</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>simple_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>simple</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(

<argument><expr><name>simple_size</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>simple</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>simple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_bcj</name> <modifier>*</modifier></type><name>simple</name> <init>= <expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>now_pos</name></name> <operator>=</operator> <name><name>simple</name><operator>-&gt;</operator><name>start_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>now_pos</name></name> <operator>&amp;</operator> <operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>now_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>is_encoder</name></name> <operator>=</operator> <name>is_encoder</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>end_was_reached</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>filtered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_next_filter_init</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
