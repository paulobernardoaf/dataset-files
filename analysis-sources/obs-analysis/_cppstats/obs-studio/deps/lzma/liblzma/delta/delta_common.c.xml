<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\delta\delta_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta_private.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>delta_coder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_next_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_delta_coder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>delta_coder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>LZMA_NEXT_CODER_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_delta_coder_memusage</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_delta</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>dist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memzero</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name>LZMA_DELTA_DIST_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_next_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>next</name></name></expr></argument>,

<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>uint64_t</name></type>

<name>lzma_delta_coder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_delta</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LZMA_DELTA_TYPE_BYTE</name>

<operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>dist</name></name> <operator>&lt;</operator> <name>LZMA_DELTA_DIST_MIN</name>

<operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>dist</name></name> <operator>&gt;</operator> <name>LZMA_DELTA_DIST_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

</unit>
