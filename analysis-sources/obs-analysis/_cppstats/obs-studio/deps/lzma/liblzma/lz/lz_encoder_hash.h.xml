<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lz\lz_encoder_hash.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>lzma_lz_hash_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_table</name></cpp:macro> <cpp:value>lzma_lz_hash_table</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_table</name></cpp:macro> <cpp:value>lzma_crc32_table[0]</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_2_SIZE</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_3_SIZE</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_4_SIZE</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_2_MASK</name></cpp:macro> <cpp:value>(HASH_2_SIZE - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_3_MASK</name></cpp:macro> <cpp:value>(HASH_3_SIZE - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_4_MASK</name></cpp:macro> <cpp:value>(HASH_4_SIZE - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_3_HASH_SIZE</name></cpp:macro> <cpp:value>(HASH_2_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_4_HASH_SIZE</name></cpp:macro> <cpp:value>(HASH_2_SIZE + HASH_3_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_5_HASH_SIZE</name></cpp:macro> <cpp:value>(HASH_2_SIZE + HASH_3_SIZE + HASH_4_SIZE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TUKLIB_FAST_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_2_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t hash_value = *(const uint16_t *)(cur)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_2_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t hash_value = (uint32_t)(cur[0]) | ((uint32_t)(cur[1]) &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_3_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t temp = hash_table[cur[0]] ^ cur[1]; const uint32_t hash_2_value = temp &amp; HASH_2_MASK; const uint32_t hash_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8)) &amp; mf-&gt;hash_mask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_4_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t temp = hash_table[cur[0]] ^ cur[1]; const uint32_t hash_2_value = temp &amp; HASH_2_MASK; const uint32_t hash_3_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8)) &amp; HASH_3_MASK; const uint32_t hash_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8) ^ (hash_table[cur[3]] &lt;&lt; 5)) &amp; mf-&gt;hash_mask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_5_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t temp = hash_table[cur[0]] ^ cur[1]; const uint32_t hash_2_value = temp &amp; HASH_2_MASK; const uint32_t hash_3_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8)) &amp; HASH_3_MASK; uint32_t hash_4_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8) ^ ^ hash_table[cur[3]] &lt;&lt; 5); const uint32_t hash_value = (hash_4_value ^ (hash_table[cur[4]] &lt;&lt; 3)) &amp; mf-&gt;hash_mask; hash_4_value &amp;= HASH_4_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hash_zip_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t hash_value = (((uint32_t)(cur[2]) | ((uint32_t)(cur[0]) &lt;&lt; 8)) ^ hash_table[cur[1]]) &amp; 0xFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt_hash_2_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t hash_2_value = (hash_table[cur[0]] ^ cur[1]) &amp; HASH_2_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt_hash_3_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t temp = hash_table[cur[0]] ^ cur[1]; const uint32_t hash_2_value = temp &amp; HASH_2_MASK; const uint32_t hash_3_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8)) &amp; HASH_3_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt_hash_4_calc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>const uint32_t temp = hash_table[cur[0]] ^ cur[1]; const uint32_t hash_2_value = temp &amp; HASH_2_MASK; const uint32_t hash_3_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8)) &amp; HASH_3_MASK; const uint32_t hash_4_value = (temp ^ ((uint32_t)(cur[2]) &lt;&lt; 8) ^ (hash_table[cur[3]] &lt;&lt; 5)) &amp; HASH_4_MASK</cpp:value></cpp:define>

</unit>
