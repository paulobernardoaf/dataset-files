<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lz\lz_decoder.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>full</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_reset</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_dict</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>dict_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>preset_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>preset_dict_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_lz_options</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl>;</decl_stmt>

<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>code</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>,

<parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reset</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_uncompressed</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>,

<parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>lzma_lz_decoder</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_LZ_DECODER_INIT</name></cpp:macro> <cpp:value>(lzma_lz_decoder){ .coder = NULL, .code = NULL, .reset = NULL, .set_uncompressed = NULL, .end = NULL, }</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>lzma_ret</name></type> <name>lzma_lz_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,

<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>lz_init</name>)<parameter_list>(<parameter><decl><type><name>lzma_lz_decoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>,

<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>lzma_lz_decoder_memusage</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>dictionary_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_lz_decoder_uncompressed</name><parameter_list>(

<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type>

<name>dict_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_dict</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>distance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>distance</name> <operator>-</operator> <literal type="number">1</literal>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>distance</name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>dict</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary><operator>)</operator></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>dict_is_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_dict</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>dict_is_distance_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_dict</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>distance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>&gt;</operator> <name>distance</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>dict_repeat</name><parameter_list>(<parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>distance</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dict_avail</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>limit</name></name> <operator>-</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>dict_avail</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <name>left</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <call><name>dict_get</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,

<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>distance</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>left</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>==</operator> <name><name>dict</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>copy_pos</name>

<init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>distance</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>copy_size</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>copy_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_size</name> <operator>&lt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>copy_pos</name></expr></argument>,

<argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <name>left</name> <operator>-</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>copy_pos</name></expr></argument>,

<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>left</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>&lt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>dict_put</name><parameter_list>(<parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>dict</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>dict_write</name><parameter_list>(<parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>left</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>-</operator> <operator>*</operator><name>in_pos</name> <operator>&gt;</operator> <operator>*</operator><name>left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_size</name> <operator>=</operator> <operator>*</operator><name>in_pos</name> <operator>+</operator> <operator>*</operator><name>left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>-=</operator> <call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>,

<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>dict</name><operator>-&gt;</operator><name>full</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <name><name>dict</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>dict_reset</name><parameter_list>(<parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>need_reset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

</unit>
