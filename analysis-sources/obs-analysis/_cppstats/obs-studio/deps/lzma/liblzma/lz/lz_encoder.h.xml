<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lz\lz_encoder.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dist</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_match</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>lzma_mf_s</name></name></type> <name>lzma_mf</name>;</typedef>

<struct>struct <name>lzma_mf_s</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>keep_size_before</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>keep_size_after</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>read_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>read_ahead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>read_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>write_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pending</name></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>find</name>)<parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>skip</name>)<parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>son</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cyclic_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cyclic_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nice_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>match_len_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_action</name></type> <name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash_size_sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sons_count</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>before_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dict_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>after_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>match_len_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nice_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_match_finder</name></type> <name>match_finder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>preset_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>preset_dict_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_lz_options</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl>;</decl_stmt>

<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>code</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>,

<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>options_update</name>)<parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>lzma_lz_encoder</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type>

<name>mf_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>

<name>mf_avail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>

<name>mf_unencoded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>

<name>mf_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mf_find</name></cpp:macro> <cpp:value>lzma_mf_find</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>mf_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>mf</name><operator>-&gt;</operator><name>skip</name></name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>mf_read</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>out_avail</name> <init>= <expr><name>out_size</name> <operator>-</operator> <operator>*</operator><name>out_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_size</name> <init>= <expr><call><name>my_min</name><argument_list>(<argument><expr><name>out_avail</name></expr></argument>, <argument><expr><operator>*</operator><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>&gt;=</operator> <operator>*</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>*</operator><name>out_pos</name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <operator>*</operator><name>left</name></expr></argument>,

<argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>-=</operator> <name>copy_size</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>lzma_ret</name></type> <name>lzma_lz_encoder_init</name><parameter_list>(

<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><function_decl><type><name>lzma_ret</name></type> (<modifier>*</modifier><name>lz_init</name>)<parameter_list>(<parameter><decl><type><name>lzma_lz_encoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>,

<parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>lzma_lz_encoder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_mf_find</name><parameter_list>(

<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_mf_hc3_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_mf_hc3_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_mf_hc4_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_mf_hc4_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_mf_bt2_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_mf_bt2_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_mf_bt3_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_mf_bt3_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>lzma_mf_bt4_find</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>lzma_match</name> <modifier>*</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lzma_mf_bt4_skip</name><parameter_list>(<parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
