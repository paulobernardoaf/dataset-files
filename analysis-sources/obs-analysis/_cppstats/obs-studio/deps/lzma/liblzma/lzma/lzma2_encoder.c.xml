<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lzma\lzma2_encoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fastpos.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma2_encoder.h"</cpp:file></cpp:include>

<struct>struct <name>lzma_coder_s</name> <block>{

<enum>enum <block>{

<decl><name>SEQ_INIT</name></decl>,

<decl><name>SEQ_LZMA_ENCODE</name></decl>,

<decl><name>SEQ_LZMA_COPY</name></decl>,

<decl><name>SEQ_UNCOMPRESSED_HEADER</name></decl>,

<decl><name>SEQ_UNCOMPRESSED_COPY</name></decl>,

}</block> <decl><name>sequence</name></decl>;</enum>

<decl_stmt><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>lzma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_options_lzma</name></type> <name>opt_cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_properties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_state_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_dictionary_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>compressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buf_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>LZMA2_HEADER_MAX</name> <operator>+</operator> <name>LZMA2_CHUNK_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lzma2_header_lzma</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&lt;=</operator> <name>LZMA2_UNCOMPRESSED_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&lt;=</operator> <name>LZMA2_CHUNK_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_state_reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>+=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lzma_lzma_lclppb_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_state_reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>+=</operator> <name>LZMA2_HEADER_MAX</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lzma2_header_uncompressed</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&lt;=</operator> <name>LZMA2_CHUNK_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>buf_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma2_encode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>out_pos</name> <operator>&lt;</operator> <name>out_size</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEQ_INIT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>mf_unencoded</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>LZMA_FINISH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_pos</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>LZMA_RUN</name></expr>

?</condition><then> <expr><name>LZMA_OK</name></expr> </then><else>: <expr><name>LZMA_STREAM_END</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>need_state_reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_lzma_encoder_reset</name><argument_list>(

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_LZMA_ENCODE</name></expr>;</expr_stmt>

<case>case <expr><name>SEQ_LZMA_ENCODE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>left</name> <init>= <expr><name>LZMA2_UNCOMPRESSED_MAX</name>

<operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>limit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name>

<operator>+</operator> <name>left</name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>match_len_max</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>read_start</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_ret</name></type> <name>ret</name> <init>= <expr><call><name>lzma_lzma_encode</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name></name></expr></argument>, <argument><expr><name>mf</name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>LZMA2_HEADER_MAX</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>,

<argument><expr><name>LZMA2_CHUNK_MAX</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name>

<operator>-</operator> <name>read_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&lt;=</operator> <name>LZMA2_CHUNK_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&lt;=</operator> <name>LZMA2_UNCOMPRESSED_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&gt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>+=</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name>

<operator>&lt;=</operator> <name>LZMA2_UNCOMPRESSED_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma2_header_uncompressed</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_state_reset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_UNCOMPRESSED_HEADER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lzma2_header_lzma</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_LZMA_COPY</name></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>SEQ_LZMA_COPY</name></expr>:</case>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>buf_pos</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>buf_pos</name></name> <operator>!=</operator> <name><name>coder</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_INIT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEQ_UNCOMPRESSED_HEADER</name></expr>:</case>

<expr_stmt><expr><call><name>lzma_bufcpy</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>buf_pos</name></name></expr></argument>,

<argument><expr><name>LZMA2_HEADER_UNCOMPRESSED</name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>buf_pos</name></name> <operator>!=</operator> <name>LZMA2_HEADER_UNCOMPRESSED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_UNCOMPRESSED_COPY</name></expr>;</expr_stmt>

<case>case <expr><name>SEQ_UNCOMPRESSED_COPY</name></expr>:</case>

<expr_stmt><expr><call><name>mf_read</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_INIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></while>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lzma2_encoder_end</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>lzma</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma2_encoder_options_update</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_filter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>options</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>!=</operator> <name>SEQ_INIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>lc</name></name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>lc</name></name> <operator>||</operator> <name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>lp</name></name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>lp</name></name>

<operator>||</operator> <name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>pb</name></name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>lc</name></name> <operator>&gt;</operator> <name>LZMA_LCLP_MAX</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>lp</name></name> <operator>&gt;</operator> <name>LZMA_LCLP_MAX</name>

<operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>lc</name></name> <operator>+</operator> <name><name>opt</name><operator>-&gt;</operator><name>lp</name></name> <operator>&gt;</operator> <name>LZMA_LCLP_MAX</name>

<operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>pb</name></name> <operator>&gt;</operator> <name>LZMA_PB_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>lc</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>lc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>lp</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>lp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>pb</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>need_state_reset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma2_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_lz_encoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma2_encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma2_encoder_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>options_update</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma2_encoder_options_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lzma</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>opt_cur</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>lzma_options_lzma</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>options</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>need_properties</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>need_state_reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>need_dictionary_reset</name></name>

<operator>=</operator> <name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>preset_dict</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>opt_cur</name><operator>.</operator><name>preset_dict_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_lzma_encoder_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>lzma</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>lz</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>opt_cur</name></name></expr></argument>, <argument><expr><name>lz_options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz_options</name><operator>-&gt;</operator><name>before_size</name></name> <operator>+</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>&lt;</operator> <name>LZMA2_CHUNK_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>before_size</name></name>

<operator>=</operator> <name>LZMA2_CHUNK_MAX</name> <operator>-</operator> <name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma2_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lzma_lz_encoder_init</name><argument_list>(

<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lzma2_encoder_init</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>uint64_t</name></type>

<name>lzma_lzma2_encoder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>lzma_mem</name> <init>= <expr><call><name>lzma_lzma_encoder_memusage</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lzma_mem</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>lzma_mem</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma2_props_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>d</name> <init>= <expr><call><name>my_max</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name></expr></argument>, <argument><expr><name>LZMA_DICT_SIZE_MIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>|=</operator> <name>d</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pos_slot</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
