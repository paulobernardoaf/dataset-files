<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lzma\lzma_encoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma2_encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_encoder_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fastpos.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>literal_matched</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>probability</name> <modifier>*</modifier></type><name>subcoder</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>match_byte</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>symbol</name> <operator>+=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>match_byte</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>match_bit</name> <init>= <expr><name>match_byte</name> <operator>&amp;</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>subcoder_index</name>

<init>= <expr><name>offset</name> <operator>+</operator> <name>match_bit</name> <operator>+</operator> <operator>(</operator><name>symbol</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name>symbol</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subcoder</name><index>[<expr><name>subcoder_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>match_byte</name> <operator>^</operator> <name>symbol</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>literal</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>cur_byte</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name><index>[

<expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name> <modifier>*</modifier></type><name>subcoder</name> <init>= <expr><call><name>literal_subcoder</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_context_bits</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_pos_mask</name></name></expr></argument>,

<argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_literal_state</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bittree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>subcoder</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cur_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>match_byte</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name><index>[

<expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal>

<operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>literal_matched</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>subcoder</name></expr></argument>, <argument><expr><name>match_byte</name></expr></argument>, <argument><expr><name>cur_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>update_literal</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>length_update_prices</name><parameter_list>(<parameter><decl><type><name>lzma_length_encoder</name> <modifier>*</modifier></type><name>lc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>table_size</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>table_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>counters</name><index>[<expr><name>pos_state</name></expr>]</index></name> <operator>=</operator> <name>table_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a0</name> <init>= <expr><call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>choice</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a1</name> <init>= <expr><call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>choice</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b0</name> <init>= <expr><name>a1</name> <operator>+</operator> <call><name>rc_bit_0_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>choice2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b1</name> <init>= <expr><name>a1</name> <operator>+</operator> <call><name>rc_bit_1_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>choice2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>prices</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>prices</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>LEN_LOW_SYMBOLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a0</name> <operator>+</operator> <call><name>rc_bittree_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>low</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LEN_LOW_BITS</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>LEN_LOW_SYMBOLS</name> <operator>+</operator> <name>LEN_MID_SYMBOLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b0</name> <operator>+</operator> <call><name>rc_bittree_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>mid</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LEN_MID_BITS</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>LEN_LOW_SYMBOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b1</name> <operator>+</operator> <call><name>rc_bittree_price</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>high</name></name></expr></argument>, <argument><expr><name>LEN_HIGH_BITS</name></expr></argument>,

<argument><expr><name>i</name> <operator>-</operator> <name>LEN_LOW_SYMBOLS</name> <operator>-</operator> <name>LEN_MID_SYMBOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>length</name><parameter_list>(<parameter><decl><type><name>lzma_range_encoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>lzma_length_encoder</name> <modifier>*</modifier></type><name>lc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fast_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>MATCH_LEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>MATCH_LEN_MIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>LEN_LOW_SYMBOLS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lc</name><operator>-&gt;</operator><name>choice</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bittree</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>lc</name><operator>-&gt;</operator><name>low</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><name>LEN_LOW_BITS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lc</name><operator>-&gt;</operator><name>choice</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>LEN_LOW_SYMBOLS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>LEN_MID_SYMBOLS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lc</name><operator>-&gt;</operator><name>choice2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bittree</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>lc</name><operator>-&gt;</operator><name>mid</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><name>LEN_MID_BITS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lc</name><operator>-&gt;</operator><name>choice2</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>LEN_MID_SYMBOLS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bittree</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>lc</name><operator>-&gt;</operator><name>high</name></name></expr></argument>, <argument><expr><name>LEN_HIGH_BITS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fast_mode</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>lc</name><operator>-&gt;</operator><name>counters</name><index>[<expr><name>pos_state</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>length_update_prices</name><argument_list>(<argument><expr><name>lc</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>match</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>distance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>update_match</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>match_len_encoder</name></name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_slot</name> <init>= <expr><call><name>get_pos_slot</name><argument_list>(<argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len_to_pos_state</name> <init>= <expr><call><name>get_len_to_pos_state</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rc_bittree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_slot</name><index>[<expr><name>len_to_pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>POS_SLOT_BITS</name></expr></argument>, <argument><expr><name>pos_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_slot</name> <operator>&gt;=</operator> <name>START_POS_MODEL_INDEX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>footer_bits</name> <init>= <expr><operator>(</operator><name>pos_slot</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>base</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>|</operator> <operator>(</operator><name>pos_slot</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>footer_bits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_reduced</name> <init>= <expr><name>distance</name> <operator>-</operator> <name>base</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_slot</name> <operator>&lt;</operator> <name>END_POS_MODEL_INDEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bittree_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_special</name></name> <operator>+</operator> <name>base</name> <operator>-</operator> <name>pos_slot</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>footer_bits</name></expr></argument>, <argument><expr><name>pos_reduced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_direct</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pos_reduced</name> <operator>&gt;&gt;</operator> <name>ALIGN_BITS</name></expr></argument>,

<argument><expr><name>footer_bits</name> <operator>-</operator> <name>ALIGN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bittree_reverse</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name></name></expr></argument>,

<argument><expr><name>ALIGN_BITS</name></expr></argument>, <argument><expr><name>pos_reduced</name> <operator>&amp;</operator> <name>ALIGN_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>coder</name><operator>-&gt;</operator><name>align_price_count</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>coder</name><operator>-&gt;</operator><name>match_price_count</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>rep_match</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>rep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>distance</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><name>rep</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rep</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep2</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name>rep</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rep</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_short_rep</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name></name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_long_rep</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_symbol</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>back</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name> <init>= <expr><name>position</name> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>back</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>literal</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>back</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rep_match</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>back</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>match</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>back</name> <operator>-</operator> <name>REP_DISTANCES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>&gt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>encode_init</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mf_position</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>==</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_limit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>LZMA_RUN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>write_pos</name></name> <operator>==</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>LZMA_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mf_skip</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bittree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>is_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_eopm</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_state</name> <init>= <expr><name>position</name> <operator>&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>match</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>, <argument><expr><name>MATCH_LEN_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_INPUT_MAX</name></cpp:macro> <cpp:value>(OPTS + 1)</cpp:value></cpp:define>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_encode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>is_initialized</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>encode_init</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>position</name> <init>= <expr><call><name>mf_position</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>==</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>!=</operator> <name>UINT32_MAX</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>&gt;=</operator> <name>limit</name>

<operator>||</operator> <operator>*</operator><name>out_pos</name> <operator>+</operator> <call><name>rc_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call>

<operator>&gt;=</operator> <name>LZMA2_CHUNK_MAX</name>

<operator>-</operator> <name>LOOP_INPUT_MAX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>&gt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>read_limit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>LZMA_RUN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>read_ahead</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>back</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lzma_lzma_optimum_fast</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>back</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lzma_lzma_optimum_normal</name><argument_list>(

<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>back</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>encode_symbol</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><name>back</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coder</name><operator>-&gt;</operator><name>is_flushed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>is_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_eopm</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rc_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>==</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>is_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_STREAM_END</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma_encode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_mf</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out_pos</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>out_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>LZMA_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>lzma_lzma_encode</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>is_options_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>is_lclppb_valid</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>&gt;=</operator> <name>MATCH_LEN_MIN</name>

<operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>&lt;=</operator> <name>MATCH_LEN_MAX</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LZMA_MODE_FAST</name>

<operator>||</operator> <name><name>options</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LZMA_MODE_NORMAL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_lz_options</name><parameter_list>(<parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>before_size</name></name> <operator>=</operator> <name>OPTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>dict_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>after_size</name></name> <operator>=</operator> <name>LOOP_INPUT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>match_len_max</name></name> <operator>=</operator> <name>MATCH_LEN_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>match_finder</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>mf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict_size</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>length_encoder_reset</name><parameter_list>(<parameter><decl><type><name>lzma_length_encoder</name> <modifier>*</modifier></type><name>lencoder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_pos_states</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fast_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>lencoder</name><operator>-&gt;</operator><name>choice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>lencoder</name><operator>-&gt;</operator><name>choice2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>pos_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pos_state</name> <operator>&lt;</operator> <name>num_pos_states</name></expr>;</condition> <incr><expr><operator>++</operator><name>pos_state</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>lencoder</name><operator>-&gt;</operator><name>low</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><name>LEN_LOW_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>lencoder</name><operator>-&gt;</operator><name>mid</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>, <argument><expr><name>LEN_MID_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>lencoder</name><operator>-&gt;</operator><name>high</name></name></expr></argument>, <argument><expr><name>LEN_HIGH_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fast_mode</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>pos_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pos_state</name> <operator>&lt;</operator> <name>num_pos_states</name></expr>;</condition>

<incr><expr><operator>++</operator><name>pos_state</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>length_update_prices</name><argument_list>(<argument><expr><name>lencoder</name></expr></argument>, <argument><expr><name>pos_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_encoder_reset</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_options_valid</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_context_bits</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>lc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_pos_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_LIT_LIT</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REP_DISTANCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>reps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>literal_init</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>lc</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>lp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STATES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FULL_DISTANCES</name> <operator>-</operator> <name>END_POS_MODEL_INDEX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_special</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN_TO_POS_STATES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>POS_SLOT_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name></name></expr></argument>, <argument><expr><name>ALIGN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>length_encoder_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>match_len_encoder</name></name></expr></argument>,

<argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>length_encoder_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name></name></expr></argument>,

<argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>match_price_count</name></name> <operator>=</operator> <name>UINT32_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>align_price_count</name></name> <operator>=</operator> <name>UINT32_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts_end_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>opts_current_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_encoder_create</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><modifier>*</modifier></type><name>coder_ptr</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>coder_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>coder_ptr</name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>coder_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name> <init>= <expr><operator>*</operator><name>coder_ptr</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LZMA_MODE_FAST</name></expr>:</case>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LZMA_MODE_NORMAL</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>fast_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>log_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>log_size</name><operator>)</operator> <operator>&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>dict_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>log_size</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>dist_table_size</name></name> <operator>=</operator> <name>log_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_encoder</name><operator>.</operator><name>table_size</name></name>

<operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>MATCH_LEN_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_encoder</name><operator>.</operator><name>table_size</name></name>

<operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>MATCH_LEN_MIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>is_initialized</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>is_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_lz_options</name><argument_list>(<argument><expr><name>lz_options</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_lzma_encoder_reset</name><argument_list>(<argument><expr><name>coder</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_lz_encoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_encode</name></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_lzma_encoder_create</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>lz_options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_encoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lzma_lz_encoder_init</name><argument_list>(

<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lzma_encoder_init</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>uint64_t</name></type>

<name>lzma_lzma_encoder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_options_valid</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_lz_options</name></type> <name>lz_options</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_lz_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lz_options</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>lz_memusage</name> <init>= <expr><call><name>lzma_lz_encoder_memusage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lz_options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lz_memusage</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name>lz_memusage</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>bool</name></type>

<name>lzma_lzma_lclppb_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>byte</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lclppb_valid</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>byte</name> <operator>=</operator> <operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>pb</name></name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name><name>options</name><operator>-&gt;</operator><name>lc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>byte</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENCODER_LZMA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_props_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_lzma_lclppb_encode</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unaligned_write32le</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<extern>extern LZMA_API(lzma_bool</extern>)

<macro><name>lzma_mode_is_supported</name><argument_list>(<argument>lzma_mode mode</argument>)</argument_list></macro>

<block>{<block_content>

<return>return <expr><name>mode</name> <operator>==</operator> <name>LZMA_MODE_FAST</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>LZMA_MODE_NORMAL</name></expr>;</return>

</block_content>}</block>

</unit>
