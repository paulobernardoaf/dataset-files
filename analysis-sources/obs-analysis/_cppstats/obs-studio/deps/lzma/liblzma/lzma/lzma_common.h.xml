<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lzma\lzma_common.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range_common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_STATES_MAX</name></cpp:macro> <cpp:value>(1 &lt;&lt; LZMA_PB_MAX)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>is_lclppb_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>options</name><operator>-&gt;</operator><name>lc</name></name> <operator>&lt;=</operator> <name>LZMA_LCLP_MAX</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name> <operator>&lt;=</operator> <name>LZMA_LCLP_MAX</name>

<operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>lc</name></name> <operator>+</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name> <operator>&lt;=</operator> <name>LZMA_LCLP_MAX</name>

<operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name> <operator>&lt;=</operator> <name>LZMA_PB_MAX</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>STATE_LIT_LIT</name></decl>,

<decl><name>STATE_MATCH_LIT_LIT</name></decl>,

<decl><name>STATE_REP_LIT_LIT</name></decl>,

<decl><name>STATE_SHORTREP_LIT_LIT</name></decl>,

<decl><name>STATE_MATCH_LIT</name></decl>,

<decl><name>STATE_REP_LIT</name></decl>,

<decl><name>STATE_SHORTREP_LIT</name></decl>,

<decl><name>STATE_LIT_MATCH</name></decl>,

<decl><name>STATE_LIT_LONGREP</name></decl>,

<decl><name>STATE_LIT_SHORTREP</name></decl>,

<decl><name>STATE_NONLIT_MATCH</name></decl>,

<decl><name>STATE_NONLIT_REP</name></decl>,

}</block></enum></type> <name>lzma_lzma_state</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATES</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIT_STATES</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_literal</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>state = ((state) &lt;= STATE_SHORTREP_LIT_LIT ? STATE_LIT_LIT : ((state) &lt;= STATE_LIT_SHORTREP ? (state) - 3 : (state) - 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_match</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>state = ((state) &lt; LIT_STATES ? STATE_LIT_MATCH : STATE_NONLIT_MATCH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_long_rep</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>state = ((state) &lt; LIT_STATES ? STATE_LIT_LONGREP : STATE_NONLIT_REP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_short_rep</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>state = ((state) &lt; LIT_STATES ? STATE_LIT_SHORTREP : STATE_NONLIT_REP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_literal_state</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state) &lt; LIT_STATES)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITERAL_CODER_SIZE</name></cpp:macro> <cpp:value>0x300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITERAL_CODERS_MAX</name></cpp:macro> <cpp:value>(1 &lt;&lt; LZMA_LCLP_MAX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>literal_subcoder</name><parameter_list>(<parameter><type><name>probs</name></type></parameter>, <parameter><type><name>lc</name></type></parameter>, <parameter><type><name>lp_mask</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>prev_byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((probs)[(((pos) &amp; lp_mask) &lt;&lt; lc) + ((prev_byte) &gt;&gt; (8 - lc))])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>literal_init</name><argument_list>(<argument><expr><call><name>probability</name> <argument_list>(<argument><expr><operator>*</operator><name>probs</name></expr></argument>)</argument_list></call><index>[<expr><name>LITERAL_CODER_SIZE</name></expr>]</index></expr></argument>,

<argument><expr><name>uint32_t</name> <name>lc</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>lp</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>lc</name> <operator>+</operator> <name>lp</name> <operator>&lt;=</operator> <name>LZMA_LCLP_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>coders</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>lc</name> <operator>+</operator> <name>lp</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coders</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LITERAL_CODER_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_LEN_MIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_LOW_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_LOW_SYMBOLS</name></cpp:macro> <cpp:value>(1 &lt;&lt; LEN_LOW_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_MID_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_MID_SYMBOLS</name></cpp:macro> <cpp:value>(1 &lt;&lt; LEN_MID_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_HIGH_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_HIGH_SYMBOLS</name></cpp:macro> <cpp:value>(1 &lt;&lt; LEN_HIGH_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_SYMBOLS</name></cpp:macro> <cpp:value>(LEN_LOW_SYMBOLS + LEN_MID_SYMBOLS + LEN_HIGH_SYMBOLS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_LEN_MAX</name></cpp:macro> <cpp:value>(MATCH_LEN_MIN + LEN_SYMBOLS - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_TO_POS_STATES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_len_to_pos_state</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((len) &lt; LEN_TO_POS_STATES + MATCH_LEN_MIN ? (len) - MATCH_LEN_MIN : LEN_TO_POS_STATES - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_SLOT_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_SLOTS</name></cpp:macro> <cpp:value>(1 &lt;&lt; POS_SLOT_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_POS_MODEL_INDEX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_POS_MODEL_INDEX</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULL_DISTANCES_BITS</name></cpp:macro> <cpp:value>(END_POS_MODEL_INDEX / 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULL_DISTANCES</name></cpp:macro> <cpp:value>(1 &lt;&lt; FULL_DISTANCES_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_TABLE_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; ALIGN_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_MASK</name></cpp:macro> <cpp:value>(ALIGN_TABLE_SIZE - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP_DISTANCES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

</unit>
