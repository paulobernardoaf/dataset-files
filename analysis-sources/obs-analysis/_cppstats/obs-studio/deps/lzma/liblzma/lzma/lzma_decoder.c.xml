<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lzma\lzma_decoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lz_decoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzma_decoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range_decoder.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_4</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_6</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_8</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_len</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq ##_CHOICE, seq ##_CHOICE2, seq ##_BITTREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>len_decode</name><parameter_list>(<parameter><type><name>target</name></type></parameter>, <parameter><type><name>ld</name></type></parameter>, <parameter><type><name>pos_state</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { case seq ##_CHOICE: rc_if_0(ld.choice, seq ##_CHOICE) { rc_update_0(ld.choice); probs = ld.low[pos_state];limit = LEN_LOW_SYMBOLS; target = MATCH_LEN_MIN; } else { rc_update_1(ld.choice); case seq ##_CHOICE2: rc_if_0(ld.choice2, seq ##_CHOICE2) { rc_update_0(ld.choice2); probs = ld.mid[pos_state]; limit = LEN_MID_SYMBOLS; target = MATCH_LEN_MIN + LEN_LOW_SYMBOLS; } else { rc_update_1(ld.choice2); probs = ld.high; limit = LEN_HIGH_SYMBOLS; target = MATCH_LEN_MIN + LEN_LOW_SYMBOLS + LEN_MID_SYMBOLS; } } symbol = 1; case seq ##_BITTREE: do { rc_bit(probs[symbol], , , seq ##_BITTREE); } while (symbol &lt; limit); target += symbol - limit; } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_4</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq ##0, seq ##1, seq ##2, seq ##3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_6</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq ##0, seq ##1, seq ##2, seq ##3, seq ##4, seq ##5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_8</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq ##0, seq ##1, seq ##2, seq ##3, seq ##4, seq ##5, seq ##6, seq ##7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_len</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>seq ##_CHOICE, seq ##_LOW0, seq ##_LOW1, seq ##_LOW2, seq ##_CHOICE2, seq ##_MID0, seq ##_MID1, seq ##_MID2, seq ##_HIGH0, seq ##_HIGH1, seq ##_HIGH2, seq ##_HIGH3, seq ##_HIGH4, seq ##_HIGH5, seq ##_HIGH6, seq ##_HIGH7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>len_decode</name><parameter_list>(<parameter><type><name>target</name></type></parameter>, <parameter><type><name>ld</name></type></parameter>, <parameter><type><name>pos_state</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { symbol = 1; case seq ##_CHOICE: rc_if_0(ld.choice, seq ##_CHOICE) { rc_update_0(ld.choice); rc_bit_case(ld.low[pos_state][symbol], , , seq ##_LOW0); rc_bit_case(ld.low[pos_state][symbol], , , seq ##_LOW1); rc_bit_case(ld.low[pos_state][symbol], , , seq ##_LOW2); target = symbol - LEN_LOW_SYMBOLS + MATCH_LEN_MIN; } else { rc_update_1(ld.choice); case seq ##_CHOICE2: rc_if_0(ld.choice2, seq ##_CHOICE2) { rc_update_0(ld.choice2); rc_bit_case(ld.mid[pos_state][symbol], , , seq ##_MID0); rc_bit_case(ld.mid[pos_state][symbol], , , seq ##_MID1); rc_bit_case(ld.mid[pos_state][symbol], , , seq ##_MID2); target = symbol - LEN_MID_SYMBOLS + MATCH_LEN_MIN + LEN_LOW_SYMBOLS; } else { rc_update_1(ld.choice2); rc_bit_case(ld.high[symbol], , , seq ##_HIGH0); rc_bit_case(ld.high[symbol], , , seq ##_HIGH1); rc_bit_case(ld.high[symbol], , , seq ##_HIGH2); rc_bit_case(ld.high[symbol], , , seq ##_HIGH3); rc_bit_case(ld.high[symbol], , , seq ##_HIGH4); rc_bit_case(ld.high[symbol], , , seq ##_HIGH5); rc_bit_case(ld.high[symbol], , , seq ##_HIGH6); rc_bit_case(ld.high[symbol], , , seq ##_HIGH7); target = symbol - LEN_HIGH_SYMBOLS + MATCH_LEN_MIN + LEN_LOW_SYMBOLS + LEN_MID_SYMBOLS; } } } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>probability</name></type> <name>choice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name>choice2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>low</name><index>[<expr><name>POS_STATES_MAX</name></expr>]</index><index>[<expr><name>LEN_LOW_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>mid</name><index>[<expr><name>POS_STATES_MAX</name></expr>]</index><index>[<expr><name>LEN_MID_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>high</name><index>[<expr><name>LEN_HIGH_SYMBOLS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_length_decoder</name>;</typedef>

<struct>struct <name>lzma_coder_s</name> <block>{

<decl_stmt><decl><type><name>probability</name></type> <name><name>literal</name><index>[<expr><name>LITERAL_CODERS_MAX</name></expr>]</index><index>[<expr><name>LITERAL_CODER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>is_match</name><index>[<expr><name>STATES</name></expr>]</index><index>[<expr><name>POS_STATES_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep0</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep1</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep2</name><index>[<expr><name>STATES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>is_rep0_long</name><index>[<expr><name>STATES</name></expr>]</index><index>[<expr><name>POS_STATES_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>pos_slot</name><index>[<expr><name>LEN_TO_POS_STATES</name></expr>]</index><index>[<expr><name>POS_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>pos_special</name><index>[<expr><name>FULL_DISTANCES</name> <operator>-</operator> <name>END_POS_MODEL_INDEX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name></type> <name><name>pos_align</name><index>[<expr><name>ALIGN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_length_decoder</name></type> <name>match_len_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_length_decoder</name></type> <name>rep_len_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_range_decoder</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_lzma_state</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep0</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep3</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>literal_context_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>literal_pos_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>SEQ_NORMALIZE</name></decl>,

<decl><name>SEQ_IS_MATCH</name></decl>,

<decl><name>seq_8</name><argument_list>(<argument><expr><name>SEQ_LITERAL</name></expr></argument>)</argument_list></decl>,

<decl><name>seq_8</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED</name></expr></argument>)</argument_list></decl>,

<decl><name>SEQ_LITERAL_WRITE</name></decl>,

<decl><name>SEQ_IS_REP</name></decl>,

<decl><name>seq_len</name><argument_list>(<argument><expr><name>SEQ_MATCH_LEN</name></expr></argument>)</argument_list></decl>,

<decl><name>seq_6</name><argument_list>(<argument><expr><name>SEQ_POS_SLOT</name></expr></argument>)</argument_list></decl>,

<decl><name>SEQ_POS_MODEL</name></decl>,

<decl><name>SEQ_DIRECT</name></decl>,

<decl><name>seq_4</name><argument_list>(<argument><expr><name>SEQ_ALIGN</name></expr></argument>)</argument_list></decl>,

<decl><name>SEQ_EOPM</name></decl>,

<decl><name>SEQ_IS_REP0</name></decl>,

<decl><name>SEQ_SHORTREP</name></decl>,

<decl><name>SEQ_IS_REP0_LONG</name></decl>,

<decl><name>SEQ_IS_REP1</name></decl>,

<decl><name>SEQ_IS_REP2</name></decl>,

<decl><name>seq_len</name><argument_list>(<argument><expr><name>SEQ_REP_LEN</name></expr></argument>)</argument_list></decl>,

<decl><name>SEQ_COPY</name></decl>,

}</block> <decl><name>sequence</name></decl>;</enum>

<decl_stmt><decl><type><name>probability</name> <modifier>*</modifier></type><name>probs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma_decode</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_dict</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dictptr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rc_read_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_pos</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_dict</name></type> <name>dict</name> <init>= <expr><operator>*</operator><name>dictptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dict_start</name> <init>= <expr><name><name>dict</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rc_to_local</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>*</operator><name>in_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep0</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>rep0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep1</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>rep1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep2</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>rep2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep3</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>rep3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>pos_mask</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>probability</name> <modifier>*</modifier></type><name>probs</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>probs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>symbol</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>limit</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>literal_pos_mask</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>literal_pos_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>literal_context_bits</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>literal_context_bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_state</name> <init>= <expr><name><name>dict</name><operator>.</operator><name>pos</name></name> <operator>&amp;</operator> <name>pos_mask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name> <init>= <expr><name>LZMA_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>no_eopm</name> <init>= <expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name>

<operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>no_eopm</name> <operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&lt;</operator> <name><name>dict</name><operator>.</operator><name>limit</name></name> <operator>-</operator> <name><name>dict</name><operator>.</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dict</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name><name>dict</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos_state</name> <operator>=</operator> <name><name>dict</name><operator>.</operator><name>pos</name></name> <operator>&amp;</operator> <name>pos_mask</name></expr>;</expr_stmt>

<case>case <expr><name>SEQ_NORMALIZE</name></expr>:</case>

<case>case <expr><name>SEQ_IS_MATCH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>no_eopm</name> <operator>&amp;&amp;</operator> <name><name>dict</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name><name>dict</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<macro><name>rc_if_0</name><argument_list>(<argument>coder-&gt;is_match[state][pos_state]</argument>, <argument>SEQ_IS_MATCH</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_0</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>probs</name> <operator>=</operator> <call><name>literal_subcoder</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>,

<argument><expr><name>literal_context_bits</name></expr></argument>, <argument><expr><name>literal_pos_mask</name></expr></argument>,

<argument><expr><name><name>dict</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><call><name>dict_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_literal_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SEQ_LITERAL</name></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_LITERAL7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>dict_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>rep0</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SEQ_LITERAL_MATCHED</name></expr>:</case>

<do>do <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>match_bit</name>

<init>= <expr><name>len</name> <operator>&amp;</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>subcoder_index</name>

<init>= <expr><name>offset</name> <operator>+</operator> <name>match_bit</name>

<operator>+</operator> <name>symbol</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>subcoder_index</name></expr>]</index></name></expr></argument>,

<argument><expr><name>offset</name> <operator>&amp;=</operator> <operator>~</operator><name>match_bit</name></expr></argument>,

<argument><expr><name>offset</name> <operator>&amp;=</operator> <name>match_bit</name></expr></argument>,

<argument><expr><name>SEQ_LITERAL_MATCHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>match_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>subcoder_index</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case seq: match_bit = len &amp; offset; subcoder_index = offset + match_bit + symbol; rc_bit(probs[subcoder_index], offset &amp;= ~match_bit, offset &amp;= match_bit, seq)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name>SEQ_LITERAL_MATCHED7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lzma_lzma_state</name></type> <name><name>next_state</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>STATE_LIT_LIT</name></expr>,

<expr><name>STATE_LIT_LIT</name></expr>,

<expr><name>STATE_LIT_LIT</name></expr>,

<expr><name>STATE_LIT_LIT</name></expr>,

<expr><name>STATE_MATCH_LIT_LIT</name></expr>,

<expr><name>STATE_REP_LIT_LIT</name></expr>,

<expr><name>STATE_SHORTREP_LIT_LIT</name></expr>,

<expr><name>STATE_MATCH_LIT</name></expr>,

<expr><name>STATE_REP_LIT</name></expr>,

<expr><name>STATE_SHORTREP_LIT</name></expr>,

<expr><name>STATE_MATCH_LIT</name></expr>,

<expr><name>STATE_REP_LIT</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>next_state</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><name>SEQ_LITERAL_WRITE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>dict_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_LITERAL_WRITE</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block>

<expr_stmt><expr><call><name>rc_update_1</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_IS_REP</name></expr>:</case>

<macro><name>rc_if_0</name><argument_list>(<argument>coder-&gt;is_rep[state]</argument>, <argument>SEQ_IS_REP</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_0</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_match</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rep3</name> <operator>=</operator> <name>rep2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep2</name> <operator>=</operator> <name>rep1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep1</name> <operator>=</operator> <name>rep0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>len_decode</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_decoder</name></name></expr></argument>,

<argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>SEQ_MATCH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>probs</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_slot</name><index>[<expr><call><name>get_len_to_pos_state</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SEQ_POS_SLOT</name></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <name>POS_SLOTS</name></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit_case</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, , , <argument><expr><name>SEQ_POS_SLOT5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>symbol</name> <operator>-=</operator> <name>POS_SLOTS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>symbol</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <name>START_POS_MODEL_INDEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rep0</name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>symbol</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&lt;=</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rep0</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>symbol</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <name>END_POS_MODEL_INDEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rep0</name> <operator>&lt;&lt;=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rep0</name> <operator>&lt;=</operator> <literal type="number">96</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>rep0</name> <operator>-</operator> <name>symbol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>rep0</name> <operator>-</operator> <name>symbol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&lt;=</operator> <literal type="number">82</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>probs</name> <operator>=</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_special</name></name> <operator>+</operator> <name>rep0</name>

<operator>-</operator> <name>symbol</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>SEQ_POS_MODEL</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEQ_POS_MODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name>offset</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>SEQ_POS_MODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>limit</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEQ_POS_MODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>limit</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEQ_POS_MODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>limit</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEQ_POS_MODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>limit</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>rc_bit_last</name><argument_list>(<argument><expr><name><name>probs</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEQ_POS_MODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>symbol</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>-=</operator> <name>ALIGN_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_DIRECT</name></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>rc_direct</name><argument_list>(<argument><expr><name>rep0</name></expr></argument>, <argument><expr><name>SEQ_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>rep0</name> <operator>&lt;&lt;=</operator> <name>ALIGN_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>SEQ_ALIGN</name></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name><index>[

<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEQ_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name>offset</name> <operator>&lt;</operator> <name>ALIGN_BITS</name></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>SEQ_ALIGN0</name></expr>:</case>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SEQ_ALIGN0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_ALIGN1</name></expr>:</case>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEQ_ALIGN1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_ALIGN2</name></expr>:</case>

<expr_stmt><expr><call><name>rc_bit</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>SEQ_ALIGN2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_ALIGN3</name></expr>:</case>

<expr_stmt><expr><call><name>rc_bit_last</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, ,

<argument><expr><name>rep0</name> <operator>+=</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEQ_ALIGN3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>rep0</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name>

<operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_DATA_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>SEQ_EOPM</name></expr>:</case>

<expr_stmt><expr><call><name>rc_normalize</name><argument_list>(<argument><expr><name>SEQ_EOPM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_STREAM_END</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>dict_is_distance_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>rep0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_DATA_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_1</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>dict_is_distance_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_DATA_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>SEQ_IS_REP0</name></expr>:</case>

<macro><name>rc_if_0</name><argument_list>(<argument>coder-&gt;is_rep0[state]</argument>, <argument>SEQ_IS_REP0</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_0</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_IS_REP0_LONG</name></expr>:</case>

<macro><name>rc_if_0</name><argument_list>(<argument>coder-&gt;is_rep0_long[state][pos_state]</argument>,

<argument>SEQ_IS_REP0_LONG</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_0</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[

<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_short_rep</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_SHORTREP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>dict_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><call><name>dict_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>rep0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_SHORTREP</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block>

<expr_stmt><expr><call><name>rc_update_1</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[

<expr><name>state</name></expr>]</index><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_1</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_IS_REP1</name></expr>:</case>

<macro><name>rc_if_0</name><argument_list>(<argument>coder-&gt;is_rep1[state]</argument>, <argument>SEQ_IS_REP1</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_0</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>distance</name> <init>= <expr><name>rep1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rep1</name> <operator>=</operator> <name>rep0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep0</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

</block_content>}</block> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_1</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_IS_REP2</name></expr>:</case>

<macro><name>rc_if_0</name><argument_list>(<argument>coder-&gt;is_rep2[state]</argument>,

<argument>SEQ_IS_REP2</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_0</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep2</name><index>[

<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>distance</name> <init>= <expr><name>rep2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rep2</name> <operator>=</operator> <name>rep1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep1</name> <operator>=</operator> <name>rep0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep0</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

</block_content>}</block> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><call><name>rc_update_1</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep2</name><index>[

<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>distance</name> <init>= <expr><name>rep3</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rep3</name> <operator>=</operator> <name>rep2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep2</name> <operator>=</operator> <name>rep1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep1</name> <operator>=</operator> <name>rep0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep0</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>update_long_rep</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>len_decode</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_decoder</name></name></expr></argument>,

<argument><expr><name>pos_state</name></expr></argument>, <argument><expr><name>SEQ_REP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <name>MATCH_LEN_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>MATCH_LEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SEQ_COPY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>dict_repeat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>rep0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_COPY</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while></block_content></block></switch>

<expr_stmt><expr><call><name>rc_normalize</name><argument_list>(<argument><expr><name>SEQ_NORMALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_IS_MATCH</name></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><name><name>dictptr</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>dict</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dictptr</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <name><name>dict</name><operator>.</operator><name>full</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_from_local</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>*</operator><name>in_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep0</name></name> <operator>=</operator> <name>rep0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep1</name></name> <operator>=</operator> <name>rep1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep2</name></name> <operator>=</operator> <name>rep2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep3</name></name> <operator>=</operator> <name>rep3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>probs</name></name> <operator>=</operator> <name>probs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>!=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>-=</operator> <name><name>dict</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name>dict_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>LZMA_OK</name>

<operator>&amp;&amp;</operator> <name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>!=</operator> <name>SEQ_NORMALIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>==</operator> <name>SEQ_IS_MATCH</name></expr>

?</condition><then> <expr><name>LZMA_STREAM_END</name></expr> </then><else>: <expr><name>LZMA_DATA_ERROR</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rc_is_finished</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>LZMA_DATA_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rc_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lzma_decoder_uncompressed</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><name>lzma_vli</name></type> <name>uncompressed_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lzma_decoder_reset</name><parameter_list>(<parameter><decl><type><name>lzma_coder</name> <modifier>*</modifier></type><name>coder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>opt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>literal_init</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>lc</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>lp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_context_bits</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>lc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>literal_pos_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_LIT_LIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>rep3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STATES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>coder</name><operator>-&gt;</operator><name>pos_mask</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_match</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0_long</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>is_rep2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN_TO_POS_STATES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>POS_SLOT_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FULL_DISTANCES</name> <operator>-</operator> <name>END_POS_MODEL_INDEX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_special</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>pos_align</name></name></expr></argument>, <argument><expr><name>ALIGN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_pos_states</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_decoder</name><operator>.</operator><name>choice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_decoder</name><operator>.</operator><name>choice2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_decoder</name><operator>.</operator><name>choice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_decoder</name><operator>.</operator><name>choice2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>pos_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pos_state</name> <operator>&lt;</operator> <name>num_pos_states</name></expr>;</condition> <incr><expr><operator>++</operator><name>pos_state</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_decoder</name><operator>.</operator><name>low</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LEN_LOW_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_decoder</name><operator>.</operator><name>mid</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LEN_MID_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_decoder</name><operator>.</operator><name>low</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LEN_LOW_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_decoder</name><operator>.</operator><name>mid</name><index>[<expr><name>pos_state</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LEN_MID_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>match_len_decoder</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name>LEN_HIGH_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bittree_reset</name><argument_list>(<argument><expr><name><name>coder</name><operator>-&gt;</operator><name>rep_len_decoder</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name>LEN_HIGH_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>SEQ_IS_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>probs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coder</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_decoder_create</name><parameter_list>(<parameter><decl><type><name>lzma_lz_decoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_decoder_reset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>set_uncompressed</name></name> <operator>=</operator> <operator>&amp;</operator><name>lzma_decoder_uncompressed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>opt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>dict_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz_options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>preset_dict_size</name></name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lzma_ret</name></type>

<name>lzma_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_lz_decoder</name> <modifier>*</modifier></type><name>lz</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_lz_options</name> <modifier>*</modifier></type><name>lz_options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lclppb_valid</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_PROG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>return_if_error</name><argument_list>(<argument><expr><call><name>lzma_lzma_decoder_create</name><argument_list>(

<argument><expr><name>lz</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>lz_options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_decoder_reset</name><argument_list>(<argument><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lzma_decoder_uncompressed</name><argument_list>(<argument><expr><name><name>lz</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name>LZMA_VLI_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_decoder_init</name><parameter_list>(<parameter><decl><type><name>lzma_next_coder</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>lzma_filter_info</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>init</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lzma_lz_decoder_init</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>lzma_decoder_init</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>bool</name></type>

<name>lzma_lzma_lclppb_decode</name><parameter_list>(<parameter><decl><type><name>lzma_options_lzma</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>byte</name> <operator>/</operator> <operator>(</operator><literal type="number">9</literal> <operator>*</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>byte</name> <operator>-=</operator> <name><name>options</name><operator>-&gt;</operator><name>pb</name></name> <operator>*</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>lp</name></name> <operator>=</operator> <name>byte</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>lc</name></name> <operator>=</operator> <name>byte</name> <operator>-</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name> <operator>*</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<return>return <expr><name><name>options</name><operator>-&gt;</operator><name>lc</name></name> <operator>+</operator> <name><name>options</name><operator>-&gt;</operator><name>lp</name></name> <operator>&gt;</operator> <name>LZMA_LCLP_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>uint64_t</name></type>

<name>lzma_lzma_decoder_memusage_nocheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>lzma_options_lzma</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_coder</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>lzma_lz_decoder_memusage</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>uint64_t</name></type>

<name>lzma_lzma_decoder_memusage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lclppb_valid</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>lzma_lzma_decoder_memusage_nocheck</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>lzma_ret</name></type>

<name>lzma_lzma_props_decode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>props_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>props_size</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lzma_options_lzma</name> <modifier>*</modifier></type><name>opt</name>

<init>= <expr><call><name>lzma_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lzma_options_lzma</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LZMA_MEM_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lzma_lzma_lclppb_decode</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>=</operator> <call><name>unaligned_read32le</name><argument_list>(<argument><expr><name>props</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>options</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OK</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>lzma_free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LZMA_OPTIONS_ERROR</name></expr>;</return>

</block_content>}</block></function>

</unit>
