<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lzma\lzma_encoder_presets.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<extern>extern LZMA_API(lzma_bool</extern>)

<macro><name>lzma_lzma_preset</name><argument_list>(<argument>lzma_options_lzma *options</argument>, <argument>uint32_t preset</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>level</name> <init>= <expr><name>preset</name> <operator>&amp;</operator> <name>LZMA_PRESET_LEVEL_MASK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>flags</name> <init>= <expr><name>preset</name> <operator>&amp;</operator> <operator>~</operator><name>LZMA_PRESET_LEVEL_MASK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>supported_flags</name> <init>= <expr><name>LZMA_PRESET_EXTREME</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>supported_flags</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>preset_dict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>preset_dict_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>lc</name></name> <operator>=</operator> <name>LZMA_LC_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>lp</name></name> <operator>=</operator> <name>LZMA_LP_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>LZMA_PB_DEFAULT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dict_pow2</name><index>[]</index></name>

<init>= <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>dict_size</name></name> <operator>=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>dict_pow2</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LZMA_MODE_FAST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>mf</name></name> <operator>=</operator> <ternary><condition><expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LZMA_MF_HC3</name></expr> </then><else>: <expr><name>LZMA_MF_HC4</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>=</operator> <ternary><condition><expr><name>level</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><literal type="number">273</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>depths</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>depths</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LZMA_MODE_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>mf</name></name> <operator>=</operator> <name>LZMA_MF_BT4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>=</operator> <ternary><condition><expr><name>level</name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><ternary><condition><expr><name>level</name> <operator>==</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LZMA_PRESET_EXTREME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>LZMA_MODE_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>mf</name></name> <operator>=</operator> <name>LZMA_MF_BT4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>level</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>=</operator> <literal type="number">192</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>nice_len</name></name> <operator>=</operator> <literal type="number">273</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block>

</unit>
