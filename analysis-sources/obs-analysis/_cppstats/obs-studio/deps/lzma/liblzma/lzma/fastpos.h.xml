<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\lzma\fastpos.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_pos_slot</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((pos) &lt;= 4 ? (pos) : get_pos_slot_2(pos))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>

<name>get_pos_slot_2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i</name> <init>= <expr><call><name>bsr32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>i</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>pos</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTPOS_BITS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>lzma_fastpos</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FASTPOS_BITS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastpos_shift</name><parameter_list>(<parameter><type><name>extra</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((extra) + (n) * (FASTPOS_BITS - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastpos_limit</name><parameter_list>(<parameter><type><name>extra</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; (FASTPOS_BITS + fastpos_shift(extra, n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastpos_result</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>extra</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lzma_fastpos[(pos) &gt;&gt; fastpos_shift(extra, n)] + 2 * fastpos_shift(extra, n)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>

<name>get_pos_slot</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>fastpos_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>lzma_fastpos</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>fastpos_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>fastpos_result</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>fastpos_result</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULL_DISTANCES_BITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>

<name>get_pos_slot_2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;=</operator> <name>FULL_DISTANCES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>fastpos_limit</name><argument_list>(<argument><expr><name>FULL_DISTANCES_BITS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>fastpos_result</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>FULL_DISTANCES_BITS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>fastpos_limit</name><argument_list>(<argument><expr><name>FULL_DISTANCES_BITS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>fastpos_result</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>FULL_DISTANCES_BITS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>fastpos_result</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>FULL_DISTANCES_BITS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
