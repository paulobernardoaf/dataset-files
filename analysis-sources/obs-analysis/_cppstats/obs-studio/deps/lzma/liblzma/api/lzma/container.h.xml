<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\api\lzma\container.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PRESET_DEFAULT</name></cpp:macro> <cpp:value>UINT32_C(6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PRESET_LEVEL_MASK</name></cpp:macro> <cpp:value>UINT32_C(0x1F)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_PRESET_EXTREME</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 31)</cpp:value></cpp:define>

<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_easy_encoder_memusage</name><argument_list>(<argument>uint32_t preset</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_easy_decoder_memusage</name><argument_list>(<argument>uint32_t preset</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_easy_encoder</name><argument_list>(

<argument>lzma_stream *strm</argument>, <argument>uint32_t preset</argument>, <argument>lzma_check check</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_easy_buffer_encode</name><argument_list>(

<argument>uint32_t preset</argument>, <argument>lzma_check check</argument>,

<argument>lzma_allocator *allocator</argument>, <argument>const uint8_t *in</argument>, <argument>size_t in_size</argument>,

<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_encoder</name><argument_list>(<argument>lzma_stream *strm</argument>,

<argument>const lzma_filter *filters</argument>, <argument>lzma_check check</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_alone_encoder</name><argument_list>(

<argument>lzma_stream *strm</argument>, <argument>const lzma_options_lzma *options</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(size_t</extern>) <macro><name>lzma_stream_buffer_bound</name><argument_list>(<argument>size_t uncompressed_size</argument>)</argument_list></macro>

<expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_buffer_encode</name><argument_list>(

<argument>lzma_filter *filters</argument>, <argument>lzma_check check</argument>,

<argument>lzma_allocator *allocator</argument>, <argument>const uint8_t *in</argument>, <argument>size_t in_size</argument>,

<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_TELL_NO_CHECK</name></cpp:macro> <cpp:value>UINT32_C(0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_TELL_UNSUPPORTED_CHECK</name></cpp:macro> <cpp:value>UINT32_C(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_TELL_ANY_CHECK</name></cpp:macro> <cpp:value>UINT32_C(0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_CONCATENATED</name></cpp:macro> <cpp:value>UINT32_C(0x08)</cpp:value></cpp:define>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_decoder</name><argument_list>(

<argument>lzma_stream *strm</argument>, <argument>uint64_t memlimit</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_auto_decoder</name><argument_list>(

<argument>lzma_stream *strm</argument>, <argument>uint64_t memlimit</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_alone_decoder</name><argument_list>(

<argument>lzma_stream *strm</argument>, <argument>uint64_t memlimit</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_buffer_decode</name><argument_list>(

<argument>uint64_t *memlimit</argument>, <argument>uint32_t flags</argument>, <argument>lzma_allocator *allocator</argument>,

<argument>const uint8_t *in</argument>, <argument>size_t *in_pos</argument>, <argument>size_t in_size</argument>,

<argument>uint8_t *out</argument>, <argument>size_t *out_pos</argument>, <argument>size_t out_size</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

</unit>
