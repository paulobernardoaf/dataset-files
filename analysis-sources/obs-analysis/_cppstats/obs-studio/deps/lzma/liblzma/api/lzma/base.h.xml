<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\api\lzma\base.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>lzma_bool</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LZMA_RESERVED_ENUM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>

}</block></enum></type> <name>lzma_reserved_enum</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LZMA_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LZMA_STREAM_END</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LZMA_NO_CHECK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>LZMA_UNSUPPORTED_CHECK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>LZMA_GET_CHECK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>LZMA_MEM_ERROR</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>LZMA_MEMLIMIT_ERROR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>LZMA_FORMAT_ERROR</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>LZMA_OPTIONS_ERROR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>LZMA_DATA_ERROR</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>LZMA_BUF_ERROR</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>LZMA_PROG_ERROR</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

}</block></enum></type> <name>lzma_ret</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LZMA_RUN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LZMA_SYNC_FLUSH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LZMA_FULL_FLUSH</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>LZMA_FINISH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>

}</block></enum></type> <name>lzma_action</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>LZMA_API_CALL</name> <modifier>*</modifier><name>alloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<name>LZMA_API_CALL</name> <modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_allocator</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>lzma_internal_s</name></name></type> <name>lzma_internal</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>avail_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lzma_allocator</name> <modifier>*</modifier></type><name>allocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_internal</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved_ptr4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved_int1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved_int2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>reserved_int3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>reserved_int4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum2</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_stream</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_STREAM_INIT</name></cpp:macro> <cpp:value>{ NULL, 0, 0, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0, LZMA_RESERVED_ENUM, LZMA_RESERVED_ENUM }</cpp:value></cpp:define>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_code</name><argument_list>(<argument>lzma_stream *strm</argument>, <argument>lzma_action action</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(void</extern>) <macro><name>lzma_end</name><argument_list>(<argument>lzma_stream *strm</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_memusage</name><argument_list>(<argument>const lzma_stream *strm</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

<extern>extern LZMA_API(uint64_t</extern>) <macro><name>lzma_memlimit_get</name><argument_list>(<argument>const lzma_stream *strm</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_memlimit_set</name><argument_list>(

<argument>lzma_stream *strm</argument>, <argument>uint64_t memlimit</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

</unit>
