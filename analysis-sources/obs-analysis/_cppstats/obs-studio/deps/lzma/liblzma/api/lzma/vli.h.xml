<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\api\lzma\vli.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VLI_MAX</name></cpp:macro> <cpp:value>(UINT64_MAX / 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VLI_UNKNOWN</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VLI_BYTES_MAX</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_VLI_C</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UINT64_C(n)</cpp:value></cpp:define>

<typedef>typedef <type><name>uint64_t</name></type> <name>lzma_vli</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzma_vli_is_valid</name><parameter_list>(<parameter><type><name>vli</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vli) &lt;= LZMA_VLI_MAX || (vli) == LZMA_VLI_UNKNOWN)</cpp:value></cpp:define>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_vli_encode</name><argument_list>(<argument>lzma_vli vli</argument>, <argument>size_t *vli_pos</argument>,

<argument>uint8_t *restrict out</argument>, <argument>size_t *restrict out_pos</argument>,

<argument>size_t out_size</argument>)</argument_list></macro> <expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_vli_decode</name><argument_list>(<argument>lzma_vli *restrict vli</argument>,

<argument>size_t *vli_pos</argument>, <argument>const uint8_t *restrict in</argument>,

<argument>size_t *restrict in_pos</argument>, <argument>size_t in_size</argument>)</argument_list></macro>

<expr_stmt><expr><name>lzma_nothrow</name></expr>;</expr_stmt>

<extern>extern LZMA_API(uint32_t</extern>) <macro><name>lzma_vli_size</name><argument_list>(<argument>lzma_vli vli</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

</unit>
