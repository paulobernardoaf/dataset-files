<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\api\lzma\stream_flags.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZMA_H_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Never include this file directly. Use &lt;lzma.h&gt; instead.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_STREAM_HEADER_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_vli</name></type> <name>backward_size</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_BACKWARD_SIZE_MIN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_BACKWARD_SIZE_MAX</name></cpp:macro> <cpp:value>(LZMA_VLI_C(1) &lt;&lt; 34)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>lzma_check</name></type> <name>check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_reserved_enum</name></type> <name>reserved_enum4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lzma_bool</name></type> <name>reserved_bool8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved_int2</name></decl>;</decl_stmt>

}</block></struct></type> <name>lzma_stream_flags</name>;</typedef>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_header_encode</name><argument_list>(

<argument>const lzma_stream_flags *options</argument>, <argument>uint8_t *out</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_footer_encode</name><argument_list>(

<argument>const lzma_stream_flags *options</argument>, <argument>uint8_t *out</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_header_decode</name><argument_list>(

<argument>lzma_stream_flags *options</argument>, <argument>const uint8_t *in</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_footer_decode</name><argument_list>(

<argument>lzma_stream_flags *options</argument>, <argument>const uint8_t *in</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_warn_unused_result</name></decl>;</decl_stmt>

<extern>extern LZMA_API(lzma_ret</extern>) <macro><name>lzma_stream_flags_compare</name><argument_list>(

<argument>const lzma_stream_flags *a</argument>, <argument>const lzma_stream_flags *b</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>lzma_nothrow</name></type> <name>lzma_attr_pure</name></decl>;</decl_stmt>

</unit>
