<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\lzma\liblzma\check\sha256.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wuninitialized"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rotr_32</name><parameter_list>(<parameter><type><name>num</name></type></parameter>, <parameter><type><name>amount</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((num) &gt;&gt; (amount) | (num) &lt;&lt; (32 - (amount)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(W[i] = data[i])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(W[i &amp; 15] += s1(W[(i - 2) &amp; 15]) + W[(i - 7) &amp; 15] + s0(W[(i - 15) &amp; 15]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; y) | (z &amp; (x | y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(0 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(1 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(2 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(3 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(4 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(5 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(6 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T[(7 - i) &amp; 7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>h(i) += S1(e(i)) + Ch(e(i), f(i), g(i)) + SHA256_K[i + j] + (j ? blk2(i) : blk0(i)); d(i) += h(i); h(i) += S0(a(i)) + Maj(a(i), b(i), c(i))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rotr_32(x, 7) ^ rotr_32(x, 18) ^ (x &gt;&gt; 3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rotr_32(x, 17) ^ rotr_32(x, 19) ^ (x &gt;&gt; 10))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SHA256_K</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x428A2F98</literal></expr>, <expr><literal type="number">0x71374491</literal></expr>, <expr><literal type="number">0xB5C0FBCF</literal></expr>, <expr><literal type="number">0xE9B5DBA5</literal></expr>,

<expr><literal type="number">0x3956C25B</literal></expr>, <expr><literal type="number">0x59F111F1</literal></expr>, <expr><literal type="number">0x923F82A4</literal></expr>, <expr><literal type="number">0xAB1C5ED5</literal></expr>,

<expr><literal type="number">0xD807AA98</literal></expr>, <expr><literal type="number">0x12835B01</literal></expr>, <expr><literal type="number">0x243185BE</literal></expr>, <expr><literal type="number">0x550C7DC3</literal></expr>,

<expr><literal type="number">0x72BE5D74</literal></expr>, <expr><literal type="number">0x80DEB1FE</literal></expr>, <expr><literal type="number">0x9BDC06A7</literal></expr>, <expr><literal type="number">0xC19BF174</literal></expr>,

<expr><literal type="number">0xE49B69C1</literal></expr>, <expr><literal type="number">0xEFBE4786</literal></expr>, <expr><literal type="number">0x0FC19DC6</literal></expr>, <expr><literal type="number">0x240CA1CC</literal></expr>,

<expr><literal type="number">0x2DE92C6F</literal></expr>, <expr><literal type="number">0x4A7484AA</literal></expr>, <expr><literal type="number">0x5CB0A9DC</literal></expr>, <expr><literal type="number">0x76F988DA</literal></expr>,

<expr><literal type="number">0x983E5152</literal></expr>, <expr><literal type="number">0xA831C66D</literal></expr>, <expr><literal type="number">0xB00327C8</literal></expr>, <expr><literal type="number">0xBF597FC7</literal></expr>,

<expr><literal type="number">0xC6E00BF3</literal></expr>, <expr><literal type="number">0xD5A79147</literal></expr>, <expr><literal type="number">0x06CA6351</literal></expr>, <expr><literal type="number">0x14292967</literal></expr>,

<expr><literal type="number">0x27B70A85</literal></expr>, <expr><literal type="number">0x2E1B2138</literal></expr>, <expr><literal type="number">0x4D2C6DFC</literal></expr>, <expr><literal type="number">0x53380D13</literal></expr>,

<expr><literal type="number">0x650A7354</literal></expr>, <expr><literal type="number">0x766A0ABB</literal></expr>, <expr><literal type="number">0x81C2C92E</literal></expr>, <expr><literal type="number">0x92722C85</literal></expr>,

<expr><literal type="number">0xA2BFE8A1</literal></expr>, <expr><literal type="number">0xA81A664B</literal></expr>, <expr><literal type="number">0xC24B8B70</literal></expr>, <expr><literal type="number">0xC76C51A3</literal></expr>,

<expr><literal type="number">0xD192E819</literal></expr>, <expr><literal type="number">0xD6990624</literal></expr>, <expr><literal type="number">0xF40E3585</literal></expr>, <expr><literal type="number">0x106AA070</literal></expr>,

<expr><literal type="number">0x19A4C116</literal></expr>, <expr><literal type="number">0x1E376C08</literal></expr>, <expr><literal type="number">0x2748774C</literal></expr>, <expr><literal type="number">0x34B0BCB5</literal></expr>,

<expr><literal type="number">0x391C0CB3</literal></expr>, <expr><literal type="number">0x4ED8AA4A</literal></expr>, <expr><literal type="number">0x5B9CCA4F</literal></expr>, <expr><literal type="number">0x682E6FF3</literal></expr>,

<expr><literal type="number">0x748F82EE</literal></expr>, <expr><literal type="number">0x78A5636F</literal></expr>, <expr><literal type="number">0x84C87814</literal></expr>, <expr><literal type="number">0x8CC70208</literal></expr>,

<expr><literal type="number">0x90BEFFFA</literal></expr>, <expr><literal type="number">0xA4506CEB</literal></expr>, <expr><literal type="number">0xBEF9A3F7</literal></expr>, <expr><literal type="number">0xC67178F2</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>W</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>T</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>a</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>b</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>c</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <call><name>d</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <call><name>e</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <call><name>f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <call><name>g</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <call><name>h</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>process</name><parameter_list>(<parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bswap32</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>

<name>lzma_sha256_init</name><parameter_list>(<parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6A09E667</literal></expr>, <expr><literal type="number">0xBB67AE85</literal></expr>, <expr><literal type="number">0x3C6EF372</literal></expr>, <expr><literal type="number">0xA54FF53A</literal></expr>,

<expr><literal type="number">0x510E527F</literal></expr>, <expr><literal type="number">0x9B05688C</literal></expr>, <expr><literal type="number">0x1F83D9AB</literal></expr>, <expr><literal type="number">0x5BE0CD19</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>

<name>lzma_sha256_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_start</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>copy_size</name> <init>= <expr><literal type="number">64</literal> <operator>-</operator> <name>copy_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u8</name></name> <operator>+</operator> <name>copy_start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>

<name>lzma_sha256_finish</name><parameter_list>(<parameter><decl><type><name>lzma_check_state</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u8</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>!=</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u8</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name> <operator>*=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u64</name><index>[<expr><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>conv64be</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>conv32be</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sha256</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return;</return>

</block_content>}</block></function>

</unit>
