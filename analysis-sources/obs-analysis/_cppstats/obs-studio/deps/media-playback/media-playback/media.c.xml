<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\media-playback\media-playback\media.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"closest-format.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavdevice/avdevice.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/imgutils.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>base_sys_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>video_format</name></name></type> <name>convert_pixel_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_NONE</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_NONE</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_I420</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_NV12</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_YUY2</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_I444</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_UYVY</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_RGBA</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_BGRA</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_BGRX</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_I40A</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_I42A</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P</name></expr>:</case>

<return>return <expr><name>VIDEO_FORMAT_YUVA</name></expr>;</return>

<default>default:</default><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<return>return <expr><name>VIDEO_FORMAT_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>audio_format</name></name></type> <name>convert_sample_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_U8BIT</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_16BIT</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_32BIT</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_FLOAT</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_U8P</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_U8BIT_PLANAR</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_16BIT_PLANAR</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_32BIT_PLANAR</name></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<return>return <expr><name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>;</return>

<default>default:</default><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<return>return <expr><name>AUDIO_FORMAT_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>speaker_layout</name></name></type> <name>convert_speaker_layout</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_MONO</name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_STEREO</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_2POINT1</name></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_4POINT0</name></expr>;</return>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_4POINT1</name></expr>;</return>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_5POINT1</name></expr>;</return>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<return>return <expr><name>SPEAKERS_7POINT1</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>video_colorspace</name></name></type> <name>convert_color_space</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>AVCOL_SPC_BT709</name></expr> ?</condition><then> <expr><name>VIDEO_CS_709</name></expr> </then><else>: <expr><name>VIDEO_CS_DEFAULT</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>video_range_type</name></name></type> <name>convert_color_range</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>r</name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr> ?</condition><then> <expr><name>VIDEO_RANGE_FULL</name></expr> </then><else>: <expr><name>VIDEO_RANGE_DEFAULT</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>mp_decode</name></name> <modifier>*</modifier></type><name>get_packet_decoder</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>media</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>media</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>a</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>media</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>media</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>v</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp_media_next_packet</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>new_pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_pkt</name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_read_frame</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EXIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: av_read_frame failed: %s (%d)"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_decode</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>get_packet_decoder</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_decode_push_packet</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_media_ready_to_start</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>frame_ready</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame_ready</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_decode_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mp_decode</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>||</operator> <call><name>mp_decode_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_sws_colorspace</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>cs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>

<return>return <expr><name>SWS_CS_ITU709</name></expr>;</return>

<case>case <expr><name>AVCOL_SPC_FCC</name></expr>:</case>

<return>return <expr><name>SWS_CS_FCC</name></expr>;</return>

<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>

<return>return <expr><name>SWS_CS_SMPTE170M</name></expr>;</return>

<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case>

<return>return <expr><name>SWS_CS_SMPTE240M</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>SWS_CS_ITU601</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_sws_range</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>r</name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXED_1_0</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp_media_init_scaling</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>space</name> <init>= <expr><call><name>get_sws_colorspace</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><call><name>get_sws_range</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>coeff</name> <init>= <expr><call><name>sws_getCoefficients</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <call><name>sws_getCachedContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_format</name></name></expr></argument>,

<argument><expr><name>SWS_FAST_BILINEAR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>swscale</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to initialize scaler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sws_setColorspaceDetails</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>swscale</name></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>FIXED_1_0</name></expr></argument>, <argument><expr><name>FIXED_1_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_pic</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_linesizes</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>decoder</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to create scale pic data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp_media_prepare_frames</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>mp_media_ready_to_start</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mp_media_next_packet</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EXIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mp_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mp_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame_ready</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>swscale</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>scale_format</name></name> <operator>=</operator> <call><name>closest_format</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>scale_format</name></name> <operator>!=</operator> <name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_init_scaling</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>mp_media_get_next_min_pts</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>min_next_ns</name> <init>= <expr><literal type="number">0x7FFFFFFFFFFFFFFFLL</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame_ready</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame_pts</name></name> <operator>&lt;</operator> <name>min_next_ns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min_next_ns</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>frame_ready</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>frame_pts</name></name> <operator>&lt;</operator> <name>min_next_ns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min_next_ns</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>frame_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>min_next_ns</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>mp_media_get_base_pts</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>base_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>next_pts</name></name> <operator>&gt;</operator> <name>base_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_ts</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>next_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>next_pts</name></name> <operator>&gt;</operator> <name>base_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_ts</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>next_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>base_ts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_media_can_play_frame</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mp_decode</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>frame_pts</name></name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp_media_next_audio</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_decode</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>a</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio</name></name></type> <name>audio</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_can_play_frame</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>a_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <name><name>m</name><operator>-&gt;</operator><name>speed</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <call><name>convert_speaker_layout</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>format</name></name> <operator>=</operator> <call><name>convert_sample_format</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>base_ts</name></name> <operator>+</operator> <name><name>d</name><operator>-&gt;</operator><name>frame_pts</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>+</operator>

<name><name>m</name><operator>-&gt;</operator><name>play_sys_ts</name></name> <operator>-</operator> <name>base_sys_ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>AUDIO_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>a_cb</name></name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp_media_next_video</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>preload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_decode</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>obsframe</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>new_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>new_space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>new_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>preload</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_can_play_frame</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>v_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>frame_ready</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>flip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>swscale</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sws_scale</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>swscale</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_pic</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_linesizes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flip</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>scale_linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>scale_linesizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>scale_pic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flip</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_format</name> <operator>=</operator> <call><name>convert_pixel_format</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>scale_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_space</name> <operator>=</operator> <call><name>convert_color_space</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_range</name> <operator>=</operator> <ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>force_range</name></name> <operator>==</operator> <name>VIDEO_RANGE_DEFAULT</name></expr>

?</condition><then> <expr><call><name>convert_color_range</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name><name>m</name><operator>-&gt;</operator><name>force_range</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_format</name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>||</operator> <name>new_space</name> <operator>!=</operator> <name><name>m</name><operator>-&gt;</operator><name>cur_space</name></name> <operator>||</operator>

<name>new_range</name> <operator>!=</operator> <name><name>m</name><operator>-&gt;</operator><name>cur_range</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>new_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <name>new_range</name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>video_format_get_parameters</name><argument_list>(<argument><expr><name>new_space</name></expr></argument>, <argument><expr><name>new_range</name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>new_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cur_space</name></name> <operator>=</operator> <name>new_space</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cur_range</name></name> <operator>=</operator> <name>new_range</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>VIDEO_FORMAT_NONE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>base_ts</name></name> <operator>+</operator> <name><name>d</name><operator>-&gt;</operator><name>frame_pts</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>+</operator>

<name><name>m</name><operator>-&gt;</operator><name>play_sys_ts</name></name> <operator>-</operator> <name>base_sys_ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>flip</name></name> <operator>=</operator> <name>flip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>got_first_keyframe</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>got_first_keyframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>preload</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>v_preload_cb</name></name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>v_cb</name></name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp_media_calc_next_ns</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>min_next_ns</name> <init>= <expr><call><name>mp_media_get_next_min_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>min_next_ns</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>delta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">3000000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name> <operator>=</operator> <name>min_next_ns</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seek_to</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>duration</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seek_flags</name> <operator>=</operator> <name>AVSEEK_FLAG_FRAME</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>seek_flags</name> <operator>=</operator> <name>AVSEEK_FLAG_BACKWARD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_target</name> <init>= <expr><ternary><condition><expr><name>seek_flags</name> <operator>==</operator> <name>AVSEEK_FLAG_BACKWARD</name></expr>

?</condition><then> <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>seek_pos</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>seek_pos</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_seek_frame</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seek_target</name></expr></argument>, <argument><expr><name>seek_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to seek: %s"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp_decode_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp_decode_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp_media_reset</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>stopping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>seek_to</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_ts</name> <init>= <expr><call><name>mp_media_get_base_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name>next_ts</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>base_ts</name></name> <operator>+=</operator> <name>next_ts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stopping</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>stopping</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>stopping</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_prepare_frames</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>play_sys_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>play_sys_ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name> <operator>=</operator> <call><name>mp_media_get_next_min_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name> <operator>=</operator> <call><name>mp_media_get_next_min_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>play_sys_ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>v_preload_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp_media_next_video</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stopping</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>stop_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>stop_cb</name></name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_media_sleepto</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>timeout</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>timeout_ns</name> <init>= <expr><literal type="number">200000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>&gt;</operator> <name>t</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&gt;</operator> <name>timeout_ns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_sleepto_ns</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name>timeout_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>os_sleepto_ns</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>timeout</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_media_eof</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>v_ended</name> <init>= <expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>||</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>frame_ready</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>a_ended</name> <init>= <expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>||</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>frame_ready</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name>v_ended</name> <operator>&amp;&amp;</operator> <name>a_ended</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>looping</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>looping</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>looping</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>looping</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>stopping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_media_reset</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>eof</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>interrupt_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>stop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>interrupt_poll_ts</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">20000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>kill</name></name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>stopping</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>interrupt_poll_ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>stop</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_avformat</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>format_name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>format_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"MP: Unable to find input format for "</literal>

<literal type="string">"'%s'"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>buffering</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>buffering</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>is_local_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>interrupt_callback</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>interrupt_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>interrupt_callback</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>opts</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>opts</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to open media: '%s'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to find stream info for '%s'"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>=</operator> <call><name>mp_decode_init</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>hw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>=</operator> <call><name>mp_decode_init</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>hw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"MP: Could not initialize audio or video: "</literal>

<literal type="string">"'%s'"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_ts</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>base_ts</name></name> <operator>+=</operator> <call><name>mp_media_get_base_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>play_sys_ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next_pts_ns</name></name> <operator>=</operator> <call><name>mp_media_get_next_min_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_ns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_media_thread</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>os_set_thread_name</name><argument_list>(<argument><expr><literal type="string">"mp_media_thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_avformat</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_reset</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>reset</name></decl>, <decl><type ref="prev"/><name>kill</name></decl>, <decl><type ref="prev"/><name>is_active</name></decl>, <decl><type ref="prev"/><name>seek</name></decl>, <decl><type ref="prev"/><name>pause</name></decl>, <decl><type ref="prev"/><name>reset_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>timeout</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_active</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>os_sem_wait</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>mp_media_sleepto</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>reset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kill</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>kill</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>kill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pause</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pause</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>seek_pos</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>seek_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>seek</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>seek</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reset_time</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>reset_ts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reset_ts</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kill</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mp_media_reset</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seek</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>seek_to</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>seek_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reset_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_ts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>timeout</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_video</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp_media_next_video</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>has_audio</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp_media_next_audio</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_prepare_frames</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp_media_eof</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mp_media_calc_next_ns</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mp_media_thread_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_thread</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>stop_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>stop_cb</name></name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mp_media_init_internal</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mp_media_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to init mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Failed to init semaphore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>format_name</name></name> <operator>=</operator> <ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr> ?</condition><then> <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>hw</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>hardware_decoding</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mp_media_thread_start</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MP: Could not create media thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>thread_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp_media_init</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mp_media_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>media</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>v_cb</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v_cb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>a_cb</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>a_cb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>stop_cb</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>stop_cb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>v_preload_cb</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>v_preload_cb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>force_range</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>force_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>buffering</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>buffering</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>speed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>is_local_file</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>is_local_file</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>is_local_file</name></name> <operator>||</operator> <name><name>media</name><operator>-&gt;</operator><name>speed</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>media</name><operator>-&gt;</operator><name>speed</name></name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">58</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>av_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>avdevice_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_sys_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_sys_ts</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_media_init_internal</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mp_media_free</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp_kill_thread</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>thread_valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>kill</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp_media_free</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>media</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mp_media_stop</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_kill_thread</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_decode_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_decode_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_destroy</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>swscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>scale_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>media</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp_media_play</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>loop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>looping</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp_media_play_pause</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>pause</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reset_ts</name></name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp_media_stop</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>stopping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>mp_get_current_time</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>speed</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>speed</name></name> <operator>/</operator> <literal type="number">100.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>mp_media_get_base_pts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>*</operator> <name>speed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp_media_seek_to</name><parameter_list>(<parameter><decl><type><name>mp_media_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>=</operator> <name>pos</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_sem_post</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
