<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\deps\blake2\src\blake2b-ref.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blake2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blake2-impl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>blake2b_IV</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x6a09e667f3bcc908ULL</literal></expr>, <expr><literal type="number">0xbb67ae8584caa73bULL</literal></expr>,

<expr><literal type="number">0x3c6ef372fe94f82bULL</literal></expr>, <expr><literal type="number">0xa54ff53a5f1d36f1ULL</literal></expr>,

<expr><literal type="number">0x510e527fade682d1ULL</literal></expr>, <expr><literal type="number">0x9b05688c2b3e6c1fULL</literal></expr>,

<expr><literal type="number">0x1f83d9abfb41bd6bULL</literal></expr>, <expr><literal type="number">0x5be0cd19137e2179ULL</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>blake2b_sigma</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr> , <expr><literal type="number">0</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr> ,

<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2b_set_lastnode</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blake2b_is_lastblock</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>S</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2b_set_lastblock</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>S</name><operator>-&gt;</operator><name>last_node</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>blake2b_set_lastnode</name><argument_list>( <argument><expr><name>S</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2b_increment_counter</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>inc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator> <name><name>S</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>inc</name> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2b_init0</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>blake2b_state</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2b_init_param</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>blake2b_param</name> <modifier>*</modifier></type><name>P</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator> <specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <operator>)</operator><operator>(</operator> <name>P</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blake2b_init0</name><argument_list>( <argument><expr><name>S</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <call><name>load64</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>outlen</name></name> <operator>=</operator> <name><name>P</name><operator>-&gt;</operator><name>digest_length</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2b_init</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>blake2b_param</name></type> <name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><name>outlen</name> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name>outlen</name> <operator>&gt;</operator> <name>BLAKE2B_OUTBYTES</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>digest_length</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>outlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>key_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>fanout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store32</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>P</name><operator>-&gt;</operator><name>leaf_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store32</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>P</name><operator>-&gt;</operator><name>node_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store32</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>P</name><operator>-&gt;</operator><name>xof_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>node_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>inner_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>reserved</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>reserved</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>salt</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>personal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>personal</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>blake2b_init_param</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>P</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2b_init_key</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>blake2b_param</name></type> <name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><name>outlen</name> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name>outlen</name> <operator>&gt;</operator> <name>BLAKE2B_OUTBYTES</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>keylen</name> <operator>||</operator> <name>keylen</name> <operator>&gt;</operator> <name>BLAKE2B_KEYBYTES</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>digest_length</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>outlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>key_length</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>keylen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>fanout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store32</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>P</name><operator>-&gt;</operator><name>leaf_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store32</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>P</name><operator>-&gt;</operator><name>node_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store32</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>P</name><operator>-&gt;</operator><name>xof_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>node_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>inner_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>reserved</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>reserved</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>salt</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>personal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>P</name><operator>-&gt;</operator><name>personal</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>blake2b_init_param</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>P</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block</name><index>[<expr><name>BLAKE2B_BLOCKBYTES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLAKE2B_BLOCKBYTES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>block</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2b_update</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>BLAKE2B_BLOCKBYTES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>secure_zero_memory</name><argument_list>( <argument><expr><name>block</name></expr></argument>, <argument><expr><name>BLAKE2B_BLOCKBYTES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { a = a + b + m[blake2b_sigma[r][2*i+0]]; d = rotr64(d ^ a, 32); c = c + d; b = rotr64(b ^ c, 24); a = a + b + m[blake2b_sigma[r][2*i+1]]; d = rotr64(d ^ a, 16); c = c + d; b = rotr64(b ^ c, 63); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { G(r,0,v[ 0],v[ 4],v[ 8],v[12]); G(r,1,v[ 1],v[ 5],v[ 9],v[13]); G(r,2,v[ 2],v[ 6],v[10],v[14]); G(r,3,v[ 3],v[ 7],v[11],v[15]); G(r,4,v[ 0],v[ 5],v[10],v[15]); G(r,5,v[ 1],v[ 6],v[11],v[12]); G(r,6,v[ 2],v[ 7],v[ 8],v[13]); G(r,7,v[ 3],v[ 4],v[ 9],v[14]); } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2b_compress</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>block</name><index>[<expr><name>BLAKE2B_BLOCKBYTES</name></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>m</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>v</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>load64</name><argument_list>( <argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>v</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>S</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>S</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>S</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2b_IV</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name><name>S</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>v</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>G</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROUND</name></cpp:undef>

<function><type><name>int</name></type> <name>blake2b_update</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>buflen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fill</name> <init>= <expr><name>BLAKE2B_BLOCKBYTES</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>inlen</name> <operator>&gt;</operator> <name>fill</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>S</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>left</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fill</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>blake2b_increment_counter</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>BLAKE2B_BLOCKBYTES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2b_compress</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt> <expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>inlen</name> <operator>&gt;</operator> <name>BLAKE2B_BLOCKBYTES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blake2b_increment_counter</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>BLAKE2B_BLOCKBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2b_compress</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>BLAKE2B_BLOCKBYTES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>BLAKE2B_BLOCKBYTES</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>S</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+=</operator> <name>inlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2b_final</name><parameter_list>( <parameter><decl><type><name>blake2b_state</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>BLAKE2B_OUTBYTES</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>out</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>outlen</name> <operator>&lt;</operator> <name><name>S</name><operator>-&gt;</operator><name>outlen</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>blake2b_is_lastblock</name><argument_list>( <argument><expr><name>S</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blake2b_increment_counter</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2b_set_lastblock</name><argument_list>( <argument><expr><name>S</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>S</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLAKE2B_BLOCKBYTES</name> <operator>-</operator> <name><name>S</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>blake2b_compress</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>store64</name><argument_list>( <argument><expr><name>buffer</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>outlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>secure_zero_memory</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2b</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>blake2b_state</name></type> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>NULL</name> <operator>==</operator> <name>in</name> <operator>&amp;&amp;</operator> <name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>NULL</name> <operator>==</operator> <name>out</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>key</name> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>outlen</name> <operator>||</operator> <name>outlen</name> <operator>&gt;</operator> <name>BLAKE2B_OUTBYTES</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>keylen</name> <operator>&gt;</operator> <name>BLAKE2B_KEYBYTES</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>keylen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>blake2b_init_key</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>blake2b_init</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>blake2b_update</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><operator>(</operator> <specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <operator>)</operator><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2b_final</name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter> )</parameter_list> <block>{<block_content>

<return>return <expr><call><name>blake2b</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPERCOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>crypto_hash</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>inlen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>blake2b</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>BLAKE2B_OUTBYTES</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BLAKE2B_SELFTEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blake2-kat.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><name>BLAKE2B_KEYBYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>BLAKE2_KAT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLAKE2B_KEYBYTES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>uint8_t</name> <operator>)</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLAKE2_KAT_LENGTH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>uint8_t</name> <operator>)</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLAKE2_KAT_LENGTH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hash</name><index>[<expr><name>BLAKE2B_OUTBYTES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blake2b</name><argument_list>( <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>BLAKE2B_OUTBYTES</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BLAKE2B_KEYBYTES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>blake2b_keyed_kat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BLAKE2B_OUTBYTES</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>step</name> <operator>&lt;</operator> <name>BLAKE2B_BLOCKBYTES</name></expr>;</condition> <incr><expr><operator>++</operator><name>step</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLAKE2_KAT_LENGTH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hash</name><index>[<expr><name>BLAKE2B_OUTBYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blake2b_state</name></type> <name>S</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mlen</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>blake2b_init_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>BLAKE2B_OUTBYTES</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BLAKE2B_KEYBYTES</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>mlen</name> <operator>&gt;=</operator> <name>step</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>blake2b_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mlen</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>blake2b_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>blake2b_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>BLAKE2B_OUTBYTES</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>blake2b_keyed_kat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BLAKE2B_OUTBYTES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>puts</name><argument_list>( <argument><expr><literal type="string">"ok"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
