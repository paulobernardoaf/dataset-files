<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs-opengl\gl-stagesurf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_pixel_pack_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_stage_surface</name></name> <modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_gen_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>surf</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>surf</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>surf</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>surf</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFC</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>*=</operator> <name><name>surf</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_DYNAMIC_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBufferData"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>device_stagesurface_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_stage_surface</name></name> <modifier>*</modifier></type><name>surf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surf</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_stage_surface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>color_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>gl_format</name></name> <operator>=</operator> <call><name>convert_gs_format</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>gl_internal_format</name></name> <operator>=</operator> <call><name>convert_gs_internal_format</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>gl_type</name></name> <operator>=</operator> <call><name>get_gl_format_type</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name> <operator>=</operator> <call><name>gs_get_format_bpp</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_pixel_pack_buffer</name><argument_list>(<argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_stagesurface_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_stagesurface_destroy</name><argument_list>(<argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>surf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stagesurface_destroy</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stagesurf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stagesurf</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stagesurf</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>can_stage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_stage_surface</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source texture is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source texture must be a 2D texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Destination surface is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source and destination formats do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source and destination must have the same "</literal>

<literal type="string">"dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>device_stage_texture</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>fbo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>last_fbo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_stage</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tex2d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fbo</name> <operator>=</operator> <call><name>get_fbo</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_get_integer_v</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER_BINDING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_fbo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed_unbind_buffer</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_framebuffer</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>fbo</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed_unbind_buffer</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glFrameBufferTexture2D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed_unbind_all</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_format</name></name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glReadPixels"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed_unbind_all</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>failed_unbind_all</name>:</label>

<expr_stmt><expr><call><name>gl_bind_framebuffer</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>last_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>failed_unbind_buffer</name>:</label>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>failed</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_stage_texture (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>device_stage_texture</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_stage</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tex2d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>tex2d</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glGetTexImage</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_format</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glGetTexImage"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>failed</name>:</label>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_stage_texture (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>uint32_t</name></type> <name>gs_stagesurface_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>stagesurf</name><operator>-&gt;</operator><name>width</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_stagesurface_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>stagesurf</name><operator>-&gt;</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type>

<name>gs_stagesurface_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>stagesurf</name><operator>-&gt;</operator><name>format</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_stagesurface_map</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>stagesurf</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>glMapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name>GL_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glMapBuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>linesize</name> <operator>=</operator> <name><name>stagesurf</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name> <operator>*</operator> <name><name>stagesurf</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"stagesurf_map (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stagesurface_unmap</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><name><name>stagesurf</name><operator>-&gt;</operator><name>pack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glUnmapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUnmapBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_PACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
