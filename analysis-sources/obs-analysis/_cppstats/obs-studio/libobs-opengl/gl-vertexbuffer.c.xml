<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs-opengl\gl-vertexbuffer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/vec3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_buffers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vertex_buffer</name></name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLenum</name></type> <name>usage</name> <init>= <expr><ternary><condition><expr><name><name>vb</name><operator>-&gt;</operator><name>dynamic</name></name></expr> ?</condition><then> <expr><name>GL_STREAM_DRAW</name></expr> </then><else>: <expr><name>GL_STATIC_DRAW</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_create_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>normals</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_create_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>normal_buffer</name></name></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>tangents</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_create_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>tangent_buffer</name></name></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>tangents</name></name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>colors</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_create_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name></name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_sizes</name></name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>tex_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_tvertarray</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tv</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_create_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_sizes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vb</name><operator>-&gt;</operator><name>dynamic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_vbdata_destroy</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_gen_vertex_arrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>vao</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>device_vertexbuffer_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vertex_buffer</name></name> <modifier>*</modifier></type><name>vb</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_vertex_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vb</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vb</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vb</name><operator>-&gt;</operator><name>dynamic</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>GS_DYNAMIC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_buffers</name><argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_vertexbuffer_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vertexbuffer_destroy</name><argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>vb</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertexbuffer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vb</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>normal_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>normal_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>tangent_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>tangent_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>color_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><operator>(</operator><name>GLsizei</name><operator>)</operator><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_vertex_arrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vb</name><operator>-&gt;</operator><name>vao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vbdata_destroy</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gs_vertexbuffer_flush_internal</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_tex</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name> <operator>&lt;</operator> <name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr>

</then><else>: <expr><name><name>vb</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vb</name><operator>-&gt;</operator><name>dynamic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vertex buffer is not dynamic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>update_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>normal_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>normals</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>update_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>normal_buffer</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>tangent_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>tangents</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>update_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>tangent_buffer</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tangents</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>color_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>colors</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>update_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>buffer</name> <init>= <expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_tvertarray</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>tv</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>update_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

<label><name>failed</name>:</label>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_vertexbuffer_flush (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertexbuffer_flush</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gs_vertexbuffer_flush_internal</name><argument_list>(<argument><expr><name>vb</name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertexbuffer_flush_direct</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gs_vertexbuffer_flush_internal</name><argument_list>(<argument><expr><name>vb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>gs_vertexbuffer_get_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vb</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GLuint</name></type> <name>get_vb_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vertex_buffer</name></name> <modifier>*</modifier></type><name>vb</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>attrib_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>gl_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>gl_type</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ATTRIB_POSITION</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>vb</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ATTRIB_NORMAL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>vb</name><operator>-&gt;</operator><name>normal_buffer</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ATTRIB_TANGENT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>vb</name><operator>-&gt;</operator><name>tangent_buffer</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ATTRIB_COLOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>gl_type</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt>

<return>return <expr><name><name>vb</name><operator>-&gt;</operator><name>color_buffer</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ATTRIB_TEXCOORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>GLint</name><operator>)</operator><name><name>vb</name><operator>-&gt;</operator><name>uv_sizes</name><operator>.</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name><name>vb</name><operator>-&gt;</operator><name>uv_buffers</name><operator>.</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_vb_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>shader_attrib</name></name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_vertex_buffer</name></name> <modifier>*</modifier></type><name>vb</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>get_vb_buffer</name><argument_list>(<argument><expr><name>vb</name></expr></argument>, <argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vertex buffer does not have the required "</literal>

<literal type="string">"inputs for vertex shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribPointer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glEnableVertexAttribArray"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>load_vb_buffers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_program</name></name> <modifier>*</modifier></type><name>program</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gs_vertex_buffer</name></name> <modifier>*</modifier></type><name>vb</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_index_buffer</name></name> <modifier>*</modifier></type><name>ib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader</name></name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name><name>program</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_vertex_array</name><argument_list>(<argument><expr><name><name>vb</name><operator>-&gt;</operator><name>vao</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shader</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>shader_attrib</name></name> <modifier>*</modifier></type><name>attrib</name> <init>= <expr><name><name>shader</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_vb_buffer</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>vb</name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>attribs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ib</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>ib</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_vertexbuffer</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_vertex_buffer</name></name> <operator>=</operator> <name>vb</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
