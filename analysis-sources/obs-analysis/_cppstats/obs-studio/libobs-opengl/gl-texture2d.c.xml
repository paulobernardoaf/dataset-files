<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs-opengl\gl-texture2d.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>upload_texture_2d</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row_size</name> <init>= <expr><name><name>tex</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <call><name>gs_get_format_bpp</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tex_size</name> <init>= <expr><name><name>tex</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>row_size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_levels</name> <init>= <expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>levels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>compressed</name> <init>= <expr><call><name>gs_is_compressed_format</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_levels</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_levels</name> <operator>=</operator> <call><name>gs_get_total_levels</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_init_face</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_type</name></name></expr></argument>, <argument><expr><name>num_levels</name></expr></argument>,

<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_format</name></name></expr></argument>,

<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_internal_format</name></name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>,

<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tex_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAX_LEVEL</name></expr></argument>,

<argument><expr><name>num_levels</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_pixel_unpack_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_gen_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tex</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>tex</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <call><name>gs_get_format_bpp</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_is_compressed_format</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFC</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <name><name>tex</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <name><name>tex</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBufferData"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>device_texture_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_texture_2d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>GS_TEXTURE_2D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>color_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>levels</name></name> <operator>=</operator> <name>levels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_format</name></name> <operator>=</operator> <call><name>convert_gs_format</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_internal_format</name></name> <operator>=</operator> <call><name>convert_gs_internal_format</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_type</name></name> <operator>=</operator> <call><name>get_gl_format_type</name><argument_list>(<argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_target</name></name> <operator>=</operator> <name>GL_TEXTURE_2D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>is_dynamic</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_DYNAMIC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>is_render_target</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_RENDER_TARGET</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>is_dummy</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_GL_DUMMYTEX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gen_mipmaps</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_BUILD_MIPMAPS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tex</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_gen_textures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>is_dummy</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>is_dynamic</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>create_pixel_unpack_buffer</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>upload_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row_size</name> <init>=

<expr><name><name>tex</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <call><name>gs_get_format_bpp</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tex_size</name> <init>= <expr><name><name>tex</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>row_size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>compressed</name> <init>= <expr><call><name>gs_is_compressed_format</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_init</name> <init>= <expr><call><name>gl_init_face</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_type</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_format</name></name></expr></argument>,

<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_internal_format</name></name></expr></argument>,

<argument><expr><name>compressed</name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tex_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>did_init</name> <operator>=</operator>

<call><name>gl_tex_param_i</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAX_LEVEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_unbind</name> <init>= <expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_init</name> <operator>||</operator> <operator>!</operator><name>did_unbind</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>gs_texture_t</name> <operator>*</operator><operator>)</operator><name>tex</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>gs_texture_t</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_texture_create (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_texture_2d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_tex2d</name> <init>= <expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_2D</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_tex2d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s (GL) failed: Not a 2D texture"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>is_tex2d</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>cur_sampler</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_samplerstate_destroy</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>cur_sampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tex</name><operator>-&gt;</operator><name>is_dummy</name></name> <operator>&amp;&amp;</operator> <name><name>tex</name><operator>-&gt;</operator><name>is_dynamic</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>=

<expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex2d</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tex2d</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_3D</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_3d</name></name> <modifier>*</modifier></type><name>tex3d</name> <init>=

<expr><operator>(</operator>struct <name>gs_texture_3d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex3d</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tex3d</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gl_delete_textures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tex</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbo_info_destroy</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_texture_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_get_width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>tex2d</name><operator>-&gt;</operator><name>width</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_texture_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_get_height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>tex2d</name><operator>-&gt;</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>gs_texture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>tex</name><operator>-&gt;</operator><name>format</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texture_map</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_map"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tex2d</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>is_dynamic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture is not dynamic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name><name>tex2d</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <call><name>glMapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name>GL_WRITE_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glMapBuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>linesize</name> <operator>=</operator> <name><name>tex2d</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <call><name>gs_get_format_bpp</name><argument_list>(<argument><expr><name><name>tex</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>linesize</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>linesize</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFC</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_map (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texture_unmap</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_unmap"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name><name>tex2d</name><operator>-&gt;</operator><name>unpack_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glUnmapBuffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glUnmapBuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>tex2d</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_internal_format</name></name></expr></argument>, <argument><expr><name><name>tex2d</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>tex2d</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_format</name></name></expr></argument>, <argument><expr><name><name>tex</name><operator>-&gt;</operator><name>gl_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glTexImage2D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>failed</name>:</label>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_unmap (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texture_is_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_TEXTURE_3D</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_is_rect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_is_rect (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>tex2d</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>gl_target</name></name> <operator>==</operator> <name>GL_TEXTURE_RECTANGLE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_texture_get_obj</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_2d</name></name> <modifier>*</modifier></type><name>tex2d</name> <init>= <expr><operator>(</operator>struct <name>gs_texture_2d</name> <operator>*</operator><operator>)</operator><name>tex</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_texture_2d</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_get_obj"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_texture_get_obj (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>tex2d</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>texture</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
