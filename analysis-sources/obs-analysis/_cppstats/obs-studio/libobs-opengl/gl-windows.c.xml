<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs-opengl\gl-windows.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/darray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/glad_wgl.h&gt;</cpp:file></cpp:include>

<struct>struct <name>gl_windowinfo</name> <block>{

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>gl_platform</name> <block>{

<decl_stmt><decl><type><name>HGLRC</name></type> <name>hrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gl_windowinfo</name></name></type> <name>window</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_color_format_bits</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GS_RGBA</name></expr>:</case>

<case>case <expr><name>GS_BGRA</name></expr>:</case>

<return>return <expr><literal type="number">32</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_depth_format_bits</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>zsformat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>zsformat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GS_Z16</name></expr>:</case>

<return>return <expr><literal type="number">16</literal></expr>;</return>

<case>case <expr><name>GS_Z24_S8</name></expr>:</case>

<return>return <expr><literal type="number">24</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_stencil_format_bits</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>zsformat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>zsformat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GS_Z24_S8</name></expr>:</case>

<return>return <expr><literal type="number">8</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_dummy_pixel_format</name><parameter_list>(<parameter><decl><type><name>PIXELFORMATDESCRIPTOR</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PIXELFORMATDESCRIPTOR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>nSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>iPixelType</name></name> <operator>=</operator> <name>PFD_TYPE_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>cColorBits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>cDepthBits</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>cStencilBits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>iLayerType</name></name> <operator>=</operator> <name>PFD_MAIN_PLANE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>=</operator> <name>PFD_DRAW_TO_WINDOW</name> <operator>|</operator> <name>PFD_SUPPORT_OPENGL</name> <operator>|</operator>

<name>PFD_DOUBLEBUFFER</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dummy_window_class</name> <init>= <expr><literal type="string">"GLDummyWindow"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>registered_dummy_window_class</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>dummy_context</name> <block>{

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>hrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_register_dummy_window_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WNDCLASSA</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>registered_dummy_window_class</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>DefWindowProc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>dummy_window_class</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterClassA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create dummy window class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>registered_dummy_window_class</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HWND</name></type> <name>gl_create_dummy_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>CreateWindowExA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dummy_window_class</name></expr></argument>, <argument><expr><literal type="string">"Dummy GL Window"</literal></expr></argument>,

<argument><expr><name>WS_POPUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwnd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create dummy context window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hwnd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>wgl_make_current</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>HGLRC</name></type> <name>hglrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hglrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"wglMakeCurrent failed, GetLastError "</literal>

<literal type="string">"returned %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HGLRC</name></type> <name>gl_init_basic_context</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>hglrc</name> <init>= <expr><call><name>wglCreateContext</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hglrc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"wglCreateContext failed, %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wgl_make_current</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hglrc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>hglrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hglrc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HGLRC</name></type> <name>gl_init_context</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>attribs</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>WGL_CONTEXT_FLAGS_ARB</name></expr>,

<expr><name>WGL_CONTEXT_DEBUG_BIT_ARB</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>WGL_CONTEXT_PROFILE_MASK_ARB</name></expr>,

<expr><name>WGL_CONTEXT_CORE_PROFILE_BIT_ARB</name></expr>,

<expr><name>WGL_CONTEXT_MAJOR_VERSION_ARB</name></expr>,

<expr><literal type="number">3</literal></expr>,

<expr><name>WGL_CONTEXT_MINOR_VERSION_ARB</name></expr>,

<expr><literal type="number">3</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>hglrc</name> <init>= <expr><call><name>wglCreateContextAttribsARB</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hglrc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"wglCreateContextAttribsARB failed, "</literal>

<literal type="string">"%lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wgl_make_current</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hglrc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>hglrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hglrc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_dummy_context_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dummy_context</name></name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format_index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_register_dummy_window_class</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <call><name>gl_create_dummy_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dummy</name><operator>-&gt;</operator><name>hwnd</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>hdc</name></name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>dummy</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dummy_pixel_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format_index</name> <operator>=</operator> <call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name><name>dummy</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dummy ChoosePixelFormat failed, %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name><name>dummy</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><name>format_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dummy SetPixelFormat failed, %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>hrc</name></name> <operator>=</operator> <call><name>gl_init_basic_context</name><argument_list>(<argument><expr><name><name>dummy</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dummy</name><operator>-&gt;</operator><name>hrc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize dummy context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gl_dummy_context_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dummy_context</name></name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name><name>dummy</name><operator>-&gt;</operator><name>hrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>dummy</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dummy_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>required_extension_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"OpenGL extension %s is required"</literal></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_init_extensions</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gladLoadWGL</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load WGL entry functions."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_pixel_format</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>required_extension_error</name><argument_list>(<argument><expr><literal type="string">"ARB_pixel_format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_create_context</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>required_extension_error</name><argument_list>(<argument><expr><literal type="string">"ARB_create_context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>GLAD_WGL_ARB_create_context_profile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>required_extension_error</name><argument_list>(<argument><expr><literal type="string">"ARB_create_context_profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_attrib</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrib</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gl_choose_pixel_format</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name></type> <name>attribs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_bits</name> <init>= <expr><call><name>get_color_format_bits</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth_bits</name> <init>= <expr><call><name>get_depth_format_bits</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>zsformat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stencil_bits</name> <init>= <expr><call><name>get_stencil_format_bits</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>zsformat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>num_formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>color_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gl_init_pixel_format: color format not "</literal>

<literal type="string">"supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>darray_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_DRAW_TO_WINDOW_ARB</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_SUPPORT_OPENGL_ARB</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_ACCELERATION_ARB</name></expr></argument>, <argument><expr><name>WGL_FULL_ACCELERATION_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_DOUBLE_BUFFER_ARB</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_PIXEL_TYPE_ARB</name></expr></argument>, <argument><expr><name>WGL_TYPE_RGBA_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_COLOR_BITS_ARB</name></expr></argument>, <argument><expr><name>color_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_DEPTH_BITS_ARB</name></expr></argument>, <argument><expr><name>depth_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><name>WGL_STENCIL_BITS_ARB</name></expr></argument>, <argument><expr><name>stencil_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_attrib</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>wglChoosePixelFormatARB</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name><name>attribs</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>num_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>||</operator> <operator>!</operator><name>num_formats</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"wglChoosePixelFormatARB failed, %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>format</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_getpixelformat</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>PIXELFORMATDESCRIPTOR</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <call><name>gl_choose_pixel_format</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DescribePixelFormat</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>*</operator><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DescribePixelFormat failed, %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gl_setpixelformat</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name>PIXELFORMATDESCRIPTOR</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SetPixelFormat failed, %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type><name>gl_windowinfo_bare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type><name>wi</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gl_windowinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wi</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><operator>-&gt;</operator><name>hdc</name></name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>wi</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get device context from window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>wi</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMMY_WNDCLASS</name></cpp:macro> <cpp:value>"Dummy GL Window Class"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>register_dummy_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>created</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WNDCLASSA</name></type> <name>wc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <operator>(</operator><name>WNDPROC</name><operator>)</operator><name>DefWindowProcA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>DUMMY_WNDCLASS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>created</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterClassA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to register dummy GL window class, %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_dummy_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <call><name>CreateWindowExA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DUMMY_WNDCLASS</name></expr></argument>,

<argument><expr><literal type="string">"OpenGL Dummy Window"</literal></expr></argument>, <argument><expr><name>WS_POPUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create dummy GL window, %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get dummy GL window DC (%lu)"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_default_swap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name></decl></parameter>, <parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pixel_format</name></decl></parameter>, <parameter><decl><type><name>PIXELFORMATDESCRIPTOR</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_setpixelformat</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr></argument>, <argument><expr><name>pixel_format</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gl_update</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gl_clear_context</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dummy_swap_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>GS_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>zsformat</name></name> <operator>=</operator> <name>GS_ZS_NONE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>gl_platform_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gl_platform</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dummy_context</name></name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_init_data</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dummy_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dummy_swap_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_dummy_context_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_init_extensions</name><argument_list>(<argument><expr><name><name>dummy</name><operator>.</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>register_dummy_class</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_dummy_window</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_getpixelformat</name><argument_list>(<argument><expr><name><name>dummy</name><operator>.</operator><name>hdc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixel_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_dummy_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_default_swap</name><argument_list>(<argument><expr><name>plat</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>pixel_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>hrc</name></name> <operator>=</operator> <call><name>gl_init_context</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plat</name><operator>-&gt;</operator><name>hrc</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gladLoadGL</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize OpenGL entry functions."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>plat</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gl_platform_create failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_platform_destroy</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_dummy_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gl_platform_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>plat</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>plat</name><operator>-&gt;</operator><name>hrc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>hrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gl_platform_init_swapchain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gl_platform_cleanup_swapchain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type><name>gl_windowinfo_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type><name>wi</name> <init>= <expr><call><name>gl_windowinfo_bare</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_format</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_getpixelformat</name><argument_list>(<argument><expr><name><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixel_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_setpixelformat</name><argument_list>(<argument><expr><name><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>, <argument><expr><name>pixel_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>wi</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gl_windowinfo_create failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_windowinfo_destroy</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gl_windowinfo_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type><name>wi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wi</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name><name>wi</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_enter_context</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wgl_make_current</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>hrc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_enter_context (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_leave_context</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>device_get_device_obj</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>hrc</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_load_swapchain</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>hdc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>==</operator> <name>swap</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <name><name>swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hdc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wgl_make_current</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>hrc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_load_swapchain (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>device_present</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SwapBuffers</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>hdc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"SwapBuffers failed, GetLastError "</literal>

<literal type="string">"returned %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"device_present (GL) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_getclientsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>EXPORT</name> <name>bool</name></type> <name>device_gdi_texture_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>EXPORT</name> <name>bool</name></type> <name>device_shared_texture_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
