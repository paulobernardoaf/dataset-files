<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs-opengl\gl-helpers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>gl_init_face</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_levels</name></decl></parameter>,

<parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internal_format</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compressed</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><ternary><condition><expr><name>p_data</name></expr> ?</condition><then> <expr><operator>*</operator><name>p_data</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_levels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compressed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glCompressedTexImage2D</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>internal_format</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><operator>*</operator><name>data</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage2D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>internal_format</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><operator>*</operator><name>data</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glTexImage2D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_copy_fbo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_y</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_y</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fbo_info</name></name> <modifier>*</modifier></type><name>fbo</name> <init>= <expr><call><name>get_fbo</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>last_fbo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fbo</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_get_integer_v</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER_BINDING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_fbo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_framebuffer</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>fbo</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glFrameBufferTexture2D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glReadBuffer</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT0</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glReadBuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glCopyTexSubImage2D</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage2D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_texture</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_framebuffer</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>last_fbo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gl_copy_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_device</name></name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_y</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gs_texture</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>copy_type</name></name> <operator>==</operator> <name>COPY_TYPE_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glCopyImageSubData</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,

<argument><expr><name>src_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCopyImageSubData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>copy_type</name></name> <operator>==</operator> <name>COPY_TYPE_NV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glCopyImageSubDataNV</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,

<argument><expr><name>src_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>gl_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glCopyImageSubDataNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>copy_type</name></name> <operator>==</operator> <name>COPY_TYPE_FBO_BLIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_copy_fbo</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gl_copy_texture failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gl_create_buffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_gen_buffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glBufferData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>update_buffer</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>glMapBufferRange</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name>GL_MAP_WRITE_BIT</name> <operator>|</operator> <name>GL_MAP_INVALIDATE_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gl_success</name><argument_list>(<argument><expr><literal type="string">"glMapBufferRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUnmapBuffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gl_bind_buffer</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

</unit>
