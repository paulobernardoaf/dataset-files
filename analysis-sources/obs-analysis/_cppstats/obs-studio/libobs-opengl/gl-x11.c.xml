<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs-opengl\gl-x11.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib-xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl-subsystem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glad/glad_glx.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ctx_attribs</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>GLX_CONTEXT_FLAGS_ARB</name></expr>,

<expr><name>GLX_CONTEXT_DEBUG_BIT_ARB</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>GLX_CONTEXT_PROFILE_MASK_ARB</name></expr>,

<expr><name>GLX_CONTEXT_CORE_PROFILE_BIT_ARB</name></expr>,

<expr><name>GLX_CONTEXT_MAJOR_VERSION_ARB</name></expr>,

<expr><literal type="number">3</literal></expr>,

<expr><name>GLX_CONTEXT_MINOR_VERSION_ARB</name></expr>,

<expr><literal type="number">3</literal></expr>,

<expr><name>None</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ctx_pbuffer_attribs</name><index>[]</index></name> <init>= <expr><block>{<expr><name>GLX_PBUFFER_WIDTH</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>GLX_PBUFFER_HEIGHT</name></expr>, <expr><literal type="number">2</literal></expr>,

<expr><name>None</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ctx_visual_attribs</name><index>[]</index></name> <init>= <expr><block>{<expr><name>GLX_STENCIL_SIZE</name></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><name>GLX_DEPTH_SIZE</name></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><name>GLX_BUFFER_SIZE</name></expr>,

<expr><literal type="number">32</literal></expr>,

<expr><name>GLX_ALPHA_SIZE</name></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><name>GLX_DOUBLEBUFFER</name></expr>,

<expr><name>true</name></expr>,

<expr><name>GLX_X_RENDERABLE</name></expr>,

<expr><name>true</name></expr>,

<expr><name>None</name></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>gl_windowinfo</name> <block>{

<decl_stmt><decl><type><name>GLXFBConfig</name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>gl_platform</name> <block>{

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXContext</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXPbuffer</name></type> <name>pbuffer</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_screen_num_from_xcb_screen</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name></decl></parameter>,

<parameter><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>iter</name> <init>=

<expr><call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>.</operator><name>rem</name></name></expr>;</condition> <incr><expr><call><name>xcb_screen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>++</operator><name>screen_num</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>screen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>screen_num</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>get_screen_from_root</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name></decl></parameter>,

<parameter><decl><type><name>xcb_window_t</name></type> <name>root</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>iter</name> <init>=

<expr><call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>iter</name><operator>.</operator><name>rem</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>root</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_screen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_screen_num_from_root</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name></decl></parameter>,

<parameter><decl><type><name>xcb_window_t</name></type> <name>root</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>get_screen_from_root</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_screen_num_from_xcb_screen</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>get_window_geometry</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name></decl></parameter>,

<parameter><decl><type><name>xcb_drawable_t</name></type> <name>drawable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_get_geometry_cookie_t</name></type> <name>cookie</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cookie</name> <operator>=</operator> <call><name>xcb_get_geometry</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_get_geometry_reply</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to fetch parent window geometry!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>reply</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gl_context_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_buf_config_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXFBConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXContext</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>GLAD_GLX_ARB_create_context</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ARB_GLX_create_context not supported!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>glXChooseFBConfig</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ctx_visual_attribs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_buf_config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenGL frame buffer config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>glXCreateContextAttribsARB</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>ctx_attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenGL context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>pbuffer</name></name> <operator>=</operator>

<call><name>glXCreatePbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ctx_pbuffer_attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plat</name><operator>-&gt;</operator><name>pbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenGL pbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gl_context_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glXDestroyContext</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>plat</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type>

<name>gl_windowinfo_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gl_windowinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_windowinfo_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_windowinfo</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Display</name> <modifier>*</modifier></type><name>open_windowless_display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>screen_iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open new X connection!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xcb_conn</name> <operator>=</operator> <call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcb_conn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get XCB connection to main display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>screen_iterator</name> <operator>=</operator> <call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <name><name>screen_iterator</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get screen root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>screen_num</name> <operator>=</operator> <call><name>get_screen_num_from_root</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get screen number from root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gladLoadGLX</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>screen_num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to load GLX entry functions."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>display</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x_error_handler</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>XErrorEvent</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str3</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XGetErrorText</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetErrorText</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>request_code</name></name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetErrorText</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>minor_code</name></name></expr></argument>, <argument><expr><name>str3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"X Error: %s, Major opcode: %s, "</literal>

<literal type="string">"Minor opcode: %s, Serial: %lu"</literal></expr></argument>,

<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>str3</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>gl_platform_create</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name> <init>= <expr><call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gl_platform</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>open_windowless_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail_display_open</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XSetEventQueueOwner</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>XCBOwnsEventQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>x_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>plat</name></name> <operator>=</operator> <name>plat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plat</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gl_context_create</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create context!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_context_create</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>plat</name><operator>-&gt;</operator><name>pbuffer</name></name></expr></argument>, <argument><expr><name><name>plat</name><operator>-&gt;</operator><name>pbuffer</name></name></expr></argument>,

<argument><expr><name><name>plat</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to make context current."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_make_current</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gladLoadGL</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load OpenGL entry functions."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_load_gl</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>success</name>;</goto>

<label><name>fail_make_current</name>:</label>

<expr_stmt><expr><call><name>gl_context_destroy</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail_context_create</name>:</label>

<label><name>fail_load_gl</name>:</label>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail_display_open</name>:</label>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>plat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>success</name>:</label>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>plat</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_platform_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gl_platform</name></name> <modifier>*</modifier></type><name>plat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plat</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gl_context_destroy</name><argument_list>(<argument><expr><name>plat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>bool</name></type> <name>gl_platform_init_swapchain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>swap</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>wid</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>parent</name> <init>= <expr><name><name>swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geometry</name> <init>=

<expr><call><name>get_window_geometry</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>status</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>visual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXFBConfig</name> <modifier>*</modifier></type><name>fb_config</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>geometry</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail_geometry_request</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>screen_num</name> <operator>=</operator> <call><name>get_screen_num_from_root</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name><name>geometry</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail_screen</name>;</goto>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_configs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fb_config</name> <operator>=</operator> <call><name>glXChooseFBConfig</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>screen_num</name></expr></argument>,

<argument><expr><name>ctx_visual_attribs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_configs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fb_config</name> <operator>||</operator> <operator>!</operator><name>num_configs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to find FBConfig!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_fb_config</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>glXGetFBConfigAttrib</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>fb_config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>GLX_VISUAL_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visual</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad call to GetFBConfigAttrib!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_visual_id</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>xcb_colormap_t</name></type> <name>colormap</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><name>XCB_CW_BORDER_PIXEL</name> <operator>|</operator> <name>XCB_CW_COLORMAP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>mask_values</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>colormap</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_create_colormap</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>XCB_COLORMAP_ALLOC_NONE</name></expr></argument>, <argument><expr><name>colormap</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,

<argument><expr><name>visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_window</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> , <argument><expr><name>wid</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>geometry</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>geometry</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>visual</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><name>mask_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name><name>fb_config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>wid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_map_window</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>fb_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>success</name>;</goto>

<label><name>fail_visual_id</name>:</label>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>fb_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail_fb_config</name>:</label>

<label><name>fail_screen</name>:</label>

<label><name>fail_geometry_request</name>:</label>

<label><name>success</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_platform_cleanup_swapchain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>device_enter_context</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLXContext</name></type> <name>context</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>XID</name></type> <name>window</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to make context current."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>GLXPbuffer</name></type> <name>pbuf</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>pbuffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to make context current."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>device_leave_context</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reset current context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>device_get_device_obj</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>context</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_getclientsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_swap_chain</name></name> <modifier>*</modifier></type><name>swap</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name> <init>=

<expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name><name>swap</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><name><name>swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geometry</name> <init>=

<expr><call><name>get_window_geometry</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>geometry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>geometry</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>geometry</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_clear_context</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reset current context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>gl_update</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cx</name></name></expr>,

<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cy</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>,

<argument><expr><name>XCB_CONFIG_WINDOW_WIDTH</name> <operator>|</operator> <name>XCB_CONFIG_WINDOW_HEIGHT</name></expr></argument>,

<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>device_load_swapchain</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>==</operator> <name>swap</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXContext</name></type> <name>ctx</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>XID</name></type> <name>window</name> <init>= <expr><name><name>swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to make context current."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>GLXPbuffer</name></type> <name>pbuf</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>pbuffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to make context current."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<enum>enum <name>swap_type</name> <block>{

<decl><name>SWAP_TYPE_NORMAL</name></decl>,

<decl><name>SWAP_TYPE_EXT</name></decl>,

<decl><name>SWAP_TYPE_MESA</name></decl>,

<decl><name>SWAP_TYPE_SGI</name></decl>,

}</block>;</enum>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>device_present</name><parameter_list>(<parameter><decl><type><name>gs_device_t</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>swap_type</name></name></type> <name>swap_type</name> <init>= <expr><name>SWAP_TYPE_NORMAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>plat</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XID</name></type> <name>window</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>cur_swap</name><operator>-&gt;</operator><name>wi</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>GLAD_GLX_EXT_swap_control</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>swap_type</name> <operator>=</operator> <name>SWAP_TYPE_EXT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>GLAD_GLX_MESA_swap_control</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>swap_type</name> <operator>=</operator> <name>SWAP_TYPE_MESA</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>GLAD_GLX_SGI_swap_control</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>swap_type</name> <operator>=</operator> <name>SWAP_TYPE_SGI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>xcb_conn</name> <init>= <expr><call><name>XGetXCBConnection</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>xcb_event</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>xcb_event</name> <operator>=</operator> <call><name>xcb_poll_for_event</name><argument_list>(<argument><expr><name>xcb_conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xcb_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<switch>switch <condition>(<expr><name>swap_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SWAP_TYPE_EXT</name></expr>:</case>

<expr_stmt><expr><call><name>glXSwapIntervalEXT</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SWAP_TYPE_MESA</name></expr>:</case>

<expr_stmt><expr><call><name>glXSwapIntervalMESA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SWAP_TYPE_SGI</name></expr>:</case>

<expr_stmt><expr><call><name>glXSwapIntervalSGI</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SWAP_TYPE_NORMAL</name></expr>:</case><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>glXSwapBuffers</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
