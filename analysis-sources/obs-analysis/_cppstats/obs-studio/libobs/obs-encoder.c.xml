<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-encoder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>encoder_active</name><parameter_list>(<parameter><type><name>encoder</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>os_atomic_load_bool(&amp;encoder-&gt;active)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_encoder_active</name><parameter_list>(<parameter><type><name>encoder</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>os_atomic_set_bool(&amp;encoder-&gt;active, val)</cpp:value></cpp:define>

<function><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>find_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obs</name><operator>-&gt;</operator><name>encoder_types</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>encoder_types</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>info</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_encoder_get_display_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>ei</name></expr> ?</condition><then> <expr><call><name><name>ei</name><operator>-&gt;</operator><name>get_name</name></name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_context_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>OBS_OBJ_TYPE_ENCODER</name></expr></argument>,

<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_defaults</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_defaults2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_defaults2</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type>

<name>create_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mixer_idx</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ei</name> <operator>&amp;&amp;</operator> <name><name>ei</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encoder</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_encoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>mixer_idx</name></name> <operator>=</operator> <name>mixer_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ei</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encoder ID '%s' not found"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>owns_info_id</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>ei</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name></name> <operator>=</operator> <operator>*</operator><name>ei</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>init_encoder</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"creating encoder '%s' (%s) failed"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_destroy</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_weak_encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_context_data_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>encoders_mutex</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"encoder '%s' (%s) created"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>encoder</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>obs_video_encoder_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>create_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>OBS_ENCODER_VIDEO</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>obs_audio_encoder_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mixer_idx</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>create_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>OBS_ENCODER_AUDIO</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>mixer_idx</name></expr></argument>,

<argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>receive_video</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>receive_audio</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_audio_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_convert_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>aoi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aoi</name> <operator>=</operator> <call><name>audio_output_get_info</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AUDIO_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>aoi</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>aoi</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>speakers</name></name> <operator>==</operator> <name>SPEAKERS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>speakers</name></name> <operator>=</operator> <name><name>aoi</name><operator>-&gt;</operator><name>speakers</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_audio_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_audio_info</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_video_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>voi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>voi</name> <operator>=</operator> <call><name>video_output_get_info</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>obs_encoder_get_width</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>obs_encoder_get_height</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_video_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_video_info</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>voi</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>voi</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_encoder_set_scaled_size</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>has_scaling</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_width</name> <init>= <expr><call><name>video_output_get_width</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_height</name> <init>= <expr><call><name>video_output_get_height</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>&amp;&amp;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>scaled_height</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>video_width</name> <operator>!=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>||</operator>

<name>video_height</name> <operator>!=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>scaled_height</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gpu_encode_available</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>caps</name></name> <operator>&amp;</operator> <name>OBS_ENCODER_CAP_PASS_TEXTURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>using_nv12_tex</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_convert_info</name></name></type> <name>audio_info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_audio_info</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_output_connect</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>mixer_idx</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>audio_info</name></expr></argument>, <argument><expr><name>receive_audio</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>video_scale_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_video_info</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gpu_encode_available</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>start_gpu_encode</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>start_raw_video</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>receive_video</name></expr></argument>,

<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_encoder_active</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shutdown</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>audio_output_disconnect</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>mixer_idx</name></name></expr></argument>,

<argument><expr><name>receive_audio</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gpu_encode_available</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stop_gpu_encode</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>stop_raw_video</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>, <argument><expr><name>receive_video</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shutdown</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_encoder_shutdown</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_encoder_active</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_audio_buffers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>audio_output_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>audio_output_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_encoder_actually_destroy</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encoder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>outputs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>outputs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_output_remove_encoder</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"encoder '%s' destroyed"</literal></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_audio_buffers</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_context_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>owns_info_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_destroy</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encoder</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>destroy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_context_data_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destroy</name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>destroy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>destroy_on_stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_encoder_actually_destroy</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_encoder_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_name"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_set_name</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_set_name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_context_data_setname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults2</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>settings</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_encoder_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_encoder_get_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_defaults"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_get_encoder_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ei</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ei</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>||</operator> <name><name>ei</name><operator>-&gt;</operator><name>get_properties2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>defaults</name> <init>= <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>ei</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>properties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ei</name><operator>-&gt;</operator><name>get_properties2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name><name>ei</name><operator>-&gt;</operator><name>get_properties2</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ei</name><operator>-&gt;</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name><name>ei</name><operator>-&gt;</operator><name>get_properties</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>properties</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_encoder_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_properties"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_properties2</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_properties2</name></name><argument_list>(

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>get_properties</name></name><argument_list>(

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_update</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_update"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name> <operator>&amp;&amp;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_encoder_get_extra_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_extra_data"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_extra_data</name></name> <operator>&amp;&amp;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_extra_data</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name>extra_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_encoder_get_settings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_audio_buffers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_audio_buffers</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>audio_output_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>bmalloc</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>framesize_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intitialize_audio_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_convert_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_audio_info</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <call><name>get_audio_planes</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <call><name>get_audio_size</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>speakers</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>framesize</name></name> <operator>=</operator>

<call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_frame_size</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>framesize_bytes</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>*</operator> <name><name>encoder</name><operator>-&gt;</operator><name>framesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_audio_buffers</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD_LOCAL</name> <name>bool</name></type> <name>can_reroute</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_encoder_initialize_internal</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>encoder_active</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_encoder_shutdown</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>create</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>can_reroute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>create</name></name><argument_list>(

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>can_reroute</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>intitialize_audio_encoder</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_encoder_create_rerouted</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reroute_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_reroute"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>reroute_id</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_reroute"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_reroute</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>reroute_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ei</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ei</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>type</name></name> <operator>||</operator>

<call><name>astrcmpi</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>codec</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>ei</name></expr>;</expr_stmt>

<return>return <expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_encoder_initialize</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>obs_encoder_initialize_internal</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_shutdown</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>paired_encoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>offset_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>get_callback_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_callback</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>new_packet</name></name> <operator>==</operator> <name>new_packet</name> <operator>&amp;&amp;</operator> <name><name>cb</name><operator>-&gt;</operator><name>param</name></name> <operator>==</operator> <name>param</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>DARRAY_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pause_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pause</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>last_video_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pause</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_encoder_start_internal</name><parameter_list>(

<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_callback</name></name></type> <name>cb</name> <init>= <expr><block>{<expr><name>false</name></expr>, <expr><name>new_packet</name></expr>, <expr><name>param</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>(</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>get_callback_idx</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pause_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_connection</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_start</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_start"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_start"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_start_internal</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_encoder_stop_internal</name><parameter_list>(

<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>last</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_callback_idx</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>DARRAY_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_connection</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>destroy_on_stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_encoder_actually_destroy</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_stop</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>destroyed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>new_packet</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destroyed</name> <operator>=</operator> <call><name>obs_encoder_stop_internal</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>new_packet</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>destroyed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>init_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_encoder_get_codec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_codec"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>codec</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_encoder_codec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>codec</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>obs_encoder_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_type"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>

</then><else>: <expr><name>OBS_ENCODER_AUDIO</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_encoder_type</name></name></type> <name>obs_get_encoder_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_ENCODER_AUDIO</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_set_scaled_size</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_set_scaled_size"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_set_scaled_size: "</literal>

<literal type="string">"encoder '%s' is not a video encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>encoder_active</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"encoder '%s': Cannot set the scaled "</literal>

<literal type="string">"resolution while the encoder is active"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_encoder_scaling_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_scaling_enabled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>||</operator> <name><name>encoder</name><operator>-&gt;</operator><name>scaled_height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_encoder_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_get_width: "</literal>

<literal type="string">"encoder '%s' is not a video encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_width</name></name></expr>

</then><else>: <expr><call><name>video_output_get_width</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_encoder_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_get_height: "</literal>

<literal type="string">"encoder '%s' is not a video encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>scaled_height</name></name></expr>

</then><else>: <expr><call><name>video_output_get_height</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_encoder_get_sample_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_sample_rate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_get_sample_rate: "</literal>

<literal type="string">"encoder '%s' is not an audio encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>encoder</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>samplerate</name></name></expr>

</then><else>: <expr><call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_set_video</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>voi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_set_video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_set_video: "</literal>

<literal type="string">"encoder '%s' is not a video encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>video</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>voi</name> <operator>=</operator> <call><name>video_output_get_info</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name> <operator>=</operator> <name>video</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>timebase_num</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>timebase_den</name></name> <operator>=</operator> <name><name>voi</name><operator>-&gt;</operator><name>fps_num</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_set_audio</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_set_audio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_set_audio: "</literal>

<literal type="string">"encoder '%s' is not an audio encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name> <operator>=</operator> <name>audio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>timebase_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>timebase_den</name></name> <operator>=</operator> <call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>video_t</name> <modifier>*</modifier></type><name>obs_encoder_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_set_video: "</literal>

<literal type="string">"encoder '%s' is not a video encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>audio_t</name> <modifier>*</modifier></type><name>obs_encoder_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_audio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_encoder_set_audio: "</literal>

<literal type="string">"encoder '%s' is not an audio encoder"</literal></expr></argument>,

<argument><expr><call><name>obs_encoder_get_name</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>encoder</name><operator>-&gt;</operator><name>media</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_encoder_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_active"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>encoder_active</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_sei</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sei</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_sei_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_sei_data</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>sei</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_first_video_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>first_packet</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_sei</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>sei</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>new_packet</name></name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>sent_first_packet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sei</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first_packet</name> <operator>=</operator> <operator>*</operator><name>packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_packet</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>new_packet</name></name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>sent_first_packet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>send_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_ENCODER_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>sent_first_packet</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>send_first_video_packet</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>new_packet</name></name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>full_stop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encoder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>outputs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>outputs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_output_force_stop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encoded_packet</name></name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>interleaved_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_connection</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_off_encoder_packet</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>received</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error encoding with encoder '%s'"</literal></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>full_stop</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>received</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>offset_usec</name></name> <operator>=</operator> <call><name>packet_dts_usec</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts_usec</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>/</operator> <literal type="number">1000</literal> <operator>+</operator>

<call><name>packet_dts_usec</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>encoder</name><operator>-&gt;</operator><name>offset_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>sys_dts_usec</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>sys_dts_usec</name></name> <operator>+=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>ts_offset</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_callback</name></name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send_packet</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>callbacks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>do_encode_name</name> <init>= <expr><literal type="string">"do_encode"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>do_encode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>do_encode_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>profile_encoder_encode_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>profile_encoder_encode_name</name></name> <operator>=</operator>

<call><name>profile_store_name</name><argument_list>(<argument><expr><call><name>obs_get_profiler_name_store</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"encode(%s)"</literal></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>received</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>timebase_num</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>timebase_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>timebase_den</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>timebase_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>encoder</name></name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>profile_encoder_encode_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>received</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>profile_encoder_encode_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send_off_encoder_packet</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>success</name></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>do_encode_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>video_pause_check_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>last_video_ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>video_pause_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ignore_frame</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pause</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ignore_frame</name> <operator>=</operator> <call><name>video_pause_check_internal</name><argument_list>(<argument><expr><name>pause</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pause</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ignore_frame</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>receive_video_name</name> <init>= <expr><literal type="string">"receive_video"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>receive_video</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>receive_video_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>paired_encoder</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_frame</name></name></type> <name>enc_frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name> <operator>&amp;&amp;</operator> <name>pair</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pair</name><operator>-&gt;</operator><name>first_received</name></name> <operator>||</operator>

<name><name>pair</name><operator>-&gt;</operator><name>first_raw_ts</name></name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>wait_for_audio</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>video_pause_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>wait_for_audio</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_encode</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc_frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>+=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>timebase_num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>wait_for_audio</name>:</label>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>receive_video_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>push_back_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>offset_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>calc_offset_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>v_start_ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>a_start_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><name>v_start_ts</name> <operator>-</operator> <name>a_start_ts</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>offset</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>encoder</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>/</operator>

<literal type="number">1000000000ULL</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name> <operator>*</operator> <name><name>encoder</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>start_from_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v_start_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_data</name></name></type> <name>audio</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>circlebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>first_raw_ts</name></name> <operator>&lt;</operator> <name>v_start_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <call><name>calc_offset_size</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>v_start_ts</name></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>first_raw_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>push_back_audio</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>audio</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer_audio_name</name> <init>= <expr><literal type="string">"buffer_audio"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buffer_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>buffer_audio_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <name><name>encoder</name><operator>-&gt;</operator><name>blocksize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>&amp;&amp;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>paired_encoder</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>end_ts</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>v_start_ts</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>paired_encoder</name><operator>-&gt;</operator><name>start_ts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v_start_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_ts</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>encoder</name><operator>-&gt;</operator><name>samplerate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_ts</name> <operator>&lt;=</operator> <name>v_start_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;</operator> <name>v_start_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <call><name>calc_offset_size</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>v_start_ts</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;=</operator> <name>v_start_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_audio</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name>v_start_ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v_start_ts</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>start_from_buffer</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>v_start_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>paired_encoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>start_ts</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>push_back_audio</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>buffer_audio_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_audio_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_frame</name></name></type> <name>enc_frame</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>encoder</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>audio_output_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>framesize_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>audio_output_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>encoder</name><operator>-&gt;</operator><name>framesize_bytes</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>encoder</name><operator>-&gt;</operator><name>framesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_frame</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_encode</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc_frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>+=</operator> <name><name>encoder</name><operator>-&gt;</operator><name>framesize</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pause_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cutoff_frames</name> <init>= <expr><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cutoff_frames</name> <operator>=</operator> <call><name>ns_to_audio_frames</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>cutoff_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cutoff_frames</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unpause_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cutoff_frames</name> <init>= <expr><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cutoff_frames</name> <operator>=</operator> <call><name>ns_to_audio_frames</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>cutoff_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>cutoff_frames</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>frames</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cutoff_frames</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>audio_pause_check_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>end_ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_ts</name> <operator>=</operator>

<name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <call><name>audio_frames_to_ns</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pause</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>&lt;=</operator> <name>end_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pause_audio</name><argument_list>(<argument><expr><name>pause</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>frames</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&amp;&amp;</operator>

<name><name>pause</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>&lt;=</operator> <name>end_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unpause_audio</name><argument_list>(<argument><expr><name>pause</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>frames</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audio_pause_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ignore_audio</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pause</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ignore_audio</name> <operator>=</operator> <call><name>audio_pause_check_internal</name><argument_list>(<argument><expr><name>pause</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-=</operator> <name><name>pause</name><operator>-&gt;</operator><name>ts_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pause</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ignore_audio</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>receive_audio_name</name> <init>= <expr><literal type="string">"receive_audio"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>receive_audio</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>receive_audio_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_data</name></name></type> <name>audio</name> <init>= <expr><operator>*</operator><name>in</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>first_raw_ts</name></name> <operator>=</operator> <name><name>audio</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>first_received</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_audio</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>audio_pause_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>pause</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio</name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buffer_audio</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>encoder</name><operator>-&gt;</operator><name>audio_input_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;=</operator>

<name><name>encoder</name><operator>-&gt;</operator><name>framesize_bytes</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_audio_data</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>mix_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>receive_audio_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_add_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_remove_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_erase_item</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>outputs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_packet_create_instance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>p_refs</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_refs</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p_refs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_refs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_duplicate_encoder_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_encoder_packet_create_instance</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_free_encoder_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_encoder_packet_release</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_packet_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>p_refs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><name>p_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_packet_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>p_refs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><name>p_refs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>p_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_set_preferred_video_format</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name> <operator>||</operator> <name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>encoder</name><operator>-&gt;</operator><name>preferred_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>video_format</name></name></type>

<name>obs_encoder_get_preferred_video_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name> <operator>||</operator> <name><name>encoder</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_ENCODER_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VIDEO_FORMAT_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>encoder</name><operator>-&gt;</operator><name>preferred_format</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_addref</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_encoder_release</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>control</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_encoder_destroy</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_weak_encoder_release</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_encoder_addref</name><parameter_list>(<parameter><decl><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_weak_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_encoder_release</name><parameter_list>(<parameter><decl><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>obs_encoder_get_ref</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>obs_weak_encoder_get_encoder</name><argument_list>(<argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>obs_encoder_get_weak_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>weak</name> <init>= <expr><name><name>encoder</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_weak_encoder_addref</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>weak</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>obs_weak_encoder_get_encoder</name><parameter_list>(<parameter><decl><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_get_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>weak</name><operator>-&gt;</operator><name>encoder</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_weak_encoder_references_encoder</name><parameter_list>(<parameter><decl><type><name>obs_weak_encoder_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>,

<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>weak</name> <operator>&amp;&amp;</operator> <name>encoder</name> <operator>&amp;&amp;</operator> <name><name>weak</name><operator>-&gt;</operator><name>encoder</name></name> <operator>==</operator> <name>encoder</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_encoder_get_type_data</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_type_data"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>type_data</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_encoder_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_id"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>id</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_get_encoder_caps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoder_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_encoder</name><argument_list>(<argument><expr><name>encoder_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>caps</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_encoder_get_caps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_get_caps"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>encoder</name><operator>-&gt;</operator><name>orig_info</name><operator>.</operator><name>caps</name></name></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_encoder_paused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_encoder_valid</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="string">"obs_encoder_paused"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
