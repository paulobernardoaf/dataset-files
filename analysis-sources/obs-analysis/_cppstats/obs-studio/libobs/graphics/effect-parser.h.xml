<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\effect-parser.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/darray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/cf-parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shader-parser.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>dstr</name>;</struct_decl>

<enum>enum <name>ep_var_type</name> <block>{

<decl><name>EP_VAR_NONE</name></decl>,

<decl><name>EP_VAR_IN</name> <init>= <expr><name>EP_VAR_NONE</name></expr></init></decl>,

<decl><name>EP_VAR_INOUT</name></decl>,

<decl><name>EP_VAR_OUT</name></decl>,

<decl><name>EP_VAR_UNIFORM</name></decl>

}</block>;</enum>

<struct>struct <name>ep_var</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>ep_var_type</name></name></type> <name>var_type</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_var_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>epv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>epv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_var_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>epv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epv</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ep_param</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>default_val</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>properties</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_const</name></decl>, <decl><type ref="prev"/><name>is_property</name></decl>, <decl><type ref="prev"/><name>is_uniform</name></decl>, <decl><type ref="prev"/><name>is_texture</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>writeorder</name></decl>, <decl><type ref="prev"/><name>array_count</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_param</argument>)</argument_list></macro> <expr_stmt><expr><name>annotations</name></expr>;</expr_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ep_param_writevar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>use_params</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_param_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>epp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_property</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_const</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_uniform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>is_property</name></name> <operator>=</operator> <name>is_property</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>is_const</name></name> <operator>=</operator> <name>is_const</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>is_uniform</name></name> <operator>=</operator> <name>is_uniform</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>is_texture</name></name> <operator>=</operator> <operator>(</operator><call><name>astrcmp_n</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"texture"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>writeorder</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epp</name><operator>-&gt;</operator><name>array_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_param_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>epp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>epp</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_param_free</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ep_struct</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_var</argument>)</argument_list></macro> <expr_stmt><expr><name>vars</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>written</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_struct_mapped</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eps</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>eps</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mapping</name> <operator>!=</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_struct_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_struct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_struct_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eps</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_var_free</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ep_sampler</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>states</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>values</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>written</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_sampler_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_sampler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_sampler_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eps</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eps</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ep_pass</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>vertex_program</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>fragment_program</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_pass_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_pass</name></name> <modifier>*</modifier></type><name>epp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>epp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_pass</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_pass_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_pass</name></name> <modifier>*</modifier></type><name>epp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>vertex_program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epp</name><operator>-&gt;</operator><name>fragment_program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ep_technique</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_pass</argument>)</argument_list></macro> <expr_stmt><expr><name>passes</name></expr>;</expr_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_technique_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_technique</name></name> <modifier>*</modifier></type><name>ept</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ept</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_technique</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_technique_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_technique</name></name> <modifier>*</modifier></type><name>ept</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ept</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_pass_free</name><argument_list>(<argument><expr><name><name>ept</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>ept</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>ept</name><operator>-&gt;</operator><name>passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ep_func</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret_type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>contents</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_var</argument>)</argument_list></macro> <expr_stmt><expr><name>param_vars</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><name>func_deps</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><name>struct_deps</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><name>param_deps</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><name>sampler_deps</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>written</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_func_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>epf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ret_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>epf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_func</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epf</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epf</name><operator>-&gt;</operator><name>ret_type</name></name> <operator>=</operator> <name>ret_type</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_func_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>epf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>epf</name><operator>-&gt;</operator><name>param_vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_var_free</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>param_vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>ret_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>epf</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>param_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>func_deps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>struct_deps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>param_deps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>epf</name><operator>-&gt;</operator><name>sampler_deps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>effect_parser</name> <block>{

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_param</argument>)</argument_list></macro> <expr_stmt><expr><name>params</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_struct</argument>)</argument_list></macro> <expr_stmt><expr><name>structs</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_func</argument>)</argument_list></macro> <expr_stmt><expr><name>funcs</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_sampler</argument>)</argument_list></macro> <expr_stmt><expr><name>samplers</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct ep_technique</argument>)</argument_list></macro> <expr_stmt><expr><name>techniques</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct cf_lexer</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct cf_token</argument>)</argument_list></macro> <expr_stmt><expr><name>tokens</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>cur_pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_parser</name></name></type> <name>cfp</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>techniques</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cur_pass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ep_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>ep_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>effect_string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
