<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\texture-render.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics.h"</cpp:file></cpp:include>

<struct>struct <name>gs_texture_render</name> <block>{

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>target</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_zs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>zsformat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rendered</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>gs_texrender_create</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>zsformat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_texture_render</name></name> <modifier>*</modifier></type><name>texrender</name></decl>;</decl_stmt>

<expr_stmt><expr><name>texrender</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_texture_render</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>zsformat</name></name> <operator>=</operator> <name>zsformat</name></expr>;</expr_stmt>

<return>return <expr><name>texrender</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texrender_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>texrender</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_zstencil_destroy</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>zs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>texrender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>texrender_resetbuffer</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>texrender</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_zstencil_destroy</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>zs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>zs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_RENDER_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texrender</name><operator>-&gt;</operator><name>zsformat</name></name> <operator>!=</operator> <name>GS_ZS_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>zs</name></name> <operator>=</operator> <call><name>gs_zstencil_create</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>zsformat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>texrender</name><operator>-&gt;</operator><name>zs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texrender_begin</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>texrender</name> <operator>||</operator> <name><name>texrender</name><operator>-&gt;</operator><name>rendered</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cx</name> <operator>||</operator> <operator>!</operator><name>cy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texrender</name><operator>-&gt;</operator><name>cx</name></name> <operator>!=</operator> <name>cx</name> <operator>||</operator> <name><name>texrender</name><operator>-&gt;</operator><name>cy</name></name> <operator>!=</operator> <name>cy</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>texrender_resetbuffer</name><argument_list>(<argument><expr><name>texrender</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_viewport_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_projection_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_identity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>prev_target</name></name> <operator>=</operator> <call><name>gs_get_render_target</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>prev_zs</name></name> <operator>=</operator> <call><name>gs_get_zstencil_target</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_set_render_target</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>zs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_set_viewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texrender_end</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>texrender</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_set_render_target</name><argument_list>(<argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>prev_target</name></name></expr></argument>, <argument><expr><name><name>texrender</name><operator>-&gt;</operator><name>prev_zs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_projection_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_viewport_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>rendered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texrender_reset</name><parameter_list>(<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>texrender</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>texrender</name><operator>-&gt;</operator><name>rendered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texrender_get_texture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>texrender</name></expr> ?</condition><then> <expr><name><name>texrender</name><operator>-&gt;</operator><name>target</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
