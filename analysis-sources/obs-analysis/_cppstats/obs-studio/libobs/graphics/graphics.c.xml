<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\graphics.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/bmem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"axisang.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"effect-parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"effect.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD_LOCAL</name> <name>graphics_t</name> <modifier>*</modifier></type><name>thread_graphics</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gs_obj_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Null '%s' parameter"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>gs_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread_graphics</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: called while not in a graphics context"</literal></expr></argument>,

<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr_valid</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gs_obj_valid(ptr, func, #ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gs_valid_p</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>param1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(gs_valid(func) &amp;&amp; ptr_valid(param1, func))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gs_valid_p2</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>param1</name></type></parameter>, <parameter><type><name>param2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(gs_valid(func) &amp;&amp; ptr_valid(param1, func) &amp;&amp; ptr_valid(param2, func))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gs_valid_p3</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>param1</name></type></parameter>, <parameter><type><name>param2</name></type></parameter>, <parameter><type><name>param3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(gs_valid(func) &amp;&amp; ptr_valid(param1, func) &amp;&amp; ptr_valid(param2, func) &amp;&amp; ptr_valid(param3, func))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMMEDIATE_COUNT</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>gs_enum_adapters</name><parameter_list>(<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_enum_adapters"</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enum_adapters</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enum_adapters</name></name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"Default"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>gs_init_image_deps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>gs_free_image_deps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>load_graphics_imports</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_exports</name></name> <modifier>*</modifier></type><name>exports</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>graphics_init_immediate_vb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graphics_subsystem</name></name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>vbd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vbd</name> <operator>=</operator> <call><name>gs_vbdata_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>IMMEDIATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IMMEDIATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IMMEDIATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IMMEDIATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>num_tex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_tvertarray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IMMEDIATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>immediate_vertbuffer</name></name> <operator>=</operator>

<call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_vertexbuffer_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>vbd</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>immediate_vertbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>graphics_init_sprite_vb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graphics_subsystem</name></name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>vbd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vbd</name> <operator>=</operator> <call><name>gs_vbdata_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>num_tex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_tvertarray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vbd</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec3</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name> <operator>=</operator> <call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_vertexbuffer_create</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>vbd</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>graphics_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graphics_subsystem</name></name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>top_mat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>matrix_stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enter_context</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graphics_init_immediate_vb</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graphics_init_sprite_vb</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>effect_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_blend_function_separate</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>GS_BLEND_SRCALPHA</name></expr></argument>, <argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>,

<argument><expr><name>GS_BLEND_ONE</name></expr></argument>, <argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_c</name></name> <operator>=</operator> <name>GS_BLEND_SRCALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_c</name></name> <operator>=</operator> <name>GS_BLEND_INVSRCALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_a</name></name> <operator>=</operator> <name>GS_BLEND_ONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_a</name></name> <operator>=</operator> <name>GS_BLEND_INVSRCALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_leave_context</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_init_image_deps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gs_create</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pgraphics</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><name>GS_ERROR_FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>graphics_subsystem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>effect_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>os_dlopen</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>GS_ERROR_MODULE_NOT_FOUND</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_graphics_imports</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>exports</name></name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>module</name></name></expr></argument>,

<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>!=</operator> <name>GS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graphics_init</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>GS_ERROR_FAIL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pgraphics</name> <operator>=</operator> <name>graphics</name></expr>;</expr_stmt>

<return>return <expr><name>errcode</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>gs_destroy</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errcode</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>gs_effect_actually_destroy</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>gs_destroy</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ptr_valid</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>, <argument><expr><literal type="string">"gs_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>thread_graphics</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>graphics</name><operator>-&gt;</operator><name>first_effect</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>thread_graphics</name> <operator>=</operator> <name>graphics</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enter_context</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>effect</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>effect</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_effect_actually_destroy</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_vertexbuffer_destroy</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_vertexbuffer_destroy</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>immediate_vertbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_destroy</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_graphics</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>effect_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>matrix_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>viewport_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>blend_state_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_dlclose</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_free_image_deps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_enter_context</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ptr_valid</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>, <argument><expr><literal type="string">"gs_enter_context"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_current</name> <init>= <expr><name>thread_graphics</name> <operator>==</operator> <name>graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thread_graphics</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_current</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>thread_graphics</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_current</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enter_context</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_graphics</name> <operator>=</operator> <name>graphics</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_leave_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_leave_context"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_leave_context</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_graphics</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>graphics_t</name> <modifier>*</modifier></type><name>gs_get_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>thread_graphics</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_get_device_obj</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_device_obj"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_device_obj</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gs_get_device_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_device_name"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_name</name></name><argument_list>()</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gs_get_device_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_device_type"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_type</name></name><argument_list>()</argument_list></call></expr>

</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_matrix</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>graphics</name><operator>-&gt;</operator><name>matrix_stack</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>graphics</name><operator>-&gt;</operator><name>cur_matrix</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_push"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>mat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top_mat</name> <init>= <expr><call><name>top_matrix</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>matrix4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>matrix_stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_matrix</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_pop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_matrix</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tried to pop last matrix on stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>matrix_stack</name></name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_matrix</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_identity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_identity"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_transpose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_transpose"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_transpose</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_set"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_get"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_mul"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_rotquat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>rot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_rotquat"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_rotate_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>rot</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_rotaa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>axisang</name></name> <modifier>*</modifier></type><name>rot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_rotaa"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_rotate_aa_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>rot</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_translate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_translate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_translate3v_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_scale"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>matrix4_scale_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_rotaa4f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>axisang</name></name></type> <name>aa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_rotaa4f"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>axisang_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aa</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_rotate_aa_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aa</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_translate3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_matrix_translate3f"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_mat</name> <operator>=</operator> <call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_translate3v_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_matrix_scale3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>top_mat</name> <init>= <expr><call><name>top_matrix</name><argument_list>(<argument><expr><name>thread_graphics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>top_mat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_scale_i</name><argument_list>(<argument><expr><name>top_mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>top_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_immediate_arrays</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>verts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_render_start</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_render_start"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>using_immediate</name></name> <operator>=</operator> <operator>!</operator><name>b_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_immediate_arrays</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_new</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name></name> <operator>=</operator> <call><name>gs_vbdata_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name></name> <operator>=</operator> <call><name>gs_vertexbuffer_get_data</name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>immediate_vertbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IMMEDIATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>points</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>normals</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>colors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>IMMEDIATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>IMMEDIATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>IMMEDIATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>capacity</name> <operator>=</operator> <name>IMMEDIATE_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>min_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_render_stop</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_draw_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_render_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>using_immediate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>verts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>gs_vbdata_destroy</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_render_stop: normal count does "</literal>

<literal type="string">"not match vertex count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>min_size</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_render_stop: color count does "</literal>

<literal type="string">"not match vertex count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>min_size</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>!=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_render_stop: texture vertex count does "</literal>

<literal type="string">"not match vertex count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>min_size</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>using_immediate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_vertexbuffer_flush</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>immediate_vertbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_vertexbuffer</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>immediate_vertbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_indexbuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_immediate_arrays</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vb</name> <init>= <expr><call><name>gs_render_save</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_load_vertexbuffer</name><argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_indexbuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vertexbuffer_destroy</name><argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>gs_render_save</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_tex</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_render_save"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>using_immediate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_vbdata_destroy</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>num_tex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>num_tex</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>num_tex</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><name>num_tex</name></expr>]</index></name><operator>.</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>colors</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>num_tex</name></name> <operator>=</operator> <name>num_tex</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>num_tex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>=</operator>

<call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_tvertarray</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>array</name> <operator>=</operator>

<name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>array</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reset_immediate_arrays</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gs_vertexbuffer_create</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>vbd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertex2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>v3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_verte"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vertex3v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertex3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>v3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_vertex3f"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vertex3v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_normal3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>v3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_normal3f"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_normal3v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>validvertsize</name><parameter_list>(<parameter><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>using_immediate</name></name> <operator>&amp;&amp;</operator> <name>num</name> <operator>==</operator> <name>IMMEDIATE_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s: tried to use over %u "</literal>

<literal type="string">"for immediate rendering"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>IMMEDIATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_color</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_color"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validvertsize</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"gs_color"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texcoord</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>v2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texcoord"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texcoord2v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertex2v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>v3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_vertex2v"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vertex3v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertex3v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_vertex3v"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validvertsize</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>verts</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"gs_vertex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>verts</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_normal3v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_normal3v"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validvertsize</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"gs_normal"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>norms</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_color4v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texcoord2v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texcoord2v"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validvertsize</name><argument_list>(<argument><expr><name>graphics</name></expr></argument>, <argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><name>unit</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>,

<argument><expr><literal type="string">"gs_texcoord"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>texverts</name><index>[<expr><name>unit</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>input_t</name> <modifier>*</modifier></type><name>gs_get_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>gs_get_effect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_effect"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>thread_graphics</name></expr> ?</condition><then> <expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>cur_effect</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>find_cached_effect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>first_effect</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>effect</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>effect_path</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <name><name>effect</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>effect</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>gs_effect_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_effect_create_from_file"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>find_cached_effect</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>effect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>effect</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file_string</name> <operator>=</operator> <call><name>os_quick_read_utf8_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not load effect file '%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>gs_effect_create</name><argument_list>(<argument><expr><name>file_string</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>effect</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>gs_effect_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>effect_string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_effect_create"</literal></expr></argument>, <argument><expr><name>effect_string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_effect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>effect_parser</name></name></type> <name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>graphics</name></name> <operator>=</operator> <name>thread_graphics</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>effect_path</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ep_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>effect_string</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error_string</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>error_string</name> <operator>=</operator>

<call><name>error_data_buildstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>.</operator><name>cfp</name><operator>.</operator><name>error_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_effect_destroy</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>effect</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>effect</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>effect_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>effect</name><operator>-&gt;</operator><name>effect_path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>thread_graphics</name><operator>-&gt;</operator><name>first_effect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>first_effect</name></name> <operator>=</operator> <name>effect</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>effect_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ep_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>effect</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_vertexshader_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_vertexshader_create_from_file"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file_string</name> <operator>=</operator> <call><name>os_quick_read_utf8_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not load vertex shader file '%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name>gs_vertexshader_create</name><argument_list>(<argument><expr><name>file_string</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shader</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_pixelshader_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_pixelshader_create_from_file"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file_string</name> <operator>=</operator> <call><name>os_quick_read_utf8_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not load pixel shader file '%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name>gs_pixelshader_create</name><argument_list>(<argument><expr><name>file_string</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shader</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>gs_create_texture_file_data</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tex</name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tex</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>assign_sprite_rect</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>assign_sprite_uv</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_sprite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fcx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fcy</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>start_u</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end_u</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end_v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>tvarray</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_zero</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>tvarray</name></expr></argument>, <argument><expr><name>start_u</name></expr></argument>, <argument><expr><name>start_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>tvarray</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end_u</name></expr></argument>, <argument><expr><name>start_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>tvarray</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>start_u</name></expr></argument>, <argument><expr><name>end_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>tvarray</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>end_u</name></expr></argument>, <argument><expr><name>end_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>build_sprite_norm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fcx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fcy</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>start_u</name></decl>, <decl><type ref="prev"/><name>end_u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>start_v</name></decl>, <decl><type ref="prev"/><name>end_v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assign_sprite_uv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_u</name></expr></argument>, <argument><expr><operator>(</operator><name>flip</name> <operator>&amp;</operator> <name>GS_FLIP_U</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign_sprite_uv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_v</name></expr></argument>, <argument><expr><operator>(</operator><name>flip</name> <operator>&amp;</operator> <name>GS_FLIP_V</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_sprite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><name>start_u</name></expr></argument>, <argument><expr><name>end_u</name></expr></argument>, <argument><expr><name>start_v</name></expr></argument>, <argument><expr><name>end_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>build_subsprite_norm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fsub_x</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fsub_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fsub_cx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fsub_cy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fcx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fcy</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>start_u</name></decl>, <decl><type ref="prev"/><name>end_u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>start_v</name></decl>, <decl><type ref="prev"/><name>end_v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flip</name> <operator>&amp;</operator> <name>GS_FLIP_U</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_u</name> <operator>=</operator> <name>fsub_x</name> <operator>/</operator> <name>fcx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_u</name> <operator>=</operator> <operator>(</operator><name>fsub_x</name> <operator>+</operator> <name>fsub_cx</name><operator>)</operator> <operator>/</operator> <name>fcx</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start_u</name> <operator>=</operator> <operator>(</operator><name>fsub_x</name> <operator>+</operator> <name>fsub_cx</name><operator>)</operator> <operator>/</operator> <name>fcx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_u</name> <operator>=</operator> <name>fsub_x</name> <operator>/</operator> <name>fcx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flip</name> <operator>&amp;</operator> <name>GS_FLIP_V</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_v</name> <operator>=</operator> <name>fsub_y</name> <operator>/</operator> <name>fcy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_v</name> <operator>=</operator> <operator>(</operator><name>fsub_y</name> <operator>+</operator> <name>fsub_cy</name><operator>)</operator> <operator>/</operator> <name>fcy</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start_v</name> <operator>=</operator> <operator>(</operator><name>fsub_y</name> <operator>+</operator> <name>fsub_cy</name><operator>)</operator> <operator>/</operator> <name>fcy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_v</name> <operator>=</operator> <name>fsub_y</name> <operator>/</operator> <name>fcy</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>build_sprite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fsub_cx</name></expr></argument>, <argument><expr><name>fsub_cy</name></expr></argument>, <argument><expr><name>start_u</name></expr></argument>, <argument><expr><name>end_u</name></expr></argument>, <argument><expr><name>start_v</name></expr></argument>, <argument><expr><name>end_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>build_sprite_rect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fcx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fcy</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>start_u</name></decl>, <decl><type ref="prev"/><name>end_u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>start_v</name></decl>, <decl><type ref="prev"/><name>end_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assign_sprite_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_u</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name>flip</name> <operator>&amp;</operator> <name>GS_FLIP_U</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign_sprite_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_v</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>(</operator><name>flip</name> <operator>&amp;</operator> <name>GS_FLIP_V</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_sprite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><name>start_u</name></expr></argument>, <argument><expr><name>end_u</name></expr></argument>, <argument><expr><name>start_v</name></expr></argument>, <argument><expr><name>end_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_draw_sprite</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fcx</name></decl>, <decl><type ref="prev"/><name>fcy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tex</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gs_get_texture_type</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A sprite must be a 2D texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name> <operator>||</operator> <operator>!</operator><name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A sprite cannot be drawn without "</literal>

<literal type="string">"a width/height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fcx</name> <operator>=</operator> <ternary><condition><expr><name>width</name></expr> ?</condition><then> <expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr> </then><else>: <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>fcy</name> <operator>=</operator> <ternary><condition><expr><name>height</name></expr> ?</condition><then> <expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr> </then><else>: <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>gs_vertexbuffer_get_data</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tex</name> <operator>&amp;&amp;</operator> <call><name>gs_texture_is_rect</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_sprite_rect</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_sprite_norm</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gs_vertexbuffer_flush</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_vertexbuffer</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_indexbuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>GS_TRISTRIP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_draw_sprite_subregion</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sub_x</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>sub_y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sub_cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sub_cy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fcx</name></decl>, <decl><type ref="prev"/><name>fcy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tex</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gs_get_texture_type</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GS_TEXTURE_2D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A sprite must be a 2D texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fcx</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fcy</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>gs_vertexbuffer_get_data</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_subsprite_norm</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>sub_x</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>sub_y</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>sub_cx</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>sub_cy</name></expr></argument>, <argument><expr><name>fcx</name></expr></argument>, <argument><expr><name>fcy</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_vertexbuffer_flush</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_vertexbuffer</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>sprite_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_indexbuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>GS_TRISTRIP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_draw_cube_backdrop</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>rot</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>znear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_reset_viewport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_reset_viewport"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_set_viewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_2d_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_set_2d_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_ortho</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1024.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_3d_mode</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>fovy</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zvar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>fovy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>znear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>zvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_viewport_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_viewport_push"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name> <init>=

<expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>viewport_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_get_viewport</name><argument_list>(<argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_viewport_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_viewport_pop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>viewport_stack</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rect</name> <operator>=</operator> <call><name>da_end</name><argument_list>(<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>viewport_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_set_viewport</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_pop_back</name><argument_list>(<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>viewport_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texture_set_image</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>linesize_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_texture_set_image"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_texture_map</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesize_out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row_copy</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>linesize</name> <operator>&lt;</operator> <name>linesize_out</name><operator>)</operator></expr> ?</condition><then> <expr><name>linesize</name></expr> </then><else>: <expr><name>linesize_out</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flip</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>y</name> <operator>*</operator> <name>linesize_out</name></expr></argument>,

<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,

<argument><expr><name>row_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>linesize</name> <operator>==</operator> <name>linesize_out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>row_copy</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>y</name> <operator>*</operator> <name>linesize_out</name></expr></argument>,

<argument><expr><name>data</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>row_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gs_texture_unmap</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_cubetexture_set_image</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>side</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>invert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_perspective</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>aspect</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>far</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xmin</name></decl>, <decl><type ref="prev"/><name>xmax</name></decl>, <decl><type ref="prev"/><name>ymin</name></decl>, <decl><type ref="prev"/><name>ymax</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_perspective"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ymax</name> <operator>=</operator> <name>near</name> <operator>*</operator> <call><name>tanf</name><argument_list>(<argument><expr><call><name>RAD</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ymin</name> <operator>=</operator> <operator>-</operator><name>ymax</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xmin</name> <operator>=</operator> <name>ymin</name> <operator>*</operator> <name>aspect</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xmax</name> <operator>=</operator> <name>ymax</name> <operator>*</operator> <name>aspect</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_frustum</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>xmin</name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>, <argument><expr><name>ymin</name></expr></argument>,

<argument><expr><name>ymax</name></expr></argument>, <argument><expr><name>near</name></expr></argument>, <argument><expr><name>far</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_blend_state_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_blend_state_push"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>blend_state_stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_blend_state_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blend_state</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_blend_state_pop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>da_end</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>blend_state_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_blend_function_separate</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>src_c</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>dest_c</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>src_a</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dest_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_pop_back</name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>blend_state_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_reset_blend_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_preprocessor_name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_c</name></name> <operator>!=</operator> <name>GS_BLEND_SRCALPHA</name> <operator>||</operator>

<name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_c</name></name> <operator>!=</operator> <name>GS_BLEND_INVSRCALPHA</name> <operator>||</operator>

<name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_a</name></name> <operator>!=</operator> <name>GS_BLEND_ONE</name> <operator>||</operator>

<name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_a</name></name> <operator>!=</operator> <name>GS_BLEND_INVSRCALPHA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_blend_function_separate</name><argument_list>(<argument><expr><name>GS_BLEND_SRCALPHA</name></expr></argument>,

<argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>, <argument><expr><name>GS_BLEND_ONE</name></expr></argument>,

<argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gs_preprocessor_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_preprocessor_name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_preprocessor_name</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>gs_swapchain_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_init_data</name></name></type> <name>new_data</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_swapchain_create"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_data</name><operator>.</operator><name>num_backbuffers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_data</name><operator>.</operator><name>num_backbuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_swapchain_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>new_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_resize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_resize"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_resize</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_get_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_size"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_size</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_get_width</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_width</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_get_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_height</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_pow2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>size</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pow2tex</name> <init>= <expr><call><name>is_pow2</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_pow2</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>uses_mipmaps</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_BUILD_MIPMAPS</name> <operator>||</operator> <name>levels</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uses_mipmaps</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pow2tex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use mipmaps with a "</literal>

<literal type="string">"non-power-of-two texture. Disabling "</literal>

<literal type="string">"mipmaps for this texture."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uses_mipmaps</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>GS_BUILD_MIPMAPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>levels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uses_mipmaps</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>GS_RENDER_TARGET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use mipmaps with render targets. "</literal>

<literal type="string">"Disabling mipmaps for this texture."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>GS_BUILD_MIPMAPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>levels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>, <argument><expr><name>color_format</name></expr></argument>,

<argument><expr><name>levels</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_cubetexture_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pow2tex</name> <init>= <expr><call><name>is_pow2</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>uses_mipmaps</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_BUILD_MIPMAPS</name> <operator>||</operator> <name>levels</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_cubetexture_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uses_mipmaps</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pow2tex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use mipmaps with a "</literal>

<literal type="string">"non-power-of-two texture. Disabling "</literal>

<literal type="string">"mipmaps for this texture."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uses_mipmaps</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>GS_BUILD_MIPMAPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>levels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uses_mipmaps</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>GS_RENDER_TARGET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use mipmaps with render targets. "</literal>

<literal type="string">"Disabling mipmaps for this texture."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>GS_BUILD_MIPMAPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>levels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_cubetexture_create</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>color_format</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_voltexture_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_voltexture_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_voltexture_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,

<argument><expr><name>color_format</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>gs_zstencil_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_zstencil_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_zstencil_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_zstencil_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>gs_stagesurface_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>color_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_stagesurface_create</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>color_format</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>gs_samplerstate_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_sampler_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_samplerstate_create"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_samplerstate_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_vertexshader_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_vertexshader_create"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_vertexshader_create</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_pixelshader_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_pixelshader_create"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_pixelshader_create</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>error_string</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>gs_vertexbuffer_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_vertexbuffer_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_DUP_BUFFER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>new_data</name> <init>= <expr><call><name>gs_vbdata_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_data</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP_VAL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (data-&gt;val) new_data-&gt;val = bmemdup( data-&gt;val, sizeof(*data-&gt;val) * data-&gt;num); } while (false)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DUP_VAL</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DUP_VAL</name><argument_list>(<argument><expr><name>normals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DUP_VAL</name><argument_list>(<argument><expr><name>tangents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DUP_VAL</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DUP_VAL</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_data</name><operator>-&gt;</operator><name>num_tex</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_data</name><operator>-&gt;</operator><name>tvarray</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_tvertarray</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>num_tex</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_tvertarray</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_tvertarray</name></name> <modifier>*</modifier></type><name>new_tv</name> <init>=

<expr><operator>&amp;</operator><name><name>new_data</name><operator>-&gt;</operator><name>tvarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_tv</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_tv</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator>

<call><name>bmemdup</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_vertexbuffer_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>gs_indexbuffer_create</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_index_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indices</name> <operator>&amp;&amp;</operator> <name>num</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GS_DUP_BUFFER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>GS_UNSIGNED_SHORT</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>indices</name> <operator>=</operator> <call><name>bmemdup</name><argument_list>(<argument><expr><name>indices</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_indexbuffer_create</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>gs_timer_create</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_timer_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>gs_timer_range_create</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_range_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_timer_range_create</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_texture_type</name></name></type> <name>gs_get_texture_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_get_texture_type"</literal></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_TEXTURE_2D</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_texture_type</name></name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_vertexbuffer</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_vertexbuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_vertexbuffer</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>vertbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_indexbuffer</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_indexbuffer"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_indexbuffer</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_texture</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_texture"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_texture</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_samplerstate</name><parameter_list>(<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>samplerstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_samplerstate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_samplerstate</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>samplerstate</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_vertexshader</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>vertshader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_vertexshader"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_vertexshader</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>vertshader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_pixelshader</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>pixelshader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_pixelshader"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_pixelshader</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>pixelshader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_default_samplerstate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b_3d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_default_samplerstate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_default_samplerstate</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>b_3d</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_get_vertex_shader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_vertex_shader"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_vertex_shader</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>gs_get_pixel_shader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_pixel_shader"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_pixel_shader</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_get_render_target</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_render_target"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_render_target</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>gs_get_zstencil_target</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_zstencil_target"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_zstencil_target</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_render_target</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_set_render_target"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_set_render_target</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>tex</name></expr></argument>,

<argument><expr><name>zstencil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_cube_render_target</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>side</name></decl></parameter>,

<parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_set_cube_render_target"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_set_cube_render_target</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>cubetex</name></expr></argument>, <argument><expr><name>side</name></expr></argument>, <argument><expr><name>zstencil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_copy_texture</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_copy_texture"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_copy_texture</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_copy_texture_region</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dst_y</name></decl></parameter>,

<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_y</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>src_w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_copy_texture_region"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_copy_texture_region</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,

<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_w</name></expr></argument>, <argument><expr><name>src_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stage_texture</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_stage_texture"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_stage_texture</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_begin_frame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_begin_frame"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_begin_frame</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_begin_scene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_begin_scene"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_begin_scene</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_draw</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_draw_mode</name></name></type> <name>draw_mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start_vert</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>num_verts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_draw"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_draw</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>draw_mode</name></expr></argument>, <argument><expr><name>start_vert</name></expr></argument>,

<argument><expr><name>num_verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_end_scene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_end_scene"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_end_scene</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_load_swapchain</name><parameter_list>(<parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swapchain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_load_swapchain"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_load_swapchain</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>swapchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_clear</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>clear_flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>stencil</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_clear"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_clear</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>clear_flags</name></expr></argument>, <argument><expr><name>color</name></expr></argument>,

<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>stencil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_present</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_present"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_present</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_flush"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_flush</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_cull_mode</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_cull_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_set_cull_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_set_cull_mode</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_cull_mode</name></name></type> <name>gs_get_cull_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_get_cull_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_NEITHER</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_cull_mode</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_enable_blending</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_enable_blending"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enable_blending</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_enable_depth_test</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_enable_depth_test"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enable_depth_test</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_enable_stencil_test</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_enable_stencil_test"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enable_stencil_test</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_enable_stencil_write</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_enable_stencil_write"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enable_stencil_write</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_enable_color</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_enable_color"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_enable_color</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>,

<argument><expr><name>blue</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_blend_function</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_blend_function"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_c</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_c</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_a</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_a</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_blend_function</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_blend_function_separate</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src_c</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest_c</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>src_a</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_blend_type</name></name></type> <name>dest_a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_blend_function_separate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_c</name></name> <operator>=</operator> <name>src_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_c</name></name> <operator>=</operator> <name>dest_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>src_a</name></name> <operator>=</operator> <name>src_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graphics</name><operator>-&gt;</operator><name>cur_blend_state</name><operator>.</operator><name>dest_a</name></name> <operator>=</operator> <name>dest_a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_blend_function_separate</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>src_c</name></expr></argument>, <argument><expr><name>dest_c</name></expr></argument>, <argument><expr><name>src_a</name></expr></argument>, <argument><expr><name>dest_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_depth_function</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_depth_test</name></name></type> <name>test</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_depth_function"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_depth_function</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stencil_function</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_stencil_side</name></name></type> <name>side</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_depth_test</name></name></type> <name>test</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_stencil_function"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_stencil_function</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>side</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stencil_op</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>gs_stencil_side</name></name></type> <name>side</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>fail</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>zfail</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>gs_stencil_op_type</name></name></type> <name>zpass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_stencil_op"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_stencil_op</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>side</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>zfail</name></expr></argument>,

<argument><expr><name>zpass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_viewport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_set_viewport"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_set_viewport</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_get_viewport</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_get_viewport"</literal></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_viewport</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_set_scissor_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_set_scissor_rect"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_set_scissor_rect</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_ortho</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>zfar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_ortho"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_ortho</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>,

<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>znear</name></expr></argument>, <argument><expr><name>zfar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_frustum</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>znear</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>zfar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_frustum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_frustum</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>,

<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>znear</name></expr></argument>, <argument><expr><name>zfar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_projection_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_projection_push"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_projection_push</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_projection_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_projection_pop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_projection_pop</name></name><argument_list>(<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_swapchain_destroy</name><parameter_list>(<parameter><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swapchain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_swapchain_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swapchain</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_swapchain_destroy</name></name><argument_list>(<argument><expr><name>swapchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_destroy</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_shader_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_destroy</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gs_shader_get_num_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_get_num_params"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_get_num_params</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_param_by_idx</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_get_param_by_idx"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_get_param_by_idx</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_param_by_name</name><parameter_list>(<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_get_param_by_name"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_get_param_by_name</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_viewproj_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_get_viewproj_matrix"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_get_viewproj_matrix</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>gs_shader_get_world_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_get_world_matrix"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_get_world_matrix</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_get_param_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_shader_param_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_get_param_info"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_get_param_info</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_bool</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_bool"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_bool</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_float</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_float"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_float</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_int</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_int"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_int</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_matrix3</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_matrix3"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_matrix3</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_matrix4</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_matrix4"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_matrix4</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_vec2</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_vec2"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_vec2</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_vec3</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_vec3"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_vec3</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_vec4</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_vec4"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_vec4</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_texture</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_texture"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_texture</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_val</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_val"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_val</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_default</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_default"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_default</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_shader_set_next_sampler</name><parameter_list>(<parameter><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_shader_set_next_sampler"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_shader_set_next_sampler</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_destroy</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_texture_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_get_width"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_get_width</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_texture_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_get_height"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_get_height</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>gs_texture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_get_color_format"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_get_color_format</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texture_map</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p3</name><argument_list>(<argument><expr><literal type="string">"gs_texture_map"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_map</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texture_unmap</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_unmap"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_unmap</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texture_is_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_is_rect"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_is_rect</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_is_rect</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_texture_get_obj</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_get_obj"</literal></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_get_obj</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_cubetexture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_cubetexture_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cubetex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_cubetexture_destroy</name></name><argument_list>(<argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_cubetexture_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_cubetexture_get_size"</literal></expr></argument>, <argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_cubetexture_get_size</name></name><argument_list>(<argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type>

<name>gs_cubetexture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>cubetex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_cubetexture_get_color_format"</literal></expr></argument>, <argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_cubetexture_get_color_format</name></name><argument_list>(<argument><expr><name>cubetex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_voltexture_destroy</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_voltexture_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>voltex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_voltexture_destroy</name></name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_voltexture_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_voltexture_get_width"</literal></expr></argument>, <argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_voltexture_get_width</name></name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_voltexture_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_voltexture_get_height"</literal></expr></argument>, <argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_voltexture_get_height</name></name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_voltexture_get_depth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_voltexture_get_depth"</literal></expr></argument>, <argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_voltexture_get_depth</name></name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>gs_voltexture_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_texture_t</name> <modifier>*</modifier></type><name>voltex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_voltexture_get_color_format"</literal></expr></argument>, <argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_voltexture_get_color_format</name></name><argument_list>(<argument><expr><name>voltex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stagesurface_destroy</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stagesurf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_stagesurface_destroy</name></name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_stagesurface_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_get_width"</literal></expr></argument>, <argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_stagesurface_get_width</name></name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_stagesurface_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_get_height"</literal></expr></argument>, <argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_stagesurface_get_height</name></name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_color_format</name></name></type>

<name>gs_stagesurface_get_color_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_get_color_format"</literal></expr></argument>, <argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_stagesurface_get_color_format</name></name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_stagesurface_map</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p3</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_map"</literal></expr></argument>, <argument><expr><name>stagesurf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_stagesurface_map</name></name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_stagesurface_unmap</name><parameter_list>(<parameter><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>stagesurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_unmap"</literal></expr></argument>, <argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_stagesurface_unmap</name></name><argument_list>(<argument><expr><name>stagesurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_zstencil_destroy</name><parameter_list>(<parameter><decl><type><name>gs_zstencil_t</name> <modifier>*</modifier></type><name>zstencil</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_zstencil_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zstencil</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_zstencil_destroy</name></name><argument_list>(<argument><expr><name>zstencil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_samplerstate_destroy</name><parameter_list>(<parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>samplerstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_samplerstate_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samplerstate</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_samplerstate_destroy</name></name><argument_list>(<argument><expr><name>samplerstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertexbuffer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_vertexbuffer_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vertbuffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_vertexbuffer_destroy</name></name><argument_list>(<argument><expr><name>vertbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertexbuffer_flush</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_vertexbuffer_flush"</literal></expr></argument>, <argument><expr><name>vertbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_vertexbuffer_flush</name></name><argument_list>(<argument><expr><name>vertbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_vertexbuffer_flush_direct</name><parameter_list>(<parameter><decl><type><name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_vertexbuffer_flush_direct"</literal></expr></argument>, <argument><expr><name>vertbuffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_vertexbuffer_flush_direct</name></name><argument_list>(<argument><expr><name>vertbuffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>gs_vb_data</name></name> <modifier>*</modifier></type><name>gs_vertexbuffer_get_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_vertbuffer_t</name> <modifier>*</modifier></type><name>vertbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_vertexbuffer_get_data"</literal></expr></argument>, <argument><expr><name>vertbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_vertexbuffer_get_data</name></name><argument_list>(<argument><expr><name>vertbuffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_indexbuffer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>indexbuffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_indexbuffer_destroy</name></name><argument_list>(<argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_indexbuffer_flush</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_flush"</literal></expr></argument>, <argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_indexbuffer_flush</name></name><argument_list>(<argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_indexbuffer_flush_direct</name><parameter_list>(<parameter><decl><type><name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_flush_direct"</literal></expr></argument>, <argument><expr><name>indexbuffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_indexbuffer_flush_direct</name></name><argument_list>(<argument><expr><name>indexbuffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_indexbuffer_get_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_get_data"</literal></expr></argument>, <argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_indexbuffer_get_data</name></name><argument_list>(<argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>gs_indexbuffer_get_num_indices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_get_num_indices"</literal></expr></argument>, <argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_indexbuffer_get_num_indices</name></name><argument_list>(

<argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>gs_index_type</name></name></type> <name>gs_indexbuffer_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_indexbuffer_t</name> <modifier>*</modifier></type><name>indexbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_indexbuffer_get_type"</literal></expr></argument>, <argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator>enum <name>gs_index_type</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_indexbuffer_get_type</name></name><argument_list>(<argument><expr><name>indexbuffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_destroy</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_destroy</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_begin</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_begin</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_end</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_end"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_end</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_timer_get_data</name><parameter_list>(<parameter><decl><type><name>gs_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ticks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_timer_get_data"</literal></expr></argument>, <argument><expr><name>timer</name></expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_get_data</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_range_destroy</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_range_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>range</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_range_destroy</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_range_begin</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_range_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>range</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_range_begin</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_timer_range_end</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_timer_range_end"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>range</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_range_end</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_timer_range_get_data</name><parameter_list>(<parameter><decl><type><name>gs_timer_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>disjoint</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>frequency</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p2</name><argument_list>(<argument><expr><literal type="string">"gs_timer_range_get_data"</literal></expr></argument>, <argument><expr><name>disjoint</name></expr></argument>, <argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_timer_range_get_data</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>disjoint</name></expr></argument>,

<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_nv12_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_nv12_available"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_nv12_available</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_nv12_available</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_debug_marker_begin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>markername</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_debug_marker_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>markername</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>markername</name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_debug_marker_begin</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>markername</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_debug_marker_begin_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_debug_marker_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>markername</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>markername</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>markername</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_debug_marker_begin</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>markername</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gs_debug_marker_begin</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_debug_marker_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_debug_marker_end"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_debug_marker_end</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create_from_iosurface</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iosurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_create_from_iosurface"</literal></expr></argument>, <argument><expr><name>iosurf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create_from_iosurface</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create_from_iosurface</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>iosurf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texture_rebind_iosurface</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iosurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_rebind_iosurface"</literal></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_rebind_iosurface</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_rebind_iosurface</name></name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>iosurf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_WIN32</name></expr></cpp:elif>

<function><type><name>bool</name></type> <name>gs_gdi_texture_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_gdi_texture_available"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_gdi_texture_available</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_shared_texture_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_shared_texture_available"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_shared_texture_available</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_get_duplicator_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor_idx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_monitor_info</name></name> <modifier>*</modifier></type><name>monitor_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_get_duplicator_monitor_info"</literal></expr></argument>, <argument><expr><name>monitor_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_duplicator_monitor_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_get_duplicator_monitor_info</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>monitor_idx</name></expr></argument>, <argument><expr><name>monitor_info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>gs_duplicator_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_duplicator_create"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_duplicator_create</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_duplicator_create</name></name><argument_list>(

<argument><expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>monitor_idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_duplicator_destroy</name><parameter_list>(<parameter><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_duplicator_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duplicator</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_duplicator_destroy</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_duplicator_destroy</name></name><argument_list>(<argument><expr><name>duplicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_duplicator_update_frame</name><parameter_list>(<parameter><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_duplicator_update_frame"</literal></expr></argument>, <argument><expr><name>duplicator</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_duplicator_get_texture</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_duplicator_update_frame</name></name><argument_list>(<argument><expr><name>duplicator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_duplicator_get_texture</name><parameter_list>(<parameter><decl><type><name>gs_duplicator_t</name> <modifier>*</modifier></type><name>duplicator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_duplicator_get_texture"</literal></expr></argument>, <argument><expr><name>duplicator</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_duplicator_get_texture</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_duplicator_get_texture</name></name><argument_list>(<argument><expr><name>duplicator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_create_gdi</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_create_gdi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create_gdi</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create_gdi</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_texture_get_dc</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gdi_tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_release_dc"</literal></expr></argument>, <argument><expr><name>gdi_tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_get_dc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_get_dc</name></name><argument_list>(<argument><expr><name>gdi_tex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_texture_release_dc</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gdi_tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid_p</name><argument_list>(<argument><expr><literal type="string">"gs_texture_release_dc"</literal></expr></argument>, <argument><expr><name>gdi_tex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_release_dc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>thread_graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>gs_texture_release_dc</name></name><argument_list>(<argument><expr><name>gdi_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>gs_texture_open_shared</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_open_shared"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_open_shared</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_open_shared</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>gs_texture_get_shared_handle</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_get_shared_handle"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_get_shared_handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_get_shared_handle</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GS_INVALID_HANDLE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gs_texture_acquire_sync</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_acquire_sync"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_acquire_sync</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_acquire_sync</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,

<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gs_texture_release_sync</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_release_sync"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_release_sync</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_release_sync</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_texture_create_nv12</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tex_y</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tex_uv</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_texture_create_nv12"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>height</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"NV12 textures must have dimensions "</literal>

<literal type="string">"divisible by 2."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create_nv12</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_texture_create_nv12</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>tex_y</name></expr></argument>, <argument><expr><name>tex_uv</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tex_y</name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>GS_R8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tex_uv</name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>GS_R8G8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tex_y</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>tex_uv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tex_y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>tex_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tex_uv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>tex_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tex_y</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tex_uv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name>gs_stagesurface_create_nv12</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_stagesurface_create_nv12"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>height</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"NV12 textures must have dimensions "</literal>

<literal type="string">"divisible by 2."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_stagesurface_create_nv12</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_stagesurface_create_nv12</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_register_loss_callbacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_device_loss</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_register_loss_callbacks"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_register_loss_callbacks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_register_loss_callbacks</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_unregister_loss_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name> <init>= <expr><name>thread_graphics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_valid</name><argument_list>(<argument><expr><literal type="string">"gs_unregister_loss_callbacks"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_unregister_loss_callbacks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>graphics</name><operator>-&gt;</operator><name>exports</name><operator>.</operator><name>device_unregister_loss_callbacks</name></name><argument_list>(

<argument><expr><name><name>graphics</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
