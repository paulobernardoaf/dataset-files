<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\effect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"effect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec4.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>gs_effect_actually_destroy</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_free</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_destroy</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>effect</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>effect</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_effect_actually_destroy</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>gs_effect_get_technique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>effect</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><name><name>effect</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tech</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>tech</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>gs_effect_get_current_technique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>effect</name><operator>-&gt;</operator><name>cur_technique</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_effect_loop</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>effect</name><operator>-&gt;</operator><name>looping</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><call><name>gs_get_effect</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"gs_effect_loop: An effect is "</literal>

<literal type="string">"already active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tech</name> <operator>=</operator> <call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tech</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"gs_effect_loop: Technique '%s' "</literal>

<literal type="string">"not found."</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>looping</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>cur_technique</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>cur_technique</name></name></expr></argument>,

<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>loop_pass</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>cur_technique</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>looping</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>loop_pass</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>gs_technique_begin</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tech</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>cur_technique</name></name> <operator>=</operator> <name>tech</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>graphics</name><operator>-&gt;</operator><name>cur_effect</name></name> <operator>=</operator> <name><name>tech</name><operator>-&gt;</operator><name>effect</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_technique_end</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tech</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_load_vertexshader</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_pixelshader</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>cur_technique</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>graphics</name><operator>-&gt;</operator><name>cur_effect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>params</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>shaderparams</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pass_shaderparam</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>shaderparams</name><operator>-&gt;</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shaderparams</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>eparam</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upload_shader_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>pass_params</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>changed_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pass_shaderparam</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>pass_params</name><operator>-&gt;</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pass_params</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pass_shaderparam</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>params</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>eparam</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>eparam</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>sparam</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>sparam</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eparam</name><operator>-&gt;</operator><name>next_sampler</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_shader_set_next_sampler</name><argument_list>(<argument><expr><name>sparam</name></expr></argument>,

<argument><expr><name><name>eparam</name><operator>-&gt;</operator><name>next_sampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>changed_only</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eparam</name><operator>-&gt;</operator><name>changed</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eparam</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eparam</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_copy</name><argument_list>(<argument><expr><name><name>eparam</name><operator>-&gt;</operator><name>cur_val</name></name></expr></argument>, <argument><expr><name><name>eparam</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_shader_set_val</name><argument_list>(<argument><expr><name>sparam</name></expr></argument>, <argument><expr><name><name>eparam</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>eparam</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>upload_parameters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>changed_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>vshader_params</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pshader_params</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>effect</name><operator>-&gt;</operator><name>cur_pass</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vshader_params</name> <operator>=</operator> <operator>&amp;</operator><name><name>effect</name><operator>-&gt;</operator><name>cur_pass</name><operator>-&gt;</operator><name>vertshader_params</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pshader_params</name> <operator>=</operator> <operator>&amp;</operator><name><name>effect</name><operator>-&gt;</operator><name>cur_pass</name><operator>-&gt;</operator><name>pixelshader_params</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>upload_shader_params</name><argument_list>(<argument><expr><name>vshader_params</name></expr></argument>, <argument><expr><name>changed_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>upload_shader_params</name><argument_list>(<argument><expr><name>pshader_params</name></expr></argument>, <argument><expr><name>changed_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_params</name><argument_list>(<argument><expr><name>vshader_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_params</name><argument_list>(<argument><expr><name>pshader_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_update_params</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>effect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>upload_parameters</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_technique_begin_pass</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>passes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>cur_pass</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tech</name> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>passes</name> <operator>=</operator> <name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_pass</name> <operator>=</operator> <name>passes</name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>cur_pass</name></name> <operator>=</operator> <name>cur_pass</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_vertexshader</name><argument_list>(<argument><expr><name><name>cur_pass</name><operator>-&gt;</operator><name>vertshader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_load_pixelshader</name><argument_list>(<argument><expr><name><name>cur_pass</name><operator>-&gt;</operator><name>pixelshader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>upload_parameters</name><argument_list>(<argument><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_technique_begin_pass_by_name</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tech</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name> <init>= <expr><name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clear_tex_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>in_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pass_shaderparam</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>in_params</name><operator>-&gt;</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in_params</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pass_shaderparam</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>params</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_shader_param_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_shader_get_param_info</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>sparam</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_shader_set_texture</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>sparam</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_technique_end_pass</name><parameter_list>(<parameter><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tech</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name> <init>= <expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>cur_pass</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pass</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clear_tex_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pass</name><operator>-&gt;</operator><name>vertshader_params</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tex_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pass</name><operator>-&gt;</operator><name>pixelshader_params</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>cur_pass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>gs_effect_get_num_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>effect</name></expr> ?</condition><then> <expr><name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_param_by_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name> <operator>&gt;=</operator> <name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>params</name> <operator>+</operator> <name>param</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_param_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>params</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>param</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>gs_param_get_num_annotations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_param_get_annotation_by_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>annotation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>annotation</name> <operator>&gt;</operator> <name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>params</name> <operator>+</operator> <name>annotation</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_param_get_annotation_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>g_param</name> <init>= <expr><name>params</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>g_param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>g_param</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_epass_t</name> <modifier>*</modifier></type><name>gs_technique_get_pass_by_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>technique</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>passes</name> <init>= <expr><name><name>technique</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>&gt;</operator> <name><name>technique</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>passes</name> <operator>+</operator> <name>pass</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_epass_t</name> <modifier>*</modifier></type><name>gs_technique_get_pass_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_technique_t</name> <modifier>*</modifier></type><name>technique</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>technique</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>passes</name> <init>= <expr><name><name>technique</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>technique</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>g_pass</name> <init>= <expr><name>passes</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>g_pass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>g_pass</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_viewproj_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>effect</name></expr> ?</condition><then> <expr><name><name>effect</name><operator>-&gt;</operator><name>view_proj</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>gs_effect_get_world_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>effect</name></expr> ?</condition><then> <expr><name><name>effect</name><operator>-&gt;</operator><name>world</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_get_param_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_effect_param_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_setval_inline</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>size_changed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"effect_setval_inline: invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"effect_setval_inline: invalid data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size_changed</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size_changed</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_getval_inline</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"effect_getval_inline: invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"effect_getval_inline: invalid data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_getdefaultval_inline</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"effect_getdefaultval_inline: invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"effect_getdefaultval_inline: invalid data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_bool</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_val</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>val</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_float</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_int</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_matrix4</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>matrix4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_vec2</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_vec3</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_vec4</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_color</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>argb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>v_color</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_from_bgra</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v_color</name></expr></argument>, <argument><expr><name>argb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_color</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vec4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_texture</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gs_texture_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_val</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_effect_get_val</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_effect_get_val: invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>bzalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>effect_getval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>gs_effect_get_val_size</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gs_effect_get_default_val</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_effect_get_default_val: invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>bzalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>effect_getdefaultval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>gs_effect_get_default_val_size</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_default</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>effect_setval_inline</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_effect_set_next_sampler</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"gs_effect_set_next_sampler: invalid param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GS_SHADER_PARAM_TEXTURE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>next_sampler</name></name> <operator>=</operator> <name>sampler</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
