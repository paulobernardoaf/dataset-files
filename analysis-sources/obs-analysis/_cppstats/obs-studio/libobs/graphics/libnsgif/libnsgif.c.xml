<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\libnsgif\libnsgif.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnsgif.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, x), fputc('\n', stderr); } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_MAX_COLOURS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_PROCESS_COLOURS</name></cpp:macro> <cpp:value>0xaa000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_INVALID_FRAME</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_TRANSPARENT_COLOUR</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_FRAME_COMBINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_FRAME_CLEAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_FRAME_RESTORE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_FRAME_QUIRKS_RESTORE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_IMAGE_SEPARATOR</name></cpp:macro> <cpp:value>0x2c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_INTERLACE_MASK</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_COLOUR_TABLE_MASK</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_COLOUR_TABLE_SIZE_MASK</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_EXTENSION_INTRODUCER</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_EXTENSION_GRAPHIC_CONTROL</name></cpp:macro> <cpp:value>0xf9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_DISPOSAL_MASK</name></cpp:macro> <cpp:value>0x1c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_TRANSPARENCY_MASK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_EXTENSION_COMMENT</name></cpp:macro> <cpp:value>0xfe</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_EXTENSION_PLAIN_TEXT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_EXTENSION_APPLICATION</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_BLOCK_TERMINATOR</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIF_TRAILER</name></cpp:macro> <cpp:value>0x3b</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_initialise_sprite</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_initialise_frame</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_initialise_frame_extensions</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_skip_frame_extensions</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>gif_interlaced_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gif_init_LZW</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>gif_next_LZW</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gif_next_code</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code_size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>maskTbl</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">0x000f</literal></expr>, <expr><literal type="number">0x001f</literal></expr>, <expr><literal type="number">0x003f</literal></expr>, <expr><literal type="number">0x007f</literal></expr>,

<expr><literal type="number">0x00ff</literal></expr>, <expr><literal type="number">0x01ff</literal></expr>, <expr><literal type="number">0x03ff</literal></expr>, <expr><literal type="number">0x07ff</literal></expr>, <expr><literal type="number">0x0fff</literal></expr>, <expr><literal type="number">0x1fff</literal></expr>, <expr><literal type="number">0x3fff</literal></expr>, <expr><literal type="number">0x7fff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>gif_create</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>gif_bitmap_callback_vt</name> <modifier>*</modifier></type><name>bitmap_callbacks</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gif_animation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name></name> <operator>=</operator> <operator>*</operator><name>bitmap_callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <name>GIF_INVALID_FRAME</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>gif_result</name></type> <name>gif_initialise</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gif_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gif_result</name></type> <name>return_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_INSUFFICIENT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>local_colour_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_count_partial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <name>GIF_INVALID_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>gif_data</name></expr></argument>, <argument><expr><literal type="string">"GIF"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>global_colours</name></name> <operator>=</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>GIF_COLOUR_TABLE_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>colour_table_size</name></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>GIF_COLOUR_TABLE_SIZE_MASK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>background_index</name></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>loop_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">640</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">480</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">640</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">512</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">800</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">600</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">768</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1280</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1600</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1200</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">2048</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">2048</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>GIF_MAX_COLOURS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>local_colour_table</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>GIF_MAX_COLOURS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>local_colour_table</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gif_finalise</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GIF_PROCESS_COLOURS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_TRAILER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_OK</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_DATA</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <operator>(</operator><name>gif_frame</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gif_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gif_finalise</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_holders</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_create</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name> <operator>=</operator> <call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_create</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>gif</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gif_finalise</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_PROCESS_COLOURS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>global_colours</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>colour_table_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>GIF_INSUFFICIENT_DATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>colour_table_size</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>gif</name><operator>-&gt;</operator>

<name>global_colour_table</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>entry</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <call><name>gif_initialise_frame</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>GIF_WORKING</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>==</operator> <name>GIF_INSUFFICIENT_MEMORY</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>return_value</name> <operator>==</operator> <name>GIF_DATA_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>return_value</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>==</operator> <name>GIF_INSUFFICIENT_DATA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frame_count_partial</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>return_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_initialise_sprite</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&lt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>&lt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>width</name> <operator>&gt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>max_height</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>height</name> <operator>&gt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>height</name></expr> </then><else>: <expr><name><name>gif</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_create</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buffer</name> <operator>=</operator> <call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_create</name></name><argument_list>(<argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_destroy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_destroy</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>max_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>max_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <name>GIF_INVALID_FRAME</name></expr>;</expr_stmt>

<return>return <expr><name>GIF_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_initialise_frame</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gif_frame</name> <modifier>*</modifier></type><name>temp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gif_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gif_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gif_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>offset_x</name></decl>, <decl><type ref="prev"/><name>offset_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_size</name></decl>, <decl><type ref="prev"/><name>colour_table_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_image</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gif_result</name></type> <name>return_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_end</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gif_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_TRAILER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_INSUFFICIENT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_FRAME_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>gif</name><operator>-&gt;</operator><name>frame_holders</name></name> <operator>&lt;=</operator> <name>frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_buf</name> <operator>=</operator> <operator>(</operator><name>gif_frame</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>frame</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gif_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name>temp_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_holders</name></name> <operator>=</operator> <name>frame</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>frame_pointer</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>display</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>virgin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>frame_delay</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_required</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>==</operator> <name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <name>GIF_INVALID_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <call><name>gif_initialise_frame_extensions</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>return_value</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_TRAILER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <name>frame</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>GIF_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>GIF_IMAGE_SEPARATOR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_FRAME_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset_x</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_y</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_image</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_x</name> <operator>&gt;</operator> <name>offset_x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_width</name> <operator>+=</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_x</name> <operator>-</operator> <name>offset_x</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_x</name> <operator>=</operator> <name>offset_x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_y</name> <operator>&gt;</operator> <name>offset_y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_height</name> <operator>+=</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_y</name> <operator>-</operator> <name>offset_y</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_y</name> <operator>=</operator> <name>offset_y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset_x</name> <operator>+</operator> <name>width</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_x</name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_width</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_width</name> <operator>=</operator> <operator>(</operator><name>offset_x</name> <operator>+</operator> <name>width</name><operator>)</operator> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset_y</name> <operator>+</operator> <name>height</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_y</name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_height</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_height</name> <operator>=</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>height</name><operator>)</operator> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>first_image</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_x</name> <operator>=</operator> <name>offset_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_y</name> <operator>=</operator> <name>offset_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>redraw_required</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_CLEAR</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_RESTORE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gif_initialise_sprite</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><operator>(</operator><name>offset_x</name> <operator>+</operator> <name>width</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>offset_y</name> <operator>+</operator> <name>height</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>colour_table_size</name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GIF_COLOUR_TABLE_SIZE_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_count_partial</name></name> <operator>=</operator> <name>frame</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GIF_COLOUR_TABLE_MASK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>colour_table_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>GIF_MAX_LZW</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_DATA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block_size</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>gif_bytes</name> <operator>-</operator> <name>block_size</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GIF_TRAILER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gif_bytes</name> <operator>-=</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <name>frame</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>display</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_TRAILER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GIF_WORKING</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_initialise_frame_extensions</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gif_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gif_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gif_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_end</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_EXTENSION_INTRODUCER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GIF_EXTENSION_GRAPHIC_CONTROL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>frame_delay</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>GIF_TRANSPARENCY_MASK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency_index</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>GIF_DISPOSAL_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_QUIRKS_RESTORE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>=</operator> <name>GIF_FRAME_RESTORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GIF_EXTENSION_APPLICATION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0b</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>gif_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="string">"NETSCAPE2.0"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>loop_count</name></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GIF_EXTENSION_COMMENT</name></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>GIF_BLOCK_TERMINATOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gif_bytes</name> <operator>-=</operator> <name>block_size</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>GIF_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>gif_result</name></type> <name>gif_decode_frame</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gif_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gif_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gif_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>offset_x</name></decl>, <decl><type ref="prev"/><name>offset_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>colour_table_size</name></decl>, <decl><type ref="prev"/><name>interlace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colour_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>frame_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>frame_scanline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>save_buffer_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gif_result</name></type> <name>return_value</name> <init>= <expr><name>GIF_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>decode_y</name></decl>, <decl><type ref="prev"/><name>burst_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_undisposed_frame</name> <init>= <expr><operator>(</operator><name>frame</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name></type> <name>colour</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>&gt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>frame_count_partial</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>display</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <name>GIF_FRAME_NO_DISPLAY</name></expr>;</expr_stmt>

<return>return <expr><name>GIF_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>gif</name><operator>-&gt;</operator><name>clear_image</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>frame</name> <operator>==</operator> <name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>frame_pointer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_end</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_buffer_position</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <call><name>gif_skip_frame_extensions</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>gif_decode_frame_exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>GIF_IMAGE_SEPARATOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_DATA_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset_x</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset_y</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset_x</name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_DATA_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>colour_table_size</name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GIF_COLOUR_TABLE_SIZE_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>interlace</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>GIF_INTERLACE_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GIF_COLOUR_TABLE_MASK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>colour_table_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>colour_table</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>local_colour_table</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gif</name><operator>-&gt;</operator><name>clear_image</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>colour_table_size</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= 

<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>colour_table</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>entry</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>colour_table_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>colour_table</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_TRAILER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_OK</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_get_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_get_buffer</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gif</name><operator>-&gt;</operator><name>clear_image</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gif_bytes</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>gif_bytes</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>GIF_TRAILER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_OK</name></expr>;</expr_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>frame</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>==</operator> <name>GIF_INVALID_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>frame_data</name></expr></argument>, <argument><expr><name>GIF_TRANSPARENT_COLOUR</name></expr></argument>, <argument><expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>frame</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_CLEAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>clear_image</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <call><name>gif_decode_frame</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><operator>(</operator><name>frame</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>gif_decode_frame_exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>clear_image</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>frame</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_RESTORE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>last_undisposed_frame</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>last_undisposed_frame</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_RESTORE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>last_undisposed_frame</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>frame_data</name></expr></argument>, <argument><expr><name>GIF_TRANSPARENT_COLOUR</name></expr></argument>, <argument><expr><name><name>gif</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>gif</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <call><name>gif_decode_frame</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><name>last_undisposed_frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>gif_decode_frame_exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_get_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_get_buffer</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>set_code_size</name></name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>set_code_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>set_code_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>end_code</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>max_code_size</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>max_code</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>lastbit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>last_byte</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>get_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gif_init_LZW</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>interlace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>decode_y</name> <operator>=</operator> <call><name>gif_interlaced_line</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset_y</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>decode_y</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>offset_y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>frame_scanline</name> <operator>=</operator> <name>frame_data</name> <operator>+</operator> <name>offset_x</name> <operator>+</operator> <operator>(</operator><name>decode_y</name> <operator>*</operator> <name><name>gif</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>burst_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>stack</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>burst_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>burst_bytes</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>burst_bytes</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>burst_bytes</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>burst_bytes</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colour</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>colour</name> <operator>!=</operator> <name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency_index</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>frame_scanline</name> <operator>=</operator> <name><name>colour_table</name><index>[<expr><name>colour</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_scanline</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gif_next_LZW</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>==</operator> <name>GIF_END_OF_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>GIF_OK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>gif_decode_frame_exit</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>disposal_method</name> <operator>==</operator> <name>GIF_FRAME_CLEAR</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>frame_scanline</name> <operator>=</operator> <name>frame_data</name> <operator>+</operator> <name>offset_x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>offset_y</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>gif</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>transparency</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>frame_scanline</name></expr></argument>, <argument><expr><name>GIF_TRANSPARENT_COLOUR</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>frame_scanline</name></expr></argument>, <argument><expr><name><name>colour_table</name><index>[<expr><name><name>gif</name><operator>-&gt;</operator><name>background_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>gif_decode_frame_exit</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>virgin</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_test_opaque</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>opaque</name> <operator>=</operator> <call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_test_opaque</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>opaque</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>virgin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_set_opaque</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_set_opaque</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>, <argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name><operator>.</operator><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_modified</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_modified</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <name>save_buffer_position</name></expr>;</expr_stmt>

<return>return <expr><name>return_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gif_result</name></type> <name>gif_skip_frame_extensions</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gif_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gif_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gif_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>block_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_end</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GIF_EXTENSION_INTRODUCER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GIF_EXTENSION_COMMENT</name></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>gif_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>gif_bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_end</name> <operator>-</operator> <name>gif_data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>GIF_BLOCK_TERMINATOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>gif_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gif_bytes</name> <operator>-=</operator> <name>block_size</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gif_data</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>gif_data</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>gif_data</name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>GIF_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>gif_interlaced_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gif_finalise</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_destroy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>gif</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_destroy</name></name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frame_image</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>local_colour_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>local_colour_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>global_colour_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gif_init_LZW</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>GIF_MAX_LZW</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <name>GIF_FRAME_DATA_ERROR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>gif</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>GIF_MAX_LZW</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>set_code_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>max_code_size</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>max_code</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>firstcode</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>oldcode</name></name> <operator>=</operator> <call><name>gif_next_code</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>firstcode</name></name> <operator>==</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name><operator>++</operator> <operator>=</operator><name><name>gif</name><operator>-&gt;</operator><name>firstcode</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gif_next_LZW</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>incode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>gif_next_code</name><argument_list>(<argument><expr><name>gif</name></expr></argument>, <argument><expr><name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gif_init_LZW</name><argument_list>(<argument><expr><name>gif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>gif</name><operator>-&gt;</operator><name>end_code</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>zero_data_block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <name>GIF_FRAME_DATA_ERROR</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block_size</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name><index>[<expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <name>GIF_FRAME_DATA_ERROR</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>incode</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>max_code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name><operator>++</operator> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>firstcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>oldcode</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name><operator>++</operator> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_code</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_code</name> <operator>&lt;</operator> <name><name>gif</name><operator>-&gt;</operator><name>clear_code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>new_code</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name><operator>++</operator> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>new_code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>new_code</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>new_code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>current_error</name></name> <operator>=</operator> <name>GIF_FRAME_DATA_ERROR</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name><name>gif</name><operator>-&gt;</operator><name>stack_pointer</name></name><operator>++</operator> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>firstcode</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>max_code</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>GIF_MAX_LZW</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>oldcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>firstcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gif</name><operator>-&gt;</operator><name>max_code</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>max_code</name></name> <operator>&gt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>max_code_size</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>max_code_size</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>GIF_MAX_LZW</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>max_code_size</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>max_code_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>oldcode</name></name> <operator>=</operator> <name>incode</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gif_next_code</name><parameter_list>(<parameter><decl><type><name>gif_animation</name> <modifier>*</modifier></type><name>gif</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>code_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>lastbit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gif</name><operator>-&gt;</operator><name>get_done</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_END_OF_FRAME</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>direct</name><index>[<expr><name><name>gif</name><operator>-&gt;</operator><name>last_byte</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>direct</name><index>[<expr><name><name>gif</name><operator>-&gt;</operator><name>last_byte</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>zero_data_block</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>direct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>+</operator> <name>count</name><operator>)</operator> <operator>&gt;=</operator> <name><name>gif</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GIF_INSUFFICIENT_FRAME_DATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>get_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>direct</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>direct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>direct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>buffer_position</name></name> <operator>+=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>last_byte</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>=</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>-</operator> <name><name>gif</name><operator>-&gt;</operator><name>lastbit</name></name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>lastbit</name></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>count</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>+</operator> <name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>gif</name><operator>-&gt;</operator><name>direct</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>maskTbl</name><index>[<expr><name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gif</name><operator>-&gt;</operator><name>curbit</name></name> <operator>+=</operator> <name><name>gif</name><operator>-&gt;</operator><name>code_size</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
