<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\graphics-imports.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics-internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPHICS_IMPORT</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exports-&gt;func = os_dlsym(module, #func); if (!exports-&gt;func) { success = false; blog(LOG_ERROR, "Could not load function '%s' from " "module '%s'", #func, module_name); } } while (false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPHICS_IMPORT_OPTIONAL</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exports-&gt;func = os_dlsym(module, #func); } while (false)</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>load_graphics_imports</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_exports</name></name> <modifier>*</modifier></type><name>exports</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_enum_adapters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_preprocessor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_enter_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_leave_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_device_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_swapchain_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_resize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_texture_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_cubetexture_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_voltexture_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_zstencil_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_stagesurface_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_samplerstate_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_vertexshader_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_pixelshader_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_vertexbuffer_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_indexbuffer_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_timer_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_timer_range_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_texture_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_vertexbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_indexbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_samplerstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_vertexshader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_pixelshader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_default_samplerstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_vertex_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_pixel_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_render_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_zstencil_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_set_render_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_set_cube_render_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_copy_texture_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_copy_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_stage_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_begin_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_begin_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_load_swapchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_end_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_set_cull_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_cull_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_enable_blending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_enable_depth_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_enable_stencil_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_enable_stencil_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_enable_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_blend_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_blend_function_separate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_depth_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_stencil_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_stencil_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_set_viewport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_get_viewport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_set_scissor_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_ortho</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_frustum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_projection_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_projection_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_swapchain_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_get_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_get_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_get_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_unmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_texture_is_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_texture_get_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_cubetexture_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_cubetexture_get_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_cubetexture_get_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_voltexture_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_voltexture_get_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_voltexture_get_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_voltexture_get_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_voltexture_get_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_stagesurface_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_stagesurface_get_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_stagesurface_get_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_stagesurface_get_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_stagesurface_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_stagesurface_unmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_zstencil_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_samplerstate_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_vertexbuffer_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_vertexbuffer_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_vertexbuffer_flush_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_vertexbuffer_get_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_indexbuffer_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_indexbuffer_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_indexbuffer_flush_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_indexbuffer_get_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_indexbuffer_get_num_indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_indexbuffer_get_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_get_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_range_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_range_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_range_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_timer_range_get_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_get_num_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_get_param_by_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_get_param_by_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_get_viewproj_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_get_world_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_get_param_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_matrix3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_matrix4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_vec4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>gs_shader_set_next_sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_nv12_available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_debug_marker_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_debug_marker_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_create_from_iosurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_texture_rebind_iosurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_WIN32</name></expr></cpp:elif>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_gdi_texture_available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT</name><argument_list>(<argument><expr><name>device_shared_texture_available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_get_duplicator_monitor_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_duplicator_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_duplicator_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_duplicator_update_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_duplicator_get_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_create_gdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_texture_get_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>gs_texture_release_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_open_shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_get_shared_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_acquire_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_release_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_texture_create_nv12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_stagesurface_create_nv12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_register_loss_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRAPHICS_IMPORT_OPTIONAL</name><argument_list>(<argument><expr><name>device_unregister_loss_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

</unit>
