<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\half.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>half</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>u</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>half</name></name></type> <name>half_from_float</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>Result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>IValue</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>Sign</name> <init>= <expr><operator>(</operator><name>IValue</name> <operator>&amp;</operator> <literal type="number">0x80000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>IValue</name> <operator>=</operator> <name>IValue</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFFU</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>IValue</name> <operator>&gt;</operator> <literal type="number">0x477FE000U</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>IValue</name> <operator>&amp;</operator> <literal type="number">0x7F800000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7F800000</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>IValue</name> <operator>&amp;</operator> <literal type="number">0x7FFFFF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Result</name> <operator>=</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Result</name> <operator>=</operator> <literal type="number">0x7C00U</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>IValue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>IValue</name> <operator>&lt;</operator> <literal type="number">0x38800000U</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>Shift</name> <init>= <expr><literal type="number">113U</literal> <operator>-</operator> <operator>(</operator><name>IValue</name> <operator>&gt;&gt;</operator> <literal type="number">23U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>IValue</name> <operator>=</operator> <operator>(</operator><literal type="number">0x800000U</literal> <operator>|</operator> <operator>(</operator><name>IValue</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFU</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>Shift</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>IValue</name> <operator>+=</operator> <literal type="number">0xC8000000U</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>Result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>IValue</name> <operator>+</operator> <literal type="number">0x0FFFU</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>IValue</name> <operator>&gt;&gt;</operator> <literal type="number">13U</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13U</literal><operator>)</operator> <operator>&amp;</operator>

<literal type="number">0x7FFFU</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>half</name></name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>Result</name> <operator>|</operator> <name>Sign</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>half</name></name></type> <name>half_from_bits</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>u</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>half</name></name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
