<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\vec2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-extra.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math-defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec2.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>vec2_abs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vec2_floor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>floorf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vec2_ceil</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>ceilf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ceilf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vec2_close</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>close_float</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>close_float</name><argument_list>(<argument><expr><name><name>v1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vec2_norm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>len</name> <init>= <expr><call><name>vec2_len</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
