<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\plane.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plane.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>plane_from_tri</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_cross</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_norm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <call><name>vec3_dot</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>plane_transform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_norm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dist</name></name> <operator>-</operator> <call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>plane_transform3x4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_transform3x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_norm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_transform3x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dist</name></name> <operator>-</operator> <call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>plane_intersection_ray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>EPSILON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dist</name></name> <operator>-</operator> <call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>plane_intersection_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>p1_dist</name></decl>, <decl><type ref="prev"/><name>p2_dist</name></decl>, <decl><type ref="prev"/><name>p1_abs_dist</name></decl>, <decl><type ref="prev"/><name>dist2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>p1_over</name></decl>, <decl><type ref="prev"/><name>p2_over</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_dist</name> <operator>=</operator> <call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_dist</name> <operator>=</operator> <call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name>p1_dist</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name>p2_dist</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name>p2_dist</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1_over</name> <operator>=</operator> <operator>(</operator><name>p1_dist</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_over</name> <operator>=</operator> <operator>(</operator><name>p2_dist</name> <operator>&gt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p1_over</name> <operator>==</operator> <name>p2_over</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p1_abs_dist</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>p1_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist2</name> <operator>=</operator> <name>p1_abs_dist</name> <operator>+</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>p2_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>EPSILON</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>p1_abs_dist</name> <operator>/</operator> <name>dist2</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>plane_tri_inside</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v3</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>precision</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sides</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d1</name> <init>= <expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d2</name> <init>= <expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d3</name> <init>= <expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;=</operator> <name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;=</operator> <operator>-</operator><name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d2</name> <operator>&gt;=</operator> <name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d2</name> <operator>&lt;=</operator> <operator>-</operator><name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d3</name> <operator>&gt;=</operator> <name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d3</name> <operator>&lt;=</operator> <operator>-</operator><name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sides</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>plane_line_inside</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>precision</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sides</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d1</name> <init>= <expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d2</name> <init>= <expr><call><name>vec3_plane_dist</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;=</operator> <name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;=</operator> <operator>-</operator><name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d2</name> <operator>&gt;=</operator> <name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d2</name> <operator>&lt;=</operator> <operator>-</operator><name>precision</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sides</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sides</name></expr>;</return>

</block_content>}</block></function>

</unit>
