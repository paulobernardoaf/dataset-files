<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\effect.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"effect-parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>effect_section</name> <block>{

<decl><name>EFFECT_PARAM</name></decl>,

<decl><name>EFFECT_TECHNIQUE</name></decl>,

<decl><name>EFFECT_SAMPLER</name></decl>,

<decl><name>EFFECT_PASS</name></decl>,

<decl><name>EFFECT_ANNOTATION</name></decl>

}</block>;</enum>

<struct>struct <name>gs_effect_param</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>effect_section</name></name></type> <name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_shader_param_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>changed</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>cur_val</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro> <expr_stmt><expr><name>default_val</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>next_sampler</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct gs_effect_param</argument>)</argument_list></macro> <expr_stmt><expr><name>annotations</name></expr>;</expr_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_param_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_effect_param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_param_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>cur_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>effect_param_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>effect_param_parse_property</name><parameter_list>(<parameter><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>property</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>pass_shaderparam</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>eparam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_sparam_t</name> <modifier>*</modifier></type><name>sparam</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>gs_effect_pass</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>effect_section</name></name></type> <name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>vertshader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>pixelshader</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct pass_shaderparam</argument>)</argument_list></macro> <expr_stmt><expr><name>vertshader_params</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct pass_shaderparam</argument>)</argument_list></macro> <expr_stmt><expr><name>pixelshader_params</name></expr>;</expr_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_pass_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_effect_pass</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_pass_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>vertshader_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>pixelshader_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_shader_destroy</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>vertshader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_shader_destroy</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>pixelshader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>gs_effect_technique</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>effect_section</name></name></type> <name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct gs_effect_pass</argument>)</argument_list></macro> <expr_stmt><expr><name>passes</name></expr>;</expr_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_technique_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_effect_technique</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_technique_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>effect_pass_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>gs_effect</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>processing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cached</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effect_path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>effect_dir</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct gs_effect_param</argument>)</argument_list></macro> <expr_stmt><expr><name>params</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct gs_effect_technique</argument>)</argument_list></macro> <expr_stmt><expr><name>techniques</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>cur_technique</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>cur_pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>view_proj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>world</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>loop_pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>looping</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_init</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_effect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>effect_free</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>effect_param_free</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>effect</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>effect_technique_free</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>techniques</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>effect_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>effect_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>effect_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effect</name><operator>-&gt;</operator><name>effect_dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>effect_upload_params</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>changed_only</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>effect_upload_shader_params</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>pass_params</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>changed_only</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
