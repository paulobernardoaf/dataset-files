<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\quat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vec3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"axisang.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>quat_vec3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>m</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>q1axis</name></decl>, <decl><type ref="prev"/><name>q2axis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quat_vec3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q1axis</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_vec3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q2axis</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q2axis</name></expr></argument>, <argument><expr><name><name>q1</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q1axis</name></expr></argument>, <argument><expr><name><name>q2</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_cross</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q1axis</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q2axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_add</name><argument_list>(<argument><expr><operator>(</operator>struct <name>vec3</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>q1</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>q2</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>-</operator> <call><name>vec3_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q1axis</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q2axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_from_axisang</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>axisang</name></name> <modifier>*</modifier></type><name>aa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>halfa</name> <init>= <expr><name><name>aa</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sine</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>halfa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>aa</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name>sine</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>aa</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>sine</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name><name>aa</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name>sine</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>halfa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>f4x4</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name></type> <name>quat_from_matrix3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix3</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>quat_from_matrix4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>matrix4</name> <operator>*</operator><operator>)</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_from_matrix4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tr</name> <init>= <expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>inv_half</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>four_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tr</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>four_d</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>tr</name> <operator>+</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>four_d</name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inv_half</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>/</operator> <name>four_d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <name>inv_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>*</operator> <name>inv_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <name>inv_half</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>f4x4</name></name> <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator>struct <name>f4x4</name> <operator>*</operator><operator>)</operator><name>m</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>y</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>four_d</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(

<argument><expr><operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>+</operator>

<literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>four_d</name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inv_half</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>/</operator> <name>four_d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>inv_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>inv_half</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>val</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>inv_half</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_get_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix3</name></name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>matrix3_from_quat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_set_look_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>new_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quat</name></name></type> <name>xz_rot</name></decl>, <decl><type ref="prev"/><name>yz_rot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>xz_valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>yz_valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>axisang</name></name></type> <name>aa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_norm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_dir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec3_neg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xz_rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yz_rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xz_valid</name> <operator>=</operator> <call><name>close_float</name><argument_list>(<argument><expr><name><name>new_dir</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>close_float</name><argument_list>(<argument><expr><name><name>new_dir</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yz_valid</name> <operator>=</operator> <call><name>close_float</name><argument_list>(<argument><expr><name><name>new_dir</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xz_valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>axisang_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aa</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,

<argument><expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>new_dir</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>new_dir</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_from_axisang</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xz_rot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yz_valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>axisang_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aa</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><call><name>asinf</name><argument_list>(<argument><expr><name><name>new_dir</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_from_axisang</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yz_rot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xz_valid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>quat_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yz_rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>yz_valid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>quat_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xz_rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>quat_mul</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xz_rot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yz_rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_log</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sine</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quat_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>fabsf</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>fabsf</name><argument_list>(<argument><expr><name>sine</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>EPSILON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sine</name> <operator>=</operator> <name>angle</name> <operator>/</operator> <name>sine</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>sine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_exp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>length</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>z</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sine</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quat_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sine</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>length</name> <operator>&gt;</operator> <name>EPSILON</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sine</name> <operator>/</operator> <name>length</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>sine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_interpolate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><call><name>quat_dot</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>anglef</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sine</name></decl>, <decl><type ref="prev"/><name>sinei</name></decl>, <decl><type ref="prev"/><name>sinet</name></decl>, <decl><type ref="prev"/><name>sineti</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quat</name></name></type> <name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>anglef</name> <operator>&gt;=</operator> <name>EPSILON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sine</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>anglef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sinei</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <name>sine</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sinet</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>anglef</name> <operator>*</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>sinei</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sineti</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>anglef</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <name>sinei</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>sineti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>sinet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>quat_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_mulf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_get_tangent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quat</name></name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quat_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_mulf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>quat_interpolate_cubic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>q2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>m1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>m2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quat</name></name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quat_interpolate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_interpolate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quat_interpolate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp2</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name><operator>)</operator> <operator>*</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
