<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\graphics-magick.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obsconfig.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGICKCORE_QUANTUM_DEPTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGICKCORE_HDRI_ENABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBOBS_IMAGEMAGICK_DIR_STYLE</name> <operator>==</operator> <name>LIBOBS_IMAGEMAGICK_DIR_STYLE_6L</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;magick/MagickCore.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LIBOBS_IMAGEMAGICK_DIR_STYLE</name> <operator>==</operator> <name>LIBOBS_IMAGEMAGICK_DIR_STYLE_7GE</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;MagickCore/MagickCore.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>gs_init_image_deps</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MagickCoreGenesis</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MagickTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_free_image_deps</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MagickCoreTerminus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>gs_create_texture_file_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ImageInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExceptionInfo</name> <modifier>*</modifier></type><name>exception</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>CloneImageInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exception</name> <operator>=</operator> <call><name>AcquireExceptionInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>ReadImage</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>image</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cx</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>magick_columns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cy</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>magick_rows</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>cx</name> <operator>*</operator> <name>cy</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExportImagePixels</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><literal type="string">"BGRA"</literal></expr></argument>, <argument><expr><name>CharPixel</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>exception</name><operator>-&gt;</operator><name>severity</name></name> <operator>!=</operator> <name>UndefinedException</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"magickcore warning/error getting "</literal>

<literal type="string">"pixels from file '%s': %s"</literal></expr></argument>,

<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>exception</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>GS_BGRA</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx_out</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cy_out</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>exception</name><operator>-&gt;</operator><name>severity</name></name> <operator>!=</operator> <name>UndefinedException</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"magickcore warning/error reading file "</literal>

<literal type="string">"'%s': %s"</literal></expr></argument>,

<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>exception</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DestroyImageInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyExceptionInfo</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

</unit>
