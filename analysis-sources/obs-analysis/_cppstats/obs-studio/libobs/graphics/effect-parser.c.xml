<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\effect-parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"effect-parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"effect.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_parse_param_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>gs_shader_param_type</name></name></type> <name>get_effect_param_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_FLOAT</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"float2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_VEC2</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"float3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_VEC3</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"float4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_VEC4</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_INT2</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_INT3</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_INT4</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmp_n</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"texture"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_TEXTURE</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"float4x4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_MATRIX4X4</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_BOOL</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_INT</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GS_SHADER_PARAM_STRING</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GS_SHADER_PARAM_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ep_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_param_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_struct_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_func_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_sampler_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_technique_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cur_pass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_parser_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>techniques</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>ep_getfunc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>ep_getstruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>ep_getsampler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>ep_getparam</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>ep_getannotation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>ep_getfunc_strref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>ep_getstruct_strref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>ep_getsampler_strref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>ep_getparam_strref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_struct_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_BREAK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_NAME</name></expr></argument>, <argument><expr><literal type="string">"type name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cf_copy_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_NAME</name></expr></argument>, <argument><expr><literal type="string">"variable name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cf_copy_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_NAME</name></expr></argument>, <argument><expr><literal type="string">"mapping name"</literal></expr></argument>,

<argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cf_copy_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_go_to_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_parse_struct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_struct</name></name></type> <name>eps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_struct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eps</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>do_break</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_var</name></name></type> <name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_var_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>ep_parse_struct_var</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>:</case>

<expr_stmt><expr><call><name>cf_adderror_syntax_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PARSE_CONTINUE</name></expr>:</case>

<expr_stmt><expr><call><name>ep_var_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>:</case>

<expr_stmt><expr><call><name>cf_adderror_syntax_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PARSE_BREAK</name></expr>:</case>

<expr_stmt><expr><call><name>ep_var_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_break</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PARSE_EOF</name></expr>:</case>

<expr_stmt><expr><call><name>ep_var_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>do_break</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>eps</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ep_struct_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_param_annotation_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_BREAK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_NAME</name></expr></argument>, <argument><expr><literal type="string">"type name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_copy_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"variable name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"variable name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_NAME</name></expr></argument>, <argument><expr><literal type="string">"variable name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_copy_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"= or ;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"= or ;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_parse_param_assign</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"assignment value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_go_to_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"; or &gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ep_parse_annotations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>annotations</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>do_break</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name></type> <name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_param_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><call><name>bstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>ep_parse_param_annotation_var</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>:</case>

<expr_stmt><expr><call><name>cf_adderror_syntax_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PARSE_CONTINUE</name></expr>:</case>

<expr_stmt><expr><call><name>ep_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><name>PARSE_UNEXPECTED_BREAK</name></expr>:</case>

<expr_stmt><expr><call><name>cf_adderror_syntax_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PARSE_BREAK</name></expr>:</case>

<expr_stmt><expr><call><name>ep_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_break</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PARSE_EOF</name></expr>:</case>

<expr_stmt><expr><call><name>ep_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>do_break</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ep_param</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>annotations</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ep_parse_param_annotations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ep_parse_annotations</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>da</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_pass_command_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>end_token</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>call</name></expr></argument>,

<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cf_token</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ep_parse_pass_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"vertex_shader"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"vertex_program"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>call</name> <operator>=</operator> <operator>&amp;</operator><name><name>pass</name><operator>-&gt;</operator><name>vertex_program</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"pixel_shader"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"pixel_program"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>call</name> <operator>=</operator> <operator>&amp;</operator><name><name>pass</name><operator>-&gt;</operator><name>fragment_program</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_syntax_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_go_to_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"compile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"compile keyword not necessary"</literal></expr></argument>,

<argument><expr><name>LEX_WARNING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ep_parse_pass_command_call</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ep_parse_pass</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>peek</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup_n</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peek</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ep_parse_pass_command</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>PARSE_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>cf_next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_parse_technique</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_technique</name></name></type> <name>ept</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_technique_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ept</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_go_to_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_pass</name></name></type> <name>pass</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_pass_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>ep_parse_pass</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PARSE_UNEXPECTED_CONTINUE</name></expr>:</case>

<expr_stmt><expr><call><name>ep_pass_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_go_to_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><name>PARSE_EOF</name></expr>:</case>

<expr_stmt><expr><call><name>ep_pass_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>ept</name><operator>.</operator><name>passes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>cf_next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>techniques</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>cf_next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_technique_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ep_parse_sampler_state_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>value</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="string">"state name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_str</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_str</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_ncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>cur_str</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>eps</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_parse_sampler_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_sampler</name></name></type> <name>eps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_sampler_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eps</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peek</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ep_parse_sampler_state_item</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ep_sampler_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_check_for_keyword</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>new_val</name> <init>= <expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_val</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"'$1' keyword already specified"</literal></expr></argument>,

<argument><expr><name>LEX_WARNING</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>new_val</name></expr>;</expr_stmt>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_func_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>var_type_keyword</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_type_keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>var_type_keyword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>=</operator> <name>EP_VAR_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_type_keyword</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"inout"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_type_keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>var_type_keyword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>=</operator> <name>EP_VAR_INOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_type_keyword</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_type_keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>var_type_keyword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>=</operator> <name>EP_VAR_OUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_type_keyword</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"uniform"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_type_keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>var_type_keyword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>=</operator> <name>EP_VAR_UNIFORM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_get_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>,

<argument><expr><literal type="string">"mapping specifier"</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ep_getstruct</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>struct_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ep_getsampler</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>sampler_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ep_parse_func_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name></type> <name>peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cf_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_peek_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>peek</name><operator>.</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_var</name></name></type> <name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_var_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cf_adderror_syntax_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_parse_func_param</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_var_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>param_vars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<label><name>exit</name>:</label>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_process_struct_dep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>val</name> <init>=

<expr><call><name>ep_getstruct_strref</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>struct_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_process_func_dep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>ep_getfunc_strref</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>func_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_process_sampler_dep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>val</name> <init>=

<expr><call><name>ep_getsampler_strref</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>sampler_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_process_param_dep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>ep_getparam_strref</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>param_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_parse_func_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>braces</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>func</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>braces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name></name><operator>++</operator><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>CFTOKEN_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_SPACETAB</name> <operator>||</operator>

<name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NEWLINE</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>braces</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>braces</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ep_process_struct_dep</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>ep_process_func_dep</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>ep_process_sampler_dep</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>ep_process_param_dep</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>func</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_parse_function</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_func</name></name></type> <name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_func_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ep_getstruct</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>func</name><operator>.</operator><name>struct_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>func</name><operator>.</operator><name>ret_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_parse_func_params</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>func</name><operator>.</operator><name>mapping</name></name></expr></argument>,

<argument><expr><literal type="string">"mapping specifier"</literal></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_CONTINUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_parse_func_contents</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cf_next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ep_func_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ep_parse_param_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NUM</name> <operator>||</operator>

<operator>!</operator><call><name>valid_int_str</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>array_count</name></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_param_assign_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_STRING</name></expr></argument>, <argument><expr><literal type="string">"texture path string"</literal></expr></argument>,

<argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cf_literal_to_str</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_param_assign_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_STRING</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cf_literal_to_str</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_copy_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_param_assign_intfloat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_float</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_negative</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_negative</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_token_is_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>CFTOKEN_NUM</name></expr></argument>, <argument><expr><literal type="string">"numeric value"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_float</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>os_strtod</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_negative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_negative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>-</operator><name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_param_assign_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_push_back_array</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cf_adderror_expecting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"true or false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_EOF</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ep_parse_param_assign_intfloat_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_float</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intfloat_type</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_float</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intfloat_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intfloat_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'1'</literal> <operator>||</operator> <name><name>intfloat_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'4'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid row count"</literal></expr></argument>, <argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>intfloat_count</name> <operator>=</operator> <name><name>intfloat_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intfloat_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>intfloat_type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'1'</literal> <operator>||</operator> <name><name>intfloat_type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'4'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid column count"</literal></expr></argument>, <argument><expr><name>LEX_ERROR</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>intfloat_count</name> <operator>*=</operator> <name><name>intfloat_type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>intfloat_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>intfloat_count</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">"}"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_parse_param_assign_intfloat</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>is_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>cf_next_token_should_be</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>PARSE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ep_parse_param_assignment_val</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>is_texture</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_texture</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_intfloat</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_intfloat</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmp_n</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_intfloat_array</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmp_n</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_intfloat_array</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>astrcmp_n</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_string</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ep_parse_param_assign_bool</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid type '$1' used for assignment"</literal></expr></argument>,

<argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARSE_CONTINUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_parse_param_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ep_parse_param_assignment_val</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_parse_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_property</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_const</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_uniform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_param_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>is_property</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>, <argument><expr><name>is_uniform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>complete</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ep_parse_param_array</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ep_parse_param_annotations</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ep_parse_param_assign</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<label><name>complete</name>:</label>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ep_param_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ep_get_var_specifiers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_property</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_const</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_uniform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"property"</literal></expr></argument>, <argument><expr><name>is_property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>, <argument><expr><name>is_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ep_check_for_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"uniform"</literal></expr></argument>, <argument><expr><name>is_uniform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PARSE_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>report_invalid_func_keyword</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>,

<argument><expr><literal type="string">"'$1' keyword cannot be used with a "</literal>

<literal type="string">"function"</literal></expr></argument>,

<argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_parse_other</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_property</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>is_const</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>is_uniform</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_get_var_specifiers</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_property</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_const</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_uniform</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_get_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_next_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARSE_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_next_valid_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>report_invalid_func_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"property"</literal></expr></argument>, <argument><expr><name>is_property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report_invalid_func_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>, <argument><expr><name>is_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report_invalid_func_keyword</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"uniform"</literal></expr></argument>, <argument><expr><name>is_uniform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_parse_function</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ep_parse_param</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>is_property</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>,

<argument><expr><name>is_uniform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ep_compile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gs_preprocessor_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_get_default_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"(null)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GS_SHADER_PARAM_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"'%.*s'"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT2</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%ld,%ld"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%ld,%ld,%ld"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT4</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%ld,%ld,%ld,%ld"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_VEC2</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%e,%e"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_VEC3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%e,%e,%e"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_VEC4</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%e,%e,%e,%e"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_MATRIX4X4</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>,

<argument><expr><literal type="string">"[[%e,%e,%e,%e],[%e,%e,%e,%e],"</literal>

<literal type="string">"[%e,%e,%e,%e],[%e,%e,%e,%e]]"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">28</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">36</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">40</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">44</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">52</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>param</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>array</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"true\0"</literal></expr>

</then><else>: <expr><literal type="string">"false\0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_UNKNOWN</name></expr>:</case>

<case>case <expr><name>GS_SHADER_PARAM_TEXTURE</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param_in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>_debug_type</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GS_SHADER_PARAM_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT2</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_INT4</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_VEC2</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"float2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_VEC3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"float3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_VEC4</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"float4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_MATRIX4X4</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"float4x4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GS_SHADER_PARAM_TEXTURE</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>char</name></type> <name><name>_debug_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_get_default_value</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>_debug_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s[%4lld] %.*s '%s' with value %.*s and %lld annotations:"</literal></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_debug_buf</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s[%4lld] %.*s '%s' with value %.*s."</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_debug_type</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_param_annotation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param_in</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>_debug_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_get_default_value</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>_debug_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s[%4lld] %s '%s' with value %.*s"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_debug_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_print_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>begin</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>line</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>here</name> <init>= <expr><name>begin</name></expr></init></decl>;</init> <condition><expr><name><name>here</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>here</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>begin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>len</name> <init>= <expr><name>here</name> <operator>-</operator> <name>begin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_line</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>here</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_line</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>here</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>here</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>here</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>here</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_line</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>here</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t\t[%4lld] %.*s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>begin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t\t[%4lld] %*s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>ep_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>effect_string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graphics_preprocessor</name> <init>= <expr><call><name>gs_preprocessor_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>graphics_preprocessor</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_def</name></name></type> <name>def</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cf_def_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>graphics_preprocessor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>str</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>graphics_preprocessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strref_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>unmerged_str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_preprocessor_add_def</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>effect</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cf_parser_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>effect_string</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name></name> <operator>&amp;&amp;</operator> <name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>is_whitespace</name><argument_list>(<argument><expr><operator>*</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>cur_token</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_parse_struct</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"technique"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_parse_technique</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"sampler_state"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_parse_sampler_state</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cf_token_is</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cf_adderror</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="string">"Unexpected code segment"</literal></expr></argument>,

<argument><expr><name>LEX_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cf_pass_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ep_parse_other</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"================================================================================"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Effect Parser reformatted shader '%s' to:"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_print_string</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>lex</name><operator>.</operator><name>reformatted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><call><name>error_data_has_errors</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>error_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ep_compile</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"================================================================================"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_write_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>is_const</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"const "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>is_uniform</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>used_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"uniform "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>array_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"[%u]"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>array_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_write_func_param_deps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>param_deps</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>param_deps</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>ep_getparam</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_write_param</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>param_deps</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_write_sampler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>sampler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sampler</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"sampler_state "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sampler</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_write_func_sampler_deps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>sampler_deps</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>sampler_deps</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_sampler</name></name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><call><name>ep_getsampler</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ep_write_sampler</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_write_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>EP_VAR_INOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"inout "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>EP_VAR_OUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"out "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>var_type</name></name> <operator>==</operator> <name>EP_VAR_UNIFORM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"uniform "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_write_struct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"struct "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_var</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_write_func_struct_deps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>struct_deps</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>struct_deps</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>ep_getstruct</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_write_struct</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ep_write_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_write_func_func_deps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>func_deps</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>func_deps</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func_dep</name> <init>= <expr><call><name>ep_getfunc</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>func_dep</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_write_func</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func_dep</name></expr></argument>, <argument><expr><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_write_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_func_param_deps</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_func_sampler_deps</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_func_struct_deps</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_func_func_deps</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ret_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>param_vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>param_vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ep_write_var</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>func</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_write_main_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>param_str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>empty_params</name> <init>= <expr><call><name>dstr_is_empty</name><argument_list>(<argument><expr><name>param_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>param_vars</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_var</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>param_vars</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_struct</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mapped</name> <init>= <expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>ep_getstruct</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mapped</name> <operator>=</operator> <call><name>ep_struct_mapped</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mapped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><name>param_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>param_str</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>param_str</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty_params</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>param_str</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_write_main</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>call_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>param_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>adjusted_call</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_init_copy_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adjusted_call</name></expr></argument>, <argument><expr><name>call_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ret_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" main("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_main_params</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_str</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">" : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n{\n\treturn "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adjusted_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ep_reset_written</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>written</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>structs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>written</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>written</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>samplers</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>written</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_makeshaderstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>shader_call</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name><name>shader_call</name><operator>-&gt;</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cf_token</name></name> <modifier>*</modifier></type><name>func_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_func</name></name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>call_str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>call_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name> <operator>&amp;&amp;</operator> <call><name>is_whitespace</name><argument_list>(<argument><expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>token</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CFTOKEN_NONE</name> <operator>||</operator> <call><name>strref_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>func_name</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CFTOKEN_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>ep_getparam_strref</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_write_param</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat_strref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>call_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>ep_getfunc_strref</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>func_name</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ep_write_func</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_write_main</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>call_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ep_reset_written</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_compile_annotations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>ep_annotations</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>gsp_annotations</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_resize</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gs_effect_param</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>gsp_annotations</name></expr></argument>,

<argument><expr><name><name>ep_annotations</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep_annotations</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name> <init>=

<expr><operator>(</operator><operator>(</operator>struct <name>gs_effect_param</name> <operator>*</operator><operator>)</operator><name><name>gsp_annotations</name><operator>-&gt;</operator><name>array</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param_in</name> <init>=

<expr><operator>(</operator><operator>(</operator>struct <name>ep_param</name> <operator>*</operator><operator>)</operator><name><name>ep_annotations</name><operator>-&gt;</operator><name>array</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>EFFECT_ANNOTATION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>effect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_move</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_effect_param_type</name><argument_list>(<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>debug_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>param_in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ep_compile_param_annotations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>ep_param_input</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>gs_effect_input</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ep_compile_annotations</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ep_param_input</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>da</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>gs_effect_input</name><operator>-&gt;</operator><name>annotations</name><operator>.</operator><name>da</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_compile_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_param</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_param</name></name> <modifier>*</modifier></type><name>param_in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_in</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param_in</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>EFFECT_PARAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>effect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_move</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>, <argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_effect_param_type</name><argument_list>(<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ViewProj"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>view_proj</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param_in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"World"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>world</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>debug_param</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>param_in</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ep_compile_param_annotations</name><argument_list>(<argument><expr><name>param_in</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ep_compile_pass_shaderparams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>pass_params</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>used_params</name></decl></parameter>,

<parameter><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>darray_resize</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pass_shaderparam</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pass_params</name></expr></argument>,

<argument><expr><name><name>used_params</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pass_params</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>param_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pass_shaderparam</name></name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name>param_name</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>used_params</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pass_shaderparam</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>pass_params</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>eparam</name></name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>,

<argument><expr><name><name>param_name</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>sparam</name></name> <operator>=</operator>

<call><name>gs_shader_get_param_by_name</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>param_name</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>debug_param</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>eparam</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>-&gt;</operator><name>sparam</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Effect shader parameter not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_compile_pass_shader</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>tech</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_pass</name></name> <modifier>*</modifier></type><name>pass_in</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pass_idx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>gs_shader_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>shader_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>location</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name></type> <name>used_params</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>pass_params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>gs_shader_t</name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shader_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cfp</name><operator>.</operator><name>lex</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GS_SHADER_VERTEX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>, <argument><expr><literal type="string">" (Vertex "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GS_SHADER_PIXEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>, <argument><expr><literal type="string">" (Pixel "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pass_idx</name> <operator>&lt;=</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>, <argument><expr><literal type="string">"shader, technique %s, pass %u)"</literal></expr></argument>, <argument><expr><name><name>tech</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>pass_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GS_SHADER_VERTEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_makeshaderstring</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shader_str</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pass_in</name><operator>-&gt;</operator><name>vertex_program</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pass</name><operator>-&gt;</operator><name>vertshader</name></name> <operator>=</operator> <call><name>gs_vertexshader_create</name><argument_list>(<argument><expr><name><name>shader_str</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>location</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <name><name>pass</name><operator>-&gt;</operator><name>vertshader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pass_params</name> <operator>=</operator> <operator>&amp;</operator><name><name>pass</name><operator>-&gt;</operator><name>vertshader_params</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GS_SHADER_PIXEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ep_makeshaderstring</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shader_str</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pass_in</name><operator>-&gt;</operator><name>fragment_program</name><operator>.</operator><name>da</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pass</name><operator>-&gt;</operator><name>pixelshader</name></name> <operator>=</operator> <call><name>gs_pixelshader_create</name><argument_list>(<argument><expr><name><name>shader_str</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>location</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <name><name>pass</name><operator>-&gt;</operator><name>pixelshader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pass_params</name> <operator>=</operator> <operator>&amp;</operator><name><name>pass</name><operator>-&gt;</operator><name>pixelshader_params</name><operator>.</operator><name>da</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t%s Shader:"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>GS_SHADER_VERTEX</name></expr> ?</condition><then> <expr><literal type="string">"Vertex"</literal></expr> </then><else>: <expr><literal type="string">"Fragment"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t\t\tCode:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_print_string</name><argument_list>(<argument><expr><literal type="string">"\t\t\t\t\t"</literal></expr></argument>, <argument><expr><name><name>shader_str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t\t\tParameters:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>shader</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ep_compile_pass_shaderparams</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>pass_params</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>used_params</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_array_free</name><argument_list>(<argument><expr><name><name>used_params</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>used_params</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>used_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shader_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ep_compile_pass</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>tech</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ep_technique</name></name> <modifier>*</modifier></type><name>tech_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_pass</name></name> <modifier>*</modifier></type><name>pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_pass</name></name> <modifier>*</modifier></type><name>pass_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pass</name> <operator>=</operator> <name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pass_in</name> <operator>=</operator> <name><name>tech_in</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>pass_in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pass</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>EFFECT_PASS</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t\t[%4lld] Pass '%s':"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_compile_pass_shader</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>tech</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>pass_in</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><name>GS_SHADER_VERTEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Pass (%zu) &lt;%s&gt; missing vertex shader!"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_compile_pass_shader</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>tech</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>pass_in</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><name>GS_SHADER_PIXEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Pass (%zu) &lt;%s&gt; missing pixel shader!"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>pass</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ep_compile_technique</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gs_effect_technique</name></name> <modifier>*</modifier></type><name>tech</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ep_technique</name></name> <modifier>*</modifier></type><name>tech_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tech</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tech_in</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>tech_in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>EFFECT_TECHNIQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tech</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>effect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>tech</name><operator>-&gt;</operator><name>passes</name></name></expr></argument>, <argument><expr><name><name>tech_in</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\t[%4lld] Technique '%s' has %lld passes:"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><name><name>tech</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tech</name><operator>-&gt;</operator><name>passes</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_compile_pass</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>tech</name></expr></argument>, <argument><expr><name>tech_in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ep_compile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>effect_parser</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>effect</name><operator>-&gt;</operator><name>techniques</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Shader has %lld parameters:"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ep_compile_param</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG_SHADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Shader has %lld techniques:"</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>techniques</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ep_compile_technique</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

</unit>
