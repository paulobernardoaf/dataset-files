<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\graphics\image-file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"image-file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/platform.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blog</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>blog(level, "%s: " format, __FUNCTION__, __VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>bi_def_bitmap_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>bmalloc</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bi_def_bitmap_set_opaque</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>bi_def_bitmap_test_opaque</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bi_def_bitmap_get_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bi_def_bitmap_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bi_def_bitmap_modified</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_full_decoded_gif_size</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator>

<name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>alloc_mem</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>mem_usage</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mem_usage</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>mem_usage</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>bzalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_animated_gif</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>mem_usage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_animated_gif</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gif_result</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>size_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_create</name></name> <operator>=</operator> <name>bi_def_bitmap_create</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_destroy</name></name> <operator>=</operator> <name>bi_def_bitmap_destroy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_get_buffer</name></name> <operator>=</operator> <name>bi_def_bitmap_get_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_modified</name></name> <operator>=</operator> <name>bi_def_bitmap_modified</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_set_opaque</name></name> <operator>=</operator> <name>bi_def_bitmap_set_opaque</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name><operator>.</operator><name>bitmap_test_opaque</name></name> <operator>=</operator> <name>bi_def_bitmap_test_opaque</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gif_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>bitmap_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>os_ftelli64</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif_data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_read</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to fully read gif file '%s'."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gif_initialise</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Failed to initialize gif '%s', "</literal>

<literal type="string">"possible file corruption"</literal></expr></argument>,

<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>result</name> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">4096</literal> <operator>||</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Bad texture dimensions (%dx%d) in '%s'"</literal></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name> <operator>*</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_count</name></name> <operator>*</operator> <literal type="number">4LLU</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>get_full_decoded_gif_size</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>max_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Gif '%s' overflowed maximum pointer size"</literal></expr></argument>,

<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>is_animated_gif</name></name> <operator>=</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>is_animated_gif</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gif_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name></name> <operator>=</operator>

<call><name>alloc_mem</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>mem_usage</name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_data</name></name> <operator>=</operator> <call><name>alloc_mem</name><argument_list>(

<argument><expr><name>image</name></expr></argument>, <argument><expr><name>mem_usage</name></expr></argument>, <argument><expr><call><name>get_full_decoded_gif_size</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gif_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Couldn't decode frame %u "</literal>

<literal type="string">"of '%s'"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gif_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>GS_RGBA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mem_usage</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mem_usage</name> <operator>+=</operator> <name><name>image</name><operator>-&gt;</operator><name>cx</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>cy</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mem_usage</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gif_finalise</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>gif_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_animated_gif</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>not_animated</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>not_animated</name>:</label>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>is_animated_gif</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gs_image_file_init_internal</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>mem_usage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>file</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".gif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>init_animated_gif</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>mem_usage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>texture_data</name></name> <operator>=</operator> <call><name>gs_create_texture_file_data</name><argument_list>(

<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mem_usage</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mem_usage</name> <operator>+=</operator> <name><name>image</name><operator>-&gt;</operator><name>cx</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>cy</name></name> <operator>*</operator>

<call><name>gs_get_format_bpp</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>texture_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to load file '%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_image_file_free</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_image_file_init</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gs_image_file_init_internal</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_image_file_free</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>is_animated_gif</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gif_finalise</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>texture_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_image_file2_init</name><parameter_list>(<parameter><decl><type><name>gs_image_file2_t</name> <modifier>*</modifier></type><name>if2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gs_image_file_init_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if2</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>if2</name><operator>-&gt;</operator><name>mem_usage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_image_file_init_texture</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>is_animated_gif</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_image</name></name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>texture_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>texture_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>texture_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>get_time</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_delay</name> <operator>*</operator> <literal type="number">10000000ULL</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">100000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>calculate_new_frame</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>elapsed_time_ns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loops</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_frame</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>cur_frame</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>cur_time</name></name> <operator>+=</operator> <name>elapsed_time_ns</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>get_time</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>new_frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>cur_time</name></name> <operator>&lt;=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>cur_time</name></name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>++</operator><name>new_frame</name> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>loops</name> <operator>||</operator> <operator>++</operator><name><name>image</name><operator>-&gt;</operator><name>cur_loop</name></name> <operator>&lt;</operator> <name>loops</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>cur_loop</name></name> <operator>==</operator> <name>loops</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_frame</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>new_frame</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_new_frame</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name><index>[<expr><name>new_frame</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last_frame</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>new_frame</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>last_decoded_frame</name></name><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><name><name>image</name><operator>-&gt;</operator><name>last_decoded_frame</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>last_frame</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_frame</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gif_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GIF_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>gif_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>gif</name></name></expr></argument>, <argument><expr><name>new_frame</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GIF_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name>new_frame</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name> <operator>*</operator>

<name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name><index>[<expr><name>new_frame</name></expr>]</index></name> <operator>=</operator>

<name><name>image</name><operator>-&gt;</operator><name>animation_frame_data</name></name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name><index>[<expr><name>new_frame</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>frame_image</name></name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>last_decoded_frame</name></name> <operator>=</operator> <name>new_frame</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>=</operator> <name>new_frame</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gs_image_file_tick</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>elapsed_time_ns</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>loops</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>is_animated_gif</name></name> <operator>||</operator> <operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>loops</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>loop_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>loops</name> <operator>&gt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>loops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>loops</name> <operator>||</operator> <name><name>image</name><operator>-&gt;</operator><name>cur_loop</name></name> <operator>&lt;</operator> <name>loops</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_frame</name> <init>=

<expr><call><name>calculate_new_frame</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>elapsed_time_ns</name></expr></argument>, <argument><expr><name>loops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_frame</name> <operator>!=</operator> <name><name>image</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_new_frame</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>new_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gs_image_file_update_texture</name><parameter_list>(<parameter><decl><type><name>gs_image_file_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>is_animated_gif</name></name> <operator>||</operator> <operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name><index>[<expr><name><name>image</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_new_frame</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>cur_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_texture_set_image</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>animation_frame_cache</name><index>[<expr><name><name>image</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>image</name><operator>-&gt;</operator><name>gif</name><operator>.</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
