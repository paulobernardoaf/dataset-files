<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-ffmpeg-compat.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBAVCODEC_VERSION_CHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((LIBAVCODEC_VERSION_MICRO &lt; 100 &amp;&amp; LIBAVCODEC_VERSION_INT &gt;= AV_VERSION_INT(a, b, c)) || (LIBAVCODEC_VERSION_MICRO &gt;= 100 &amp;&amp; LIBAVCODEC_VERSION_INT &gt;= AV_VERSION_INT(a, d, e)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>LIBAVCODEC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">54</literal><operator>,</operator> <literal type="number">28</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">59</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avcodec_free_frame</name></cpp:macro> <cpp:value>av_freep</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <literal type="number">0x371c01</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_frame_alloc</name></cpp:macro> <cpp:value>avcodec_alloc_frame</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_frame_unref</name></cpp:macro> <cpp:value>avcodec_get_frame_defaults</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_frame_free</name></cpp:macro> <cpp:value>avcodec_free_frame</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">58</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_CAP_TRUNC</name></cpp:macro> <cpp:value>AV_CODEC_CAP_TRUNCATED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_FLAG_TRUNC</name></cpp:macro> <cpp:value>AV_CODEC_FLAG_TRUNCATED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_BUFFER_PADDING_SIZE</name></cpp:macro> <cpp:value>AV_INPUT_BUFFER_PADDING_SIZE</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_CAP_TRUNC</name></cpp:macro> <cpp:value>CODEC_CAP_TRUNCATED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_FLAG_TRUNC</name></cpp:macro> <cpp:value>CODEC_FLAG_TRUNCATED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_BUFFER_PADDING_SIZE</name></cpp:macro> <cpp:value>FF_INPUT_BUFFER_PADDING_SIZE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
