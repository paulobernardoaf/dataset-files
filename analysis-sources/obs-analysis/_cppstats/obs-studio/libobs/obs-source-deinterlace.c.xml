<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-source-deinterlace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ready_deinterlace_frames</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>next_frame</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>prev_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sys_offset</name> <init>= <expr><name>sys_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_sys_timestamp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_time</name> <init>= <expr><name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>next_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_frame</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>prev_frame</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name> <operator>&amp;&amp;</operator>

<name><name>source</name><operator>-&gt;</operator><name>deinterlace_offset</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>timestamp</name> <init>=

<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>timestamp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>after_timestamp</name> <init>=

<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>timestamp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>duration</name> <init>=

<expr><name>after_timestamp</name> <operator>-</operator> <name>timestamp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>frame_end</name> <init>=

<expr><name>timestamp</name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>+</operator>

<name>duration</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sys_time</name> <operator>&lt;</operator> <name>frame_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_frame</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_frame_ts</name></name> <operator>=</operator>

<name>timestamp</name> <operator>-</operator> <name>duration</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>prev_frame</name> <operator>=</operator> <name>prev_frame</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>frame_out_of_bounds</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame_time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>frame_offset</name> <operator>=</operator> <name>frame_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>+=</operator> <name>sys_offset</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>&gt;</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>-</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2000000</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>prev_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>exit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prev_frame</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_frame</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name>next_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_frame</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name>frame_time</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_TS_VAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator>

<name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name>frame_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_time</name> <operator>=</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_offset</name> <operator>=</operator> <name>frame_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>prev_frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev_frame</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>frame</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>first_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>prev_frame</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>uint64_diff</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ts1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ts1</name> <operator>&lt;</operator> <name>ts2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>ts2</name> <operator>-</operator> <name>ts1</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>ts1</name> <operator>-</operator> <name>ts2</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWOX_TOLERANCE</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_JUMP_THRESHOLD</name></cpp:macro> <cpp:value>70000000ULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>deinterlace_get_closest_frames</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>half_interval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>async_unbuffered</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>frame_end</name> <init>=

<expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_frame_ts</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>deinterlace_half_duration</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator>

<name>TWOX_TOLERANCE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sys_time</name> <operator>&lt;</operator> <name>frame_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>diff</name> <init>= <expr><name>frame_end</name> <operator>-</operator> <name>sys_time</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>TS_JUMP_THRESHOLD</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>video_output_get_info</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>half_interval</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>fps_den</name></name> <operator>*</operator> <literal type="number">500000000ULL</literal> <operator>/</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>fps_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>first_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ready_deinterlace_frames</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sys_time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name><operator>-&gt;</operator><name>prev_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_async_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_half_duration</name></name> <operator>=</operator>

<operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>prev_async_frame</name><operator>-&gt;</operator><name>timestamp</name></name><operator>)</operator> <operator>/</operator>

<literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_half_duration</name></name> <operator>=</operator>

<operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>deinterlace_frame_ts</name></name><operator>)</operator> <operator>/</operator>

<literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_frame_ts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>deinterlace_frame_ts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset_diff</name> <init>=

<expr><call><name>uint64_diff</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset_diff</name> <operator>&gt;</operator> <name>half_interval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>deinterlace_process_last_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev_async_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_async_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>deinterlace_get_closest_frames</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sys_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_deinterlace_texture_size</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_gpu_conversion</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name> <operator>=</operator>

<call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_BGRX</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name> <init>=

<expr><call><name>convert_video_format</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>get_prev_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>updated</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>updated</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>prev_async_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>prev_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>frame</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>deinterlace_update_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>updated</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_rendered</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>get_prev_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_rendered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>filter_async_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>set_async_texture_size</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_async_textures</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name></name></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>updated</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>prev_tex</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator>

<name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>prev_tex</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>get_effect</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>obs_deinterlace_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OBS_DEINTERLACE_MODE_DISABLE</name></expr>:</case>

<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_DISCARD</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_discard_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_discard.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_RETRO</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_discard_2x_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_discard_2x.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_BLEND</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_blend_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_blend.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_BLEND_2X</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_blend_2x_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_blend_2x.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_LINEAR</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_linear_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_linear.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_LINEAR_2X</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_linear_2x_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_linear_2x.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_YADIF</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_yadif_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_yadif.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OBS_DEINTERLACE_MODE_YADIF_2X</name></expr>:</case>

<return>return <expr><call><name>obs_load_effect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>deinterlace_yadif_2x_effect</name></name></expr></argument>,

<argument><expr><literal type="string">"deinterlace_yadif_2x.effect"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>deinterlace_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_effect</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame2_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>prev</name> <init>=

<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"previous_image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"field_order"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>frame2</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"frame2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>dimensions</name> <init>=

<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"dimensions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>size</name> <init>= <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>async_width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>async_height</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>cur_tex</name> <init>=

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>async_texrender</name></name></expr>

?</condition><then> <expr><call><name>gs_texrender_get_texture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>async_texrender</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>prev_tex</name> <init>=

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr>

?</condition><then> <expr><call><name>gs_texrender_get_texture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_tex</name> <operator>||</operator> <operator>!</operator><name>prev_tex</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>async_width</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>async_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>cur_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>prev_tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_int</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>deinterlace_top_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>dimensions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame2_ts</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>deinterlace_frame_ts</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>deinterlace_offset</name></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>deinterlace_half_duration</name></name> <operator>-</operator> <name>TWOX_TOLERANCE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_bool</name><argument_list>(<argument><expr><name>frame2</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name> <operator>&gt;=</operator> <name>frame2_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>async_flip</name></name></expr> ?</condition><then> <expr><name>GS_FLIP_V</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>async_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>async_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_deinterlacing</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_deinterlace_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_format</name></name> <operator>!=</operator> <name>VIDEO_FORMAT_NONE</name> <operator>&amp;&amp;</operator>

<name><name>source</name><operator>-&gt;</operator><name>async_width</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_deinterlace_texture_size</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_effect</name></name> <operator>=</operator> <call><name>get_effect</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>prev_async_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>prev_async_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>prev_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>disable_deinterlacing</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name> <operator>=</operator> <name>OBS_DEINTERLACE_MODE_DISABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_deinterlace_mode</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_deinterlace_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_deinterlace_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name> <operator>==</operator> <name>mode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name> <operator>==</operator> <name>OBS_DEINTERLACE_MODE_DISABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>enable_deinterlacing</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>OBS_DEINTERLACE_MODE_DISABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>disable_deinterlacing</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_effect</name></name> <operator>=</operator> <call><name>get_effect</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_deinterlace_mode</name></name></type>

<name>obs_source_get_deinterlace_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_deinterlace_mode"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name></expr>

</then><else>: <expr><name>OBS_DEINTERLACE_MODE_DISABLE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_deinterlace_field_order</name><parameter_list>(

<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_deinterlace_field_order</name></name></type> <name>field_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_deinterlace_field_order"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_top_first</name></name> <operator>=</operator> <name>field_order</name> <operator>==</operator>

<name>OBS_DEINTERLACE_FIELD_ORDER_TOP</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_deinterlace_field_order</name></name></type>

<name>obs_source_get_deinterlace_field_order</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_deinterlace_field_order"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OBS_DEINTERLACE_FIELD_ORDER_TOP</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_top_first</name></name></expr>

?</condition><then> <expr><name>OBS_DEINTERLACE_FIELD_ORDER_TOP</name></expr>

</then><else>: <expr><name>OBS_DEINTERLACE_FIELD_ORDER_BOTTOM</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
