<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\audio-monitoring\osx\coreaudio-enum-devices.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CFString.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreAudio/CoreAudio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../obs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/apple/cfstring-utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mac-helpers.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_enum_audio_monitoring_device</name><parameter_list>(<parameter><decl><type><name>obs_enum_audio_device_cb</name></type> <name>cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>allow_inputs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cf_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cf_uid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cont</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioObjectPropertyAddress</name></type> <name>addr</name> <init>= <expr><block>{<expr><name>kAudioDevicePropertyStreams</name></expr>,

<expr><name>kAudioDevicePropertyScopeOutput</name></expr>,

<expr><name>kAudioObjectPropertyElementMaster</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AudioObjectGetPropertyDataSize</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_inputs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CFStringRef</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>mSelector</name></name> <operator>=</operator> <name>kAudioDevicePropertyDeviceUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf_uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get audio device UID"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>mSelector</name></name> <operator>=</operator> <name>kAudioDevicePropertyDeviceNameCFString</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get audio device name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>cfstr_copy_cstr</name><argument_list>(<argument><expr><name>cf_name</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: failed to convert name"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>cfstr_copy_cstr</name><argument_list>(<argument><expr><name>cf_uid</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: failed to convert uid"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>cb</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cf_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cf_uid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cont</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enum_audio_devices</name><parameter_list>(<parameter><decl><type><name>obs_enum_audio_device_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>allow_inputs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioObjectPropertyAddress</name></type> <name>addr</name> <init>= <expr><block>{<expr><name>kAudioHardwarePropertyDevices</name></expr>,

<expr><name>kAudioObjectPropertyScopeGlobal</name></expr>,

<expr><name>kAudioObjectPropertyElementMaster</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioDeviceID</name> <modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyDataSize</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get data size"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ids</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioDeviceID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"get data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>UInt32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_enum_audio_monitoring_device</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>allow_inputs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_enum_audio_monitoring_devices</name><parameter_list>(<parameter><decl><type><name>obs_enum_audio_device_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>enum_audio_devices</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>alloc_default_id</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_id</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_id</name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_default_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioObjectPropertyAddress</name></type> <name>addr</name> <init>= <expr><block>{

<expr><name>kAudioHardwarePropertyDefaultSystemOutputDevice</name></expr>,

<expr><name>kAudioObjectPropertyScopeGlobal</name></expr>,

<expr><name>kAudioObjectPropertyElementMaster</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioDeviceID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>success</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="string">"AudioObjectGetPropertyData"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_enum_audio_monitoring_device</name><argument_list>(<argument><expr><name>alloc_default_id</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_id</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>device_name_info</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>enum_device_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>device_name_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>devices_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>device_name_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id1</name> <operator>||</operator> <operator>!</operator><name>id2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>id1</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_default_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id1</name> <operator>=</operator> <name>default_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>id2</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_default_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id2</name> <operator>=</operator> <name>default_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enum_audio_devices</name><argument_list>(<argument><expr><name>enum_device_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name1</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enum_audio_devices</name><argument_list>(<argument><expr><name>enum_device_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name2</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>name1</name> <operator>&amp;&amp;</operator> <name>name2</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>default_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>match</name></expr>;</return>

</block_content>}</block></function>

</unit>
