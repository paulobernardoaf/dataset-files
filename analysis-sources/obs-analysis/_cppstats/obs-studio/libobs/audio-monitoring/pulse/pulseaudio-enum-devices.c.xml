<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\audio-monitoring\pulse\pulseaudio-enum-devices.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs-internal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pulseaudio-wrapper.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_output_info</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_source_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>i</name><operator>-&gt;</operator><name>monitor_of_sink</name></name> <operator>==</operator> <name>PA_INVALID_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>enum_cb</name></name> <modifier>*</modifier></type><name>ecb</name> <init>= <expr><operator>(</operator>struct <name>enum_cb</name> <operator>*</operator><operator>)</operator><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecb</name><operator>-&gt;</operator><name>cont</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ecb</name><operator>-&gt;</operator><name>cont</name></name> <operator>=</operator> <call><name><name>ecb</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>ecb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>description</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>skip</name>:</label>

<expr_stmt><expr><call><name>pulseaudio_signal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_enum_audio_monitoring_devices</name><parameter_list>(<parameter><decl><type><name>obs_enum_audio_device_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>enum_cb</name></name> <modifier>*</modifier></type><name>ecb</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>enum_cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ecb</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecb</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecb</name><operator>-&gt;</operator><name>cont</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_source_info_cb_t</name></type> <name>pa_cb</name> <init>= <expr><name>pulseaudio_output_info</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pulseaudio_get_source_info_list</name><argument_list>(<argument><expr><name>pa_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulseaudio_unref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
