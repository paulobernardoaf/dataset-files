<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\audio-monitoring\win32\wasapi-enum-devices.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../obs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wasapi-output.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;propsys.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_PROPERTYKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFINE_PROPERTYKEY</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_PROPERTYKEY</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const PROPERTYKEY id = {{a, b, c, { d, e, f, g, h, i, j, k, }}, l};</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DEFINE_PROPERTYKEY</name><argument_list>(<argument><expr><name>PKEY_Device_FriendlyName</name></expr></argument>, <argument><expr><literal type="number">0xa45c254e</literal></expr></argument>, <argument><expr><literal type="number">0xdf1c</literal></expr></argument>, <argument><expr><literal type="number">0x4efd</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>,

<argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x67</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0xa8</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functiondiscoverykeys_devpkey.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_device_info</name><parameter_list>(<parameter><decl><type><name>obs_enum_audio_device_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>IMMDeviceCollection</name> <modifier>*</modifier></type><name>collection</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IPropertyStore</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROPVARIANT</name></type> <name>name_var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>utf8_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>w_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>utf8_id</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cont</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>collection</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Item</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>device</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetId</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>device</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>OpenPropertyStore</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>STGM_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PropVariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>store</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PKEY_Device_FriendlyName</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>name_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>w_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8_id</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name><name>name_var</name><operator>.</operator><name>pwszVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8_name</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>cb</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>utf8_name</name></expr></argument>, <argument><expr><name>utf8_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>w_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cont</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_enum_audio_monitoring_devices</name><parameter_list>(<parameter><decl><type><name>obs_enum_audio_device_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>enumerator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMMDeviceCollection</name> <modifier>*</modifier></type><name>collection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_MMDeviceEnumerator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IMMDeviceEnumerator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>enumerator</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>EnumAudioEndpoints</name></name><argument_list>(

<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>eRender</name></expr></argument>, <argument><expr><name>DEVICE_STATE_ACTIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>collection</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetCount</name></name><argument_list>(<argument><expr><name>collection</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>UINT</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_device_info</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>safe_release</name><argument_list>(<argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_default_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>immde</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>w_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_MMDeviceEnumerator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IMMDeviceEnumerator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>immde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>immde</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDefaultAudioEndpoint</name></name><argument_list>(<argument><expr><name>immde</name></expr></argument>, <argument><expr><name>eRender</name></expr></argument>, <argument><expr><name>eConsole</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>device</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetId</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8_ptr</name><argument_list>(<argument><expr><name>w_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_id</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>immde</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>immde</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>immde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>device</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>w_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>devices_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id1</name> <operator>||</operator> <operator>!</operator><name>id2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>id1</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_default_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id1</name> <operator>=</operator> <name>default_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>id2</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_default_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id2</name> <operator>=</operator> <name>default_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>id1</name></expr></argument>, <argument><expr><name>id2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>default_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>match</name></expr>;</return>

</block_content>}</block></function>

</unit>
