<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-service.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>find_service</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obs</name><operator>-&gt;</operator><name>service_types</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>service_types</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>obs</name><operator>-&gt;</operator><name>service_types</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_display_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_service</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>info</name><operator>-&gt;</operator><name>get_name</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>obs_service_create_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_service</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Service '%s' not found"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_service</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_context_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>OBS_OBJ_TYPE_SERVICE</name></expr></argument>,

<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>=</operator>

<call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create service '%s'!"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_weak_service_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_context_data_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>services_mutex</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"service '%s' (%s) created"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>service</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_service_t</name> <modifier>*</modifier></type><name>obs_service_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_service_create_internal</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_service_t</name> <modifier>*</modifier></type><name>obs_service_create_private</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_service_create_internal</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>actually_destroy_service</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"service '%s' destroyed"</literal></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_context_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>owns_info_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_destroy</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>service</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_context_data_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>actually_destroy_service</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_name"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>settings</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_service_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_service</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_get_service_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>find_service</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>defaults</name> <init>= <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>properties</name></decl>;</decl_stmt>

<expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>properties</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_service_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_properties"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_type"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_update</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_update"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_service_get_settings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>obs_service_get_signal_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_signal_handler"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>obs_service_get_proc_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_proc_handler"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>procs</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_url"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_url</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_url</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_key"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_key</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_key</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_username</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_username"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_username</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_username</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_password</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_password"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_password</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_password</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_activate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_service_deactivate: service '%s' "</literal>

<literal type="string">"is not assigned to an output"</literal></expr></argument>,

<argument><expr><call><name>obs_service_get_name</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>activate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>activate</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_deactivate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remove</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_deactivate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs_service_deactivate: service '%s' "</literal>

<literal type="string">"is not assigned to an output"</literal></expr></argument>,

<argument><expr><call><name>obs_service_get_name</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>deactivate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>deactivate</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>destroy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>actually_destroy_service</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>remove</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_service_initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_initialize"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_output_valid</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"obs_service_initialize"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>initialize</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_apply_encoder_settings</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>video_encoder_settings</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>audio_encoder_settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_apply_encoder_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>apply_encoder_settings</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>video_encoder_settings</name> <operator>||</operator> <name>audio_encoder_settings</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>apply_encoder_settings</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name>video_encoder_settings</name></expr></argument>,

<argument><expr><name>audio_encoder_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_addref</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_service_release</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>control</name> <init>= <expr><name><name>service</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_service_destroy</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_weak_service_release</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_service_addref</name><parameter_list>(<parameter><decl><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_weak_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_service_release</name><parameter_list>(<parameter><decl><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>obs_service_t</name> <modifier>*</modifier></type><name>obs_service_get_ref</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>obs_weak_service_get_service</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>obs_service_get_weak_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>weak</name> <init>= <expr><name><name>service</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_weak_service_addref</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>weak</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_service_t</name> <modifier>*</modifier></type><name>obs_weak_service_get_service</name><parameter_list>(<parameter><decl><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_get_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>weak</name><operator>-&gt;</operator><name>service</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_weak_service_references_service</name><parameter_list>(<parameter><decl><type><name>obs_weak_service_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>,

<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>weak</name> <operator>&amp;&amp;</operator> <name>service</name> <operator>&amp;&amp;</operator> <name><name>weak</name><operator>-&gt;</operator><name>service</name></name> <operator>==</operator> <name>service</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_service_get_type_data</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_type_data"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type_data</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_id"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_service_get_output_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_service_valid</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"obs_service_get_output_type"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_output_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>service</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_output_type</name></name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
