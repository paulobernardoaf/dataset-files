<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-data.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/bmem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/threading.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/darray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/vec2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/vec3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/vec4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/quat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jansson.h&gt;</cpp:file></cpp:include>

<struct>struct <name>obs_data_item</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>default_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>default_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>autoselect_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_data</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>first_item</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_data_array</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_data_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>objects</name></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>obs_data_number</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>obs_data_number_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>int_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>double_val</name></decl>;</decl_stmt>

}</block>;</union>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_align_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alignment</name> <init>= <expr><call><name>base_get_alignment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_name_align_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alignment</name> <init>= <expr><call><name>base_get_alignment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_item</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>name_size</name> <operator>+</operator> <name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>total_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_item</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>get_item_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_item</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_data_ptr</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>get_item_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>name_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_item_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_default_data_ptr</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>get_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_item_default_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr> ?</condition><then> <expr><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_autoselect_data_ptr</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>default_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_item_autoselect_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr> ?</condition><then> <expr><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>obs_data_item_total_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_item</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>name_len</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>+</operator>

<name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_item_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_item_default_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><name>obs_data_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_item_autoselect_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><name>obs_data_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_array_t</name> <modifier>*</modifier></type><name>get_item_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <operator>(</operator><name>obs_data_array_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>array</name></expr> ?</condition><then> <expr><operator>*</operator><name>array</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_array_t</name> <modifier>*</modifier></type>

<name>get_item_default_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><name>obs_data_array_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_array_t</name> <modifier>*</modifier></type>

<name>get_item_autoselect_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><name>obs_data_array_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>item_data_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_data_item_has_user_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_item_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>get_item_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>item_default_data_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_item_default_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>get_item_default_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>item_autoselect_data_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_item_autoselect_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>get_item_autoselect_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>item_data_addref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_item_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>get_item_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_array_addref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>item_default_data_addref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_item_default_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>get_item_default_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_array_addref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>item_autoselect_data_addref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_item_autoselect_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>get_item_autoselect_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_array_addref</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>obs_data_item_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>default_data</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>autoselect_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_size</name></decl>, <decl><type ref="prev"/><name>total_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name_size</name> <operator>=</operator> <call><name>get_name_align_size</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name>name_size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_item</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>total_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <name>name_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>default_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>autoselect_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_data_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>get_item_prev_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_next</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>current</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>prev_next</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_next</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_item_detach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_next</name> <init>=

<expr><call><name>get_item_prev_next</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>prev_next</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_item_reattach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>new_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_next</name> <init>=

<expr><call><name>get_item_prev_next</name><argument_list>(<argument><expr><name><name>new_ptr</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>old_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>prev_next</name> <operator>=</operator> <name>new_ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type>

<name>obs_data_item_ensure_capacity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><call><name>obs_data_item_total_size</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>new_item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;=</operator> <name>new_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>item</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_item</name> <operator>=</operator> <call><name>brealloc</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_reattach</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>new_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_item</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_item_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>item_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_default_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_autoselect_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_detach</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>move_data</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>old_item</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>old_data</name></decl></parameter>,

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>old_offset</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>old_data</name> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>old_item</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>new_offset</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <name>new_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <name>old_offset</name></expr></argument>,

<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_item_setdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_item</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p_item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>*</operator><name>p_item</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>old_default_data_pos</name> <init>=

<expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>item</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>item_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name><operator>)</operator></expr>

?</condition><then> <expr><call><name>get_align_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>obs_data_item_ensure_capacity</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <name>old_default_data_pos</name></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_data_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_item</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_item_set_default_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_item</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p_item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>*</operator><name>p_item</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_autoselect_data</name> <init>= <expr><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>item_default_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr> ?</condition><then> <expr><call><name>get_align_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr> ?</condition><then> <expr><call><name>get_align_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>obs_data_item_ensure_capacity</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>move_data</name><argument_list>(<argument><expr><operator>*</operator><name>p_item</name></expr></argument>, <argument><expr><name>old_autoselect_data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>get_item_default_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_default_data_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_item</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>obs_data_item_set_autoselect_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_item</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p_item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>*</operator><name>p_item</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>item_autoselect_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr> ?</condition><then> <expr><call><name>get_align_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr> ?</condition><then> <expr><call><name>get_align_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>obs_data_item_ensure_capacity</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>get_item_autoselect_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_autoselect_data_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_item</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>obs_data_add_json_item</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_add_json_object_data</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jobj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jitem</name></decl>;</decl_stmt>

<macro><name>json_object_foreach</name> <argument_list>(<argument>jobj</argument>, <argument>item_key</argument>, <argument>jitem</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_add_json_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item_key</name></expr></argument>, <argument><expr><name>jitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_add_json_object</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jobj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>sub_obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_add_json_object_data</name><argument_list>(<argument><expr><name>sub_obj</name></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>sub_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>sub_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_data_add_json_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jarray</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>obs_data_array_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jitem</name></decl>;</decl_stmt>

<macro><name>json_array_foreach</name> <argument_list>(<argument>jarray</argument>, <argument>idx</argument>, <argument>jitem</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_is_object</name><argument_list>(<argument><expr><name>jitem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_add_json_object_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>jitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_push_back</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>obs_data_set_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_data_add_json_item</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>json_is_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_add_json_object</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>json_is_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_add_json_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>json_is_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_string_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>json_is_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_integer_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>json_is_real</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>json_real_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>json_is_true</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>json_is_false</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_json_string</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>obs_data_item_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>json_string</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_json_number</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_data_number_type</name></name></type> <name>type</name> <init>= <expr><call><name>obs_data_item_numtype</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_DATA_NUM_INT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><call><name>obs_data_item_get_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>json_integer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><call><name>obs_data_item_get_double</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>json_real</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_json_bool</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>val</name> <init>= <expr><call><name>obs_data_item_get_bool</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><call><name>json_true</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>json_false</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>obs_data_to_json</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_json_obj</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>obs_data_item_get_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>obs_data_to_json</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_json_array</name><parameter_list>(<parameter><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jarray</name> <init>= <expr><call><name>json_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>obs_data_item_get_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>obs_data_array_count</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>sub_item</name> <init>= <expr><call><name>obs_data_array_item</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>jitem</name> <init>= <expr><call><name>obs_data_to_json</name><argument_list>(<argument><expr><name>sub_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_array_append_new</name><argument_list>(<argument><expr><name>jarray</name></expr></argument>, <argument><expr><name>jitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>sub_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>json_object_set_new</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>json_t</name> <modifier>*</modifier></type><name>obs_data_to_json</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>json_object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <call><name>obs_data_first</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>item</name></expr>;</condition> <incr><expr><call><name>obs_data_item_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name> <init>= <expr><call><name>obs_data_item_gettype</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_data_item_has_user_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_DATA_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_json_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_DATA_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_json_number</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_DATA_BOOLEAN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_json_bool</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_json_obj</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_json_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>json</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_create</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_create_from_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>json_loads</name><argument_list>(<argument><expr><name>json_string</name></expr></argument>, <argument><expr><name>JSON_REJECT_DUPLICATES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_add_json_object_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"obs-data.c: [obs_data_create_from_json] "</literal>

<literal type="string">"Failed reading json string (%d): %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_create_from_json_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_data</name> <init>= <expr><call><name>os_quick_read_utf8_file</name><argument_list>(<argument><expr><name>json_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>obs_data_create_from_json</name><argument_list>(<argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_create_from_json_file_safe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_file</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>backup_ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>file_data</name> <init>= <expr><call><name>obs_data_create_from_json_file</name><argument_list>(<argument><expr><name>json_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_data</name> <operator>&amp;&amp;</operator> <name>backup_ext</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>backup_ext</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>backup_file</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup_file</name></expr></argument>, <argument><expr><name>json_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>backup_ext</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup_file</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup_file</name></expr></argument>, <argument><expr><name>backup_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_file_exists</name><argument_list>(<argument><expr><name><name>backup_file</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"obs-data.c: "</literal>

<literal type="string">"[obs_data_create_from_json_file_safe] "</literal>

<literal type="string">"attempting backup file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_rename</name><argument_list>(<argument><expr><name><name>backup_file</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>json_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_data</name> <operator>=</operator> <call><name>obs_data_create_from_json_file</name><argument_list>(<argument><expr><name>json_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>file_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_addref</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_release</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_destroy</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_get_json</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>json_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>obs_data_to_json</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <call><name>json_dumps</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>JSON_PRESERVE_ORDER</name> <operator>|</operator> <call><name>JSON_INDENT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>json_decref</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_save_json</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>obs_data_get_json</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>json</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>os_quick_write_utf8_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_save_json_safe</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>temp_ext</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>backup_ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>obs_data_get_json</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>json</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>os_quick_write_utf8_file_safe</name><argument_list>(

<argument><expr><name>file</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>temp_ext</name></expr></argument>, <argument><expr><name>backup_ext</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>get_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>item</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_item_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>default_data</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>autoselect_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>new_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>item</name> <operator>||</operator> <operator>(</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>item</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_item</name> <operator>=</operator> <call><name>obs_data_item_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>default_data</name></expr></argument>, <argument><expr><name>autoselect_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>obs_data_first</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>obs_data_first</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_item_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>prev</name> <operator>&amp;&amp;</operator> <name>next</name></expr>;</condition>

<incr><expr><call><name>obs_data_item_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>obs_data_item_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>default_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_set_default_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>autoselect_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_set_autoselect_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_setdata</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>actual_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>actual_item</name> <operator>=</operator> <call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name>actual_item</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_item_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_item_def</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>actual_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>actual_item</name> <operator>=</operator> <call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name>actual_item</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>item</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>item</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_item_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_item_auto</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>actual_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>actual_item</name> <operator>=</operator> <call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name>actual_item</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_item_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>new_obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_data_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>new_array</name> <init>= <expr><call><name>obs_data_array_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_reserve</name><argument_list>(<argument><expr><name><name>new_array</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>new_obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_push_back</name><argument_list>(<argument><expr><name>new_array</name></expr></argument>, <argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>new_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>new_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr> ?</condition><then> <expr><name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>obs_data_set_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr> ?</condition><then> <expr><name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name>array</name></expr></argument>, <argument><expr><name>obs_data_set_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_apply</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>apply_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name>apply_data</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>apply_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>apply_data</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_item</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_erase</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_detach</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clear_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_OBJECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr> ?</condition><then> <expr><name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><operator>*</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr> ?</condition><then> <expr><name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><operator>*</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_clear</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_item</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_item_t</name>)<parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_set_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_item_</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>OBS_DATA_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_set_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_number</name></name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>num</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBS_DATA_NUM_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num</name><operator>.</operator><name>int_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_item_</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_number</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>OBS_DATA_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_set_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_number</name></name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>num</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBS_DATA_NUM_DOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num</name><operator>.</operator><name>double_val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_item_</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_number</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>OBS_DATA_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_set_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_item_</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OBS_DATA_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_set_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_item_</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_data_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>OBS_DATA_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_set_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_item_</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_data_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>OBS_DATA_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_take_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>set_item_t</name></type> <name>set_item_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>set_item_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_double</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_double</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_int</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_double</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_get_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_string</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_data_get_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_int</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_data_get_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_double</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_get_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_bool</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_get_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_obj</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_get_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_array</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_get_default_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_default_string</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_data_get_default_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_default_int</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_data_get_default_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_default_double</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_get_default_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_default_bool</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_get_default_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_default_obj</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_get_default_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_default_array</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_get_autoselect_string</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_autoselect_string</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_data_get_autoselect_int</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_autoselect_int</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_data_get_autoselect_double</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_autoselect_double</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_get_autoselect_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_autoselect_bool</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_get_autoselect_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_autoselect_obj</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_get_autoselect_array</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_data_item_get_autoselect_array</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_array_create</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_array</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_data_array</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>array</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_array_addref</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_data_array_destroy</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_array_release</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_data_array_destroy</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_data_array_count</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>array</name></expr> ?</condition><then> <expr><name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_array_item</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_data_array_push_back</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name> <operator>||</operator> <operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_array_insert</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name> <operator>||</operator> <operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_insert</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_array_push_back_array</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name> <operator>||</operator> <operator>!</operator><name>array2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array2</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>array2</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>da_push_back_da</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name><name>array2</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_array_erase</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_has_user_value</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>data</name> <operator>&amp;&amp;</operator> <call><name>obs_data_item_has_user_value</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_has_default_value</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>data</name> <operator>&amp;&amp;</operator> <call><name>obs_data_item_has_default_value</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_has_autoselect_value</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>data</name> <operator>&amp;&amp;</operator> <call><name>obs_data_item_has_autoselect_value</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_has_user_value</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_has_default_value</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_has_autoselect_value</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_unset_user_value</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_unset_user_value</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_unset_default_value</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_unset_default_value</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_unset_autoselect_value</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_unset_autoselect_value</name><argument_list>(<argument><expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_unset_user_value</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_non_user_data</name> <init>= <expr><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>item_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>move_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>old_non_user_data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><call><name>get_default_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_unset_default_value</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_autoselect_data</name> <init>= <expr><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>item_default_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>default_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>move_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>old_autoselect_data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><call><name>get_autoselect_data_ptr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_unset_autoselect_value</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>item_autoselect_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>autoselect_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>obs_data_first</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>first_item</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>obs_data_item_byname</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>get_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>item</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_next</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>item</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>item</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_release</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>item</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ref</name> <init>= <expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>item</name><operator>)</operator><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_remove</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_detach</name><argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>obs_data_item_gettype</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_DATA_NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_data_number_type</name></name></type> <name>obs_data_item_numtype</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_number</name></name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBS_DATA_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OBS_DATA_NUM_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>get_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>num</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_item_get_name</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_item_name</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_string</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_int</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_double</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_bool</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_array</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_string</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_int</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_double</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_bool</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_array</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_string</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_int</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_double</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_bool</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_obj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_set_array</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>item_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_data_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_data_t</name>)<parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_item_get_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_data_t</name></type> <name>get_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>item_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>OBS_DATA_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>long</name></type> <name>item_int</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_data_t</name></type> <name>get_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_number</name></name> <modifier>*</modifier></type><name>num</name> <init>= <expr><call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>num</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_NUM_INT</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>num</name><operator>-&gt;</operator><name>int_val</name></name></expr>

</then><else>: <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>num</name><operator>-&gt;</operator><name>double_val</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>long</name></type> <name>data_item_get_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_data_t</name></type> <name>get_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>item_int</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>item_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>OBS_DATA_NUMBER</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>item</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>get_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>item_double</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_data_t</name></type> <name>get_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_number</name></name> <modifier>*</modifier></type><name>num</name> <init>= <expr><call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>num</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_DATA_NUM_INT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>num</name><operator>-&gt;</operator><name>int_val</name></name></expr>

</then><else>: <expr><name><name>num</name><operator>-&gt;</operator><name>double_val</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>data_item_get_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_data_t</name></type> <name>get_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>item_double</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>item_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>OBS_DATA_NUMBER</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>item</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>get_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>data_item_get_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_data_t</name></type> <name>get_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>item_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>OBS_DATA_BOOLEAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><call><name>get_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>obs_data_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_obj_t</name>)<parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>data_item_get_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_obj_t</name></type> <name>get_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><ternary><condition><expr><call><name>item_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>OBS_DATA_OBJECT</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_array_t</name>)<parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_array_t</name> <modifier>*</modifier></type><name>data_item_get_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>get_array_t</name></type> <name>get_array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>=

<expr><ternary><condition><expr><call><name>item_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>OBS_DATA_ARRAY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>array</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_item_get_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_data_item_get_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_data_item_get_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_double</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_get_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_bool</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_item_get_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_item_get_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_array</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_item_get_default_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_default_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_data_item_get_default_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_default_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_data_item_get_default_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_double</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_default_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_get_default_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_bool</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_default_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_item_get_default_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_item_get_default_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_array</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_data_item_get_autoselect_string</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_autoselect_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_data_item_get_autoselect_int</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_autoselect_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_data_item_get_autoselect_double</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_double</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_autoselect_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_get_autoselect_bool</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_bool</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_autoselect_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_data_item_get_autoselect_obj</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_autoselect_obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_data_item_get_autoselect_array</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>data_item_get_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>get_item_autoselect_array</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_obj_t</name>)<parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>set_obj_t</name></type> <name>set_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>set_obj_t</name></type> <name>set_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>set_obj_t</name></type> <name>set_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>set_obj_t</name></type> <name>set_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_quat</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_default_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_default_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_default_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_quat</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_default_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_autoselect_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_autoselect_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vec4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_autoselect_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_quat</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obs_data_set_autoselect_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec2</name><argument_list>(<argument><expr><call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec3</name><argument_list>(<argument><expr><call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec4</name><argument_list>(<argument><expr><call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_quat</name><argument_list>(<argument><expr><call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_default_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec2</name><argument_list>(<argument><expr><call><name>obs_data_get_default_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_default_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec3</name><argument_list>(<argument><expr><call><name>obs_data_get_default_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_default_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec4</name><argument_list>(<argument><expr><call><name>obs_data_get_default_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_default_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_quat</name><argument_list>(<argument><expr><call><name>obs_data_get_default_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_autoselect_vec2</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec2</name><argument_list>(<argument><expr><call><name>obs_data_get_autoselect_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_autoselect_vec3</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec3</name><argument_list>(<argument><expr><call><name>obs_data_get_autoselect_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_autoselect_vec4</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vec4</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_vec4</name><argument_list>(<argument><expr><call><name>obs_data_get_autoselect_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_get_autoselect_quat</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>quat</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_quat</name><argument_list>(<argument><expr><call><name>obs_data_get_autoselect_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type>

<name>make_frames_per_second</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>, <argument><expr><name><name>fps</name><operator>.</operator><name>numerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>, <argument><expr><name><name>fps</name><operator>.</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_take_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>make_frames_per_second</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_default_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_take_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>make_frames_per_second</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_set_autoselect_frames_per_second</name><parameter_list>(

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_take_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>make_frames_per_second</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_option</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>obs_data_item_byname</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>option</name> <operator>=</operator> <call><name>obs_data_item_get_string</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; min ? min : ((x) &gt; max ? max : (x)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_option</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fps</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>num</name> <init>= <expr><call><name>obs_data_item_byname</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_data_item</name></name> <modifier>*</modifier></type><name>den</name> <init>= <expr><call><name>obs_data_item_byname</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name> <operator>||</operator> <operator>!</operator><name>den</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>free</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num_ll</name> <init>= <expr><call><name>obs_data_item_get_int</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>den_ll</name> <init>= <expr><call><name>obs_data_item_get_int</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fps</name><operator>-&gt;</operator><name>numerator</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>CLAMP</name><argument_list>(<argument><expr><name>num_ll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fps</name><operator>-&gt;</operator><name>denominator</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>CLAMP</name><argument_list>(<argument><expr><name>den_ll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_item_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>media_frames_per_second_is_valid</name><argument_list>(<argument><expr><operator>*</operator><name>fps</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>free</name>:</label>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_get_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_frames_per_second</name><argument_list>(<argument><expr><call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_get_default_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_frames_per_second</name><argument_list>(<argument><expr><call><name>obs_data_get_default_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fps</name></expr></argument>,

<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_get_autoselect_frames_per_second</name><parameter_list>(

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_frames_per_second</name><argument_list>(<argument><expr><call><name>obs_data_get_autoselect_obj</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_take_obj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>make_frames_per_second</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_default_frames_per_second</name><parameter_list>(

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_take_obj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>make_frames_per_second</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>set_item_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_data_item_set_autoselect_frames_per_second</name><parameter_list>(

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_take_obj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>make_frames_per_second</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>set_item_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_get_frames_per_second</name><parameter_list>(<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_frames_per_second</name><argument_list>(<argument><expr><call><name>obs_data_item_get_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_get_default_frames_per_second</name><parameter_list>(

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_frames_per_second</name><argument_list>(<argument><expr><call><name>obs_data_item_get_default_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fps</name></expr></argument>,

<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_data_item_get_autoselect_frames_per_second</name><parameter_list>(

<parameter><decl><type><name>obs_data_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name> <modifier>*</modifier></type><name>fps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_frames_per_second</name><argument_list>(<argument><expr><call><name>obs_data_item_get_autoselect_obj</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
