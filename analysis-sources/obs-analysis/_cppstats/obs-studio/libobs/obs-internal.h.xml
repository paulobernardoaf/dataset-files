<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-internal.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/darray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/circlebuf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/threading.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/profiler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"callback/signal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"callback/proc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/graphics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/matrix4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/audio-resampler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/video-io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/audio-io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TEXTURES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CHANNELS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICROSECOND_DEN</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ENCODE_TEXTURES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ENCODE_TEXTURE_FRAMES_TO_WAIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>packet_dts_usec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>*</operator> <name>MICROSECOND_DEN</name> <operator>/</operator> <name><name>packet</name><operator>-&gt;</operator><name>timebase_den</name></name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>tick_callback</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tick</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>draw_callback</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>draw</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_object_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: Null '%s' parameter"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_ptr_valid</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_object_valid(ptr, func, #ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_source_valid</name></cpp:macro> <cpp:value>obs_ptr_valid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_output_valid</name></cpp:macro> <cpp:value>obs_ptr_valid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_encoder_valid</name></cpp:macro> <cpp:value>obs_ptr_valid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_service_valid</name></cpp:macro> <cpp:value>obs_ptr_valid</cpp:value></cpp:define>

<struct>struct <name>obs_module</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mod_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bin_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>loaded</name></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>load</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unload</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>post_load</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_locale</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_locale</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>ver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_pointer</name>)<parameter_list>(<parameter><decl><type><name>obs_module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>name</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>description</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>author</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>free_module</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_module_path</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_module_path</name><argument_list>(<argument><expr>struct <name>obs_module_path</name> <operator>*</operator>omp</expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(omp)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(omp<argument><expr><operator>-&gt;</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(omp<argument><expr><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>check_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dstr</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>os_file_exists</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>obs_hotkey</name> <block>{

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_registerer_t</name></type> <name>registerer_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>registerer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>pair_partner_id</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_hotkey_pair</name> <block>{

<decl_stmt><decl><type><name>obs_hotkey_pair_id</name></type> <name>pair_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name><name>id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_active_func</name></type> <name><name>func</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>obs_hotkey_pair</name></name></type> <name>obs_hotkey_pair_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>obs_hotkeys_platform</name></name></type> <name>obs_hotkeys_platform_t</name>;</typedef>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>obs_hotkey_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>obs_core_hotkeys</name>;</struct_decl>

<function_decl><type><name>bool</name></type> <name>obs_hotkeys_platform_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>obs_hotkeys_platform_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>obs_hotkeys_platform_is_pressed</name><parameter_list>(<parameter><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_hotkey_translation</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>obs_context_data</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>obs_hotkeys_context_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>obs_hotkeys_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_hotkey_binding</name> <block>{

<decl_stmt><decl><type><name>obs_key_combination_t</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>modifiers_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>hotkey_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl>;</decl_stmt>

}</block>;</struct>

<struct_decl>struct <name>obs_hotkey_name_map</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>obs_hotkey_name_map_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_view</name> <block>{

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>channels_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>channels</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_view_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_view</name></name> <modifier>*</modifier></type><name>view</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_view_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_view</name></name> <modifier>*</modifier></type><name>view</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_display</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>size_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>background_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_swapchain_t</name> <modifier>*</modifier></type><name>swap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>draw_callbacks_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>draw_info_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct draw_callback</argument>)</argument_list></macro> <expr_stmt><expr><name>draw_callbacks</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_next</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_display_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gs_init_data</name></name> <modifier>*</modifier></type><name>graphics_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_display_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_vframe_info</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_tex_frame</name> <block>{

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex_uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>lock_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>released</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_task_info</name> <block>{

<decl_stmt><decl><type><name>obs_task_t</name></type> <name>task</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_core_video</name> <block>{

<decl_stmt><decl><type><name>graphics_t</name> <modifier>*</modifier></type><name>graphics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name><name>copy_surfaces</name><index>[<expr><name>NUM_TEXTURES</name></expr>]</index><index>[<expr><name>NUM_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>render_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>output_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>convert_textures</name><index>[<expr><name>NUM_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>texture_rendered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>textures_copied</name><index>[<expr><name>NUM_TEXTURES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>texture_converted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>using_nv12_tex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>vframe_info_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>vframe_info_buffer_gpu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>default_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>default_rect_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>opaque_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>solid_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>repeat_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>conversion_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>bicubic_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>lanczos_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>area_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>bilinear_lowres_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>premultiplied_alpha_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_samplerstate_t</name> <modifier>*</modifier></type><name>point_sampler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_stagesurf_t</name> <modifier>*</modifier></type><name><name>mapped_surfaces</name><index>[<expr><name>NUM_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>raw_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>gpu_encoder_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>gpu_encoder_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>gpu_encoder_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>gpu_encoder_avail_queue</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_encoder_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>gpu_encoders</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>os_sem_t</name> <modifier>*</modifier></type><name>gpu_encode_semaphore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>gpu_encode_inactive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>gpu_encode_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>gpu_encode_thread_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>gpu_encode_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>video_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>video_frame_interval_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>video_avg_frame_time_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>video_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>video_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lagged_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>thread_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>gpu_conversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conversion_techs</name><index>[<expr><name>NUM_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>conversion_needed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>conversion_width_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>color_matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_scale_type</name></name></type> <name>scale_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>transparent_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_discard_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_discard_2x_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_linear_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_linear_2x_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_blend_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_blend_2x_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_yadif_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_yadif_2x_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_video_info</name></name></type> <name>ovi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>task_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>tasks</name></decl>;</decl_stmt>

}</block>;</struct>

<struct_decl>struct <name>audio_monitor</name>;</struct_decl>

<struct>struct <name>obs_core_audio</name> <block>{

<decl_stmt><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source *</argument>)</argument_list></macro> <expr_stmt><expr><name>render_order</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source *</argument>)</argument_list></macro> <expr_stmt><expr><name>root_nodes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>buffered_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>buffered_timestamps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffering_wait_ticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_buffering_ticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>user_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>monitoring_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct audio_monitor *</argument>)</argument_list></macro> <expr_stmt><expr><name>monitors</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>monitoring_device_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>monitoring_device_id</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_core_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>first_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>first_audio_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_display</name></name> <modifier>*</modifier></type><name>first_display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>first_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>first_encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>first_service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>sources_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>displays_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>outputs_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>encoders_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>services_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>audio_sources_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>draw_callbacks_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct draw_callback</argument>)</argument_list></macro> <expr_stmt><expr><name>draw_callbacks</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct tick_callback</argument>)</argument_list></macro> <expr_stmt><expr><name>tick_callbacks</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_view</name></name></type> <name>main_view</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>unnamed_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>private_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_core_hotkeys</name> <block>{

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_hotkey_t</argument>)</argument_list></macro> <expr_stmt><expr><name>hotkeys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>next_id</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_hotkey_pair_t</argument>)</argument_list></macro> <expr_stmt><expr><name>hotkey_pairs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_id</name></type> <name>next_pair_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>hotkey_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hotkey_thread_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>stop_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>thread_disable_press</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>strict_modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reroute_hotkeys</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_hotkey_binding_t</argument>)</argument_list></macro> <expr_stmt><expr><name>bindings</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_callback_router_func</name></type> <name>router_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>router_func_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkeys_platform_t</name> <modifier>*</modifier></type><name>platform_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_once_t</name></type> <name>name_map_init_token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_name_map</name></name> <modifier>*</modifier></type><name>name_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>signals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>translations</name><index>[<expr><name>OBS_KEY_LAST_VALUE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unmute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>push_to_mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>push_to_talk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sceneitem_show</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sceneitem_hide</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_core</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_module</name></name> <modifier>*</modifier></type><name>first_module</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_module_path</argument>)</argument_list></macro> <expr_stmt><expr><name>module_paths</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source_info</argument>)</argument_list></macro> <expr_stmt><expr><name>source_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source_info</argument>)</argument_list></macro> <expr_stmt><expr><name>input_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source_info</argument>)</argument_list></macro> <expr_stmt><expr><name>filter_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source_info</argument>)</argument_list></macro> <expr_stmt><expr><name>transition_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_output_info</argument>)</argument_list></macro> <expr_stmt><expr><name>output_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_encoder_info</argument>)</argument_list></macro> <expr_stmt><expr><name>encoder_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_service_info</argument>)</argument_list></macro> <expr_stmt><expr><name>service_types</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_modal_ui</argument>)</argument_list></macro> <expr_stmt><expr><name>modal_ui_callbacks</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_modeless_ui</argument>)</argument_list></macro> <expr_stmt><expr><name>modeless_ui_callbacks</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>signals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>procs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>locale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>module_config_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>name_store_owned</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>name_store</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_video</name></name></type> <name>video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_audio</name></name></type> <name>audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_hotkeys</name></name></type> <name>hotkeys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_task_handler_t</name></type> <name>ui_task_handler</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_core</name></name> <modifier>*</modifier></type><name>obs</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>obs_graphics_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>gs_effect_t</name> <modifier>*</modifier></type><name>obs_load_effect</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>audio_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>start_ts_in</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>end_ts_in</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>out_ts</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>mixes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>

<name>start_raw_video</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>conversion</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>stop_raw_video</name><parameter_list>(<parameter><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>video_data</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_context_data</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>signals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>procs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_obj_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_hotkey_id</argument>)</argument_list></macro> <expr_stmt><expr><name>hotkeys</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_hotkey_pair_id</argument>)</argument_list></macro> <expr_stmt><expr><name>hotkey_pairs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>rename_cache</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>rename_cache_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>private</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_context_data_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_obj_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_context_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_context_data_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_context_data_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_context_data_setname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_weak_ref</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>weak_refs</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_ref_addref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_ref_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_weak_ref_addref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>weak_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_weak_ref_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>weak_refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>obs_weak_ref_get_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>owners</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>refs</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>owners</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_compare_swap_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><name>owners</name></expr></argument>, <argument><expr><name>owners</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>owners</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>async_frame</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>unused_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>used</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>audio_action_type</name> <block>{

<decl><name>AUDIO_ACTION_VOL</name></decl>,

<decl><name>AUDIO_ACTION_MUTE</name></decl>,

<decl><name>AUDIO_ACTION_PTT</name></decl>,

<decl><name>AUDIO_ACTION_PTM</name></decl>,

}</block>;</enum>

<struct>struct <name>audio_action</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>audio_action_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>float</name></type> <name>vol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>set</name></decl>;</decl_stmt>

}</block>;</union>

}</block>;</struct>

<struct>struct <name>obs_weak_source</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>audio_cb_info</name> <block>{

<decl_stmt><decl><type><name>obs_source_audio_capture_t</name></type> <name>callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_source</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_source</name></name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>default_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_obs_ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>owns_info_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>defer_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>show_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>activate_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>removed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>showing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>timing_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint64_t</name></type> <name>timing_adjust</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>resample_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_audio_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_audio_ts_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_audio_sys_ts_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_frame_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_sys_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_rendered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>audio_failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>audio_pending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pending_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>audio_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>user_muted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>muted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>next_audio_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_next_audio_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>audio_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name><name>audio_input_buf</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_audio_input_buf_size</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct audio_action</argument>)</argument_list></macro> <expr_stmt><expr><name>audio_actions</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>audio_output_buf</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>audio_mix_buf</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>sample_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>resampler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>audio_actions_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>audio_buf_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>audio_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>audio_cb_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct audio_cb_info</argument>)</argument_list></macro> <expr_stmt><expr><name>audio_cb_list</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_audio_data</name></name></type> <name>audio_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>audio_storage_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>audio_mixers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>user_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sync_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_sync_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>balance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>async_textures</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>async_texrender</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>cur_async_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_gpu_conversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>async_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_full_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>async_cache_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_cache_full_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name><name>async_texture_formats</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>async_channel_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>async_rotation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_flip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_update_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_unbuffered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async_decoupled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>async_preload_frame</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct async_frame</argument>)</argument_list></macro> <expr_stmt><expr><name>async_cache</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source_frame *</argument>)</argument_list></macro> <expr_stmt><expr><name>async_frames</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>async_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>async_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>async_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>async_cache_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>async_cache_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>async_convert_width</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>async_convert_height</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>deinterlace_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>deinterlace_frame_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>deinterlace_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>prev_async_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>async_prev_textures</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>async_prev_texrender</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>deinterlace_half_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_deinterlace_mode</name></name></type> <name>deinterlace_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>deinterlace_top_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>deinterlace_rendered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>filter_parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>filter_target</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct obs_source *</argument>)</argument_list></macro> <expr_stmt><expr><name>filters</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>filter_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>filter_texrender</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_allow_direct_render</name></name></type> <name>allow_direct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rendering_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_id</name></type> <name>mute_unmute_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>push_to_mute_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>push_to_talk_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>push_to_mute_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>push_to_mute_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>user_push_to_mute_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>push_to_talk_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>push_to_talk_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>user_push_to_talk_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>push_to_mute_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>push_to_mute_stop_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>push_to_talk_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>push_to_talk_stop_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>transition_start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>transition_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>transition_tex_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name><name>transition_texrender</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>transition_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name><name>transition_sources</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_manual_clamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_manual_torque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_manual_target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>transition_manual_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>transitioning_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>transitioning_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>transition_source_active</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transition_alignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transition_actual_cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transition_actual_cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transition_cx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transition_cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transition_fixed_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>transition_use_fixed_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_transition_mode</name></name></type> <name>transition_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_transition_scale_type</name></name></type> <name>transition_scale_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name><name>transition_matrices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_monitoring_type</name></name></type> <name>monitoring_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>private_settings</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>get_source_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>get_source_info2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unversioned_id</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>ver</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_source_init_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_transition_init</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_transition_free</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_transition_tick</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_transition_enum_sources</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>transition</name></decl></parameter>,

<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_transition_save</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_transition_load</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>audio_monitor_create</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>audio_monitor_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>audio_monitor_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_monitor</name></name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_create_set_last_ver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>last_obs_ver</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_source_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>view_type</name> <block>{

<decl><name>MAIN_VIEW</name></decl>,

<decl><name>AUX_VIEW</name></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_source_dosignal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal_obs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal_source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>signal_obs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>signals</name></name></expr></argument>, <argument><expr><name>signal_obs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>signal_source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>signal_source</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TS_VAR</name></cpp:macro> <cpp:value>2000000000ULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>frame_out_of_bounds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>-</operator> <name>ts</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_TS_VAR</name><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name><operator>)</operator> <operator>&gt;</operator> <name>MAX_TS_VAR</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>gs_color_format</name></name></type>

<name>convert_video_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>

<return>return <expr><name>GS_RGBA</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>

<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>

<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>

<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>

<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>

<return>return <expr><name>GS_BGRA</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>GS_BGRX</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_source_activate</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>view_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_source_deactivate</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>view_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_source_video_tick</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>float</name></type> <name>obs_source_get_target_volume</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_source_audio_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>add_alignment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>filter_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>update_async_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>update_async_textures</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>tex</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>set_async_texture_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>remove_async_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>set_deinterlace_texture_size</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>deinterlace_process_last_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>deinterlace_update_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>deinterlace_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>delay_msg</name> <block>{

<decl><name>DELAY_MSG_PACKET</name></decl>,

<decl><name>DELAY_MSG_START</name></decl>,

<decl><name>DELAY_MSG_STOP</name></decl>,

}</block>;</enum>

<struct>struct <name>delay_data</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>delay_msg</name></name></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_packet</name></name></type> <name>packet</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encoded_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>obs_weak_output</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTION_LINE_CHARS</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTION_LINE_BYTES</name></cpp:macro> <cpp:value>(4 * CAPTION_LINE_CHARS)</cpp:value></cpp:define>

<struct>struct <name>caption_text</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><name>CAPTION_LINE_BYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>display_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pause_data</name> <block>{

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_video_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts_offset</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>video_pause_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>audio_pause_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>pause_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pause_data</name></name> <modifier>*</modifier></type><name>pause</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_output</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_output</name></name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>owns_info_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>received_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>received_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>data_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>end_data_capture_thread_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>video_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>audio_offsets</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>highest_audio_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>highest_video_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>end_data_capture_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>stopping_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>interleaved_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct encoder_packet</argument>)</argument_list></macro> <expr_stmt><expr><name>interleaved_packets</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stop_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reconnect_retry_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reconnect_retry_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reconnect_retries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reconnect_retry_cur_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>reconnect_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>reconnect_stop_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>reconnecting</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>reconnect_thread_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>starting_drawn_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>starting_lagged_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>starting_frame_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_t</name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>video_encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name><name>audio_encoders</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mixer_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pause_data</name></name></type> <name>pause</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name><name>audio_buffer</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>audio_start_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>video_start_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>audio_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_audio_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scaled_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scaled_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>video_conversion_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>audio_conversion_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>video_scale_info</name></name></type> <name>video_conversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_convert_info</name></name></type> <name>audio_conversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>caption_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>caption_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>caption_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>caption_text</name></name> <modifier>*</modifier></type><name>caption_tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>active_delay_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoded_callback_t</name></type> <name>delay_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name>delay_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>delay_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delay_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delay_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delay_cur_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>delay_restart_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>delay_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>delay_capturing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_error_message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>audio_data</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index><index>[<expr><name>AUDIO_OUTPUT_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_output_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>process_delay</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_output_cleanup_delay</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_output_delay_start</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_output_delay_stop</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_output_actual_start</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_output_actual_stop</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>obs_output_info</name></name> <modifier>*</modifier></type><name>find_output</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_output_remove_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>

<name>obs_encoder_packet_create_instance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>obs_output_destroy</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_weak_encoder</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>encoder_callback</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>sent_first_packet</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_encoder</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_encoder</name></name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder_info</name></name></type> <name>orig_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>init_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>samplerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>framesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>framesize_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mixer_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scaled_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scaled_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>preferred_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>owns_info_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timebase_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timebase_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>circlebuf</name></name></type> <name><name>audio_input_buffer</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>audio_output_buffer</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wait_for_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_received</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>paired_encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset_usec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>first_raw_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>outputs_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>obs_output_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>outputs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>destroy_on_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>callbacks_mutex</name></decl>;</decl_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct encoder_callback</argument>)</argument_list></macro> <expr_stmt><expr><name>callbacks</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pause_data</name></name></type> <name>pause</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile_encoder_encode_name</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>obs_encoder_info</name></name> <modifier>*</modifier></type><name>find_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_encoder_initialize</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_encoder_shutdown</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_encoder_start</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_encoder_stop</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>new_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_encoder_add_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_encoder_remove_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>start_gpu_encode</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>stop_gpu_encode</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>do_encode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_encoder</name></name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>send_off_encoder_packet</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>received</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>encoder_packet</name></name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>obs_encoder_destroy</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>obs_weak_service</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_ref</name></name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_service</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_service_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_weak_service</name></name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>owns_info_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>destroy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>obs_service_info</name></name> <modifier>*</modifier></type><name>find_service</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_service_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>obs_service_deactivate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remove</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>obs_service_initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_service</name></name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>obs_service_destroy</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
