<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-properties.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/bmem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/darray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-properties.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_property_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>float_data</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_number_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>int_data</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_number_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>list_item</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>disabled</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

}</block>;</union>

}</block>;</struct>

<struct>struct <name>path_data</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_path_type</name></name></type> <name>type</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>text_data</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>obs_text_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>monospace</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>list_data</name> <block>{

<macro><name>DARRAY</name><argument_list>(<argument>struct list_item</argument>)</argument_list></macro> <expr_stmt><expr><name>items</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_combo_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_combo_format</name></name></type> <name>format</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>editable_list_data</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>obs_editable_list_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_path</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>button_data</name> <block>{

<decl_stmt><decl><type><name>obs_property_clicked_t</name></type> <name>callback</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>frame_rate_option</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>frame_rate_range</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>min_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>max_time</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>frame_rate_data</name> <block>{

<macro><name>DARRAY</name><argument_list>(<argument>struct frame_rate_option</argument>)</argument_list></macro> <expr_stmt><expr><name>extra_options</name></expr>;</expr_stmt>

<macro><name>DARRAY</name><argument_list>(<argument>struct frame_rate_range</argument>)</argument_list></macro> <expr_stmt><expr><name>ranges</name></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>group_data</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>obs_group_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>path_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>path_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>default_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PATH_FILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>editable_list_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>editable_list_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>default_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_item_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_item_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>frame_rate_data_options_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_option</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>frame_rate_data_ranges_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>frame_rate_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>frame_rate_data_options_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>frame_rate_data_ranges_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>group_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>group_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>obs_properties_destroy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>int_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>float_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct_decl>struct <name>obs_properties</name>;</struct_decl>

<struct>struct <name>obs_property</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>long_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>obs_property_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_modified_t</name></type> <name>modified</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_modified2_t</name></type> <name>modified2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>obs_properties</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>first_property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_properties_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_properties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_properties_set_param</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>param</name></name> <operator>&amp;&amp;</operator> <name><name>props</name><operator>-&gt;</operator><name>destroy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>props</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>destroy</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_properties_set_flags</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_properties_get_flags</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>props</name></expr> ?</condition><then> <expr><name><name>props</name><operator>-&gt;</operator><name>flags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_properties_get_param</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>props</name></expr> ?</condition><then> <expr><name><name>props</name><operator>-&gt;</operator><name>param</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_properties_create_param</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>obs_properties_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_properties_set_param</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_property_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>property</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_PATH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>path_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_EDITABLE_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>editable_list_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_FRAME_RATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>frame_rate_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_GROUP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>group_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_INT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>int_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>float_data_free</name><argument_list>(<argument><expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>long_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_properties_destroy</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>props</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>destroy</name></name> <operator>&amp;&amp;</operator> <name><name>props</name><operator>-&gt;</operator><name>param</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>props</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_property_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_first</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>props</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_get</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>property</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>property</name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>property</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>property</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_GROUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>group</name> <init>=

<expr><call><name>obs_property_group_content</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>obs_properties_get</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>property</name> <operator>=</operator> <name><name>property</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_properties_get_parent</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>props</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>props</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_properties_remove_by_name</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>prev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name> <operator>==</operator> <name>cur</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_property_destroy</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_GROUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_properties_remove_by_name</name><argument_list>(

<argument><expr><call><name>obs_property_group_content</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_properties_apply_settings_internal</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,

<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>realprops</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_GROUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_properties_apply_settings_internal</name><argument_list>(

<argument><expr><call><name>obs_property_group_content</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>settings</name></expr></argument>,

<argument><expr><name>realprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>modified</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>modified</name></name><argument_list>(<argument><expr><name>realprops</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>modified2</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>modified2</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>realprops</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_properties_apply_settings</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings_internal</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>propertes_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>props</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_property_size</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>obs_property_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OBS_PROPERTY_INVALID</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_BOOL</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_INT</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>int_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_FLOAT</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>float_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_TEXT</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>text_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_PATH</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>path_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_LIST</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>list_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_COLOR</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_BUTTON</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>button_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_FONT</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_EDITABLE_LIST</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>editable_list_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_FRAME_RATE</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>frame_rate_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>OBS_PROPERTY_GROUP</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>group_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>new_prop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_property_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name> <init>= <expr><call><name>get_property_size</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_property</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>props</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>propertes_add</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_properties_t</name> <modifier>*</modifier></type><name>get_topmost_parent</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>props</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>last_parent</name> <init>= <expr><name>parent</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_parent</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>obs_properties_get_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>last_parent</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>contains_prop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>first_property</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Property '%s' exists"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_GROUP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>contains_prop</name><argument_list>(<argument><expr><call><name>obs_property_group_content</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>has_prop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_properties</name></name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>contains_prop</name><argument_list>(<argument><expr><call><name>get_topmost_parent</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_property_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>prop</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_property</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_type_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>prop</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_property_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prop</name> <operator>||</operator> <name><name>prop</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_bool</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_BOOL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_property_t</name> <modifier>*</modifier></type><name>add_int</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_number_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_property_t</name> <modifier>*</modifier></type><name>add_flt</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_number_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_int</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>OBS_NUMBER_SCROLLER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_float</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>add_flt</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>OBS_NUMBER_SCROLLER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_int_slider</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>add_int</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>OBS_NUMBER_SLIDER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_float_slider</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>add_flt</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>OBS_NUMBER_SLIDER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_text</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_text_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_TEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>text_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_path</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_path_type</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>path_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>default_path</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PATH_FILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_list</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_combo_type</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_combo_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_COMBO_TYPE_EDITABLE</name> <operator>&amp;&amp;</operator>

<name>format</name> <operator>!=</operator> <name>OBS_COMBO_FORMAT_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"List '%s', error: Editable combo boxes "</literal>

<literal type="string">"must be of the 'string' type"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_color</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_COLOR</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_button</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>obs_property_clicked_t</name></type> <name>callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_BUTTON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>button_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_button2</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>obs_property_clicked_t</name></type> <name>callback</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_BUTTON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>button_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_font</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FONT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type>

<name>obs_properties_add_editable_list</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_editable_list_type</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_EDITABLE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>editable_list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>default_path</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_frame_rate</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_property_group_recursion</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>current_property</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>first_property</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>current_property</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_property</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_GROUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>cprops</name> <init>=

<expr><call><name>obs_property_group_content</name><argument_list>(<argument><expr><name>current_property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cprops</name> <operator>==</operator> <name>parent</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cprops</name> <operator>==</operator> <name>group</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_property_group_recursion</name><argument_list>(<argument><expr><name>cprops</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_property</name> <operator>=</operator> <name><name>current_property</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_property_group_duplicates</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>current_property</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>first_property</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>current_property</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_prop</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>current_property</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_property</name> <operator>=</operator> <name><name>current_property</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_property_t</name> <modifier>*</modifier></type><name>obs_properties_add_group</name><parameter_list>(<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_group_type</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name> <operator>||</operator> <call><name>has_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>props</name> <operator>==</operator> <name>group</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_property_group_recursion</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_property_group_duplicates</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>new_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>group_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_combo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_PROPERTY_LIST</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>get_list_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><call><name>is_combo</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_property_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>get_list_fmt_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_property</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>obs_combo_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>format</name><operator>)</operator></expr> ?</condition><then> <expr><name>data</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_property_next</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_set_modified_callback</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_property_modified_t</name></type> <name>modified</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>modified</name></name> <operator>=</operator> <name>modified</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_set_modified_callback2</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>obs_property_modified2_t</name></type> <name>modified2</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>modified2</name></name> <operator>=</operator> <name>modified2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_property_modified</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>modified</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><call><name>get_topmost_parent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>modified</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>modified2</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><call><name>get_topmost_parent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>modified2</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_property_button_clicked</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>button_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_BUTTON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><call><name>get_topmost_parent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>data</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>data</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>context</name></expr> ?</condition><then> <expr><name><name>context</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_set_visible</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>visible</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_set_enabled</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_set_description</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <ternary><condition><expr><name>description</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>description</name></expr> ?</condition><then> <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_set_long_description</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>long_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>long_desc</name></name> <operator>=</operator> <ternary><condition><expr><name>long_desc</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>long_desc</name></expr> ?</condition><then> <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name>long_desc</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_name</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_description</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>desc</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_long_description</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>long_desc</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_property_type</name></name></type> <name>obs_property_get_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_PROPERTY_INVALID</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_property_enabled</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>enabled</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_property_visible</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>visible</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_property_int_min</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>min</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_property_int_max</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>max</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>obs_property_int_step</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>step</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_number_type</name></name></type> <name>obs_property_int_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_NUMBER_SCROLLER</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_int_suffix</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_property_float_min</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>min</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_property_float_max</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>max</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_property_float_step</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>step</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_float_suffix</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_number_type</name></name></type> <name>obs_property_float_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_NUMBER_SCROLLER</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_text_type</name></name></type> <name>obs_property_text_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_TEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_TEXT_DEFAULT</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_text_type</name></name></type> <name>obs_property_text_monospace</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_TEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>monospace</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_path_type</name></name></type> <name>obs_property_path_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>path_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_PATH_DIRECTORY</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_path_filter</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>path_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>filter</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_path_default_path</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>path_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>default_path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_combo_type</name></name></type> <name>obs_property_list_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_COMBO_TYPE_INVALID</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_combo_format</name></name></type> <name>obs_property_list_format</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name></expr> </then><else>: <expr><name>OBS_COMBO_FORMAT_INVALID</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_int_set_limits</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_float_set_limits</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_int_set_suffix</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>int_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_float_set_suffix</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>float_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>suffix</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_text_set_monospace</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>monospace</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_TEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>monospace</name></name> <operator>=</operator> <name>monospace</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_list_clear</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_data_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_item</name></name></type> <name>item</name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_INT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_item</name></name></type> <name>item</name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_INT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>da_insert</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_list_add_string</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_list_add_int</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_INT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_list_add_float</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_list_insert_string</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>insert_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_list_insert_int</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_INT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>insert_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_list_insert_float</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>OBS_COMBO_FORMAT_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>insert_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_list_item_remove</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_item_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_list_item_count</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_property_list_item_disabled</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>disabled</name></expr>

</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_list_item_disable</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>disabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>disabled</name> <operator>=</operator> <name>disabled</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_list_item_name</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_list_item_string</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_fmt_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>str</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>obs_property_list_item_int</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_fmt_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>ll</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>obs_property_list_item_float</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_list_fmt_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_COMBO_FORMAT_FLOAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>d</name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_editable_list_type</name></name></type> <name>obs_property_editable_list_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>editable_list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_EDITABLE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_EDITABLE_LIST_TYPE_STRINGS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_editable_list_filter</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>editable_list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_EDITABLE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>filter</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_editable_list_default_path</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>editable_list_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_EDITABLE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>default_path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_frame_rate_clear</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>frame_rate_data_options_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>frame_rate_data_ranges_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_frame_rate_options_clear</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>frame_rate_data_options_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_frame_rate_fps_ranges_clear</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>frame_rate_data_ranges_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_frame_rate_option_add</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DARRAY_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_option</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_frame_rate_fps_range_add</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>min</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DARRAY_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_range</name></name> <modifier>*</modifier></type><name>rng</name> <init>= <expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>min_time</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>max_time</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_frame_rate_option_insert</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_option</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>da_insert_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_property_frame_rate_fps_range_insert</name><parameter_list>(

<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>min</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>media_frames_per_second</name></name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_range</name></name> <modifier>*</modifier></type><name>rng</name> <init>= <expr><call><name>da_insert_new</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>min_time</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>max_time</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_frame_rate_options_count</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_frame_rate_option_name</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name>idx</name></expr>

?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_property_frame_rate_option_description</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name>idx</name></expr>

?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>extra_options</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>description</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>obs_property_frame_rate_fps_ranges_count</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>media_frames_per_second</name></name></type>

<name>obs_property_frame_rate_fps_range_min</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name>idx</name></expr>

?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>min_time</name></expr>

</then><else>: <expr><operator>(</operator>struct <name>media_frames_per_second</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>media_frames_per_second</name></name></type>

<name>obs_property_frame_rate_fps_range_max</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_rate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=

<expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_FRAME_RATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name>idx</name></expr>

?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>max_time</name></expr>

</then><else>: <expr><operator>(</operator>struct <name>media_frames_per_second</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_text_type</name></name></type> <name>obs_proprety_text_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>obs_property_text_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_group_type</name></name></type> <name>obs_property_group_type</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>group_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>OBS_COMBO_INVALID</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_property_group_content</name><parameter_list>(<parameter><decl><type><name>obs_property_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>group_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>get_type_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OBS_PROPERTY_GROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>content</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
