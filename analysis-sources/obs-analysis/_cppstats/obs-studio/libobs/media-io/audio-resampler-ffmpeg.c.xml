<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\media-io\audio-resampler-ffmpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/bmem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio-resampler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio-io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/avutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswresample/swresample.h&gt;</cpp:file></cpp:include>

<struct>struct <name>audio_resampler</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>opened</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>input_freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>input_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>input_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output_buffer</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>output_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>output_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_planes</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>convert_audio_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AUDIO_FORMAT_UNKNOWN</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_S16</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_U8BIT</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_U8</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_16BIT</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_S16</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_32BIT</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_S32</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_FLOAT</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_FLT</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_U8BIT_PLANAR</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_U8P</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_16BIT_PLANAR</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_S16P</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_32BIT_PLANAR</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_S32P</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>:</case>

<return>return <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>AV_SAMPLE_FMT_S16</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>convert_speaker_layout</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SPEAKERS_UNKNOWN</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_MONO</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_MONO</name></expr>;</return>

<case>case <expr><name>SPEAKERS_STEREO</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_STEREO</name></expr>;</return>

<case>case <expr><name>SPEAKERS_2POINT1</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_SURROUND</name></expr>;</return>

<case>case <expr><name>SPEAKERS_4POINT0</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_4POINT0</name></expr>;</return>

<case>case <expr><name>SPEAKERS_4POINT1</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_4POINT1</name></expr>;</return>

<case>case <expr><name>SPEAKERS_5POINT1</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>;</return>

<case>case <expr><name>SPEAKERS_7POINT1</name></expr>:</case>

<return>return <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>audio_resampler_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>resample_info</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>resample_info</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>audio_resampler</name></name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>audio_resampler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>opened</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>input_freq</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>input_layout</name></name> <operator>=</operator> <call><name>convert_speaker_layout</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>input_format</name></name> <operator>=</operator> <call><name>convert_audio_format</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_ch</name></name> <operator>=</operator> <call><name>get_audio_channels</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_freq</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_layout</name></name> <operator>=</operator> <call><name>convert_speaker_layout</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <call><name>convert_audio_format</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_planes</name></name> <operator>=</operator> <ternary><condition><expr><call><name>is_audio_planar</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>rs</name><operator>-&gt;</operator><name>output_ch</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>swr_alloc_set_opts</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_layout</name></name></expr></argument>,

<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>input_layout</name></name></expr></argument>,

<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>input_format</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rs</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"swr_alloc_set_opts failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>input_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_MONO</name> <operator>&amp;&amp;</operator> <name><name>rs</name><operator>-&gt;</operator><name>output_ch</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>matrix</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>swr_set_matrix</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>output_ch</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator>

<literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"swr_set_matrix failed for mono upmix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>swr_init</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"avresample_open failed: error code %d"</literal></expr></argument>,

<argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_resampler_destroy</name><parameter_list>(<parameter><decl><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rs</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audio_resampler_resample</name><parameter_list>(<parameter><decl><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out_frames</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_offset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>input</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>in_frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>rs</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name> <init>= <expr><call><name>swr_get_delay</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>input_freq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>estimated</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>delay</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>in_frames</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>rs</name><operator>-&gt;</operator><name>output_freq</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>rs</name><operator>-&gt;</operator><name>input_freq</name></name></expr></argument>,

<argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ts_offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>swr_get_delay</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>estimated</name> <operator>&gt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>output_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_samples_alloc</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_ch</name></name></expr></argument>,

<argument><expr><name>estimated</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>output_size</name></name> <operator>=</operator> <name>estimated</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>output_size</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>in_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"swr_convert failed: %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>output_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>out_frames</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
