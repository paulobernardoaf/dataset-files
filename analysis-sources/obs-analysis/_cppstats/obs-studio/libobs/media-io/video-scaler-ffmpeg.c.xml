<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\media-io\video-scaler-ffmpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/bmem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video-scaler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswscale/swscale.h&gt;</cpp:file></cpp:include>

<struct>struct <name>video_scaler</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>swscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_height</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type>

<name>get_ffmpeg_video_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUV420P</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_NV12</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUYV422</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_UYVY422</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_RGBA</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_BGRA</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_BGRA</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_GRAY8</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUV444P</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_BGR24</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUV422P</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUVA420P</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUVA422P</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_YUVA444P</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>

<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>

<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ffmpeg_scale_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_scale_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VIDEO_SCALE_DEFAULT</name></expr>:</case>

<return>return <expr><name>SWS_FAST_BILINEAR</name></expr>;</return>

<case>case <expr><name>VIDEO_SCALE_POINT</name></expr>:</case>

<return>return <expr><name>SWS_POINT</name></expr>;</return>

<case>case <expr><name>VIDEO_SCALE_FAST_BILINEAR</name></expr>:</case>

<return>return <expr><name>SWS_FAST_BILINEAR</name></expr>;</return>

<case>case <expr><name>VIDEO_SCALE_BILINEAR</name></expr>:</case>

<return>return <expr><name>SWS_BILINEAR</name> <operator>|</operator> <name>SWS_AREA</name></expr>;</return>

<case>case <expr><name>VIDEO_SCALE_BICUBIC</name></expr>:</case>

<return>return <expr><name>SWS_BICUBIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>SWS_POINT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>get_ffmpeg_coeffs</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>cs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VIDEO_CS_DEFAULT</name></expr>:</case>

<return>return <expr><call><name>sws_getCoefficients</name><argument_list>(<argument><expr><name>SWS_CS_ITU601</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VIDEO_CS_601</name></expr>:</case>

<return>return <expr><call><name>sws_getCoefficients</name><argument_list>(<argument><expr><name>SWS_CS_ITU601</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VIDEO_CS_709</name></expr>:</case>

<return>return <expr><call><name>sws_getCoefficients</name><argument_list>(<argument><expr><name>SWS_CS_ITU709</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><call><name>sws_getCoefficients</name><argument_list>(<argument><expr><name>SWS_CS_ITU601</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ffmpeg_range_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VIDEO_RANGE_DEFAULT</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>VIDEO_RANGE_PARTIAL</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>VIDEO_RANGE_FULL</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXED_1_0</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>video_scaler_create</name><parameter_list>(<parameter><decl><type><name>video_scaler_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>scaler_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>video_scale_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format_src</name> <init>= <expr><call><name>get_ffmpeg_video_format</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format_dst</name> <init>= <expr><call><name>get_ffmpeg_video_format</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale_type</name> <init>= <expr><call><name>get_ffmpeg_scale_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>coeff_src</name> <init>= <expr><call><name>get_ffmpeg_coeffs</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>coeff_dst</name> <init>= <expr><call><name>get_ffmpeg_coeffs</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range_src</name> <init>= <expr><call><name>get_ffmpeg_range_type</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range_dst</name> <init>= <expr><call><name>get_ffmpeg_range_type</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>video_scaler</name></name> <modifier>*</modifier></type><name>scaler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scaler_out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VIDEO_SCALER_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format_src</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name> <operator>||</operator> <name>format_dst</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VIDEO_SCALER_BAD_CONVERSION</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scaler</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>video_scaler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scaler</name><operator>-&gt;</operator><name>src_height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scaler</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <call><name>sws_getCachedContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>format_src</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>format_dst</name></expr></argument>,

<argument><expr><name>scale_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scaler</name><operator>-&gt;</operator><name>swscale</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"video_scaler_create: Could not create "</literal>

<literal type="string">"swscale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_setColorspaceDetails</name><argument_list>(<argument><expr><name><name>scaler</name><operator>-&gt;</operator><name>swscale</name></name></expr></argument>, <argument><expr><name>coeff_src</name></expr></argument>, <argument><expr><name>range_src</name></expr></argument>,

<argument><expr><name>coeff_dst</name></expr></argument>, <argument><expr><name>range_dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FIXED_1_0</name></expr></argument>,

<argument><expr><name>FIXED_1_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"video_scaler_create: "</literal>

<literal type="string">"sws_setColorspaceDetails failed, ignoring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>scaler_out</name> <operator>=</operator> <name>scaler</name></expr>;</expr_stmt>

<return>return <expr><name>VIDEO_SCALER_SUCCESS</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>video_scaler_destroy</name><argument_list>(<argument><expr><name>scaler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VIDEO_SCALER_FAILED</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_scaler_destroy</name><parameter_list>(<parameter><decl><type><name>video_scaler_t</name> <modifier>*</modifier></type><name>scaler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>scaler</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>scaler</name><operator>-&gt;</operator><name>swscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>scaler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>video_scaler_scale</name><parameter_list>(<parameter><decl><type><name>video_scaler_t</name> <modifier>*</modifier></type><name>scaler</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>out_linesize</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>input</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>in_linesize</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scaler</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sws_scale</name><argument_list>(<argument><expr><name><name>scaler</name><operator>-&gt;</operator><name>swscale</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>in_linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>scaler</name><operator>-&gt;</operator><name>src_height</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>out_linesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"video_scaler_scale: sws_scale failed: %d"</literal></expr></argument>,

<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
