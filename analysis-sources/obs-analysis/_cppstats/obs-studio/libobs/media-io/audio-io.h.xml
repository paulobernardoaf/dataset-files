<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\media-io\audio-io.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io-defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/util_uint128.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AUDIO_MIXES</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AUDIO_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_OUTPUT_FRAMES</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOTAL_AUDIO_SIZE</name></cpp:macro> <cpp:value>(MAX_AUDIO_MIXES * MAX_AUDIO_CHANNELS * AUDIO_OUTPUT_FRAMES * sizeof(float))</cpp:value></cpp:define>

<struct_decl>struct <name>audio_output</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>audio_output</name></name></type> <name>audio_t</name>;</typedef>

<enum>enum <name>audio_format</name> <block>{

<decl><name>AUDIO_FORMAT_UNKNOWN</name></decl>,

<decl><name>AUDIO_FORMAT_U8BIT</name></decl>,

<decl><name>AUDIO_FORMAT_16BIT</name></decl>,

<decl><name>AUDIO_FORMAT_32BIT</name></decl>,

<decl><name>AUDIO_FORMAT_FLOAT</name></decl>,

<decl><name>AUDIO_FORMAT_U8BIT_PLANAR</name></decl>,

<decl><name>AUDIO_FORMAT_16BIT_PLANAR</name></decl>,

<decl><name>AUDIO_FORMAT_32BIT_PLANAR</name></decl>,

<decl><name>AUDIO_FORMAT_FLOAT_PLANAR</name></decl>,

}</block>;</enum>

<enum>enum <name>speaker_layout</name> <block>{

<decl><name>SPEAKERS_UNKNOWN</name></decl>, 

<decl><name>SPEAKERS_MONO</name></decl>, 

<decl><name>SPEAKERS_STEREO</name></decl>, 

<decl><name>SPEAKERS_2POINT1</name></decl>, 

<decl><name>SPEAKERS_4POINT0</name></decl>, 

<decl><name>SPEAKERS_4POINT1</name></decl>, 

<decl><name>SPEAKERS_5POINT1</name></decl>, 

<decl><name>SPEAKERS_7POINT1</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

}</block>;</enum>

<struct>struct <name>audio_data</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>audio_output_data</name> <block>{

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>audio_input_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>start_ts</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>end_ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>new_ts</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>active_mixers</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>mixes</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>audio_output_info</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>samples_per_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>speakers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_input_callback_t</name></type> <name>input_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>input_param</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>audio_convert_info</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>samples_per_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>speakers</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_audio_channels</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>speakers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>speakers</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SPEAKERS_MONO</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_STEREO</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_2POINT1</name></expr>:</case>

<return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_4POINT0</name></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_4POINT1</name></expr>:</case>

<return>return <expr><literal type="number">5</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_5POINT1</name></expr>:</case>

<return>return <expr><literal type="number">6</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_7POINT1</name></expr>:</case>

<return>return <expr><literal type="number">8</literal></expr>;</return>

<case>case <expr><name>SPEAKERS_UNKNOWN</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_audio_bytes_per_channel</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AUDIO_FORMAT_U8BIT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_U8BIT_PLANAR</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_16BIT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_16BIT_PLANAR</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_FLOAT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_32BIT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_32BIT_PLANAR</name></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_UNKNOWN</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_audio_planar</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AUDIO_FORMAT_U8BIT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_16BIT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_32BIT</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_FLOAT</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_U8BIT_PLANAR</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_16BIT_PLANAR</name></expr>:</case>

<case>case <expr><name>AUDIO_FORMAT_32BIT_PLANAR</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>AUDIO_FORMAT_UNKNOWN</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_audio_planes</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>speakers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>is_audio_planar</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_audio_channels</name><argument_list>(<argument><expr><name>speakers</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_audio_size</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>audio_format</name></name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>speakers</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>planar</name> <init>= <expr><call><name>is_audio_planar</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>get_audio_channels</name><argument_list>(<argument><expr><name>speakers</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>*</operator>

<call><name>get_audio_bytes_per_channel</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>frames</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>audio_frames_to_ns</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>util_mul64_64</name><argument_list>(<argument><expr><name>frames</name></expr></argument>, <argument><expr><literal type="number">1000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>util_div128_32</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>val</name><operator>.</operator><name>low</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>ns_to_audio_frames</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>util_uint128_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>util_mul64_64</name><argument_list>(<argument><expr><name>frames</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>util_div128_32</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>val</name><operator>.</operator><name>low</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_OUTPUT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_OUTPUT_INVALIDPARAM</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_OUTPUT_FAIL</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>audio_output_open</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>audio_output_close</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>audio_output_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>audio_output_connect</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_convert_info</name></name> <modifier>*</modifier></type><name>conversion</name></decl></parameter>,

<parameter><decl><type><name>audio_output_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>audio_output_disconnect</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,

<parameter><decl><type><name>audio_output_callback_t</name></type> <name>callback</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>audio_output_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>audio_output_get_block_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>audio_output_get_planes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>audio_output_get_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint32_t</name></type> <name>audio_output_get_sample_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>EXPORT</name> <specifier>const</specifier> struct <name>audio_output_info</name> <operator>*</operator>

<call><name>audio_output_get_info</name><argument_list>(<argument><expr><specifier>const</specifier> <name>audio_t</name> <operator>*</operator><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
