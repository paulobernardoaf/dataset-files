<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\media-io\video-scaler.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video-io.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>video_scaler</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>video_scaler</name></name></type> <name>video_scaler_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_SCALER_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_SCALER_BAD_CONVERSION</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_SCALER_FAILED</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>video_scaler_create</name><parameter_list>(<parameter><decl><type><name>video_scaler_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>scaler</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_scale_info</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>video_scale_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>video_scaler_destroy</name><parameter_list>(<parameter><decl><type><name>video_scaler_t</name> <modifier>*</modifier></type><name>scaler</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>video_scaler_scale</name><parameter_list>(<parameter><decl><type><name>video_scaler_t</name> <modifier>*</modifier></type><name>scaler</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>out_linesize</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>input</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>in_linesize</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
