<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-win-crash-handler.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbghelp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/windows/win-version.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>ENUMERATELOADEDMODULES64</name>)<parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>,

<parameter><decl><type><name>PENUMLOADED_MODULES_CALLBACK64</name></type> <name>enum_loaded_modules_callback</name></decl></parameter>,

<parameter><decl><type><name>PVOID</name></type> <name>user_context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMSETOPTIONS</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>sym_options</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMINITIALIZE</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>PCTSTR</name></type> <name>user_search_path</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>invade_process</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMCLEANUP</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>STACKWALK64</name>)<parameter_list>(

<parameter><decl><type><name>DWORD</name></type> <name>machine_type</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>thread</name></decl></parameter>,

<parameter><decl><type><name>LPSTACKFRAME64</name></type> <name>stack_frame</name></decl></parameter>, <parameter><decl><type><name>PVOID</name></type> <name>context_record</name></decl></parameter>,

<parameter><decl><type><name>PREAD_PROCESS_MEMORY_ROUTINE64</name></type> <name>read_memory_routine</name></decl></parameter>,

<parameter><decl><type><name>PFUNCTION_TABLE_ACCESS_ROUTINE64</name></type> <name>function_table_access_routine</name></decl></parameter>,

<parameter><decl><type><name>PGET_MODULE_BASE_ROUTINE64</name></type> <name>get_module_base_routine</name></decl></parameter>,

<parameter><decl><type><name>PTRANSLATE_ADDRESS_ROUTINE64</name></type> <name>translate_address</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMREFRESHMODULELIST</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>PVOID</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMFUNCTIONTABLEACCESS64</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>,

<parameter><decl><type><name>DWORD64</name></type> <name>addr_base</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD64</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMGETMODULEBASE64</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMFROMADDR</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type> <name>address</name></decl></parameter>,

<parameter><decl><type><name>PDWORD64</name></type> <name>displacement</name></decl></parameter>, <parameter><decl><type><name>PSYMBOL_INFOW</name></type> <name>symbol</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMGETMODULEINFO64</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type> <name>addr</name></decl></parameter>,

<parameter><decl><type><name>PIMAGEHLP_MODULE64</name></type> <name>module_info</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD64</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SYMLOADMODULE64</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>file</name></decl></parameter>,

<parameter><decl><type><name>PSTR</name></type> <name>image_name</name></decl></parameter>, <parameter><decl><type><name>PSTR</name></type> <name>module_name</name></decl></parameter>,

<parameter><decl><type><name>DWORD64</name></type> <name>base_of_dll</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>size_of_dll</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>MINIDUMPWRITEDUMP</name>)<parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>process_id</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>MINIDUMP_TYPE</name></type> <name>dump_type</name></decl></parameter>,

<parameter><decl><type><name>PMINIDUMP_EXCEPTION_INFORMATION</name></type> <name>exception_param</name></decl></parameter>,

<parameter><decl><type><name>PMINIDUMP_USER_STREAM_INFORMATION</name></type> <name>user_stream_param</name></decl></parameter>,

<parameter><decl><type><name>PMINIDUMP_CALLBACK_INFORMATION</name></type> <name>callback_param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>HINSTANCE</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>SHELLEXECUTEA</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPCTSTR</name></type> <name>operation</name></decl></parameter>,

<parameter><decl><type><name>LPCTSTR</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>LPCTSTR</name></type> <name>parameters</name></decl></parameter>,

<parameter><decl><type><name>LPCTSTR</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>INT</name></type> <name>show_flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>stack_trace</name> <block>{

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD64</name></type> <name>instruction_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STACKFRAME64</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>image_type</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>exception_handler_data</name> <block>{

<decl_stmt><decl><type><name>SYMINITIALIZE</name></type> <name>sym_initialize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMCLEANUP</name></type> <name>sym_cleanup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMSETOPTIONS</name></type> <name>sym_set_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMFUNCTIONTABLEACCESS64</name></type> <name>sym_function_table_access64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMGETMODULEBASE64</name></type> <name>sym_get_module_base64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMFROMADDR</name></type> <name>sym_from_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMGETMODULEINFO64</name></type> <name>sym_get_module_info64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMREFRESHMODULELIST</name></type> <name>sym_refresh_module_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STACKWALK64</name></type> <name>stack_walk64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENUMERATELOADEDMODULES64</name></type> <name>enumerate_loaded_modules64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MINIDUMPWRITEDUMP</name></type> <name>minidump_write_dump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>dbghelp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYMBOL_INFOW</name> <modifier>*</modifier></type><name>sym_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PEXCEPTION_POINTERS</name></type> <name>exception</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>win_version_info</name></name></type> <name>win_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>time_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stack_trace</name></name></type> <name>main_trace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>cpu_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>module_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>module_list</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>exception_handler_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sym_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cpu_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>module_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>module_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dbghelp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_proc</name><parameter_list>(<parameter><decl><type><name>HMODULE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DBGHELP_IMPORT</name><parameter_list>(<parameter><type><name>target</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { data-&gt;target = get_proc(data-&gt;dbghelp, str); if (!data-&gt;target) return false; } while (false)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_dbghelp_imports</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dbghelp</name></name> <operator>=</operator> <call><name>LoadLibraryW</name><argument_list>(<argument><expr><literal type="string">L"DbgHelp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>dbghelp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_initialize</name></expr></argument>, <argument><expr><literal type="string">"SymInitialize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_cleanup</name></expr></argument>, <argument><expr><literal type="string">"SymCleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_set_options</name></expr></argument>, <argument><expr><literal type="string">"SymSetOptions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_function_table_access64</name></expr></argument>,

<argument><expr><literal type="string">"SymFunctionTableAccess64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_get_module_base64</name></expr></argument>, <argument><expr><literal type="string">"SymGetModuleBase64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_from_addr</name></expr></argument>, <argument><expr><literal type="string">"SymFromAddrW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_get_module_info64</name></expr></argument>, <argument><expr><literal type="string">"SymGetModuleInfo64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>sym_refresh_module_list</name></expr></argument>, <argument><expr><literal type="string">"SymRefreshModuleList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>stack_walk64</name></expr></argument>, <argument><expr><literal type="string">"StackWalk64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>enumerate_loaded_modules64</name></expr></argument>,

<argument><expr><literal type="string">"EnumerateLoadedModulesW64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_DBGHELP_IMPORT</name><argument_list>(<argument><expr><name>minidump_write_dump</name></expr></argument>, <argument><expr><literal type="string">"MiniDumpWriteDump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_instruction_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stack_trace</name></name> <modifier>*</modifier></type><name>trace</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>instruction_ptr</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>Rip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>instruction_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>Rbp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>Rsp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>image_type</name></name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_AMD64</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>instruction_ptr</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>Eip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>instruction_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>Ebp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>Esp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>image_type</name></name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_I386</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>sym_initialize_called</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_sym_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>sym_set_options</name></name><argument_list>(<argument><expr><name>SYMOPT_UNDNAME</name> <operator>|</operator> <name>SYMOPT_FAIL_CRITICAL_ERRORS</name> <operator>|</operator>

<name>SYMOPT_LOAD_ANYTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym_initialize_called</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>sym_initialize</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>sym_refresh_module_list</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sym_info</name></name> <operator>=</operator> <call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LPTR</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>sym_info</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sym_info</name><operator>-&gt;</operator><name>SizeOfStruct</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sym_info</name><operator>-&gt;</operator><name>MaxNameLen</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_version_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_win_ver</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>win_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESSOR_REG_KEY</name></cpp:macro> <cpp:value>L"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_ERROR</name></cpp:macro> <cpp:value>"&lt;unable to query&gt;"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_cpu_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LSTATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegOpenKeyW</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>PROCESSOR_REG_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">L"ProcessorNameString"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cpu_info</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cpu_info</name></name></expr></argument>, <argument><expr><name>CPU_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cpu_info</name></name></expr></argument>, <argument><expr><name>CPU_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>enum_all_modules</name><parameter_list>(<parameter><decl><type><name>PCTSTR</name></type> <name>module_name</name></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type> <name>module_base</name></decl></parameter>,

<parameter><decl><type><name>ULONG</name></type> <name>module_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name_utf8</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name_utf8</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>main_trace</name><operator>.</operator><name>instruction_ptr</name></name> <operator>&gt;=</operator> <name>module_base</name> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>main_trace</name><operator>.</operator><name>instruction_ptr</name></name> <operator>&lt;</operator> <name>module_base</name> <operator>+</operator> <name>module_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>module_name</name></name></expr></argument>, <argument><expr><name>name_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlwr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>module_name</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>module_list</name></name></expr></argument>, <argument><expr><literal type="string">"%016"</literal> <name>PRIX64</name> <literal type="string">"-%016"</literal> <name>PRIX64</name> <literal type="string">" %s\r\n"</literal></expr></argument>,

<argument><expr><name>module_base</name></expr></argument>, <argument><expr><name>module_base</name> <operator>+</operator> <name>module_size</name></expr></argument>, <argument><expr><name>name_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>module_list</name></name></expr></argument>, <argument><expr><literal type="string">"%08"</literal> <name>PRIX64</name> <literal type="string">"-%08"</literal> <name>PRIX64</name> <literal type="string">" %s\r\n"</literal></expr></argument>,

<argument><expr><name>module_base</name></expr></argument>, <argument><expr><name>module_base</name> <operator>+</operator> <name>module_size</name></expr></argument>, <argument><expr><name>name_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_module_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>enumerate_loaded_modules64</name></name><argument_list>(

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PENUMLOADED_MODULES_CALLBACK64</name><operator>)</operator><name>enum_all_modules</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>date_time</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>*</operator><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>date_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date_time</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d, %X"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_bitness</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obs_bitness</name> <operator>=</operator> <literal type="string">"64"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>obs_bitness</name> <operator>=</operator> <literal type="string">"32"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,

<argument><expr><literal type="string">"Unhandled exception: %x\r\n"</literal>

<literal type="string">"Date/Time: %s\r\n"</literal>

<literal type="string">"Fault address: %"</literal> <name>PRIX64</name> <literal type="string">" (%s)\r\n"</literal>

<literal type="string">"libobs version: "</literal> <name>OBS_VERSION</name> <literal type="string">" (%s-bit)\r\n"</literal>

<literal type="string">"Windows version: %d.%d build %d (revision: %d; "</literal>

<literal type="string">"%s-bit)\r\n"</literal>

<literal type="string">"CPU: %s\r\n\r\n"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>exception</name><operator>-&gt;</operator><name>ExceptionRecord</name><operator>-&gt;</operator><name>ExceptionCode</name></name></expr></argument>, <argument><expr><name>date_time</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>main_trace</name><operator>.</operator><name>instruction_ptr</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>module_name</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name>obs_bitness</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>win_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>win_version</name><operator>.</operator><name>minor</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>win_version</name><operator>.</operator><name>build</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>win_version</name><operator>.</operator><name>revis</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>is_64_bit_windows</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"64"</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cpu_info</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>module_info</name> <block>{

<decl_stmt><decl><type><name>DWORD64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name_utf8</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>enum_module</name><parameter_list>(<parameter><decl><type><name>PCTSTR</name></type> <name>module_name</name></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type> <name>module_base</name></decl></parameter>,

<parameter><decl><type><name>ULONG</name></type> <name>module_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>module_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>module_base</name> <operator>&amp;&amp;</operator>

<name><name>info</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name>module_base</name> <operator>+</operator> <name>module_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name_utf8</name></name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlwr</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name_utf8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_module_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>module_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>enumerate_loaded_modules64</name></name><argument_list>(

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PENUMLOADED_MODULES_CALLBACK64</name><operator>)</operator><name>enum_module</name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>walk_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>HANDLE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stack_trace</name></name> <modifier>*</modifier></type><name>trace</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>module_info</name></name></type> <name>module_info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD64</name></type> <name>func_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sym_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name><name>data</name><operator>-&gt;</operator><name>stack_walk64</name></name><argument_list>(<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>image_type</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name></expr></argument>,

<argument><expr><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>trace</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sym_function_table_access64</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sym_get_module_base64</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>module_info</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_module_name</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>module_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name><name>module_info</name><operator>.</operator><name>name_utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>module_info</name><operator>.</operator><name>name_utf8</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name><name>module_info</name><operator>.</operator><name>name_utf8</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>module_info</name><operator>.</operator><name>name_utf8</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>module_info</name><operator>.</operator><name>name_utf8</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name><name>data</name><operator>-&gt;</operator><name>sym_from_addr</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>func_offset</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sym_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_wcs_to_utf8</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sym_info</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sym_name</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESS_FORMAT</name></cpp:macro> <cpp:value>"%016I64X %016I64X %016I64X %016I64X " "%016I64X %016I64X %s!%s+0x%I64x\r\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL_FORMAT</name></cpp:macro> <cpp:value>"%016I64X %016I64X %016I64X %016I64X " "%016I64X %016I64X %s!0x%I64x\r\n"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESS_FORMAT</name></cpp:macro> <cpp:value>"%08.8I64X %08.8I64X %08.8I64X %08.8I64X " "%08.8I64X %08.8I64X %s!%s+0x%I64x\r\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL_FORMAT</name></cpp:macro> <cpp:value>"%08.8I64X %08.8I64X %08.8I64X %08.8I64X " "%08.8I64X %08.8I64X %s!0x%I64x\r\n"</cpp:value></cpp:define>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>sym_info</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>SYMFLAG_EXPORT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>SUCCESS_FORMAT</name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name></expr></argument>, <argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sym_name</name></expr></argument>, <argument><expr><name>func_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>FAIL_FORMAT</name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name></expr></argument>, <argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name><name>trace</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_TOP</name></cpp:macro> <cpp:value>"Stack EIP Arg0 " "Arg1 Arg2 Arg3 Address\r\n"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_TOP</name></cpp:macro> <cpp:value>"Stack EIP Arg0 " "Arg1 Arg2 Arg3 Address\r\n"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write_thread_trace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>THREADENTRY32</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first_thread</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>crash_thread</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>th32ThreadID</name></name> <operator>==</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stack_trace</name></name></type> <name>trace</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stack_trace</name></name> <modifier>*</modifier></type><name>ptrace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_thread</name> <operator>!=</operator> <name>crash_thread</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>th32OwnerProcessID</name></name> <operator>!=</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>thread</name> <operator>=</operator> <call><name>OpenThread</name><argument_list>(<argument><expr><name>THREAD_ALL_ACCESS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>th32ThreadID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>trace</name><operator>.</operator><name>context</name><operator>.</operator><name>ContextFlags</name></name> <operator>=</operator> <name>CONTEXT_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetThreadContext</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_instruction_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_catf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nThread %lX%s\r\n"</literal> <name>TRACE_TOP</name></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>th32ThreadID</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>crash_thread</name></expr> ?</condition><then> <expr><literal type="string">" (Crashed)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptrace</name> <operator>=</operator> <ternary><condition><expr><name>crash_thread</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>main_trace</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>trace</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>walk_stack</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><name>ptrace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write_thread_traces</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>THREADENTRY32</name></type> <name>entry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>snapshot</name> <init>= <expr><call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPTHREAD</name></expr></argument>,

<argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>Thread32First</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_thread_trace</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>Thread32Next</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>Thread32First</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_thread_trace</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>Thread32Next</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write_module_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nLoaded modules:\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"Base Address Module\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"Base Address Module\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dstr_cat_dstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>module_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>handle_exception</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exception_handler_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>PEXCEPTION_POINTERS</name></type> <name>exception</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_dbghelp_imports</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>exception</name></name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>main_trace</name><operator>.</operator><name>context</name></name> <operator>=</operator> <operator>*</operator><name><name>exception</name><operator>-&gt;</operator><name>ContextRecord</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>time_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sym_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_version_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_cpu_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_instruction_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>main_trace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_module_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_header</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_thread_traces</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_module_list</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name> <name>CALLBACK</name></type> <name>exception_handler</name><parameter_list>(<parameter><decl><type><name>PEXCEPTION_POINTERS</name></type> <name>exception</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>exception_handler_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>inside_handler</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsDebuggerPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inside_handler</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inside_handler</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_exception</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcrash</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exception_handler_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inside_handler</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_crash_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetUnhandledExceptionFilter</name><argument_list>(<argument><expr><name>exception_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
