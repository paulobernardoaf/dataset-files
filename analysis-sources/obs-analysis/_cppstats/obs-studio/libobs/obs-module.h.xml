<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-module.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_EXPORT</name></cpp:macro> <cpp:value>extern "C" EXPORT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_EXTERN</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_EXPORT</name></cpp:macro> <cpp:value>EXPORT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_EXTERN</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_DECLARE_MODULE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>static obs_module_t *obs_module_pointer; MODULE_EXPORT void obs_module_set_pointer(obs_module_t *module); void obs_module_set_pointer(obs_module_t *module) { obs_module_pointer = module; } obs_module_t *obs_current_module(void) { return obs_module_pointer; } MODULE_EXPORT uint32_t obs_module_ver(void); uint32_t obs_module_ver(void) { return LIBOBS_API_VER; }</cpp:value></cpp:define>

<function_decl><type><name>MODULE_EXPORT</name> <name>bool</name></type> <name>obs_module_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXPORT</name> <name>void</name></type> <name>obs_module_unload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXPORT</name> <name>void</name></type> <name>obs_module_post_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXPORT</name> <name>void</name></type> <name>obs_module_set_locale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXPORT</name> <name>void</name></type> <name>obs_module_free_locale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_MODULE_USE_DEFAULT_LOCALE</name><parameter_list>(<parameter><type><name>module_name</name></type></parameter>, <parameter><type><name>default_locale</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lookup_t *obs_module_lookup = NULL; const char *obs_module_text(const char *val) { const char *out = val; text_lookup_getstr(obs_module_lookup, val, &amp;out); return out; } bool obs_module_get_string(const char *val, const char **out) { return text_lookup_getstr(obs_module_lookup, val, out); } void obs_module_set_locale(const char *locale) { if (obs_module_lookup) text_lookup_destroy(obs_module_lookup); obs_module_lookup = obs_module_load_locale( obs_current_module(), default_locale, locale); } void obs_module_free_locale(void) { text_lookup_destroy(obs_module_lookup); obs_module_lookup = NULL; }</cpp:value></cpp:define>

<function_decl><type><name>MODULE_EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_module_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXTERN</name> <name>bool</name></type> <name>obs_module_get_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_string</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>translated_string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXTERN</name> <name>obs_module_t</name> <modifier>*</modifier></type><name>obs_current_module</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_module_file</name><parameter_list>(<parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_find_module_file(obs_current_module(), file)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obs_module_config_path</name><parameter_list>(<parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obs_module_get_config_path(obs_current_module(), file)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_MODULE_AUTHOR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MODULE_EXPORT const char *obs_module_author(void); const char *obs_module_author(void) { return name; }</cpp:value></cpp:define>

<function_decl><type><name>MODULE_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_module_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MODULE_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_module_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
