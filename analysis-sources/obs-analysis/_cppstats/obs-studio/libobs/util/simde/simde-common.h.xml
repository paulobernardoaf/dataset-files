<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\simde\simde-common.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hedley.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"check.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simde-arch.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ALIGN</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Alignas(alignment)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ALIGN</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>alignas(alignment)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">95</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_CRAY_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_IBM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">11</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_PGI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">19</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_ARM_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TINYC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HEDLEY_TI_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ALIGN</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((aligned(alignment)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ALIGN</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(align(alignment))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ALIGN</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_assert_aligned</name><parameter_list>(<parameter><type><name>alignment</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_assert_int(((uintptr_t)(val)) % (alignment), ==, 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>vector_size</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ENABLE_GCC_VEC_EXT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ENABLE_OPENMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_OPENMP</name> <operator>&gt;=</operator> <literal type="number">201307L</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP_SIMD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_OPENMP_SIMD</name> <operator>&gt;=</operator> <literal type="number">201307L</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ENABLE_OPENMP</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ENABLE_CILKPLUS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cilk</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ENABLE_CILKPLUS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ENABLE_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro> <cpp:value>_Pragma("omp simd")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(omp simd safelen(l))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(omp simd reduction(r))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(omp simd aligned(a))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ENABLE_CILKPLUS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro> <cpp:value>_Pragma("simd")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(simd vectorlength(l))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(simd reduction(r))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(simd aligned(a))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro> <cpp:value>_Pragma("simd")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(simd vectorlength(l))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(simd reduction(r))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro> <cpp:value>_Pragma("clang loop vectorize(enable)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEDLEY_PRAGMA(clang loop vectorize_width(l))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__VECTORIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro> <cpp:value>_Pragma("GCC ivdep")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__VECTORIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__VECTORIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_CRAY_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro> <cpp:value>_Pragma("_CRI ivdep")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__VECTORIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIMDE__VECTORIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_SAFELEN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_REDUCTION</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__VECTORIZE_ALIGNED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>unused</name><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__UNUSED</name></cpp:macro> <cpp:value>__attribute__((__unused__))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__UNUSED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_GCC_HAS_ATTRIBUTE</name><argument_list>(<argument><expr><name>artificial</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ARTIFICIAL</name></cpp:macro> <cpp:value>__attribute__((__artificial__))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ARTIFICIAL</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__FUNCTION_ATTRIBUTES</name></cpp:macro> <cpp:value>HEDLEY_NEVER_INLINE SIMDE__UNUSED static</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__FUNCTION_ATTRIBUTES</name></cpp:macro> <cpp:value>HEDLEY_INLINE SIMDE__ARTIFICIAL static</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__BEGIN_DECLS</name></cpp:macro> <cpp:value>HEDLEY_DIAGNOSTIC_PUSH __pragma(warning(disable : 4996 4204)) HEDLEY_BEGIN_C_DECLS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__END_DECLS</name></cpp:macro> <cpp:value>HEDLEY_DIAGNOSTIC_POP HEDLEY_END_C_DECLS</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__BEGIN_DECLS</name></cpp:macro> <cpp:value>HEDLEY_BEGIN_C_DECLS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__END_DECLS</name></cpp:macro> <cpp:value>HEDLEY_END_C_DECLS</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__HAVE_INT128</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>__int128</name></type> <name>simde_int128</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int128</name></type> <name>simde_uint128</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_FLOAT32_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_FLOAT32_TYPE</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_FLOAT32_C</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>value##f</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_FLOAT32_C</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SIMDE_FLOAT32_TYPE)value)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>SIMDE_FLOAT32_TYPE</name></type> <name>simde_float32</name>;</typedef>

<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simde_float32</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><literal type="string">"Unable to find 32-bit floating-point type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_FLOAT64_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_FLOAT64_TYPE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_FLOAT64_C</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>value</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_FLOAT32_C</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SIMDE_FLOAT64_TYPE)value)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>SIMDE_FLOAT64_TYPE</name></type> <name>simde_float64</name>;</typedef>

<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simde_float64</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><literal type="string">"Unable to find 64-bit floating-point type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ASSUME_VECTORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips_msa</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ALTIVEC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ASSUME_VECTORIZATION</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_CLANG_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_shufflevector</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__SHUFFLE_VECTOR</name><parameter_list>(<parameter><type><name>elem_size</name></type></parameter>, <parameter><type><name>vec_size</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_shufflevector(a, b, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_shuffle</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__SHUFFLE_VECTOR</name><parameter_list>(<parameter><type><name>elem_size</name></type></parameter>, <parameter><type><name>vec_size</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_shuffle(a, b, (int##elem_size##_t __attribute__( (__vector_size__(vec_size)))){__VA_ARGS__})</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ACCURACY_ITERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_ACCURACY_ITERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__REALLY_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE__REALLY_GCC</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__REALLY_GCC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__REALLY_GCC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__ASSUME_ALIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIMDE__ASSUME_ALIGNED</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>HEDLEY_INTEL_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ASSUME_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__assume_aligned(ptr, align)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_MSVC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">13</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ASSUME_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__assume((((char *)ptr) - ((char *)0)) % (align) == 0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_assume_aligned</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ASSUME_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr = (__typeof__(ptr))__builtin_assume_aligned((ptr), align))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_CLANG_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_assume</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ASSUME_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_assume((((char *)ptr) - ((char *)0)) % (align) == 0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>HEDLEY_GCC_HAS_BUILTIN</name><argument_list>(<argument><expr><name>__builtin_unreachable</name><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ASSUME_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((char *)ptr) - ((char *)0)) % (align) == 0) ? (1) : (__builtin_unreachable(), 0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__ASSUME_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_IGNORE_COMPILER_BUGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIMDE__REALLY_GCC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_BUG_GCC_REV_208793</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_BUG_GCC_BAD_MM_SRA_EPI32</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>HEDLEY_GCC_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_BUG_GCC_BAD_MM_EXTRACT_EPI8</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_BUG_EMSCRIPTEN_MISSING_IMPL</name></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_BUG_EMSCRIPTEN_5242</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
