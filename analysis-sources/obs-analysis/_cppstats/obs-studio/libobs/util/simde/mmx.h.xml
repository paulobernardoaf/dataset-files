<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\simde\mmx.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__MMX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__MMX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__MMX_H</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simde-common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_FORCE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_MMX_NATIVE</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MMX__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NO_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_MMX_NATIVE</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NO_NEON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_NO_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE_MMX_NEON</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmintrin.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_neon.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<macro><name>SIMDE__BEGIN_DECLS</name></macro>

<typedef>typedef <type><union>union <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE__ENABLE_GCC_VEC_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int8_t</name> <name>i8</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(8</decl>)<operator>,</operator> __may_alias__</decl_stmt>)</block></union></type>);</typedef>

<decl_stmt><decl><type><name>int16_t</name> <name>i16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <name>i32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <name>i64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <name>u8</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <name>u16</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <name>u32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <name>u64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>simde_float32</name> <name>f32</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__vector_size__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>i8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>i16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>i32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>i64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>u16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>simde_float32</name></type> <name><name>f32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>__m64</name></type> <name>n</name></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>int8x8_t</name></type> <name>neon_i8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16x4_t</name></type> <name>neon_i16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32x2_t</name></type> <name>neon_i32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64x1_t</name></type> <name>neon_i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8x8_t</name></type> <name>neon_u8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16x4_t</name></type> <name>neon_u16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32x2_t</name></type> <name>neon_u32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64x1_t</name></type> <name>neon_u64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float32x2_t</name></type> <name>neon_f32</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

} simde__m64<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__m64</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m64</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"__m64 size doesn't match simde__m64 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name> <name>simde__m64</name></type> <name>SIMDE__M64_C</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NEON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMDE__M64_NEON_C</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(simde__m64) { .neon_##T = (expr) }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>HEDLEY_STATIC_ASSERT</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>simde__m64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"__m64 size incorrect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_add_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_add_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_add_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_add_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_add_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_add_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_add_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_add_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_add_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_adds_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_adds_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>INT8_MAX</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>INT8_MIN</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddsb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_adds_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_adds_pu8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_adds_pu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>x</name> <init>= <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddusb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_adds_pu8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_adds_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_adds_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>INT16_MAX</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>SHRT_MIN</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SHRT_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddsw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_adds_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_adds_pu16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_adds_pu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>x</name> <init>= <expr><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT16_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_paddusw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_adds_pu16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_and_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_and_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_and_si64(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_andnot_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_andnot_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pandn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_andnot_si64(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cmpeq_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pcmpeqb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cmpeq_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cmpeq_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pcmpeqw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cmpeq_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cmpeq_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pcmpeqd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cmpeq_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cmpgt_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pcmpgtb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cmpgt_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cmpgt_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pcmpgtw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cmpgt_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cmpgt_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cmpgt_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pcmpgtd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cmpgt_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>int64_t</name></type> <name>simde_mm_cvtm64_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_mm_cvtm64_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_to_int64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtm64_si64(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cvtsi32_si64</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cvtsi32_si64</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_from_int</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtsi32_si64(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_cvtsi64_m64</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_ARCH_AMD64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_cvtsi64_m64</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_from_int64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_cvtsi64_m64(a)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>int32_t</name></type> <name>simde_mm_cvtsi64_si32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_mm_cvtsi64_si32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>void</name></type> <name>simde_mm_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>_mm_empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_empty</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>simde_mm_empty()</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_madd_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_madd_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmaddwd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_madd_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_mulhi_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_mulhi_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmulhw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_mulhi_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_mullo_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_mullo_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pmullw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_mullo_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_or_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_or_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_por</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_or_si64(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_packs_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_packs_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT8_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>INT8_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_packsswb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_packs_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_packs_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_packs_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>SHRT_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SHRT_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT16_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>SHRT_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>SHRT_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT16_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_packssdw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_packs_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_packs_pu16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_packs_pu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_packuswb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_packs_pu16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_set_pi8</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e4</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set_pi8</name><argument_list>(<argument><expr><name>e7</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_x_mm_set_pu8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e4</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set_pi8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e7</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e6</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e5</name></expr></argument>,

<argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e4</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e3</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e2</name></expr></argument>,

<argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e1</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>e5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>e6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>e7</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_set_pi16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set_pi16</name><argument_list>(<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_x_mm_set_pu16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>e1</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set_pi16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>e3</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>e2</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>e1</name></expr></argument>,

<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_x_mm_set_pu32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set_pi32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>e1</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_set_pi32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set_pi32</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_set1_pi8</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set1_pi8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi8</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_set1_pi16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set1_pi16</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi16</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_set1_pi32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_set1_pi32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_setr_pi8</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>e7</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e6</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e5</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e4</name></decl></parameter>,

<parameter><decl><type><name>int8_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_setr_pi8</name><argument_list>(<argument><expr><name>e7</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi8</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e4</name></expr></argument>, <argument><expr><name>e5</name></expr></argument>, <argument><expr><name>e6</name></expr></argument>, <argument><expr><name>e7</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_setr_pi16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>e3</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_setr_pi16</name><argument_list>(<argument><expr><name>e3</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi16</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><name>e3</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_setr_pi32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>e1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_setr_pi32</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi32</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_setzero_si64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_setzero_si64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>simde_mm_set_pi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sll_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sll_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psllw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sll_pi16(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sll_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sll_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pslld</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sll_pi32(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_slli_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_slli_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psllwi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_slli_pi16(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_slli_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_slli_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pslldi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_slli_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_slli_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_slli_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psllqi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_slli_si64(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sll_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sll_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psllq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sll_si64(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srl_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srl_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrlw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srl_pi16(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srl_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srl_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrld</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srl_pi32(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srli_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srli_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrlwi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srli_pi16(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srli_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srli_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrldi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srli_pi32(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srli_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srli_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrlqi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srli_si64(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srl_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srl_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HEDLEY_UNLIKELY</name><argument_list>(<argument><expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrlq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srl_si64(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srai_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srai_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>m</name> <init>=

<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>count</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>is_neg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>count</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrawi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srai_pi16(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_srai_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PGI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_srai_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>m</name> <init>=

<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>count</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>is_neg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>count</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_srai_pi32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_srai_pi32(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sra_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sra_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>count</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">15</literal> <operator>||</operator> <name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><literal type="number">0x0000</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>cnt</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>is_neg</name> <init>= <expr><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>cnt</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psraw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sra_pi16(a, count)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sra_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sra_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>count</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>cnt</name> <init>= <expr><name><name>count</name><operator>.</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>UINT32_MAX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator><operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <name>cnt</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>is_neg</name> <init>= <expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>cnt</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>m</name> <operator>*</operator> <name>is_neg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psrad</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sra_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sub_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sub_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sub_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sub_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sub_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sub_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_sub_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_sub_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_sub_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_subs_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_subs_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>INT8_MIN</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>INT8_MAX</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubsb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_subs_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_subs_pu8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_subs_pu8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>x</name> <init>= <expr><name><name>a</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubusb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_subs_pu8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_subs_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_subs_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>SHRT_MIN</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SHRT_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>INT16_MAX</name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubsw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_subs_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_subs_pu16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_subs_pu16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>SIMDE__VECTORIZE</name></macro>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>a</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>UINT16_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>u16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_psubusw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_subs_pu16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_unpackhi_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_punpckhbw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_unpackhi_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_unpackhi_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_punpckhwd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_unpackhi_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_unpackhi_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_unpackhi_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_punpckhdq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_unpackhi_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_unpacklo_pi8</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_pi8</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_punpcklbw</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_unpacklo_pi8(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_unpacklo_pi16</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_pi16</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_punpcklwd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_unpacklo_pi16(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_unpacklo_pi32</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_unpacklo_pi32</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_punpckldq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_unpacklo_pi32(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>simde__m64</name></type> <name>simde_mm_xor_si64</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>simde__m64</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>SIMDE__M64_C</name><argument_list>(<argument><expr><call><name>_mm_xor_si64</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>simde__m64</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>i64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simde_m_pxor</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simde_mm_xor_si64(a, b)</cpp:value></cpp:define>

<function><type><name>SIMDE__FUNCTION_ATTRIBUTES</name>

<name>int32_t</name></type> <name>simde_m_to_int</name><parameter_list>(<parameter><decl><type><name>simde__m64</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIMDE_MMX_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_m_to_int</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name><name>a</name><operator>.</operator><name>i32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<expr><name>SIMDE__END_DECLS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
