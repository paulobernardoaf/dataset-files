<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\darray.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARRAY_INVALID</name></cpp:macro> <cpp:value>((size_t)-1)</cpp:value></cpp:define>

<struct>struct <name>darray</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>darray_alloc_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>element_size</name> <operator>*</operator> <name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>darray_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>da</name><operator>-&gt;</operator><name>array</name></name><operator>)</operator> <operator>+</operator> <name>element_size</name> <operator>*</operator> <name>idx</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>darray_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>da</name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_reserve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>capacity</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>capacity</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>element_size</name> <operator>*</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_ensure_capacity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_cap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_cap</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>new_size</name></expr> </then><else>: <expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>new_cap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_cap</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>element_size</name> <operator>*</operator> <name>new_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_cap</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_resize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_clear</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_clear</name> <operator>=</operator> <name>size</name> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_num</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_ensure_capacity</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_clear</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>old_num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>element_size</name> <operator>*</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>old_num</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>darray_resize</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_copy_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_resize</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>darray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>darray_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compare</name> <init>= <expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>da</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>compare</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>DARRAY_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>darray_push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_ensure_capacity</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>++</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>darray_end</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>darray_push_back_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>darray_ensure_capacity</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>++</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>darray_end</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>last</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>darray_push_back_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name> <operator>||</operator> <operator>!</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_num</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_resize</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>old_num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>array</name></expr></argument>,

<argument><expr><name>element_size</name> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>old_num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>darray_push_back_darray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>darray_push_back_array</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>move_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>move_count</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_ensure_capacity</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>++</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_item</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new_item</name></expr></argument>,

<argument><expr><name>move_count</name> <operator>*</operator> <name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>darray_insert_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>move_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>darray_push_back_new</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>move_count</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_ensure_capacity</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>++</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><name>move_count</name> <operator>*</operator> <name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_insert_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>array</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_num</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_resize</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>num</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>element_size</name> <operator>*</operator> <operator>(</operator><name>old_num</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_insert_darray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_insert_array</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><operator>--</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>element_size</name> <operator>*</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_erase_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>darray_find</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>DARRAY_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>darray_erase</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_erase_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>move_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>&gt;</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>darray_erase</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>move_count</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>move_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>move_count</name> <operator>*</operator> <name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_pop_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>darray_erase</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_join</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>darray_push_back_darray</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>da</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>darray</name></name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst1</name> <operator>!=</operator> <name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_copy</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>darray_copy_array</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>array</name></name></expr></argument>,

<argument><expr><name><name>temp</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>darray_copy_array</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>,

<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>temp</name><operator>.</operator><name>num</name></name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>darray_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_move_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>from</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_to</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_from</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_to</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>p_from</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>to</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_to</name></expr></argument>,

<argument><expr><name>element_size</name> <operator>*</operator> <operator>(</operator><name>from</name> <operator>-</operator> <name>to</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p_from</name></expr></argument>, <argument><expr><call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>element_size</name> <operator>*</operator> <operator>(</operator><name>to</name> <operator>-</operator> <name>from</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_to</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>darray_swap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <call><name>darray_item</name><argument_list>(<argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>a_ptr</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a_ptr</name></expr></argument>, <argument><expr><name>b_ptr</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b_ptr</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARRAY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>union { struct darray da; struct { type *array; size_t num; size_t capacity; }; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_init</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_init(&amp;v.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_free</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_free(&amp;v.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_alloc_size</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(*v.array) * v.num)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_end</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_end(sizeof(*v.array), &amp;v.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_reserve</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>capacity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_reserve(sizeof(*v.array), &amp;v.da, capacity)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_resize</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_resize(sizeof(*v.array), &amp;v.da, size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_copy</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_copy(sizeof(*dst.array), &amp;dst.da, &amp;src.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_copy_array</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src_array</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_copy_array(sizeof(*dst.array), &amp;dst.da, src_array, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_move</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_move(&amp;dst.da, &amp;src.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_find</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_find(sizeof(*v.array), &amp;v.da, item, idx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_push_back</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_push_back(sizeof(*v.array), &amp;v.da, item)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_push_back_new</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_push_back_new(sizeof(*v.array), &amp;v.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_push_back_array</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src_array</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_push_back_array(sizeof(*dst.array), &amp;dst.da, src_array, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_push_back_da</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_push_back_darray(sizeof(*dst.array), &amp;dst.da, &amp;src.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_insert</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_insert(sizeof(*v.array), &amp;v.da, idx, item)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_insert_new</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_insert_new(sizeof(*v.array), &amp;v.da, idx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_insert_array</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>src_array</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_insert_array(sizeof(*dst.array), &amp;dst.da, idx, src_array, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_insert_da</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_insert_darray(sizeof(*dst.array), &amp;dst.da, idx, &amp;src.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_erase</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_erase(sizeof(*dst.array), &amp;dst.da, idx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_erase_item</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_erase_item(sizeof(*dst.array), &amp;dst.da, item)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_erase_range</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_erase_range(sizeof(*dst.array), &amp;dst.da, from, to)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_pop_back</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_pop_back(sizeof(*dst.array), &amp;dst.da);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_join</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_join(sizeof(*dst.array), &amp;dst.da, &amp;src.da)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_split</name><parameter_list>(<parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_split(sizeof(*src.array), &amp;dst1.da, &amp;dst2.da, &amp;src.da, idx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_move_item</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_move_item(sizeof(*v.array), &amp;v.da, from, to)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da_swap</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>darray_swap(sizeof(*v.array), &amp;v.da, idx1, idx2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
