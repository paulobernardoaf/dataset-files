<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\lexer.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"darray.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>strref</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>strref_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>strref_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>strref_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>strref_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strref_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name><name>t</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>strref_is_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><name><name>str</name><operator>-&gt;</operator><name>array</name></name> <operator>||</operator> <operator>!</operator><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>str</name><operator>-&gt;</operator><name>array</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>strref_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>strref_cmpi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>strref_cmp_strref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>int</name></type> <name>strref_cmpi_strref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>valid_int_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>valid_float_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>valid_int_strref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>valid_int_str</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>valid_float_strref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>valid_float_str</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_whitespace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_newline</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_space_or_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_newline_pair</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ch1</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>ch2</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch1</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch2</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>newline_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="string">"\n\r"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>array</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>array</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>base_token_type</name> <block>{

<decl><name>BASETOKEN_NONE</name></decl>,

<decl><name>BASETOKEN_ALPHA</name></decl>,

<decl><name>BASETOKEN_DIGIT</name></decl>,

<decl><name>BASETOKEN_WHITESPACE</name></decl>,

<decl><name>BASETOKEN_OTHER</name></decl>,

}</block>;</enum>

<struct>struct <name>base_token</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>base_token_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>passed_whitespace</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>base_token_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>base_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>base_token_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>base_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEX_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEX_WARNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct>struct <name>error_item</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>error_item_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_item</name></name> <modifier>*</modifier></type><name>ei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>error_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>error_item_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_item</name></name> <modifier>*</modifier></type><name>ei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error_item_init</name><argument_list>(<argument><expr><name>ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>error_item_array_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_item</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error_item_free</name><argument_list>(<argument><expr><name>array</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<struct>struct <name>error_data</name> <block>{

<macro><name>DARRAY</name><argument_list>(<argument>struct error_item</argument>)</argument_list></macro> <expr_stmt><expr><name>errors</name></expr>;</expr_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>error_data_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>error_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>error_item_array_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name><name>struct</name> <name>error_item</name></name> <modifier>*</modifier></type><name>error_data_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>EXPORT</name> <name>char</name> <modifier>*</modifier></type><name>error_data_buildstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>error_data_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>error_data_type_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>error_data_has_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>error_data</name></name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ed</name><operator>-&gt;</operator><name>errors</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>==</operator> <name>LEX_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>lexer</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lexer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>lexer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lexer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lexer_init</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lexer_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lexer_free</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>text</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lexer_start_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lexer_free</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>text</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lexer_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>text</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <name>ignore_whitespace</name> <block>{ <decl><name>PARSE_WHITESPACE</name></decl>, <decl><name>IGNORE_WHITESPACE</name></decl> }</block>;</enum>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>lexer_getbasetoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>base_token</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ignore_whitespace</name></name></type> <name>iws</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>lexer_getstroffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
