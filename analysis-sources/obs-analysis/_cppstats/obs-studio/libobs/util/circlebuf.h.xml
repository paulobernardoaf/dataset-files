<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\circlebuf.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c99defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>circlebuf</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>end_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>circlebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>circlebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_reorder_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>new_capacity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>difference</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>||</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>difference</name> <operator>=</operator> <name>new_capacity</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>difference</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>+=</operator> <name>difference</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_ensure_capacity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_capacity</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_capacity</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>new_capacity</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_capacity</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>brealloc</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_reorder_data</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_reserve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>capacity</name> <operator>&lt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>brealloc</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_reorder_data</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_upsize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>add_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_end_pos</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>+</operator> <name>add_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_ensure_capacity</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_end_pos</name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>loop_size</name> <init>= <expr><name>add_size</name> <operator>-</operator> <name>back_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>back_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>loop_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_end_pos</name> <operator>-=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>add_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <name>new_end_pos</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_place</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>end_point</name> <init>= <expr><name>position</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_end_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end_point</name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>circlebuf_upsize</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>end_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>position</name> <operator>+=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>position</name> <operator>-=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data_end_pos</name> <operator>=</operator> <name>position</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_end_pos</name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><name>data_end_pos</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>loop_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name>back_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>back_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>loop_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>loop_size</name></expr></argument>, <argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_push_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_end_pos</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_ensure_capacity</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_end_pos</name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>loop_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name>back_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>back_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>back_size</name></expr></argument>, <argument><expr><name>loop_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_end_pos</name> <operator>-=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <name>new_end_pos</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_push_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_ensure_capacity</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>back_size</name></expr></argument>,

<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name>back_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_push_back_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_end_pos</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_ensure_capacity</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_end_pos</name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>loop_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name>back_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>back_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>loop_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_end_pos</name> <operator>-=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <name>new_end_pos</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_push_front_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_ensure_capacity</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name>back_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_peek_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>start_size</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>,

<argument><expr><name>start_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>start_size</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name>start_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_peek_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>back_size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr> ?</condition><then> <expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name></expr> </then><else>: <expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>back_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>front_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name>back_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_end_pos</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name>front_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>back_size</name><operator>)</operator></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>back_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>new_end_pos</name></expr></argument>,

<argument><expr><name>front_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>-</operator> <name>size</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_pop_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_peek_front</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>&gt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>-=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>circlebuf_pop_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>circlebuf_peek_back</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>&lt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>circlebuf_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>circlebuf</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>cb</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ptr</name> <operator>+</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
