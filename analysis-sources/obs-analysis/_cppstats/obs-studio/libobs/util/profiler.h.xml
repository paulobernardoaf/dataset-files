<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\profiler.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"darray.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>profiler_snapshot</name></name></type> <name>profiler_snapshot_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>profiler_snapshot_entry</name></name></type> <name>profiler_snapshot_entry_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>profiler_time_entry</name></name></type> <name>profiler_time_entry_t</name>;</typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profile_register_root</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>expected_time_between_calls</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profile_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profile_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profile_reenable_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_print</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_print_time_between_calls</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>profiler_name_store</name></name></type> <name>profiler_name_store_t</name>;</typedef>

<function_decl><type><name>EXPORT</name> <name>profiler_name_store_t</name> <modifier>*</modifier></type><name>profiler_name_store_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_name_store_free</name><parameter_list>(<parameter><decl><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTFATTR</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(__printf__, f, a)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTFATTR</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>PRINTFATTR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile_store_name</name><parameter_list>(<parameter><decl><type><name>profiler_name_store_t</name> <modifier>*</modifier></type><name>store</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRINTFATTR</name></cpp:undef>

<struct>struct <name>profiler_time_entry</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>time_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <macro><name>DARRAY</name><argument_list>(<argument>profiler_time_entry_t</argument>)</argument_list></macro> <expr_stmt><expr><name>profiler_time_entries_t</name></expr>;</expr_stmt></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>profiler_entry_enum_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>profile_snapshot_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profile_snapshot_free</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>profiler_snapshot_dump_csv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>bool</name></type> <name>profiler_snapshot_dump_csv_gz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>profiler_snapshot_num_roots</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_snapshot_enumerate_roots</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,

<parameter><decl><type><name>profiler_entry_enum_func</name></type> <name>func</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>profiler_name_filter_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>remove</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>EXPORT</name> <name>void</name></type> <name>profiler_snapshot_filter_roots</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_t</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>,

<parameter><decl><type><name>profiler_name_filter_func</name></type> <name>func</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>size_t</name></type> <name>profiler_snapshot_num_children</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>void</name></type>

<name>profiler_snapshot_enumerate_children</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,

<parameter><decl><type><name>profiler_entry_enum_func</name></type> <name>func</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>profiler_snapshot_entry_name</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>profiler_time_entries_t</name> <modifier>*</modifier></type>

<name>profiler_snapshot_entry_times</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type>

<name>profiler_snapshot_entry_min_time</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type>

<name>profiler_snapshot_entry_max_time</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type>

<name>profiler_snapshot_entry_overall_count</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>profiler_time_entries_t</name> <modifier>*</modifier></type>

<name>profiler_snapshot_entry_times_between_calls</name><parameter_list>(<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type> <name>profiler_snapshot_entry_expected_time_between_calls</name><parameter_list>(

<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type> <name>profiler_snapshot_entry_min_time_between_calls</name><parameter_list>(

<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type> <name>profiler_snapshot_entry_max_time_between_calls</name><parameter_list>(

<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT</name> <name>uint64_t</name></type> <name>profiler_snapshot_entry_overall_between_calls_count</name><parameter_list>(

<parameter><decl><type><name>profiler_snapshot_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
