<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\util\text-lookup.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text-lookup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lexer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>

<struct>struct <name>text_leaf</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lookup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>text_leaf_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leaf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>leaf</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>leaf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>text_node</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>first_subnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>text_node_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>subnode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subnode</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>subnode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>destroy_node</name> <init>= <expr><name>subnode</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>subnode</name> <operator>=</operator> <name><name>subnode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_node_destroy</name><argument_list>(<argument><expr><name>destroy_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>leaf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_leaf_destroy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>leaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>text_node_bychar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>subnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>subnode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dstr_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subnode</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>subnode</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>subnode</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subnode</name> <operator>=</operator> <name><name>subnode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>text_node_byname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>subnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>subnode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>astrcmpi_n</name><argument_list>(<argument><expr><name><name>subnode</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>subnode</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>subnode</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subnode</name> <operator>=</operator> <name><name>subnode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>text_lookup</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lookup_createsubnode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_val</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>text_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name>leaf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>lookup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lookup_splitnode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>split</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>text_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>split</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>leaf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first_subnode</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>first_subnode</name></name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lookup_val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lookup_createsubnode</name><argument_list>(<argument><expr><name>lookup_val</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name>leaf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lookup_replaceleaf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>text_leaf_destroy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>leaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name>leaf</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lookup_addstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_val</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lookup_val</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>lookup_val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lookup_replaceleaf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>text_node_bychar</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>*</operator><name>lookup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name><name>child</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>val1</name> <init>= <expr><name><name>child</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>array</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"/><name>val2</name> <init>= <expr><name><name>lookup_val</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>val1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val1</name> <operator>+=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>val2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val2</name> <operator>+=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>!=</operator> <name>val2</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>child</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lookup_addstring</name><argument_list>(<argument><expr><name>lookup_val</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lookup_splitnode</name><argument_list>(<argument><expr><name>lookup_val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lookup_createsubnode</name><argument_list>(<argument><expr><name>lookup_val</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lookup_getstringtoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>was_backslash</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>temp</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>temp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_backslash</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>was_backslash</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>was_backslash</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>temp</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>temp</name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>token</name><operator>-&gt;</operator><name>array</name></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>array</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>temp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lookup_gettoken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strref</name></name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>base_token</name></name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base_token_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strref_clear</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>lexer_getbasetoken</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>PARSE_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name><name>temp</name><operator>.</operator><name>text</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>temp</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_WHITESPACE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strref_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strref_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lookup_getstringtoken</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BASETOKEN_WHITESPACE</name> <operator>||</operator>

<operator>*</operator><name><name>temp</name><operator>.</operator><name>text</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name><name>temp</name><operator>.</operator><name>text</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>offset</name></name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name><name>temp</name><operator>.</operator><name>text</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lookup_goto_nextline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lexer</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strref_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_gettoken</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>val</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>convert_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>array</name></name> <operator>=</operator> <call><name>bstrdup_n</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>out</name><operator>.</operator><name>array</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lookup_addfiledata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_lookup</name></name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>lexer</name></name></type> <name>lex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strref</name></name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lexer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lexer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strref_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strref_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>lookup_gettoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_leaf</name></name> <modifier>*</modifier></type><name>leaf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>got_eq</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>name</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<label><name>getval</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_gettoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>value</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>got_eq</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>value</name><operator>.</operator><name>array</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_eq</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>getval</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>text_leaf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>leaf</name><operator>-&gt;</operator><name>lookup</name></name> <operator>=</operator> <call><name>bstrdup_n</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>leaf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>convert_string</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lookup_addstring</name><argument_list>(<argument><expr><name><name>leaf</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name><name>lookup</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_goto_nextline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>lexer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lookup_getstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_node</name></name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>text_node_byname</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>lookup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lookup_val</name> <operator>+=</operator> <name><name>child</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>lookup_val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>lookup_getstring</name><argument_list>(<argument><expr><name>lookup_val</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>child</name><operator>-&gt;</operator><name>leaf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>leaf</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>lookup_t</name> <modifier>*</modifier></type><name>text_lookup_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_lookup</name></name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>text_lookup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>text_lookup_add</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lookup</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>text_lookup_add</name><parameter_list>(<parameter><decl><type><name>lookup_t</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>file_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_fread_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_init_move_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_str</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file_str</name><operator>.</operator><name>array</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lookup</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lookup</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>text_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_str</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lookup_addfiledata</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name><name>file_str</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>text_lookup_destroy</name><parameter_list>(<parameter><decl><type><name>lookup_t</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lookup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lookup</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_node_destroy</name><argument_list>(<argument><expr><name><name>lookup</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>text_lookup_getstr</name><parameter_list>(<parameter><decl><type><name>lookup_t</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_val</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lookup</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>lookup_getstring</name><argument_list>(<argument><expr><name>lookup_val</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>lookup</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
