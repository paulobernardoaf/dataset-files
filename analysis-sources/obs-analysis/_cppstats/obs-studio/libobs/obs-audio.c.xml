<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\libobs\obs-audio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<struct>struct <name>ts_info</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>end</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_AUDIO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUFFERING_TICKS</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_audio_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_audio</name></name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>da_find</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>render_order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>obs_source_get_ref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>render_order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>convert_time_to_frames</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>t</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name> <operator>/</operator> <literal type="number">1000000000ULL</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mix_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>mixes</name></decl></parameter>,

<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ts_info</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_floats</name> <init>= <expr><name>AUDIO_OUTPUT_FRAMES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>start_point</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name> <operator>||</operator> <name><name>ts</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>!=</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_point</name> <operator>=</operator> <call><name>convert_time_to_frames</name><argument_list>(

<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>-</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_point</name> <operator>==</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_floats</name> <operator>-=</operator> <name>start_point</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix_idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><name><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>aud</name> <init>=

<expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix_idx</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mix</name> <operator>+=</operator> <name>start_point</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>aud</name> <operator>+</operator> <name>total_floats</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>aud</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>mix</name><operator>++</operator><operator>)</operator> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>aud</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ignore_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_floats</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_floats</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>num_floats</name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>discard_if_stopped</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last_size</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_size</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>pending_stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>pending_stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"doing pending stop trick: '%s'"</literal></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>pending_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"source audio data appears to have "</literal>

<literal type="string">"stopped, clearing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AUDIO_SIZE</name></cpp:macro> <cpp:value>(AUDIO_OUTPUT_FRAMES * sizeof(float))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>discard_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,

<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ts_info</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_floats</name> <init>= <expr><name>AUDIO_OUTPUT_FRAMES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>is_audio_source</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_render</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"can't discard, source "</literal>

<literal type="string">"timestamp (%"</literal> <name>PRIu64</name> <literal type="string">") &gt;= "</literal>

<literal type="string">"end timestamp (%"</literal> <name>PRIu64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>&amp;&amp;</operator>

<name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>MAX_AUDIO_SIZE</name> <operator>&amp;&amp;</operator>

<call><name>discard_if_stopped</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>is_audio_source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"can't discard, source "</literal>

<literal type="string">"timestamp (%"</literal> <name>PRIu64</name> <literal type="string">") &lt; "</literal>

<literal type="string">"start timestamp (%"</literal> <name>PRIu64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>==</operator> <name>MAX_BUFFERING_TICKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ignore_audio</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>!=</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator>

<name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>!=</operator> <operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>start_point</name> <init>= <expr><call><name>convert_time_to_frames</name><argument_list>(

<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>-</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_point</name> <operator>==</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>is_audio_source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"can't discard, start point is "</literal>

<literal type="string">"at audio frame count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_floats</name> <operator>-=</operator> <name>start_point</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>total_floats</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>discard_if_stopped</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>is_audio_source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"can't discard, data still pending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>is_audio_source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio discarded, new ts: %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>pending_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_audio_buffering</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ts_info</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffering_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ts_info</name></name></type> <name>new_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ticks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>==</operator> <name>MAX_BUFFERING_TICKS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audio</name><operator>-&gt;</operator><name>buffering_wait_ticks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>buffered_ts</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <name>min_ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <call><name>ns_to_audio_frames</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ticks</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>frames</name> <operator>+</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>AUDIO_OUTPUT_FRAMES</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>+=</operator> <name>ticks</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>&gt;=</operator> <name>MAX_BUFFERING_TICKS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ticks</name> <operator>-=</operator> <name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>-</operator> <name>MAX_BUFFERING_TICKS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>=</operator> <name>MAX_BUFFERING_TICKS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Max audio buffering reached!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>ticks</name> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_ms</name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>total_buffering_ticks</name></name> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator>

<name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"adding %d milliseconds of audio buffering, total "</literal>

<literal type="string">"audio buffering is now %d milliseconds"</literal>

<literal type="string">" (source: %s)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ms</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>total_ms</name></expr></argument>, <argument><expr><name>buffering_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"min_ts (%"</literal> <name>PRIu64</name> <literal type="string">") &lt; start timestamp "</literal>

<literal type="string">"(%"</literal> <name>PRIu64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"old buffered ts: %"</literal> <name>PRIu64</name> <literal type="string">"-%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>start</name></name></expr></argument>,

<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>new_ts</name><operator>.</operator><name>start</name></name> <operator>=</operator>

<name><name>audio</name><operator>-&gt;</operator><name>buffered_ts</name></name> <operator>-</operator>

<call><name>audio_frames_to_ns</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>buffering_wait_ticks</name></name> <operator>*</operator>

<name>AUDIO_OUTPUT_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ticks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur_ticks</name> <init>= <expr><operator>++</operator><name><name>audio</name><operator>-&gt;</operator><name>buffering_wait_ticks</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_ts</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>new_ts</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_ts</name><operator>.</operator><name>start</name></name> <operator>=</operator>

<name><name>audio</name><operator>-&gt;</operator><name>buffered_ts</name></name> <operator>-</operator>

<call><name>audio_frames_to_ns</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>,

<argument><expr><name>cur_ticks</name> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"add buffered ts: %"</literal> <name>PRIu64</name> <literal type="string">"-%"</literal> <name>PRIu64</name></expr></argument>,

<argument><expr><name><name>new_ts</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>new_ts</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>circlebuf_push_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>buffered_timestamps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_ts</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ts</name> <operator>=</operator> <name>new_ts</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audio_buffer_insuffient</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>min_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_floats</name> <init>= <expr><name>AUDIO_OUTPUT_FRAMES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_render</name></name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>||</operator>

<operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>!=</operator> <name>min_ts</name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>!=</operator> <operator>(</operator><name>min_ts</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>start_point</name> <init>= <expr><call><name>convert_time_to_frames</name><argument_list>(

<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>-</operator> <name>min_ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_point</name> <operator>&gt;=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_floats</name> <operator>-=</operator> <name>start_point</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>total_floats</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_min_ts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>min_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>buffering_source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>first_audio_source</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>&amp;&amp;</operator>

<name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>&lt;</operator> <operator>*</operator><name>min_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min_ts</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffering_source</name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator>struct <name>obs_source</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>buffering_source</name></expr> ?</condition><then> <expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name>buffering_source</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mark_invalid_sources</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>min_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>recalculate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>first_audio_source</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>recalculate</name> <operator>|=</operator>

<call><name>audio_buffer_insuffient</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>min_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator>struct <name>obs_source</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>recalculate</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>calc_min_ts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>min_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffering_name</name> <init>= <expr><call><name>find_min_ts</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>min_ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mark_invalid_sources</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><operator>*</operator><name>min_ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buffering_name</name> <operator>=</operator> <call><name>find_min_ts</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>min_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buffering_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>release_audio_sources</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_core_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>audio</name><operator>-&gt;</operator><name>render_order</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>render_order</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audio_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>start_ts_in</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>end_ts_in</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>out_ts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>audio_output_data</name></name> <modifier>*</modifier></type><name>mixes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_core_audio</name></name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sample_rate</name> <init>= <expr><call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>channels</name> <init>= <expr><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ts_info</name></name></type> <name>ts</name> <init>= <expr><block>{<expr><name>start_ts_in</name></expr>, <expr><name>end_ts_in</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>audio_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>render_order</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>root_nodes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>buffered_timestamps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_peek_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>buffered_timestamps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_ts</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_size</name> <operator>=</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ts %llu-%llu"</literal></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>obs_get_output_source</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>obs_source_enum_active_tree</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>push_audio_tree</name></expr></argument>,

<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_audio_tree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>root_nodes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>first_audio_source</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>push_audio_tree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator>struct <name>obs_source</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>audio</name><operator>-&gt;</operator><name>render_order</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>render_order</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_source_audio_render</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>,

<argument><expr><name>audio_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffering_name</name> <init>= <expr><call><name>calc_min_ts</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_ts</name> <operator>&lt;</operator> <name><name>ts</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_audio_buffering</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>min_ts</name></expr></argument>,

<argument><expr><name>buffering_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>audio</name><operator>-&gt;</operator><name>buffering_wait_ticks</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>audio</name><operator>-&gt;</operator><name>root_nodes</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>root_nodes</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mix_audio</name><argument_list>(<argument><expr><name>mixes</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>first_audio_source</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_audio</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator>struct <name>obs_source</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_audio_sources</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>buffered_timestamps</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_ts</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>buffering_wait_ticks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>buffering_wait_ticks</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
