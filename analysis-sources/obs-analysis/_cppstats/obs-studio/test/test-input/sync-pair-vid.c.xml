<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats\obs-studio\test\test-input\sync-pair-vid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threading.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graphics/graphics.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obs.h&gt;</cpp:file></cpp:include>

<struct>struct <name>sync_pair_vid</name> <block>{

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>black</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>starting_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sync_pair_vid_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="string">"Sync Test Pair (Video)"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_pair_vid_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sync_pair_vid</name></name> <modifier>*</modifier></type><name>spv</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>spv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_texture</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sync_pair_vid_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sync_pair_vid</name></name> <modifier>*</modifier></type><name>spv</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sync_pair_vid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spv</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spv</name><operator>-&gt;</operator><name>tex</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spv</name><operator>-&gt;</operator><name>white</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spv</name><operator>-&gt;</operator><name>black</name></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>linesize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gs_texture_map</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>white</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_texture</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_unmap</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gs_texture_map</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>black</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_texture</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texture_unmap</name><argument_list>(<argument><expr><name><name>spv</name><operator>-&gt;</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>whitelist_time</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>interval</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>fps_num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>fps_den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting_time</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><operator>(</operator><name>ts</name> <operator>-</operator> <name>starting_time</name><operator>)</operator> <operator>/</operator> <name>interval</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sec</name> <init>= <expr><name>count</name> <operator>*</operator> <name>fps_den</name> <operator>/</operator> <name>fps_num</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>sec</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_pair_vid_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sync_pair_vid</name></name> <modifier>*</modifier></type><name>spv</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><call><name>obs_get_video_frame_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>starting_time</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><call><name>video_output_get_frame_time</name><argument_list>(<argument><expr><call><name>obs_get_video</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_output_info</name></name> <modifier>*</modifier></type><name>voi</name> <init>=

<expr><call><name>video_output_get_info</name><argument_list>(<argument><expr><call><name>obs_get_video</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fps_num</name> <init>= <expr><name><name>voi</name><operator>-&gt;</operator><name>fps_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fps_den</name> <init>= <expr><name><name>voi</name><operator>-&gt;</operator><name>fps_den</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>whitelist</name> <init>= <expr><call><name>whitelist_time</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>, <argument><expr><name>fps_num</name></expr></argument>, <argument><expr><name>fps_den</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (last_frame != ts) {

uint8_t *ptr;

uint32_t linesize;

if (gs_texture_map(spv-&gt;tex, &amp;ptr, &amp;linesize)) {

fill_texture((uint32_t*)ptr, whitelist ? 0xFFFFFFFF : 0xFF000000);

gs_texture_unmap(spv-&gt;tex);

}

last_frame = ts;

}

obs_source_draw(spv-&gt;tex, 0, 0, 0, 0, 0);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>obs_source_draw</name><argument_list>(<argument><expr><ternary><condition><expr><name>whitelist</name></expr> ?</condition><then> <expr><name><name>spv</name><operator>-&gt;</operator><name>white</name></name></expr> </then><else>: <expr><name><name>spv</name><operator>-&gt;</operator><name>black</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sync_pair_vid_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">32</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name></type> <name>sync_video</name> <init>= <expr><block>{

<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"sync_video"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>,

<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name></expr>,

<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>sync_pair_vid_getname</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>sync_pair_vid_create</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>sync_pair_vid_destroy</name></expr>,

<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>sync_pair_vid_render</name></expr>,

<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>sync_pair_vid_size</name></expr>,

<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>sync_pair_vid_size</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
