<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-hotkey.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_hotkey_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_hotkey_get_description</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>description</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_registerer_t</name></type> <name>obs_hotkey_get_registerer_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>registerer_type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_hotkey_get_registerer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>registerer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_get_pair_partner_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>pair_partner_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_key_combination_t</name></type>
<name>obs_hotkey_binding_get_key_combination</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>binding</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_binding_get_hotkey_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>obs_hotkey_binding_get_hotkey</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>obs_hotkey_set_name</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_set_description</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_pair_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>obs_hotkey_pair_set_names</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_pair_t</name></type> <name>pair</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_pair_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_hotkey_set_name</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>name0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_hotkey_set_name</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_pair_set_descriptions</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_pair_t</name></type> <name>pair</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_pair_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_hotkey_set_description</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>desc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_hotkey_set_description</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>desc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hotkey_signal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>calldata_t</name></type> <name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>calldata_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fixup_pointers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>load_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>context_add_hotkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_hotkey_id</name></type>
<name>obs_hotkey_register_internal</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_registerer_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>registerer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>next_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs-hotkey: Available hotkey ids exhausted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>base_addr</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>result</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>next_id</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name> <operator>=</operator> <name>registerer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>pair_partner_id</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data</name> <init>=
<expr><call><name>obs_data_get_array</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkey_data</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>load_bindings</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>context_add_hotkey</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base_addr</name> <operator>!=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hotkey_signal</name><argument_list>(<argument><expr><literal type="string">"hotkey_register"</literal></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_register_frontend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><call><name>obs_hotkey_register_internal</name><argument_list>(
<argument><expr><name>OBS_HOTKEY_REGISTERER_FRONTEND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>description</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_register_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name> <operator>||</operator> <operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><call><name>obs_hotkey_register_internal</name><argument_list>(
<argument><expr><name>OBS_HOTKEY_REGISTERER_ENCODER</name></expr></argument>,
<argument><expr><call><name>obs_encoder_get_weak_encoder</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>description</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_register_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name> <operator>||</operator> <operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><call><name>obs_hotkey_register_internal</name><argument_list>(
<argument><expr><name>OBS_HOTKEY_REGISTERER_OUTPUT</name></expr></argument>,
<argument><expr><call><name>obs_output_get_weak_output</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>description</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_register_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name> <operator>||</operator> <operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><call><name>obs_hotkey_register_internal</name><argument_list>(
<argument><expr><name>OBS_HOTKEY_REGISTERER_SERVICE</name></expr></argument>,
<argument><expr><call><name>obs_service_get_weak_service</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>description</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_id</name></type> <name>obs_hotkey_register_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name> <operator>||</operator> <operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name> <init>= <expr><call><name>obs_hotkey_register_internal</name><argument_list>(
<argument><expr><name>OBS_HOTKEY_REGISTERER_SOURCE</name></expr></argument>,
<argument><expr><call><name>obs_source_get_weak_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>description</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fixup_pair_pointers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>create_hotkey_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>next_pair_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs-hotkey: Available hotkey pair ids "</literal>
<literal type="string">"exhausted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>base_addr</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>pair_id</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>next_pair_id</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>func</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>func0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>func</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>func1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>data0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>data1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkey_pairs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>pair_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base_addr</name> <operator>!=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pair_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>pair</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_hotkey_pair_first_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>pressed1</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>pressed0</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>pressed0</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>func</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>pair</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>pair</name><operator>-&gt;</operator><name>pair_id</name></name><operator>,</operator> <name>hotkey</name><operator>,</operator> <name>pressed</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>pressed0</name></name> <operator>=</operator> <name>pressed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_hotkey_pair_second_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>pressed0</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>pressed1</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>pressed1</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>func</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name><name>pair</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>pair</name><operator>-&gt;</operator><name>pair_id</name></name><operator>,</operator> <name>hotkey</name><operator>,</operator> <name>pressed</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>pressed1</name></name> <operator>=</operator> <name>pressed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>obs_hotkey_pair_id</name></type> <name>register_hotkey_pair_internal</name><parameter_list>(
<parameter><decl><type><name>obs_hotkey_registerer_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>registerer</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>weak_ref</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>=
<expr><call><name>create_hotkey_pair</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>func0</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>obs_hotkey_register_internal</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>weak_ref</name><argument_list>(<argument><expr><name>registerer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name0</name></expr></argument>, <argument><expr><name>description0</name></expr></argument>,
<argument><expr><name>obs_hotkey_pair_first_func</name></expr></argument>,
<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>obs_hotkey_register_internal</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>weak_ref</name><argument_list>(<argument><expr><name>registerer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>description1</name></expr></argument>,
<argument><expr><name>obs_hotkey_pair_second_func</name></expr></argument>,
<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pair_partner_id</name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pair_partner_id</name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name> <init>= <expr><name><name>pair</name><operator>-&gt;</operator><name>pair_id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>obs_id_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>id_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_frontend</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>register_hotkey_pair_internal</name><argument_list>(<argument><expr><name>OBS_HOTKEY_REGISTERER_FRONTEND</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obs_id_</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name0</name></expr></argument>,
<argument><expr><name>description0</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>description1</name></expr></argument>,
<argument><expr><name>func0</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>weak_encoder_ref</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_encoder_get_weak_encoder</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_encoder</name><parameter_list>(
<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>register_hotkey_pair_internal</name><argument_list>(<argument><expr><name>OBS_HOTKEY_REGISTERER_ENCODER</name></expr></argument>,
<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>weak_encoder_ref</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name0</name></expr></argument>,
<argument><expr><name>description0</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>description1</name></expr></argument>,
<argument><expr><name>func0</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>weak_output_ref</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_output_get_weak_output</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_output</name><parameter_list>(
<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>register_hotkey_pair_internal</name><argument_list>(<argument><expr><name>OBS_HOTKEY_REGISTERER_OUTPUT</name></expr></argument>,
<argument><expr><name>output</name></expr></argument>, <argument><expr><name>weak_output_ref</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name0</name></expr></argument>,
<argument><expr><name>description0</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>description1</name></expr></argument>,
<argument><expr><name>func0</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>weak_service_ref</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_service_get_weak_service</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_service</name><parameter_list>(
<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>register_hotkey_pair_internal</name><argument_list>(<argument><expr><name>OBS_HOTKEY_REGISTERER_SERVICE</name></expr></argument>,
<argument><expr><name>service</name></expr></argument>, <argument><expr><name>weak_service_ref</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name0</name></expr></argument>,
<argument><expr><name>description0</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>description1</name></expr></argument>,
<argument><expr><name>func0</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>weak_source_ref</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_source_get_weak_source</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_hotkey_pair_id</name></type> <name>obs_hotkey_pair_register_source</name><parameter_list>(
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description1</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func0</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_active_func</name></type> <name>func1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>register_hotkey_pair_internal</name><argument_list>(<argument><expr><name>OBS_HOTKEY_REGISTERER_SOURCE</name></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>weak_source_ref</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name0</name></expr></argument>,
<argument><expr><name>description0</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>description1</name></expr></argument>,
<argument><expr><name>func0</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>obs_hotkey_internal_enum_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>enum_hotkeys</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_internal_enum_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>obs_hotkey_pair_internal_enum_func</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>enum_hotkey_pairs</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_internal_enum_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>obs_hotkey_binding_internal_enum_func</name>)<parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>enum_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_internal_enum_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>bindings</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>bindings</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<struct>struct <name>obs_hotkey_internal_find_forward</name> <block>{
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_id_helper</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_find_forward</name></name> <modifier>*</modifier></type><name>find</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>find</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>find</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_find_forward</name></name></type> <name>find</name> <init>= <expr><block>{<expr><name>id</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_hotkeys</name><argument_list>(<argument><expr><name>find_id_helper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name><name>find</name><operator>.</operator><name>idx</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>find</name><operator>.</operator><name>found</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pointer_fixup_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx_</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_id</name><argument_list>(<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcrash</name><argument_list>(<argument><expr><literal type="string">"obs-hotkey: Could not find hotkey id '%"</literal> <name>PRIuMAX</name> <literal type="string">"' "</literal>
<literal type="string">"for binding '%s' (modifiers 0x%x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>binding</name><operator>-&gt;</operator><name>hotkey_id</name></name></expr></argument>,
<argument><expr><call><name>obs_key_to_name</name><argument_list>(<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx_</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fixup_pointers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>enum_bindings</name><argument_list>(<argument><expr><name>pointer_fixup_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>obs_hotkey_internal_find_pair_forward</name> <block>{
<decl_stmt><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_pair_id_helper</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_find_pair_forward</name></name> <modifier>*</modifier></type><name>find</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>pair_id</name></name> <operator>!=</operator> <name><name>find</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>find</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_pair_id</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_find_pair_forward</name></name></type> <name>find</name> <init>= <expr><block>{<expr><name>id</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_hotkey_pairs</name><argument_list>(<argument><expr><name>find_pair_id_helper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name><name>find</name><operator>.</operator><name>idx</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>find</name><operator>.</operator><name>found</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pair_pointer_fixup_func</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>pair</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>pair</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fixup_pair_pointers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>enum_hotkey_pairs</name><argument_list>(<argument><expr><name>pair_pointer_fixup_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>enum_context_hotkeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_internal_enum_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>obs_hotkey_id</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey_array</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_id</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hotkey_array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>load_modifier</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>modifiers</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>create_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>,
<parameter><decl><type><name>obs_key_combination_t</name></type> <name>combo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name> <init>= <expr><call><name>da_push_back_new</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>bindings</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>binding</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>combo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey_id</name></name> <operator>=</operator> <name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey</name></name> <operator>=</operator> <name>hotkey</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>load_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hotkey</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_key_combination_t</name></type> <name>combo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>modifiers</name> <init>= <expr><operator>&amp;</operator><name><name>combo</name><operator>.</operator><name>modifiers</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>load_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"shift"</literal></expr></argument>, <argument><expr><name>INTERACT_SHIFT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><name>INTERACT_CONTROL_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"alt"</literal></expr></argument>, <argument><expr><name>INTERACT_ALT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>, <argument><expr><name>INTERACT_COMMAND_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>combo</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>obs_key_from_name</name><argument_list>(<argument><expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modifiers</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>combo</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>OBS_KEY_NONE</name> <operator>||</operator> <name><name>combo</name><operator>.</operator><name>key</name></name> <operator>&gt;=</operator> <name>OBS_KEY_LAST_VALUE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>create_binding</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>combo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>load_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>count</name> <init>= <expr><call><name>obs_data_array_count</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>obs_data_array_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>load_binding</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>hotkey_signal</name><argument_list>(<argument><expr><literal type="string">"hotkey_bindings_changed"</literal></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>remove_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>obs_hotkey_load_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_key_combination_t</name> <modifier>*</modifier></type><name>combinations</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_bindings</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>create_binding</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name><name>combinations</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>hotkey_signal</name><argument_list>(<argument><expr><literal type="string">"hotkey_bindings_changed"</literal></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_load</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>remove_bindings</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_bindings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>enum_load_bindings</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>hotkey_data</name> <init>= <expr><call><name>obs_data_get_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hotkey_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>load_bindings</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_load_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder</name> <operator>||</operator> <operator>!</operator><name>hotkeys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>enum_load_bindings</name></expr></argument>, <argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_load_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name> <operator>||</operator> <operator>!</operator><name>hotkeys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>enum_load_bindings</name></expr></argument>, <argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_load_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name> <operator>||</operator> <operator>!</operator><name>hotkeys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>enum_load_bindings</name></expr></argument>, <argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_load_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name> <operator>||</operator> <operator>!</operator><name>hotkeys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>enum_load_bindings</name></expr></argument>, <argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_pair_load</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>,
<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>data0</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>data1</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_pair_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>remove_bindings</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_bindings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>data0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>remove_bindings</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_bindings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>save_modifier</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>modifiers</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>==</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>save_bindings_helper_t</name> <block>{
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>save_bindings_helper</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>save_bindings_helper_t</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>hotkey</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>binding</name><operator>-&gt;</operator><name>hotkey_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>modifiers</name> <init>= <expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>modifiers</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>save_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><literal type="string">"shift"</literal></expr></argument>, <argument><expr><name>INTERACT_SHIFT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><name>INTERACT_CONTROL_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><literal type="string">"alt"</literal></expr></argument>, <argument><expr><name>INTERACT_ALT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_modifier</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>, <argument><expr><name>INTERACT_COMMAND_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><call><name>obs_key_to_name</name><argument_list>(<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_push_back</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_array_t</name> <modifier>*</modifier></type><name>save_hotkey</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>obs_data_array_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>save_bindings_helper_t</name></name></type> <name>arg</name> <init>= <expr><block>{<expr><name>data</name></expr>, <expr><name>hotkey</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_bindings</name><argument_list>(<argument><expr><name>save_bindings_helper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>obs_hotkey_save</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>save_hotkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_pair_save</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_data0</name></decl></parameter>,
<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>p_data0</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_data1</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_pair_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_data0</name> <operator>&amp;&amp;</operator> <call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_data0</name> <operator>=</operator> <call><name>save_hotkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_data1</name> <operator>&amp;&amp;</operator> <call><name>find_id</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_data1</name> <operator>=</operator> <call><name>save_hotkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>enum_save_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>hotkey_data</name> <init>= <expr><call><name>save_hotkey</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_data_set_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>hotkey_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>save_context_hotkeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_context_hotkeys</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>enum_save_hotkey</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_encoder</name><parameter_list>(<parameter><decl><type><name>obs_encoder_t</name> <modifier>*</modifier></type><name>encoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>save_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>encoder</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_output</name><parameter_list>(<parameter><decl><type><name>obs_output_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>save_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_service</name><parameter_list>(<parameter><decl><type><name>obs_service_t</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>save_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_hotkeys_save_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>save_context_hotkeys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>binding_find_data</name> <block>{
<decl_stmt><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>binding_finder</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>binding_find_data</name></name> <modifier>*</modifier></type><name>find</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey_id</name></name> <operator>!=</operator> <name><name>find</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>find</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>find_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>binding_find_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><name>id</name></expr>, <expr><name>idx</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_bindings</name><argument_list>(<argument><expr><name>binding_finder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>data</name><operator>.</operator><name>found</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>release_pressed_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>remove_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>find_binding</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name> <init>=
<expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>bindings</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>release_pressed_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>bindings</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_registerer</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_HOTKEY_REGISTERER_FRONTEND</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>OBS_HOTKEY_REGISTERER_ENCODER</name></expr>:</case>
<expr_stmt><expr><call><name>obs_weak_encoder_release</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OBS_HOTKEY_REGISTERER_OUTPUT</name></expr>:</case>
<expr_stmt><expr><call><name>obs_weak_output_release</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OBS_HOTKEY_REGISTERER_SERVICE</name></expr>:</case>
<expr_stmt><expr><call><name>obs_weak_service_release</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OBS_HOTKEY_REGISTERER_SOURCE</name></expr>:</case>
<expr_stmt><expr><call><name>obs_weak_source_release</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>unregister_hotkey</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>next_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hotkey_signal</name><argument_list>(<argument><expr><literal type="string">"hotkey_unregister"</literal></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_registerer</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer_type</name></name> <operator>==</operator> <name>OBS_HOTKEY_REGISTERER_SOURCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_weak_source_release</name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>registerer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_bindings</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>num</name></name> <operator>&gt;=</operator> <name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>unregister_hotkey_pair</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>next_pair_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_pair_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_pair_t</name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_fixup</name> <init>= <expr><call><name>unregister_hotkey</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>need_fixup</name> <operator>=</operator> <call><name>unregister_hotkey</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>need_fixup</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_fixup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name><operator>.</operator><name>num</name></name> <operator>&gt;=</operator> <name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_unregister</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unregister_hotkey</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_pair_unregister</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unregister_hotkey_pair</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pair_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>context_release_hotkeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_fixup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_fixup</name> <operator>=</operator> <call><name>unregister_hotkey</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>need_fixup</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>need_fixup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>context_release_hotkey_pairs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>context</name><operator>-&gt;</operator><name>hotkey_pairs</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_fixup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>hotkey_pairs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_fixup</name> <operator>=</operator> <call><name>unregister_hotkey_pair</name><argument_list>(
<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkey_pairs</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>need_fixup</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>need_fixup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixup_pair_pointers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkey_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_context_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_context_data</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>context_release_hotkeys</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>context_release_hotkey_pairs</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hotkey_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkeys</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>hotkeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_registerer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hotkeys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>bindings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkey_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBS_KEY_LAST_VALUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<struct>struct <name>obs_hotkey_internal_enum_forward</name> <block>{
<decl_stmt><decl><type><name>obs_hotkey_enum_func</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>enum_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_enum_forward</name></name> <modifier>*</modifier></type><name>forward</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>forward</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_enum_hotkeys</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_enum_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_enum_forward</name></name></type> <name>forwarder</name> <init>= <expr><block>{<expr><name>func</name></expr>, <expr><name>data</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_hotkeys</name><argument_list>(<argument><expr><name>enum_hotkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>forwarder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_enum_hotkey_bindings</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_enum_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enum_bindings</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>modifiers_match</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>modifiers_</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict_modifiers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>modifiers</name> <init>= <expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>modifiers</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><name>modifiers</name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>strict_modifiers</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>modifiers_</name><operator>)</operator> <operator>==</operator> <name>modifiers</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>strict_modifiers</name> <operator>&amp;&amp;</operator> <name>modifiers</name> <operator>==</operator> <name>modifiers_</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_pressed</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_hotkeys_platform_is_pressed</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>platform_context</name></name></expr></argument>,
<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>press_released_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>pressed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hotkey</name><operator>-&gt;</operator><name>pressed</name></name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>reroute_hotkeys</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>hotkey</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func</name></name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func_data</name></name></expr></argument>,
<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>release_pressed_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>pressed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><name><name>binding</name><operator>-&gt;</operator><name>hotkey</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>hotkey</name><operator>-&gt;</operator><name>pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>reroute_hotkeys</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>hotkey</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func</name></name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func_data</name></name></expr></argument>,
<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>handle_binding</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>modifiers</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_press</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>strict_modifiers</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>modifiers_match_</name> <init>=
<expr><call><name>modifiers_match</name><argument_list>(<argument><expr><name>binding</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>strict_modifiers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>modifiers_only</name> <init>= <expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>OBS_KEY_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>modifiers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>modifiers_match</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers_only</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pressed</name> <operator>=</operator> <operator>&amp;</operator><name>modifiers_only</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>modifiers</name></name> <operator>&amp;&amp;</operator> <name>modifiers_only</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>reset</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>binding</name><operator>-&gt;</operator><name>modifiers_match</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>modifiers_only</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>modifiers_match_</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>reset</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pressed</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>pressed</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>pressed</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_pressed</name><argument_list>(<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>reset</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>binding</name><operator>-&gt;</operator><name>pressed</name></name> <operator>||</operator> <name>no_press</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>press_released_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>reset</name>:</label>
<expr_stmt><expr><name><name>binding</name><operator>-&gt;</operator><name>modifiers_match</name></name> <operator>=</operator> <name>modifiers_match_</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>binding</name><operator>-&gt;</operator><name>pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>release_pressed_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>obs_hotkey_internal_inject</name> <block>{
<decl_stmt><decl><type><name>obs_key_combination_t</name></type> <name>hotkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>strict_modifiers</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>inject_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_inject</name></name> <modifier>*</modifier></type><name>event</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>modifiers_match</name><argument_list>(<argument><expr><name>binding</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>hotkey</name><operator>.</operator><name>modifiers</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>strict_modifiers</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name><name>binding</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>event</name><operator>-&gt;</operator><name>hotkey</name><operator>.</operator><name>key</name></name> <operator>&amp;&amp;</operator>
<name><name>event</name><operator>-&gt;</operator><name>pressed</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>handle_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>hotkey</name><operator>.</operator><name>modifiers</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>strict_modifiers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_inject_event</name><parameter_list>(<parameter><decl><type><name>obs_key_combination_t</name></type> <name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkey_internal_inject</name></name></type> <name>event</name> <init>= <expr><block>{
<expr><block>{<expr><name><name>hotkey</name><operator>.</operator><name>modifiers</name></name></expr>, <expr><name><name>hotkey</name><operator>.</operator><name>key</name></name></expr>}</block></expr>,
<expr><name>pressed</name></expr>,
<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>strict_modifiers</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_bindings</name><argument_list>(<argument><expr><name>inject_hotkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_enable_background_press</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>thread_disable_press</name></name> <operator>=</operator> <operator>!</operator><name>enable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_enable_strict_modifiers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>strict_modifiers</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>obs_query_hotkeys_helper</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_press</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>strict_modifiers</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>query_hotkey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_binding_t</name> <modifier>*</modifier></type><name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_query_hotkeys_helper</name></name> <modifier>*</modifier></type><name>param</name> <init>=
<expr><operator>(</operator>struct <name>obs_query_hotkeys_helper</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>handle_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>no_press</name></name></expr></argument>,
<argument><expr><name><name>param</name><operator>-&gt;</operator><name>strict_modifiers</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>query_hotkeys</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_pressed</name><argument_list>(<argument><expr><name>OBS_KEY_SHIFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>INTERACT_SHIFT_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_pressed</name><argument_list>(<argument><expr><name>OBS_KEY_CONTROL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>INTERACT_CONTROL_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_pressed</name><argument_list>(<argument><expr><name>OBS_KEY_ALT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>INTERACT_ALT_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_pressed</name><argument_list>(<argument><expr><name>OBS_KEY_META</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>INTERACT_COMMAND_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_query_hotkeys_helper</name></name></type> <name>param</name> <init>= <expr><block>{
<expr><name>modifiers</name></expr>,
<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>thread_disable_press</name></name></expr>,
<expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>strict_modifiers</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enum_bindings</name><argument_list>(<argument><expr><name>query_hotkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBSP</name></cpp:macro> <cpp:value>"\xC2\xA0"</cpp:value></cpp:define>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_hotkey_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hotkey_thread_name</name> <init>=
<expr><call><name>profile_store_name</name><argument_list>(<argument><expr><call><name>obs_get_profiler_name_store</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"obs_hotkey_thread(%g"</literal> <name>NBSP</name> <literal type="string">"ms)"</literal></expr></argument>, <argument><expr><literal type="number">25.</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>profile_register_root</name><argument_list>(<argument><expr><name>hotkey_thread_name</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">25000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>os_event_timedwait</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>stop_event</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>hotkey_thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>query_hotkeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>hotkey_thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_reenable_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_trigger_routed_callback</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>reroute_hotkeys</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unlock</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>hotkeys</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>hotkey</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>hotkey</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>hotkey</name></expr></argument>, <argument><expr><name>pressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_set_callback_routing_func</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_callback_router_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>router_func_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_enable_callback_rerouting</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>reroute_hotkeys</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_set_key_translation</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>translation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>translation</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_set_translations_s</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>obs_hotkeys_translations</name></name> <modifier>*</modifier></type><name>translations</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_TRANSLATION</name><parameter_list>(<parameter><type><name>key_name</name></type></parameter>, <parameter><type><name>var_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (t.var_name) obs_set_key_translation(key_name, t.var_name);</cpp:value></cpp:define>



<decl_stmt><decl><type><name><name>struct</name> <name>obs_hotkeys_translations</name></name></type> <name>t</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>numpad</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>mouse</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>button</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>translations</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>translations</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_INSERT</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_DELETE</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_HOME</name></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_END</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_PAGEUP</name></expr></argument>, <argument><expr><name>page_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_PAGEDOWN</name></expr></argument>, <argument><expr><name>page_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMLOCK</name></expr></argument>, <argument><expr><name>num_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_SCROLLLOCK</name></expr></argument>, <argument><expr><name>scroll_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_CAPSLOCK</name></expr></argument>, <argument><expr><name>caps_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_BACKSPACE</name></expr></argument>, <argument><expr><name>backspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_TAB</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_PRINT</name></expr></argument>, <argument><expr><name>print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_PAUSE</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_SHIFT</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_ALT</name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_CONTROL</name></expr></argument>, <argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_META</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_MENU</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_SPACE</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_ESCAPE</name></expr></argument>, <argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_str</name> <init>= <expr><name><name>t</name><operator>.</operator><name>apple_keypad_num</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMSLASH</name></expr></argument>, <argument><expr><name>apple_keypad_divide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMASTERISK</name></expr></argument>, <argument><expr><name>apple_keypad_multiply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMMINUS</name></expr></argument>, <argument><expr><name>apple_keypad_minus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMPLUS</name></expr></argument>, <argument><expr><name>apple_keypad_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMPERIOD</name></expr></argument>, <argument><expr><name>apple_keypad_decimal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMEQUAL</name></expr></argument>, <argument><expr><name>apple_keypad_equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpad_str</name> <init>= <expr><name><name>t</name><operator>.</operator><name>numpad_num</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMSLASH</name></expr></argument>, <argument><expr><name>numpad_divide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMASTERISK</name></expr></argument>, <argument><expr><name>numpad_multiply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMMINUS</name></expr></argument>, <argument><expr><name>numpad_minus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMPLUS</name></expr></argument>, <argument><expr><name>numpad_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_TRANSLATION</name><argument_list>(<argument><expr><name>OBS_KEY_NUMPERIOD</name></expr></argument>, <argument><expr><name>numpad_decimal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>numpad_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numpad</name></expr></argument>, <argument><expr><name>numpad_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_depad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dstr_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numpad</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numpad</name></expr></argument>, <argument><expr><literal type="string">" %1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_NUMPAD_NUM</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dstr_copy_dstr(&amp;button, &amp;numpad); dstr_replace(&amp;button, "%1", #idx); obs_set_key_translation(OBS_KEY_NUM##idx, button.array)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_NUMPAD_NUM</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>mouse_num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>mouse_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_depad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dstr_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dstr_cat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>, <argument><expr><literal type="string">" %1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_MOUSE_NUM</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dstr_copy_dstr(&amp;button, &amp;mouse); dstr_replace(&amp;button, "%1", #idx); obs_set_key_translation(OBS_KEY_MOUSE##idx, button.array)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_MOUSE_NUM</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_get_hotkey_translation</name><parameter_list>(<parameter><decl><type><name>obs_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>OBS_KEY_NONE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>translations</name><index>[<expr><name>key</name></expr>]</index></name></expr>
</then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkey_update_atomic</name><parameter_list>(<parameter><decl><type><name>obs_hotkey_atomic_update_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_set_audio_hotkeys_translations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mute</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unmute</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_mute</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_talk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_T</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bfree(obs-&gt;hotkeys.n); obs-&gt;hotkeys.n = bstrdup(n)</cpp:value></cpp:define>


<expr_stmt><expr><call><name>SET_T</name><argument_list>(<argument><expr><name>mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_T</name><argument_list>(<argument><expr><name>unmute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_T</name><argument_list>(<argument><expr><name>push_to_mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_T</name><argument_list>(<argument><expr><name>push_to_talk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_T</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_hotkeys_set_sceneitem_hotkeys_translations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hide</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_T</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bfree(obs-&gt;hotkeys.sceneitem_##n); obs-&gt;hotkeys.sceneitem_##n = bstrdup(n)</cpp:value></cpp:define>


<expr_stmt><expr><call><name>SET_T</name><argument_list>(<argument><expr><name>show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_T</name><argument_list>(<argument><expr><name>hide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_T</name></cpp:undef>
</block_content>}</block></function>
</unit>
