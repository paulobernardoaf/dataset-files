<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-scene.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/threading.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/math-defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-scene.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>group_info</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>resize_group</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>resize_scene</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>signal_parent</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_ungrouped_transform</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>crop_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_sceneitem_crop</name></name> <modifier>*</modifier></type><name>crop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>item_texture_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_hotkeys</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>












<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>obs_scene_signals</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"void item_add(ptr scene, ptr item)"</literal></expr>,
<expr><literal type="string">"void item_remove(ptr scene, ptr item)"</literal></expr>,
<expr><literal type="string">"void reorder(ptr scene)"</literal></expr>,
<expr><literal type="string">"void refresh(ptr scene)"</literal></expr>,
<expr><literal type="string">"void item_visible(ptr scene, ptr item, bool visible)"</literal></expr>,
<expr><literal type="string">"void item_select(ptr scene, ptr item)"</literal></expr>,
<expr><literal type="string">"void item_deselect(ptr scene, ptr item)"</literal></expr>,
<expr><literal type="string">"void item_transform(ptr scene, ptr item)"</literal></expr>,
<expr><literal type="string">"void item_locked(ptr scene, ptr item, bool locked)"</literal></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_item_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"item_remove"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scene_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"Scene"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_getname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"Group"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>scene_create</name><parameter_list>(<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_scene</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>group_info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>is_group</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>custom_size</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>signal_handler_add_array</name><argument_list>(<argument><expr><call><name>obs_source_get_signal_handler</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>obs_scene_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scene</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"scene_create: Couldn't initialize audio "</literal>
<literal type="string">"mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scene</name><operator>-&gt;</operator><name>video_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"scene_create: Couldn't initialize video "</literal>
<literal type="string">"mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>scene</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>audio_lock</name><parameter_list>(<parameter><type><name>scene</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;scene-&gt;audio_mutex)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>video_lock</name><parameter_list>(<parameter><type><name>scene</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;scene-&gt;video_mutex)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>audio_unlock</name><parameter_list>(<parameter><type><name>scene</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;scene-&gt;audio_mutex)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>video_unlock</name><parameter_list>(<parameter><type><name>scene</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;scene-&gt;video_mutex)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>full_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>video_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>audio_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>full_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>audio_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_visibility</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>detach_sceneitem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>remove_without_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>removed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_visibility</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_item_remove</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_all_items</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct obs_scene_item *</argument>)</argument_list></macro> <expr_stmt><expr><name>items</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>del_item</name> <init>= <expr><name>item</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_without_release</name><argument_list>(<argument><expr><name>del_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>remove_all_items</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scene</name><operator>-&gt;</operator><name>video_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scene</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_enum_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name> <operator>||</operator> <call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enum_callback</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_enum_active_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>scene_enum_sources</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>enum_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_enum_all_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>scene_enum_sources</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>enum_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>detach_sceneitem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>attach_sceneitem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>first_item</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>first_item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_alignment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&amp;</operator> <name>OBS_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>align</name> <operator>&amp;</operator> <name>OBS_ALIGN_LEFT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>cx</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&amp;</operator> <name>OBS_ALIGN_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>align</name> <operator>&amp;</operator> <name>OBS_ALIGN_TOP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>cy</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_bounds_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>origin</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cx</name><operator>)</operator> <operator>*</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>scale</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cy</name><operator>)</operator> <operator>*</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>scale</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>item_aspect</name> <init>= <expr><name>width</name> <operator>/</operator> <name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bounds_aspect</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bounds_type</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>width_diff</name></decl>, <decl><type ref="prev"/><name>height_diff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>==</operator> <name>OBS_BOUNDS_MAX_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name> <operator>||</operator> <name>height</name> <operator>&gt;</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bounds_type</name> <operator>=</operator> <name>OBS_BOUNDS_SCALE_INNER</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bounds_type</name> <operator>==</operator> <name>OBS_BOUNDS_SCALE_INNER</name> <operator>||</operator>
<name>bounds_type</name> <operator>==</operator> <name>OBS_BOUNDS_SCALE_OUTER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>use_width</name> <init>= <expr><operator>(</operator><name>bounds_aspect</name> <operator>&lt;</operator> <name>item_aspect</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mul</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>==</operator> <name>OBS_BOUNDS_SCALE_OUTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_width</name> <operator>=</operator> <operator>!</operator><name>use_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <ternary><condition><expr><name>use_width</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>width</name></expr>
</then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>height</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bounds_type</name> <operator>==</operator> <name>OBS_BOUNDS_SCALE_TO_WIDTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bounds_type</name> <operator>==</operator> <name>OBS_BOUNDS_SCALE_TO_HEIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec2_mulf</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bounds_type</name> <operator>==</operator> <name>OBS_BOUNDS_STRETCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cy</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cx</name><operator>)</operator> <operator>*</operator> <name><name>scale</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cy</name><operator>)</operator> <operator>*</operator> <name><name>scale</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width_diff</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height_diff</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>bounds</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_alignment</name><argument_list>(<argument><expr><name>origin</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>-</operator><name>width_diff</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>-</operator><name>height_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>calc_cx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crop_cx</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>crop_cx</name> <operator>&gt;</operator> <name>width</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><name>width</name> <operator>-</operator> <name>crop_cx</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>calc_cy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crop_cy</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>crop_cy</name> <operator>&gt;</operator> <name>height</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><name>height</name> <operator>-</operator> <name>crop_cy</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_item_transform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update_tex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>base_origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>defer_update</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>obs_source_get_width</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>obs_source_get_height</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>calc_cx</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <call><name>calc_cy</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>last_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>last_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec2_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base_origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec2_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>!=</operator> <name>OBS_BOUNDS_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>calculate_bounds_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>origin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>cx</name> <operator>*</operator> <name><name>scale</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>cy</name> <operator>*</operator> <name><name>scale</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_alignment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>origin</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_scale3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><name><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_translate3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>,
<argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_rotate_aa4f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,
<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><call><name>RAD</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_translate3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>output_scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>!=</operator> <name>OBS_BOUNDS_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec2_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>bounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>width</name> <operator>*</operator> <name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>height</name> <operator>*</operator> <name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>box_scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_alignment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base_origin</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_scale3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><name><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_translate3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>,
<argument><expr><operator>-</operator><name><name>base_origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>base_origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_rotate_aa4f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,
<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><call><name>RAD</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_translate3f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"item_transform"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>update_tex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>item_texture_enabled</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>&amp;&amp;</operator> <call><name>item_texture_enabled</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>=</operator> <call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>update_transform</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>source_size_changed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name> <init>= <expr><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>last_width</name></name> <operator>!=</operator> <name>width</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>last_height</name></name> <operator>!=</operator> <name>height</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>crop_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_sceneitem_crop</name></name> <modifier>*</modifier></type><name>crop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>crop</name><operator>-&gt;</operator><name>left</name></name> <operator>||</operator> <name><name>crop</name><operator>-&gt;</operator><name>right</name></name> <operator>||</operator> <name><name>crop</name><operator>-&gt;</operator><name>top</name></name> <operator>||</operator> <name><name>crop</name><operator>-&gt;</operator><name>bottom</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>scale_filter_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>!=</operator> <name>OBS_SCALE_DISABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>item_is_scene</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_SCENE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>item_texture_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>crop_enabled</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>scale_filter_enabled</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>item_is_scene</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_item_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name> <init>= <expr><call><name>gs_texrender_get_texture</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tex</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GS_DEBUG_MARKER_BEGIN</name><argument_list>(<argument><expr><name>GS_DEBUG_COLOR_ITEM_TEXTURE</name></expr></argument>,
<argument><expr><literal type="string">"render_item_texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>default_effect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>obs_scale_type</name></name></type> <name>type</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><literal type="string">"Draw"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OBS_SCALE_DISABLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_SCALE_POINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>=
<expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_effect_set_next_sampler</name><argument_list>(<argument><expr><name>image</name></expr></argument>,
<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>point_sampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>close_float</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>output_scale</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>close_float</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>output_scale</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>scale_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>scale_i_param</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>output_scale</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0.5f</literal> <operator>||</operator>
<name><name>item</name><operator>-&gt;</operator><name>output_scale</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0.5f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>bilinear_lowres_effect</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_SCALE_BICUBIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>bicubic_effect</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_SCALE_LANCZOS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lanczos_effect</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBS_SCALE_AREA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>area_effect</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>output_scale</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>output_scale</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <literal type="number">1.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tech</name> <operator>=</operator> <literal type="string">"DrawUpscale"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scale_param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"base_dimension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale_param</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>base_res</name> <init>= <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>scale_param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scale_i_param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"base_dimension_i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale_i_param</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>base_res_i</name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr>,
<expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_effect_set_vec2</name><argument_list>(<argument><expr><name>scale_i_param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base_res_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_blend_state_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_blend_function</name><argument_list>(<argument><expr><name>GS_BLEND_ONE</name></expr></argument>, <argument><expr><name>GS_BLEND_INVSRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>gs_effect_loop</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_draw</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>gs_blend_state_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GS_DEBUG_MARKER_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GS_DEBUG_MARKER_BEGIN_FORMAT</name><argument_list>(<argument><expr><name>GS_DEBUG_COLOR_ITEM</name></expr></argument>, <argument><expr><literal type="string">"Item: %s"</literal></expr></argument>,
<argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>obs_source_get_width</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name> <init>= <expr><call><name>obs_source_get_height</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name> <operator>||</operator> <operator>!</operator><name>height</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><call><name>calc_cx</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><call><name>calc_cy</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cx</name> <operator>&amp;&amp;</operator> <name>cy</name> <operator>&amp;&amp;</operator> <call><name>gs_texrender_begin</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>cx_scale</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cy_scale</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>clear_color</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clear_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_clear</name><argument_list>(<argument><expr><name>GS_CLEAR_COLOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_color</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_ortho</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_matrix_scale3f</name><argument_list>(<argument><expr><name>cx_scale</name></expr></argument>, <argument><expr><name>cy_scale</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_translate3f</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texrender_end</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>render_item_texture</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>GS_DEBUG_MARKER_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_video_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_texrender_reset</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>video_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_transforms_and_prune_sources</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>remove_items</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group_sceneitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rebuild_group</name> <init>=
<expr><name>group_sceneitem</name> <operator>&amp;&amp;</operator>
<call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group_sceneitem</name><operator>-&gt;</operator><name>update_group_resize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_removed</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>del_item</name> <init>= <expr><name>item</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_without_release</name><argument_list>(<argument><expr><name>del_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>darray_push_back</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_scene_item</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>remove_items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rebuild_group</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>group_scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_lock</name><argument_list>(<argument><expr><name>group_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_transforms_and_prune_sources</name><argument_list>(<argument><expr><name>group_scene</name></expr></argument>,
<argument><expr><name>remove_items</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_unlock</name><argument_list>(<argument><expr><name>group_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>update_transform</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>source_size_changed</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rebuild_group</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rebuild_group</name> <operator>&amp;&amp;</operator> <name>group_sceneitem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resize_group</name><argument_list>(<argument><expr><name>group_sceneitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_video_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct obs_scene_item *</argument>)</argument_list></macro> <expr_stmt><expr><name>remove_items</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>remove_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scene</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_transforms_and_prune_sources</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>remove_items</name><operator>.</operator><name>da</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_blend_state_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_reset_blend_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>render_item</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>gs_blend_state_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>remove_items</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name><name>remove_items</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>remove_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_visibility</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vis</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>source</name></name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vis</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>vis</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>vis</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name> <operator>=</operator> <name>vis</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scene_load</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_load_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scale_filter_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>visible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>lock</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"group_item_backup"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>obs_get_source_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"[scene_load_item] Source %s not "</literal>
<literal type="string">"found!"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>obs_scene_add</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"[scene_load_item] Could not add source '%s' "</literal>
<literal type="string">"to scene '%s'!"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>group_info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_default_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"align"</literal></expr></argument>,
<argument><expr><name>OBS_ALIGN_TOP</name> <operator>|</operator> <name>OBS_ALIGN_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_data_has_user_value</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>obs_data_get_double</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"rot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"align"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>visible</name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"visible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_get_vec2</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"pos"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_get_vec2</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name> <operator>=</operator>
<call><name>obs_data_get_obj</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"private_settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_visibility</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_sceneitem_set_locked</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>=</operator> <operator>(</operator>enum <name>obs_bounds_type</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(
<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"bounds_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"bounds_align"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_get_vec2</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"bounds"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>bounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>bottom</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_bottom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale_filter_str</name> <operator>=</operator> <call><name>obs_data_get_string</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"scale_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>OBS_SCALE_DISABLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale_filter_str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>scale_filter_str</name></expr></argument>, <argument><expr><literal type="string">"point"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>OBS_SCALE_POINT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>scale_filter_str</name></expr></argument>, <argument><expr><literal type="string">"bilinear"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>OBS_SCALE_BILINEAR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>scale_filter_str</name></expr></argument>, <argument><expr><literal type="string">"bicubic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>OBS_SCALE_BICUBIC</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>scale_filter_str</name></expr></argument>, <argument><expr><literal type="string">"lanczos"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>OBS_SCALE_LANCZOS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>astrcmpi</name><argument_list>(<argument><expr><name>scale_filter_str</name></expr></argument>, <argument><expr><literal type="string">"area"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>OBS_SCALE_AREA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>item_texture_enabled</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>&amp;&amp;</operator> <call><name>item_texture_enabled</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>=</operator> <call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_load</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>items</name> <init>= <expr><call><name>obs_data_get_array</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"items"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>remove_all_items</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>items</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>obs_data_array_count</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item_data</name> <init>= <expr><call><name>obs_data_array_item</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>scene_load_item</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>obs_data_has_user_value</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"id_counter"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>id_counter</name></name> <operator>=</operator> <call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"id_counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_data_get_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"custom_size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"cx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>obs_data_get_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"cy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>custom_size</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scene_save</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_save_item</name><parameter_list>(<parameter><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>backup_group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>item_data</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scale_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>pos</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>scale</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rot</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>backup_group</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_ungrouped_transform</name><argument_list>(<argument><expr><name>backup_group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"visible"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>locked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_double</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"rot"</literal></expr></argument>, <argument><expr><name>rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_vec2</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"pos"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_vec2</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"align"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"bounds_type"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"bounds_align"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_vec2</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"bounds"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>bounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_left"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_top"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_right"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"crop_bottom"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"group_item_backup"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>backup_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>group_scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group_item</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>group_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group_item</name> <operator>=</operator> <name><name>group_scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>group_item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scene_save_item</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>group_item</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>group_item</name> <operator>=</operator> <name><name>group_item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>group_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>==</operator> <name>OBS_SCALE_POINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale_filter</name> <operator>=</operator> <literal type="string">"point"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>==</operator> <name>OBS_SCALE_BILINEAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale_filter</name> <operator>=</operator> <literal type="string">"bilinear"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>==</operator> <name>OBS_SCALE_BICUBIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale_filter</name> <operator>=</operator> <literal type="string">"bicubic"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>==</operator> <name>OBS_SCALE_LANCZOS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale_filter</name> <operator>=</operator> <literal type="string">"lanczos"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>==</operator> <name>OBS_SCALE_AREA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale_filter</name> <operator>=</operator> <literal type="string">"area"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scale_filter</name> <operator>=</operator> <literal type="string">"disable"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>obs_data_set_string</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"scale_filter"</literal></expr></argument>, <argument><expr><name>scale_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_obj</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>, <argument><expr><literal type="string">"private_settings"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_push_back</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>item_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>item_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scene_save</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>obs_data_array_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scene_save_item</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"id_counter"</literal></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>id_counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_bool</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"custom_size"</literal></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>custom_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scene</name><operator>-&gt;</operator><name>custom_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"cx"</literal></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_set_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"cy"</literal></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_set_array</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"items"</literal></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>scene_getwidth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>scene</name><operator>-&gt;</operator><name>custom_size</name></name></expr> ?</condition><then> <expr><name><name>scene</name><operator>-&gt;</operator><name>cx</name></name></expr> </then><else>: <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>base_width</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>scene_getheight</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>scene</name><operator>-&gt;</operator><name>custom_size</name></name></expr> ?</condition><then> <expr><name><name>scene</name><operator>-&gt;</operator><name>cy</name></name></expr> </then><else>: <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>base_height</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_scene_item_audio_actions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>cur_visible</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>visible</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>deref_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_buf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>*</operator><name>p_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>item_action</name></name></type> <name>action</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><name><name>action</name><operator>.</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>new_frame_num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <name>ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_frame_num</name> <operator>=</operator> <operator>(</operator><name>timestamp</name> <operator>-</operator> <name>ts</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name> <operator>/</operator>
<literal type="number">1000000000ULL</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&amp;&amp;</operator> <name>new_frame_num</name> <operator>&gt;=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name><name>action</name><operator>.</operator><name>visible</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>visible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deref_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>new_frame_num</name> <operator>&gt;</operator> <name>frame_num</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>frame_num</name> <operator>&lt;</operator> <name>new_frame_num</name></expr>;</condition> <incr><expr><name>frame_num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>frame_num</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>cur_visible</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_visible</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>visible</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>frame_num</name> <operator>&lt;</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>;</condition> <incr><expr><name>frame_num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>frame_num</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>cur_visible</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>deref_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_remove_active_child</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>source</name></name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>apply_scene_item_volume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>actions_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>item_action</name></name></type> <name>action</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>actions_pending</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>actions_pending</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actions_pending</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator>
<literal type="number">1000000000ULL</literal> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts</name> <operator>||</operator> <name><name>action</name><operator>.</operator><name>timestamp</name></name> <operator>&lt;</operator> <operator>(</operator><name>ts</name> <operator>+</operator> <name>duration</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apply_scene_item_audio_actions</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>,
<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_all_audio_actions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>apply_scene_item_volume</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_audio_with_buf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf_in</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>p_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>buf_in</name> <operator>+</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>p_in</name> <operator>+</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>in</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>*</operator> <operator>*</operator><operator>(</operator><name>buf</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mix_audio</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>p_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>p_in</name> <operator>+</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>in</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scene_audio_render</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio_output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name></type> <name>child_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>audio_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_audio_pending</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>visible</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>source_ts</name> <init>=
<expr><call><name>obs_source_get_audio_timestamp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>source_ts</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>timestamp</name> <operator>||</operator> <name>source_ts</name> <operator>&lt;</operator> <name>timestamp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name>source_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timestamp</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_all_audio_actions</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>audio_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>source_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>apply_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>apply_buf</name> <operator>=</operator> <call><name>apply_scene_item_volume</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_source_audio_pending</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>source_ts</name> <operator>=</operator> <call><name>obs_source_get_audio_timestamp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source_ts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>ns_to_audio_frames</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>,
<argument><expr><name>source_ts</name> <operator>-</operator> <name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>apply_buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>visible</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_get_audio_mix</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mixers</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>audio_output</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>child_audio</name><operator>.</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>apply_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mix_audio_with_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mix_audio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ts_out</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>audio_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>scene_info</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"scene"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_SCENE</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name> <operator>|</operator>
<name>OBS_SOURCE_COMPOSITE</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>scene_getname</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>scene_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>scene_destroy</name></expr>,
<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>scene_video_tick</name></expr>,
<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>scene_video_render</name></expr>,
<expr><operator>.</operator><name>audio_render</name> <operator>=</operator> <name>scene_audio_render</name></expr>,
<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>scene_getwidth</name></expr>,
<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>scene_getheight</name></expr>,
<expr><operator>.</operator><name>load</name> <operator>=</operator> <name>scene_load</name></expr>,
<expr><operator>.</operator><name>save</name> <operator>=</operator> <name>scene_save</name></expr>,
<expr><operator>.</operator><name>enum_active_sources</name> <operator>=</operator> <name>scene_enum_active_sources</name></expr>,
<expr><operator>.</operator><name>enum_all_sources</name> <operator>=</operator> <name>scene_enum_all_sources</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name></type> <name>group_info</name> <init>= <expr><block>{
<expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="string">"group"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>OBS_SOURCE_TYPE_SCENE</name></expr>,
<expr><operator>.</operator><name>output_flags</name> <operator>=</operator> <name>OBS_SOURCE_VIDEO</name> <operator>|</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name> <operator>|</operator>
<name>OBS_SOURCE_COMPOSITE</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <name>group_getname</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>scene_create</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>scene_destroy</name></expr>,
<expr><operator>.</operator><name>video_tick</name> <operator>=</operator> <name>scene_video_tick</name></expr>,
<expr><operator>.</operator><name>video_render</name> <operator>=</operator> <name>scene_video_render</name></expr>,
<expr><operator>.</operator><name>audio_render</name> <operator>=</operator> <name>scene_audio_render</name></expr>,
<expr><operator>.</operator><name>get_width</name> <operator>=</operator> <name>scene_getwidth</name></expr>,
<expr><operator>.</operator><name>get_height</name> <operator>=</operator> <name>scene_getheight</name></expr>,
<expr><operator>.</operator><name>load</name> <operator>=</operator> <name>scene_load</name></expr>,
<expr><operator>.</operator><name>save</name> <operator>=</operator> <name>scene_save</name></expr>,
<expr><operator>.</operator><name>enum_active_sources</name> <operator>=</operator> <name>scene_enum_active_sources</name></expr>,
<expr><operator>.</operator><name>enum_all_sources</name> <operator>=</operator> <name>scene_enum_all_sources</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_scene_t</name> <modifier>*</modifier></type><name>create_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>obs_source_create</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_scene_t</name> <modifier>*</modifier></type><name>create_private_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>obs_source_create_private</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_scene_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>create_id</name><argument_list>(<argument><expr><literal type="string">"scene"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_scene_create_private</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>create_private_id</name><argument_list>(<argument><expr><literal type="string">"scene"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>get_child_at_idx</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name>idx</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>dup_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>darray</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>new_scene</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct obs_scene_item *</argument>)</argument_list></macro> <expr_stmt><expr><name>old_items</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>old_items</name><operator>.</operator><name>da</name></name> <operator>=</operator> <operator>*</operator><name>array</name></expr>;</expr_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>old_items</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>source</name></expr>;</expr_stmt>




<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>old_items</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>get_child_at_idx</name><argument_list>(<argument><expr><name>new_scene</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>source</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>obs_source_duplicate</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>new_ref</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>source</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>duplicate_item_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>defer_texture_update</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>duplicate_hotkeys</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>duplicate_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>dst_scene</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>user_visible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_visibility</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>selected</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>rot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>output_scale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>output_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>scale_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>box_transform</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>box_transform</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>box_scale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>box_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>draw_transform</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>draw_transform</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bounds_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bounds_align</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bounds_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bounds</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bounds</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>duplicate_hotkeys</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dst_scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_array_t</name> <modifier>*</modifier></type><name>data1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_hotkey_pair_save</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>toggle_visibility</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_hotkey_pair_load</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>toggle_visibility</name></name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>data0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_array_release</name><argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_set_crop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>crop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>defer_texture_update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>update_transform</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>item_render</name></name> <operator>&amp;&amp;</operator> <call><name>item_texture_enabled</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>item_render</name></name> <operator>=</operator>
<call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>duplicate_private_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_scene_duplicate</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_scene_duplicate_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>make_unique</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>make_private</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>DARRAY</name><argument_list>(<argument>struct obs_scene_item *</argument>)</argument_list></macro> <expr_stmt><expr><name>items</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>new_scene</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><literal type="string">"obs_scene_duplicate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_sceneitem_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>new_scene</name> <operator>=</operator> <ternary><condition><expr><name>make_private</name></expr>
?</condition><then> <expr><call><name>create_private_id</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>create_id</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_copy_filters</name><argument_list>(<argument><expr><name><name>new_scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>new_scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>,
<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>scene</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>make_unique</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <ternary><condition><expr><name>make_unique</name></expr> ?</condition><then> <expr><call><name>dup_child</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>items</name><operator>.</operator><name>da</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>new_scene</name></expr></argument>,
<argument><expr><name>make_private</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>new_ref</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>new_item</name> <init>=
<expr><call><name>obs_scene_add</name><argument_list>(<argument><expr><name>new_scene</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>duplicate_item_data</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name><name>items</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>new_scene</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resize_scene</name><argument_list>(<argument><expr><name>new_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_scene</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_scene_addref</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_scene_release</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_scene_get_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>scene</name></expr> ?</condition><then> <expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_scene_from_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>scene_info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_group_from_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>group_info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_find_source</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_find_source_recursive</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>child</name> <init>=
<expr><call><name>obs_scene_find_source</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_find_sceneitem_by_id</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_scene_enum_items</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name> <operator>||</operator> <operator>!</operator><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_addref</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callback</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>sceneitem_get_ref</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>owners</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>owners</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_compare_swap_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name>owners</name></expr></argument>, <argument><expr><name>owners</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>si</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>owners</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hotkey_show_sceneitem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>sceneitem_get_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <name>si</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>user_visible</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_sceneitem_set_visible</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hotkey_hide_sceneitem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>hotkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>hotkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>sceneitem_get_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <name>si</name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>user_visible</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_sceneitem_set_visible</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_hotkeys</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>show</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>hide</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>show_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>hide_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show</name></expr></argument>, <argument><expr><literal type="string">"libobs.show_scene_item.%1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide</name></expr></argument>, <argument><expr><literal type="string">"libobs.hide_scene_item.%1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show_desc</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>sceneitem_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show_desc</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide_desc</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>sceneitem_hide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide_desc</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>toggle_visibility</name></name> <operator>=</operator> <call><name>obs_hotkey_pair_register_source</name><argument_list>(
<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>show</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>show_desc</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>hide</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name><name>hide_desc</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name>hotkey_show_sceneitem</name></expr></argument>, <argument><expr><name>hotkey_hide_sceneitem</name></expr></argument>,
<argument><expr><name>item</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sceneitem_rename_hotkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>scene_item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>show</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>hide</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>show_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>hide_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show</name></expr></argument>, <argument><expr><literal type="string">"libobs.show_scene_item.%1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide</name></expr></argument>, <argument><expr><literal type="string">"libobs.hide_scene_item.%1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_hotkey_pair_set_names</name><argument_list>(<argument><expr><name><name>scene_item</name><operator>-&gt;</operator><name>toggle_visibility</name></name></expr></argument>, <argument><expr><name><name>show</name><operator>.</operator><name>array</name></name></expr></argument>,
<argument><expr><name><name>hide</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show_desc</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>sceneitem_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show_desc</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide_desc</name></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>sceneitem_hide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide_desc</name></expr></argument>, <argument><expr><literal type="string">"%1"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_hotkey_pair_set_descriptions</name><argument_list>(<argument><expr><name><name>scene_item</name><operator>-&gt;</operator><name>toggle_visibility</name></name></expr></argument>,
<argument><expr><name><name>show_desc</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>hide_desc</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>show_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hide_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sceneitem_renamed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>scene_item</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>calldata_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"new_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sceneitem_rename_hotkey</name><argument_list>(<argument><expr><name>scene_item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>source_has_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator>
<operator>(</operator><name>OBS_SOURCE_AUDIO</name> <operator>|</operator> <name>OBS_SOURCE_COMPOSITE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_add_internal</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>insert_after</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>item_action</name></name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <macro><name>os_gettime_ns</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tried to add a NULL source to a scene"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to create scene item mutex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to add source to scene due to "</literal>
<literal type="string">"infinite source recursion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_scene_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name><name>scene</name><operator>-&gt;</operator><name>id_counter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>scene</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>OBS_ALIGN_TOP</name> <operator>|</operator> <name>OBS_ALIGN_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>group_info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>toggle_visibility</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_atomic_set_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_identity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>source_has_audio</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>item_texture_enabled</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name> <operator>=</operator> <call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>GS_RGBA</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_after</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>insert_after</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>insert_after</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>insert_after</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>insert_after</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_hotkeys</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>signal_handler_connect</name><argument_list>(<argument><expr><call><name>obs_source_get_signal_handler</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>,
<argument><expr><name>sceneitem_renamed</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_add</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>obs_scene_add_internal</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"scene"</literal></expr></argument>, <argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"item_add"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_sceneitem_destroy</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>item_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_hotkey_pair_unregister</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>toggle_visibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_handler_disconnect</name><argument_list>(
<argument><expr><call><name>obs_source_get_signal_handler</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>,
<argument><expr><name>sceneitem_renamed</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_addref</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_release</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_sceneitem_destroy</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_remove</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scene</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>removed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>scene</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>source</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_visibility</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_item_remove</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_sceneitem_get_scene</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_sceneitem_get_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_parent</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>,
<parameter><decl><type><name>calldata_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"scene"</literal></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_select</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>select</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><ternary><condition><expr><name>select</name></expr> ?</condition><then> <expr><literal type="string">"item_select"</literal></expr> </then><else>: <expr><literal type="string">"item_deselect"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>selected</name></name> <operator>==</operator> <name>select</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_sceneitem_selected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>selected</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_update_transform</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!item-&gt;parent || item-&gt;parent-&gt;is_group) os_atomic_set_bool(&amp;item-&gt;update_transform, true); else update_item_transform(item, false); } while (false)</cpp:value></cpp:define>







<function><type><name>void</name></type> <name>obs_sceneitem_set_pos</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec2_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_rot</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <name>rot</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_scale</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec2_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_alignment</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>alignment</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_reorder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>command</name> <operator>=</operator> <literal type="string">"reorder"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_refresh</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>command</name> <operator>=</operator> <literal type="string">"refresh"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_order</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_order_movement</name></name></type> <name>movement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_scene_addref</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_DOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><name>next</name></expr> </then><else>: <expr><name>prev</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_TOP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>next</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_BOTTOM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_reorder</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_order_position</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene</name></name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_scene_item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_scene_addref</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>position</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_reorder</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_bounds_type</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_bounds_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_bounds_alignment</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name> <operator>=</operator> <name>alignment</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_bounds</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>bounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name></name> <operator>=</operator> <operator>*</operator><name>bounds</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vec2_copy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>obs_sceneitem_get_rot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vec2_copy</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_sceneitem_get_alignment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_bounds_type</name></name></type> <name>obs_sceneitem_get_bounds_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name></expr> </then><else>: <expr><name>OBS_BOUNDS_NONE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_sceneitem_get_bounds_alignment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_bounds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>bounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bounds</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_transform_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>rot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>alignment</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bounds_alignment</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bounds</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>bounds</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_info</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_transform_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>rot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>alignment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>bounds_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds_align</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>bounds_alignment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>bounds</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>bounds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_draw_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>transform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><name>transform</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_box_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>transform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><name>transform</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>box_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_box_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>scale</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>box_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_sceneitem_visible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_sceneitem_set_visible</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>item_action</name></name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name>visible</name></expr>,
<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <macro><name>os_gettime_ns</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name> <operator>==</operator> <name>visible</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visible</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_add_active_child</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>source</name></name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>active_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>user_visible</name></name> <operator>=</operator> <name>visible</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"visible"</literal></expr></argument>, <argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"item_visible"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>source_has_audio</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_visibility</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_sceneitem_locked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>locked</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_sceneitem_set_locked</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>locked</name></name> <operator>==</operator> <name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_parent</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"item_locked"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sceneitems_match</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>order_matches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>order_matches</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>count</name> <operator>==</operator> <name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_scene_reorder_items</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>item_order</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>item_order_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name> <operator>||</operator> <operator>!</operator><name>item_order_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_scene_addref</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>order_matches</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sceneitems_match</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item_order</name></expr></argument>, <argument><expr><name>item_order_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>order_matches</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>order_matches</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name><name>item_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_order_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_reorder</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_scene_atomic_update</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name>obs_scene_atomic_update_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_scene_addref</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>crop_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_sceneitem_crop</name></name> <modifier>*</modifier></type><name>crop1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_sceneitem_crop</name></name> <modifier>*</modifier></type><name>crop2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>crop1</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name><name>crop2</name><operator>-&gt;</operator><name>left</name></name> <operator>&amp;&amp;</operator> <name><name>crop1</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name><name>crop2</name><operator>-&gt;</operator><name>right</name></name> <operator>&amp;&amp;</operator>
<name><name>crop1</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <name><name>crop2</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <name><name>crop1</name><operator>-&gt;</operator><name>bottom</name></name> <operator>==</operator> <name><name>crop2</name><operator>-&gt;</operator><name>bottom</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_crop</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_sceneitem_crop</name></name> <modifier>*</modifier></type><name>crop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_set_crop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>crop</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_set_crop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>crop_equal</name><argument_list>(<argument><expr><name>crop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name></name></expr></argument>, <argument><expr><name>crop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>crop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>left</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>right</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>top</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>bottom</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>update_transform</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_get_crop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_sceneitem_crop</name></name> <modifier>*</modifier></type><name>crop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_get_crop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>crop</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_get_crop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>crop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>crop</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>crop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_set_scale_filter</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_scale_type</name></name></type> <name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_set_scale_filter"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>update_transform</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_scale_type</name></name></type> <name>obs_sceneitem_get_scale_filter</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_get_scale_filter"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>scale_filter</name></name></expr>
</then><else>: <expr><name>OBS_SCALE_DISABLE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_defer_update_begin</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_defer_update_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>defer_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_defer_update_end</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_defer_update_end"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>defer_update</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_update_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_defer_group_resize_begin</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_defer_group_resize_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>defer_group_resize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_defer_group_resize_end</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_defer_group_resize_end"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>defer_group_resize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>update_group_resize</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>obs_sceneitem_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_get_id"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_sceneitem_get_private_settings</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"obs_sceneitem_get_private_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>private_settings</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>transform_val</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>transform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v2</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v2</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_ungrouped_transform</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>x_base</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_base</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transform_val</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transform</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>scale</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>vec4_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>scale</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>vec4_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>scale</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rot</name> <operator>+=</operator> <name><name>group</name><operator>-&gt;</operator><name>rot</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_group_transform</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_ungrouped_transform</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>rot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_group_transform</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix4</name></name></type> <name>mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>x_base</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_base</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix4_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transform_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transform</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>matrix4_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator>
<call><name>vec4_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator>
<call><name>vec4_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mat</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>scale</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>rot</name></name> <operator>-=</operator> <name><name>group</name><operator>-&gt;</operator><name>rot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>resize_scene_base</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>minv</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>maxv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vec2</name></name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>minv</name></expr></argument>, <argument><expr><name>M_INFINITE</name></expr></argument>, <argument><expr><name>M_INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec2_set</name><argument_list>(<argument><expr><name>maxv</name></expr></argument>, <argument><expr><operator>-</operator><name>M_INFINITE</name></expr></argument>, <argument><expr><operator>-</operator><name>M_INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_min_max</name><parameter_list>(<parameter><type><name>x_val</name></type></parameter>, <parameter><type><name>y_val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct vec3 v; vec3_set(&amp;v, x_val, y_val, 0.0f); vec3_transform(&amp;v, &amp;v, &amp;item-&gt;box_transform); if (v.x &lt; minv-&gt;x) minv-&gt;x = v.x; if (v.y &lt; minv-&gt;y) minv-&gt;y = v.y; if (v.x &gt; maxv-&gt;x) maxv-&gt;x = v.x; if (v.y &gt; maxv-&gt;y) maxv-&gt;y = v.y; } while (false)</cpp:value></cpp:define>














<expr_stmt><expr><call><name>get_min_max</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_min_max</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_min_max</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_min_max</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>get_min_max</name></cpp:undef>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vec2_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>minv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vec2_sub</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>maxv</name></expr></argument>, <argument><expr><name>minv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ceilf</name><argument_list>(<argument><expr><name><name>scale</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>ceilf</name><argument_list>(<argument><expr><name><name>scale</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_scene</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>minv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>maxv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>scale</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>resize_scene_base</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_group</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>minv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>maxv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>scale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>defer_group_resize</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resize_scene_base</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>bounds_type</name></name> <operator>==</operator> <name>OBS_BOUNDS_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec2</name></name></type> <name>new_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>align</name></name> <operator>&amp;</operator> <name>OBS_ALIGN_LEFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>minv</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>align</name></name> <operator>&amp;</operator> <name>OBS_ALIGN_RIGHT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>maxv</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>maxv</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>minv</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal> <operator>+</operator> <name><name>minv</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>align</name></name> <operator>&amp;</operator> <name>OBS_ALIGN_TOP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>minv</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>align</name></name> <operator>&amp;</operator> <name>OBS_ALIGN_BOTTOM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>maxv</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>maxv</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>minv</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal> <operator>+</operator> <name><name>minv</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>transform_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>draw_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec2_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>update_group_resize</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_add_group</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_scene_insert_group</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_add_group2</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>signal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_scene_insert_group2</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_insert_group</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>count</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>items</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>scene</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>sub_scene</name> <init>= <expr><call><name>create_id</name><argument_list>(<argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>last_item</name> <init>= <expr><ternary><condition><expr><name>items</name></expr> ?</condition><then> <expr><name><name>items</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>=
<expr><call><name>obs_scene_add_internal</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name><name>sub_scene</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>last_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>items</name> <operator>||</operator> <operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>item</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_scene</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>count</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_group_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>(</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>next_idx</name> <init>= <expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>next_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>next_idx</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>=</operator> <name>sub_scene</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_group_transform</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resize_group</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_insert_group2</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>signal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>=
<expr><call><name>obs_scene_insert_group</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>signal</name> <operator>&amp;&amp;</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signal_refresh</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_scene_get_group</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name> <operator>||</operator> <operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>group</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_sceneitem_is_group</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>obs_sceneitem_group_get_scene</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>is_group</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_group_ungroup</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>subscene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>insert_after</name> <init>= <expr><name>item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>subscene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>subscene</name><operator>-&gt;</operator><name>first_item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>remove_group_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>obs_scene_add_internal</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name><name>last</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>insert_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>duplicate_item_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_group_transform</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>insert_after</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>subscene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_sceneitem_release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_group_ungroup2</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>signal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_sceneitem_group_ungroup</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signal_refresh</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_group_add_item</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name> <operator>||</operator> <operator>!</operator><name><name>group</name><operator>-&gt;</operator><name>is_group</name></name> <operator>||</operator> <operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>groupscene</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>groupscene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>groupscene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_group_transform</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>groupscene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_group_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>resize_group</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>groupscene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>signal_refresh</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_group_remove_item</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>||</operator> <operator>!</operator><name>group</name> <operator>||</operator> <operator>!</operator><name><name>group</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>groupscene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>groupscene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_group_transform</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detach_sceneitem</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attach_sceneitem</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>resize_group</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>groupscene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>signal_refresh</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>build_current_order_info</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>items_out</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>struct obs_sceneitem_order_info</argument>)</argument_list></macro> <expr_stmt><expr><name>items</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>sub_scene</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>sub_item</name> <init>= <expr><name><name>sub_scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>sub_item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_item</name> <operator>=</operator> <name><name>sub_item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>items_out</name> <operator>=</operator> <name><name>items</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size_out</name> <operator>=</operator> <name><name>items</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sceneitems_match2</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>cur_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_current_order_info</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_size</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cur_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>old</name> <init>= <expr><operator>&amp;</operator><name><name>cur_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>group</name></name> <operator>!=</operator> <name><name>old</name><operator>-&gt;</operator><name>group</name></name> <operator>||</operator> <name><name>new</name><operator>-&gt;</operator><name>item</name></name> <operator>!=</operator> <name><name>old</name><operator>-&gt;</operator><name>item</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cur_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>cur_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_sceneitem_t</name> <modifier>*</modifier></type>
<name>get_sceneitem_parent_group</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>, <parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group_subitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>group_subitem</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>is_group</name></name> <operator>&amp;&amp;</operator>
<name><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name><name>group_subitem</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>item</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_scene_reorder_items2</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>item_order</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>item_order_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name> <operator>||</operator> <operator>!</operator><name>item_order_size</name> <operator>||</operator> <operator>!</operator><name>item_order</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_scene_addref</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sceneitems_match2</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>item_order</name></expr></argument>, <argument><expr><name>item_order_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_order_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name> <init>=
<expr><call><name>get_sceneitem_parent_group</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_group_transform</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name><name>item_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_order_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>sub_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>sub_scene</name> <init>=
<expr><name><name>info</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub_scene</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_scene_addref</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_order_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_sceneitem_order_info</name></name> <modifier>*</modifier></type><name>sub_info</name> <init>=
<expr><operator>&amp;</operator><name><name>item_order</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>sub_item</name> <init>= <expr><name><name>sub_info</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub_info</name><operator>-&gt;</operator><name>group</name></name> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>item</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_scene</name><operator>-&gt;</operator><name>first_item</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub_scene</name><operator>-&gt;</operator><name>first_item</name></name> <operator>=</operator> <name>sub_item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sub_item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>sub_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_item</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>sub_scene</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub_prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>sub_item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_group_transform</name><argument_list>(<argument><expr><name><name>sub_info</name><operator>-&gt;</operator><name>item</name></name></expr></argument>,
<argument><expr><name><name>sub_info</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_prev</name> <operator>=</operator> <name>sub_item</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>resize_group</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>sub_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>scene</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_reorder</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>first_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_scene_release</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>obs_sceneitem_get_group</name><parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group_subitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name> <operator>||</operator> <operator>!</operator><name>group_subitem</name> <operator>||</operator> <name><name>group_subitem</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>full_lock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name> <init>=
<expr><call><name>get_sceneitem_parent_group</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>group_subitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>full_unlock</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_is_group</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>source</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>group_info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_scene_is_group</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>scene</name></expr> ?</condition><then> <expr><name><name>scene</name><operator>-&gt;</operator><name>is_group</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_group_enum_items</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name> <operator>||</operator> <operator>!</operator><name><name>group</name><operator>-&gt;</operator><name>is_group</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_scene_enum_items</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_sceneitem_force_update_transform</name><parameter_list>(<parameter><decl><type><name>obs_sceneitem_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>update_transform</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_item_transform</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
