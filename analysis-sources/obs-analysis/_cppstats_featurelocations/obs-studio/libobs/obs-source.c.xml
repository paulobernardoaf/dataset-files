<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\obs-source.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/format-conversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/video-frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media-io/audio-io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/threading.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"callback/calldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/matrix3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphics/vec3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"obs-internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>data_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>deinterlacing_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_mode</name></name> <operator>!=</operator> <name>OBS_DEINTERLACE_MODE_DISABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>get_source_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obs</name><operator>-&gt;</operator><name>source_types</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>source_types</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>info</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>get_source_info2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unversioned_id</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obs</name><operator>-&gt;</operator><name>source_types</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>source_types</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>unversioned_id</name></name></expr></argument>, <argument><expr><name>unversioned_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>info</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>ver</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>info</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>source_signals</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"void destroy(ptr source)"</literal></expr>,
<expr><literal type="string">"void remove(ptr source)"</literal></expr>,
<expr><literal type="string">"void save(ptr source)"</literal></expr>,
<expr><literal type="string">"void load(ptr source)"</literal></expr>,
<expr><literal type="string">"void activate(ptr source)"</literal></expr>,
<expr><literal type="string">"void deactivate(ptr source)"</literal></expr>,
<expr><literal type="string">"void show(ptr source)"</literal></expr>,
<expr><literal type="string">"void hide(ptr source)"</literal></expr>,
<expr><literal type="string">"void mute(ptr source, bool muted)"</literal></expr>,
<expr><literal type="string">"void push_to_mute_changed(ptr source, bool enabled)"</literal></expr>,
<expr><literal type="string">"void push_to_mute_delay(ptr source, int delay)"</literal></expr>,
<expr><literal type="string">"void push_to_talk_changed(ptr source, bool enabled)"</literal></expr>,
<expr><literal type="string">"void push_to_talk_delay(ptr source, int delay)"</literal></expr>,
<expr><literal type="string">"void enable(ptr source, bool enabled)"</literal></expr>,
<expr><literal type="string">"void rename(ptr source, string new_name, string prev_name)"</literal></expr>,
<expr><literal type="string">"void volume(ptr source, in out float volume)"</literal></expr>,
<expr><literal type="string">"void update_properties(ptr source)"</literal></expr>,
<expr><literal type="string">"void update_flags(ptr source, int flags)"</literal></expr>,
<expr><literal type="string">"void audio_sync(ptr source, int out int offset)"</literal></expr>,
<expr><literal type="string">"void audio_mixers(ptr source, in out int mixers)"</literal></expr>,
<expr><literal type="string">"void audio_activate(ptr source)"</literal></expr>,
<expr><literal type="string">"void audio_deactivate(ptr source)"</literal></expr>,
<expr><literal type="string">"void filter_add(ptr source, ptr filter)"</literal></expr>,
<expr><literal type="string">"void filter_remove(ptr source, ptr filter)"</literal></expr>,
<expr><literal type="string">"void reorder_filters(ptr source)"</literal></expr>,
<expr><literal type="string">"void transition_start(ptr source)"</literal></expr>,
<expr><literal type="string">"void transition_video_stop(ptr source)"</literal></expr>,
<expr><literal type="string">"void transition_stop(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_play(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_pause(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_restart(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_stopped(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_next(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_previous(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_started(ptr source)"</literal></expr>,
<expr><literal type="string">"void media_ended(ptr source)"</literal></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>obs_source_init_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_context_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>OBS_OBJ_TYPE_SOURCE</name></expr></argument>,
<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>signal_handler_add_array</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>,
<argument><expr><name>source_signals</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_source_get_display_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>info</name><operator>-&gt;</operator><name>get_name</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allocate_audio_output_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>MAX_AUDIO_CHANNELS</name> <operator>*</operator>
<name>MAX_AUDIO_MIXES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mix_pos</name> <init>= <expr><name>mix</name> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>MAX_AUDIO_CHANNELS</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name>ptr</name> <operator>+</operator> <name>mix_pos</name> <operator>+</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allocate_audio_mix_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>MAX_AUDIO_CHANNELS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_mix_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_async_video_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC_VIDEO</name><operator>)</operator> <operator>==</operator>
<name>OBS_SOURCE_ASYNC_VIDEO</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_audio_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_composite_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_COMPOSITE</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>find_libobs_data_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_source_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>user_volume</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>sync_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_audio_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_composite_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>allocate_audio_output_buffer</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_mix</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>allocate_audio_mix_buffer</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_transition_init</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obs_weak_source_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_top_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>private_settings</name></name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_init_finalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_audio_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_audio_source</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>prev_next_audio_source</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_audio_source</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_audio_source</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_audio_source</name><operator>-&gt;</operator><name>prev_next_audio_source</name></name> <operator>=</operator>
<operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_audio_source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_context_data_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sources_mutex</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>first_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_source_hotkey_mute</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pressed</name> <operator>||</operator> <call><name>obs_source_muted</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_set_muted</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_source_hotkey_unmute</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_pair_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pressed</name> <operator>||</operator> <operator>!</operator><call><name>obs_source_muted</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_set_muted</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_hotkey_push_to_mute</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_action</name></name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AUDIO_ACTION_PTM</name></expr>,
<expr><operator>.</operator><name>set</name> <operator>=</operator> <name>pressed</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>user_push_to_mute_pressed</name></name> <operator>=</operator> <name>pressed</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_hotkey_push_to_talk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>obs_hotkey_id</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>obs_hotkey_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_action</name></name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AUDIO_ACTION_PTT</name></expr>,
<expr><operator>.</operator><name>set</name> <operator>=</operator> <name>pressed</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>user_push_to_talk_pressed</name></name> <operator>=</operator> <name>pressed</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_init_audio_hotkeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name><operator>)</operator> <operator>||</operator>
<name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_INPUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>mute_unmute_key</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_key</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>mute_unmute_key</name></name> <operator>=</operator> <call><name>obs_hotkey_pair_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"libobs.mute"</literal></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>mute</name></name></expr></argument>, <argument><expr><literal type="string">"libobs.unmute"</literal></expr></argument>,
<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>unmute</name></name></expr></argument>, <argument><expr><name>obs_source_hotkey_mute</name></expr></argument>,
<argument><expr><name>obs_source_hotkey_unmute</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_key</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"libobs.push-to-mute"</literal></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>push_to_mute</name></name></expr></argument>,
<argument><expr><name>obs_source_hotkey_push_to_mute</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_key</name></name> <operator>=</operator> <call><name>obs_hotkey_register_source</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"libobs.push-to-talk"</literal></expr></argument>, <argument><expr><name><name>obs</name><operator>-&gt;</operator><name>hotkeys</name><operator>.</operator><name>push_to_talk</name></name></expr></argument>,
<argument><expr><name>obs_source_hotkey_push_to_talk</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>obs_source_t</name> <modifier>*</modifier></type>
<name>obs_source_create_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>last_obs_ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>obs_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source ID '%s' not found"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>owns_info_id</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>unversioned_id</name></name> <operator>=</operator> <call><name>bstrdup</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>info</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>private</name>
<operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>mute_unmute_key</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_PAIR_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_key</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_key</name></name> <operator>=</operator> <name>OBS_INVALID_HOTKEY_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_obs_ver</name></name> <operator>=</operator> <name>last_obs_ver</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_init_context</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>,
<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults2</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_init</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>private</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_init_audio_hotkeys</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>create</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>=</operator>
<call><name><name>info</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>info</name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>create</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create source '%s'!"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%ssource '%s' (%s) created"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>private</name></expr> ?</condition><then> <expr><literal type="string">"private "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>default_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>private</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_create"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_init_finalize</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>source</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"obs_source_create failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_destroy</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_source_create_internal</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>LIBOBS_API_VER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_create_private</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_source_create_internal</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>LIBOBS_API_VER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_create_set_last_ver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
<parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>hotkey_data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>last_obs_ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>obs_source_create_internal</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>hotkey_data</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>last_obs_ver</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_new_filter_name</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dstr</name></name></type> <name>new_name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>existing_filter</name> <init>=
<expr><call><name>obs_source_get_filter_by_name</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>new_name</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>existing_filter</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>existing_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dstr_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>++</operator><name>inc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>new_name</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>duplicate_filters</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DARRAY</name><argument_list>(<argument>obs_source_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>filters</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_init</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>da_copy</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>filters</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>src_filter</name> <init>= <expr><name><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>=
<expr><call><name>get_new_filter_name</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src_filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name> <init>= <expr><call><name>obs_source_enabled</name><argument_list>(<argument><expr><name>src_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>dst_filter</name> <init>=
<expr><call><name>obs_source_duplicate</name><argument_list>(<argument><expr><name>src_filter</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_source_set_enabled</name><argument_list>(<argument><expr><name>dst_filter</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_filter_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>dst_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>src_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_copy_filters</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"obs_source_copy_filters"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"obs_source_copy_filters"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>duplicate_filters</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_duplicate</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>create_private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>new_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_duplicate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_DO_NOT_DUPLICATE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>source</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_SCENE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>scene</name> <init>= <expr><call><name>obs_scene_from_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scene</name> <operator>=</operator> <call><name>obs_group_from_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scene</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_scene_t</name> <modifier>*</modifier></type><name>new_scene</name> <init>= <expr><call><name>obs_scene_duplicate</name><argument_list>(
<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>create_private</name></expr> ?</condition><then> <expr><name>OBS_SCENE_DUP_PRIVATE_COPY</name></expr>
</then><else>: <expr><name>OBS_SCENE_DUP_COPY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>new_source</name> <init>= <expr><call><name>obs_scene_get_source</name><argument_list>(<argument><expr><name>new_scene</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>new_source</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name>obs_data_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_source</name> <operator>=</operator> <ternary><condition><expr><name>create_private</name></expr>
?</condition><then> <expr><call><name>obs_source_create_private</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>,
<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>obs_source_create</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>,
<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>sync_offset</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>sync_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>user_volume</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>user_volume</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>user_muted</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>user_muted</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>volume</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>muted</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>muted</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_source</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>new_source</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>duplicate_filters</name><argument_list>(<argument><expr><name>new_source</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>create_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_source</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_frame_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>video_frame</name></name></type> <name>vid_frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"obs_source_frame_init"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>video_frame_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vid_frame</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vid_frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vid_frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_source_frame_decref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>obs_source_filter_remove_refless</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>obs_source_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_destroy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_clear</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>prev_next_audio_source</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>source</name><operator>-&gt;</operator><name>prev_next_audio_source</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_source</name><operator>-&gt;</operator><name>prev_next_audio_source</name></name> <operator>=</operator>
<name><name>source</name><operator>-&gt;</operator><name>prev_next_audio_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obs</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>audio_sources_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_filter_remove_refless</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_filter_remove</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>obs_context_data_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%ssource '%s' destroyed"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr> ?</condition><then> <expr><literal type="string">"private "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_destroy"</literal></expr></argument>, <argument><expr><literal type="string">"destroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>audio_monitor_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_hotkey_unregister</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_hotkey_unregister</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_hotkey_pair_unregister</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>mute_unmute_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_frame_decref</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>gs_enter_context</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>graphics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_mix_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_free</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_cb_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_context_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>owns_info_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>unversioned_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_addref</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_release</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Tried to release a source when the OBS "</literal>
<literal type="string">"core is shut down!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>control</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>control</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_destroy</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_weak_source_release</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_source_addref</name><parameter_list>(<parameter><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_weak_ref_addref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_weak_source_release</name><parameter_list>(<parameter><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_get_ref</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>obs_weak_source_get_source</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>obs_source_get_weak_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>control</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_weak_source_addref</name><argument_list>(<argument><expr><name>weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>weak</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_weak_source_get_source</name><parameter_list>(<parameter><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_weak_ref_get_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>weak</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>weak</name><operator>-&gt;</operator><name>source</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_weak_source_references_source</name><parameter_list>(<parameter><decl><type><name>obs_weak_source_t</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>weak</name> <operator>&amp;&amp;</operator> <name>source</name> <operator>&amp;&amp;</operator> <name><name>weak</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>source</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_remove</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_remove"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>removed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>removed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_remove"</literal></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_removed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_removed"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>removed</name></name></expr>
</then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>obs_data_t</name> <modifier>*</modifier></type><name>get_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name>obs_data_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults2</name></name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>get_defaults</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>settings</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_source_settings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_get_source_defaults</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_get_source_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>get_properties2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>defaults</name> <init>= <expr><call><name>get_defaults</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>get_properties2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>get_properties2</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_data_release</name><argument_list>(<argument><expr><name>defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_is_source_configurable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>info</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>get_properties</name></name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>get_properties2</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_configurable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_configurable"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties2</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>obs_source_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_properties"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties2</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties2</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_properties_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_properties</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_properties_apply_settings</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_output_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_output_flags"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_get_source_output_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>output_flags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_deferred_update</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>defer_update</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_update</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_data_t</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_update"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>settings</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_data_apply</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>defer_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_update_properties</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_update_properties"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"update_properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_send_mouse_click</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_mouse_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mouse_up</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>click_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_send_mouse_click"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_INTERACTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mouse_click</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mouse_click</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>mouse_up</name></expr></argument>, <argument><expr><name>click_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_send_mouse_move</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_mouse_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>mouse_leave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_send_mouse_move"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_INTERACTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mouse_move</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mouse_move</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name>mouse_leave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_send_mouse_wheel</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_mouse_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_delta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_send_mouse_wheel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_INTERACTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mouse_wheel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mouse_wheel</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name>x_delta</name></expr></argument>, <argument><expr><name>y_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_send_focus</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>focus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_send_focus"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_INTERACTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>focus</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>focus</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>focus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_send_key_click</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_key_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>key_up</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_send_key_click"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_INTERACTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>key_click</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>key_click</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name>key_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>activate_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>activate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>activate</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_activate"</literal></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deactivate_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>deactivate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>deactivate</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_deactivate"</literal></expr></argument>, <argument><expr><literal type="string">"deactivate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>show</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_show"</literal></expr></argument>, <argument><expr><literal type="string">"show"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hide_source</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hide</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hide</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_hide"</literal></expr></argument>, <argument><expr><literal type="string">"hide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>activate_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deactivate_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>show_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hide_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>show_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_activate</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>view_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_activate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>show_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_enum_active_tree</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>show_tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_enum_active_tree</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>activate_tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_deactivate</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>view_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_deactivate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>show_refs</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>show_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_enum_active_tree</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>hide_tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_load_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_enum_active_tree</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>deactivate_tree</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>get_closest_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>set_async_texture_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>async_tick</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sys_time</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>deinterlacing_enabled</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>deinterlace_process_last_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sys_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <call><name>get_closest_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sys_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_sys_timestamp</name></name> <operator>=</operator> <name>sys_time</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_update_texture</name></name> <operator>=</operator>
<call><name>set_async_texture_size</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_video_tick</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>now_showing</name></decl>, <decl><type ref="prev"/><name>now_active</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_video_tick"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_tick</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>async_tick</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>defer_update</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_deferred_update</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_texrender_reset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>now_showing</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>show_refs</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>now_showing</name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>showing</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>now_showing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>hide_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name> <init>=
<expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now_showing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_source</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>hide_source</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>showing</name></name> <operator>=</operator> <name>now_showing</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>now_active</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>now_active</name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>now_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>activate_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>deactivate_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name> <init>=
<expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>activate_source</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>deactivate_source</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>now_active</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>video_tick</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>video_tick</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_rendered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>deinterlace_rendered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>conv_frames_to_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sample_rate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>frames</name> <operator>*</operator> <literal type="number">1000000000ULL</literal> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>conv_time_to_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sample_rate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>duration</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name> <operator>/</operator> <literal type="number">1000000000ULL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUF_SIZE</name></cpp:macro> <cpp:value>(1000 * AUDIO_OUTPUT_FRAMES * sizeof(float))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_SMOOTHING_THRESHOLD</name></cpp:macro> <cpp:value>70000000ULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_audio_timing</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>os_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name> <operator>=</operator> <name>os_time</name> <operator>-</operator> <name>timestamp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_audio_data</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>os_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>=</operator> <name>os_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_sys_ts_min</name></name> <operator>=</operator> <name>os_time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_ts_jump</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>os_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Timestamp for source '%s' jumped by '%"</literal> <name>PRIu64</name> <literal type="string">"', "</literal>
<literal type="string">"expected value %"</literal> <name>PRIu64</name> <literal type="string">", input value %"</literal> <name>PRIu64</name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_audio_timing</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>os_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>source_signal_audio_data</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_cb_list</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_cb_info</name></name></type> <name>info</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_cb_list</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>muted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>uint64_diff</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ts1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ts1</name> <operator>&lt;</operator> <name>ts2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>ts2</name> <operator>-</operator> <name>ts1</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>ts1</name> <operator>-</operator> <name>ts2</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>get_buf_placement</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample_rate</name> <init>= <expr><call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>sample_rate</name> <operator>/</operator> <literal type="number">1000000000ULL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>source_output_audio_place</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_placement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>channels</name> <init>= <expr><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>||</operator> <name><name>in</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reset_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_placement</name> <operator>=</operator>
<call><name>get_buf_placement</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_AUDIO</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"frames: %lu, size: %lu, placement: %lu, base_ts: %llu, ts: %llu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>buf_placement</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_placement</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_BUF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>circlebuf_place</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf_placement</name></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circlebuf_pop_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-</operator>
<operator>(</operator><name>buf_placement</name> <operator>+</operator> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>source_output_audio_push_back</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>channels</name> <init>= <expr><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_BUF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_input_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>source_muted</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>os_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>user_push_to_mute_pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_stop_time</name></name> <operator>=</operator>
<name>os_time</name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_delay</name></name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>user_push_to_talk_pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_stop_time</name></name> <operator>=</operator>
<name>os_time</name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_delay</name></name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>push_to_mute_active</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>user_push_to_mute_pressed</name></name> <operator>||</operator>
<name>os_time</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_stop_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>push_to_talk_active</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>user_push_to_talk_pressed</name></name> <operator>||</operator>
<name>os_time</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_stop_time</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>user_muted</name></name> <operator>||</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name> <operator>&amp;&amp;</operator> <name>push_to_mute_active</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>push_to_talk_active</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>source_output_audio_data</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sample_rate</name> <init>= <expr><call><name>audio_output_get_sample_rate</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_data</name></name></type> <name>in</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>os_time</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sync_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>using_direct_ts</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>push_back</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>uint64_diff</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>os_time</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAX_TS_VAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using_direct_ts</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>timing_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reset_audio_timing</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>os_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_ts_min</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>uint64_diff</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_ts_min</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <name>MAX_TS_VAR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>using_direct_ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_ts_jump</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_ts_min</name></name></expr></argument>,
<argument><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>os_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>TS_SMOOTHING_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_decoupled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name> <operator>=</operator> <name>os_time</name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>next_audio_ts_min</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_audio_ts</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_ts_min</name></name> <operator>=</operator>
<name><name>in</name><operator>.</operator><name>timestamp</name></name> <operator>+</operator> <call><name>conv_frames_to_time</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name> <operator>+=</operator> <name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_sys_ts_min</name></name> <operator>==</operator> <name><name>in</name><operator>.</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>push_back</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_sys_ts_min</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>uint64_diff</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_sys_ts_min</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>TS_SMOOTHING_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>push_back</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>







</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <name>MAX_TS_VAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reset_audio_timing</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>os_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sync_offset</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>sync_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name> <operator>+=</operator> <name>sync_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>timestamp</name></name> <operator>-=</operator> <name><name>source</name><operator>-&gt;</operator><name>resample_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>next_audio_sys_ts_min</name></name> <operator>=</operator>
<name><name>source</name><operator>-&gt;</operator><name>next_audio_ts_min</name></name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>last_sync_offset</name></name> <operator>!=</operator> <name>sync_offset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>last_sync_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_back</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_sync_offset</name></name> <operator>=</operator> <name>sync_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>monitoring_type</name></name> <operator>!=</operator> <name>OBS_MONITORING_TYPE_MONITOR_ONLY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>push_back</name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>source_output_audio_push_back</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>source_output_audio_place</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>source_signal_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>source_muted</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>os_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<enum>enum <name>convert_type</name> <block>{
<decl><name>CONVERT_NONE</name></decl>,
<decl><name>CONVERT_NV12</name></decl>,
<decl><name>CONVERT_420</name></decl>,
<decl><name>CONVERT_420_A</name></decl>,
<decl><name>CONVERT_422</name></decl>,
<decl><name>CONVERT_422_A</name></decl>,
<decl><name>CONVERT_422_PACK</name></decl>,
<decl><name>CONVERT_444</name></decl>,
<decl><name>CONVERT_444_A</name></decl>,
<decl><name>CONVERT_444_A_PACK</name></decl>,
<decl><name>CONVERT_800</name></decl>,
<decl><name>CONVERT_RGB_LIMITED</name></decl>,
<decl><name>CONVERT_BGR3</name></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>convert_type</name></name></type> <name>get_convert_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>full_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>
<return>return <expr><name>CONVERT_420</name></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>
<return>return <expr><name>CONVERT_NV12</name></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>
<return>return <expr><name>CONVERT_444</name></expr>;</return>
<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>
<return>return <expr><name>CONVERT_422</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<return>return <expr><name>CONVERT_422_PACK</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<return>return <expr><name>CONVERT_800</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name>full_range</name></expr> ?</condition><then> <expr><name>CONVERT_NONE</name></expr> </then><else>: <expr><name>CONVERT_RGB_LIMITED</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>
<return>return <expr><name>CONVERT_BGR3</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>
<return>return <expr><name>CONVERT_420_A</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>
<return>return <expr><name>CONVERT_422_A</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>
<return>return <expr><name>CONVERT_444_A</name></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>
<return>return <expr><name>CONVERT_444_A_PACK</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>CONVERT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_packed422_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_BGRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>set_packed444_alpha_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_BGRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_planar444_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>set_planar444_alpha_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_planar420_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>set_planar420_alpha_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_planar422_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>set_planar422_alpha_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_nv12_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8G8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_y800_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_rgb_limited_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>convert_video_format</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_bgr3_sizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GS_R8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>init_gpu_conversion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>get_convert_type</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONVERT_422_PACK</name></expr>:</case>
<return>return <expr><call><name>set_packed422_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_420</name></expr>:</case>
<return>return <expr><call><name>set_planar420_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_422</name></expr>:</case>
<return>return <expr><call><name>set_planar422_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_NV12</name></expr>:</case>
<return>return <expr><call><name>set_nv12_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_444</name></expr>:</case>
<return>return <expr><call><name>set_planar444_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_800</name></expr>:</case>
<return>return <expr><call><name>set_y800_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_RGB_LIMITED</name></expr>:</case>
<return>return <expr><call><name>set_rgb_limited_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_BGR3</name></expr>:</case>
<return>return <expr><call><name>set_bgr3_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_420_A</name></expr>:</case>
<return>return <expr><call><name>set_planar420_alpha_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_422_A</name></expr>:</case>
<return>return <expr><call><name>set_planar422_alpha_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_444_A</name></expr>:</case>
<return>return <expr><call><name>set_planar444_alpha_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_444_A_PACK</name></expr>:</case>
<return>return <expr><call><name>set_packed444_alpha_sizes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CONVERT_NONE</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"No conversion requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_async_texture_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>convert_type</name></name></type> <name>cur</name> <init>=
<expr><call><name>get_convert_type</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>async_height</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>async_format</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>async_full_range</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_full_range</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enter_context</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>graphics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_textures</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_texrender_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_prev_texrender</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name> <init>= <expr><call><name>convert_video_format</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>async_gpu_conversion</name> <init>= <expr><operator>(</operator><name>cur</name> <operator>!=</operator> <name>CONVERT_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>init_gpu_conversion</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_gpu_conversion</name></name> <operator>=</operator> <name>async_gpu_conversion</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>async_gpu_conversion</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name> <operator>=</operator>
<call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_channel_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>gs_texture_create</name><argument_list>(
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_width</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_convert_height</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texture_formats</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<call><name>gs_texture_create</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>deinterlacing_enabled</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_deinterlace_texture_size</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_leave_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upload_raw_frame</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>tex</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>get_convert_type</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONVERT_422_PACK</name></expr>:</case>
<case>case <expr><name>CONVERT_800</name></expr>:</case>
<case>case <expr><name>CONVERT_RGB_LIMITED</name></expr>:</case>
<case>case <expr><name>CONVERT_BGR3</name></expr>:</case>
<case>case <expr><name>CONVERT_420</name></expr>:</case>
<case>case <expr><name>CONVERT_422</name></expr>:</case>
<case>case <expr><name>CONVERT_NV12</name></expr>:</case>
<case>case <expr><name>CONVERT_444</name></expr>:</case>
<case>case <expr><name>CONVERT_420_A</name></expr>:</case>
<case>case <expr><name>CONVERT_422_A</name></expr>:</case>
<case>case <expr><name>CONVERT_444_A</name></expr>:</case>
<case>case <expr><name>CONVERT_444_A_PACK</name></expr>:</case>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_texture_set_image</name><argument_list>(<argument><expr><name><name>tex</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><name>CONVERT_NONE</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"No conversion requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>select_conversion_technique</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_format</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>full_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<return>return <expr><literal type="string">"UYVY_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<return>return <expr><literal type="string">"YUY2_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<return>return <expr><literal type="string">"YVYU_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>
<return>return <expr><literal type="string">"I420_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>
<return>return <expr><literal type="string">"NV12_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>
<return>return <expr><literal type="string">"I444_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name>full_range</name></expr> ?</condition><then> <expr><literal type="string">"Y800_Full"</literal></expr> </then><else>: <expr><literal type="string">"Y800_Limited"</literal></expr></else></ternary></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name>full_range</name></expr> ?</condition><then> <expr><literal type="string">"BGR3_Full"</literal></expr> </then><else>: <expr><literal type="string">"BGR3_Limited"</literal></expr></else></ternary></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>
<return>return <expr><literal type="string">"I422_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>
<return>return <expr><literal type="string">"I40A_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>
<return>return <expr><literal type="string">"I42A_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>
<return>return <expr><literal type="string">"YUVA_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>
<return>return <expr><literal type="string">"AYUV_Reverse"</literal></expr>;</return>

<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>full_range</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"No conversion requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="string">"RGB_Limited"</literal></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_eparam</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_effect_set_float</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_eparami</name><parameter_list>(<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_effect_set_int</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>update_async_texrender</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>tex</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GS_DEBUG_MARKER_BEGIN</name><argument_list>(<argument><expr><name>GS_DEBUG_COLOR_CONVERT_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Convert Format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texrender_reset</name><argument_list>(<argument><expr><name>texrender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>upload_raw_frame</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>conv</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>conversion_effect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech_name</name> <init>=
<expr><call><name>select_conversion_technique</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><name>tech_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>success</name> <init>= <expr><call><name>gs_texrender_begin</name><argument_list>(<argument><expr><name>texrender</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"image1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"image2"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"image3"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_eparam</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_eparam</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_eparam</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"width_d2"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name> <operator>*</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_eparam</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"height_d2"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name> <operator>*</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_eparam</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"width_x2_i"</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec0</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec1</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec4_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec2</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"color_vec0"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"color_vec1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_vec4</name><argument_list>(
<argument><expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"color_vec2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>min_param</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"color_range_min"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_effect_set_val</name><argument_list>(<argument><expr><name>min_param</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>max_param</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(
<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"color_range_max"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_effect_set_val</name><argument_list>(<argument><expr><name>max_param</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_draw</name><argument_list>(<argument><expr><name>GS_TRIS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_enable_blending</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_texrender_end</name><argument_list>(<argument><expr><name>texrender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GS_DEBUG_MARKER_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>update_async_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>tex3</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name> <init>= <expr><block>{<expr><name>tex</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>update_async_textures</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>tex3</name></expr></argument>, <argument><expr><name>texrender</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>update_async_textures</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name><name>tex</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>gs_texrender_t</name> <modifier>*</modifier></type><name>texrender</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>convert_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_flip</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>flip</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_gpu_conversion</name></name> <operator>&amp;&amp;</operator> <name>texrender</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>update_async_texrender</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><name>texrender</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_convert_type</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONVERT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_texture_set_image</name><argument_list>(<argument><expr><name><name>tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_source_draw_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tex</name> <operator>=</operator> <call><name>gs_texrender_get_texture</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>async_flip</name></name></expr> ?</condition><then> <expr><name>GS_FLIP_V</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_draw_async_texture</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>gs_get_effect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>def_draw</name> <init>= <expr><operator>(</operator><operator>!</operator><name>effect</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>def_draw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effect</name> <operator>=</operator> <call><name>obs_get_base_effect</name><argument_list>(<argument><expr><name>OBS_EFFECT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tech</name> <operator>=</operator> <call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_draw_texture</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>def_draw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recreate_async_texture</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cx</name> <init>= <expr><call><name>gs_texture_get_width</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cy</name> <init>= <expr><call><name>gs_texture_get_height</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gs_texture_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<call><name>gs_texture_create</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GS_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>check_to_swap_bgrx_bgra</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name> <init>=
<expr><call><name>gs_texture_get_color_format</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>GS_BGRX</name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_BGRA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recreate_async_texture</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>GS_BGRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <name>GS_BGRA</name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VIDEO_FORMAT_BGRX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recreate_async_texture</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>GS_BGRX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_update_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>async_rendered</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>obs_source_get_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>filter_async_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_rendered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_to_swap_bgrx_bgra</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>async_decoupled</name></name> <operator>||</operator>
<operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_adjust</name></name> <operator>=</operator> <name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>video_time</name></name> <operator>-</operator>
<name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_update_texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_async_textures</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_update_texture</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rotate_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rotation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>rotation</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">90</literal></expr>:</case>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">270</literal></expr>:</case>
<case>case <expr><operator>-</operator><literal type="number">90</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">180</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>gs_matrix_translate3f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_rotaa4f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><call><name>RAD</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>rotation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_source_render_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_active</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>rotation</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_rotation</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rotate_async_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_draw_async_texture</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rotation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_source_render_filters</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>first_filter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_filter</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>first_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>rendering_filter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name>first_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>rendering_filter</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>first_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_default_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><name><name>obs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>default_effect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>passes</name> <operator>=</operator> <call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>video_render</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>obs_source_main_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>custom_draw</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>default_effect</name> <init>= <expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>custom_draw</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>default_effect</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_default_render</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>video_render</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>custom_draw</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>gs_get_effect</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ready_async_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GS_USE_DEBUG_MARKERS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_type_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>obs_source_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_SOURCE_TYPE_INPUT</name></expr>:</case>
<return>return <expr><literal type="string">"Input: %s"</literal></expr>;</return>
<case>case <expr><name>OBS_SOURCE_TYPE_FILTER</name></expr>:</case>
<return>return <expr><literal type="string">"Filter: %s"</literal></expr>;</return>
<case>case <expr><name>OBS_SOURCE_TYPE_TRANSITION</name></expr>:</case>
<return>return <expr><literal type="string">"Transition: %s"</literal></expr>;</return>
<case>case <expr><name>OBS_SOURCE_TYPE_SCENE</name></expr>:</case>
<return>return <expr><literal type="string">"Scene: %s"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"[Unknown]: %s"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_FILTER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_VIDEO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_skip_video_filter</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_INPUT</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>rendering_filter</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>deinterlacing_enabled</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterlace_update_async_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>obs_source_update_async_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>||</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_skip_video_filter</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GS_DEBUG_MARKER_BEGIN_FORMAT</name><argument_list>(<argument><expr><name>GS_DEBUG_COLOR_SOURCE</name></expr></argument>,
<argument><expr><call><name>get_type_format</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>rendering_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_render_filters</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>video_render</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_main_render</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>filter_target</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filter_target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>deinterlacing_enabled</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterlace_render</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_render_async_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GS_DEBUG_MARKER_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_video_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_video_render"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>render_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_async_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>async_rotation</name></name> <operator>%</operator> <literal type="number">180</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name></expr>
</then><else>: <expr><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>get_async_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>async_rotation</name></name> <operator>%</operator> <literal type="number">180</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>async_height</name></name></expr>
</then><else>: <expr><name><name>source</name><operator>-&gt;</operator><name>async_width</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_base_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_filter</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>func_valid</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>transition_actual_cx</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>func_valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_filter</name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>enabled</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_width</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_filter</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>get_base_width</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filter_target</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>async_active</name></name></expr> ?</condition><then> <expr><call><name>get_async_width</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_base_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_filter</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>filter_parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>func_valid</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>transition_actual_cy</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>func_valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_filter</name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>enabled</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>get_height</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_filter</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>get_base_height</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filter_target</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>source</name><operator>-&gt;</operator><name>async_active</name></name></expr> ?</condition><then> <expr><call><name>get_async_height</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_recurse_width</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_base_width</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>get_base_width</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>width</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_recurse_height</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>get_base_height</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>get_base_height</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>height</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_width</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_FILTER</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>get_recurse_width</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>get_base_width</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_height</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>OBS_SOURCE_TYPE_FILTER</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>get_recurse_height</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>get_base_height</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_base_width</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_base_width"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_base_width</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_base_height</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_base_height"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_base_height</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_filter_get_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_filter_get_parent"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>filter</name><operator>-&gt;</operator><name>filter_parent</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_filter_get_target</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_filter_get_target"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>filter</name><operator>-&gt;</operator><name>filter_target</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBS_SOURCE_AV</name></cpp:macro> <cpp:value>(OBS_SOURCE_ASYNC_VIDEO | OBS_SOURCE_AUDIO)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>filter_compatible</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s_caps</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>f_caps</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AV</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f_caps</name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>f_caps</name> <operator>&amp;</operator> <name>OBS_SOURCE_VIDEO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_caps</name> <operator>&amp;=</operator> <operator>~</operator><name>OBS_SOURCE_ASYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>s_caps</name> <operator>&amp;</operator> <name>f_caps</name><operator>)</operator> <operator>==</operator> <name>f_caps</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_filter_add</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_filter_add"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_source_filter_add"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>da_find</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DARRAY_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Tried to add a filter that was already "</literal>
<literal type="string">"present on the source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filter_compatible</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_parent</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_target</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><name>source</name></expr>
</then><else>: <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_insert</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"filter_add"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"- filter '%s' (%s) added to source '%s'"</literal></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>obs_source_filter_remove_refless</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>da_find</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>filter_target</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>filter_target</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"filter_remove"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"- filter '%s' (%s) removed from source '%s'"</literal></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filter_remove</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filter_remove</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_filter_remove</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_filter_remove"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_source_filter_remove"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>obs_source_filter_remove_refless</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>find_next_filter</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>cur_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>curAsync</name> <init>= <expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nextAsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_idx</name> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DARRAY_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>cur_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextAsync</name> <operator>=</operator> <operator>(</operator><name><name>next</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nextAsync</name> <operator>==</operator> <name>curAsync</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cur_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>find_next_filter</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cur_idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>find_prev_filter</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>cur_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>curAsync</name> <init>= <expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prevAsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DARRAY_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>cur_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevAsync</name> <operator>=</operator> <operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prevAsync</name> <operator>==</operator> <name>curAsync</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cur_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>find_prev_filter</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cur_idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>move_filter_dir</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_order_movement</name></name></type> <name>movement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>da_find</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_UP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>next_id</name> <init>= <expr><call><name>find_next_filter</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next_id</name> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>da_move_item</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>next_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_DOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>prev_id</name> <init>= <expr><call><name>find_prev_filter</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_id</name> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>da_move_item</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>prev_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_TOP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>da_move_item</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>movement</name> <operator>==</operator> <name>OBS_ORDER_MOVE_BOTTOM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>da_move_item</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>next_filter</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>
?</condition><then> <expr><name>source</name></expr>
</then><else>: <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter_target</name> <operator>=</operator> <name>next_filter</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_filter_set_order</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_order_movement</name></name></type> <name>movement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_filter_set_order"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_source_filter_set_order"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>move_filter_dir</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>movement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"reorder_filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_source_get_settings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>filter_async_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filter_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filter_video</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_frame_data_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_src</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos_dst</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes</name> <init>= <expr><ternary><condition><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>
?</condition><then> <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>
</then><else>: <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>pos_dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>pos_src</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_frame_data_plane</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>!=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_frame_data_line</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_frame_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flip</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>flip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>full_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>full_range</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_FORMAT_I420</name></expr>:</case>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_FORMAT_NV12</name></expr>:</case>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_FORMAT_I444</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_I422</name></expr>:</case>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_FORMAT_YVYU</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUY2</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_UYVY</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_NONE</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_RGBA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRA</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGRX</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_Y800</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_BGR3</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_AYUV</name></expr>:</case>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_FORMAT_I40A</name></expr>:</case>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_FORMAT_I42A</name></expr>:</case>
<case>case <expr><name>VIDEO_FORMAT_YUVA</name></expr>:</case>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_frame_data_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_frame_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_frame_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>async_texture_changed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>convert_type</name></name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>get_convert_type</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_format</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_full_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_convert_type</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_width</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name><name>source</name><operator>-&gt;</operator><name>async_cache_height</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name>prev</name> <operator>!=</operator> <name>cur</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_async_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_frame_decref</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_resize</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>prev_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_UNUSED_FRAME_DURATION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_cache</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>async_frame</name></name> <modifier>*</modifier></type><name>af</name> <init>= <expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>af</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>af</name><operator>-&gt;</operator><name>unused_count</name></name> <operator>==</operator> <name>MAX_UNUSED_FRAME_DURATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name></name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ASYNC_FRAMES</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type>
<name>cache_video</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>new_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>&gt;=</operator> <name>MAX_ASYNC_FRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_async_cache</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>async_texture_changed</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_async_cache</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>video_format</name></name></type> <name>format</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache_full_range</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>full_range</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>async_frame</name></name> <modifier>*</modifier></type><name>af</name> <init>= <expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>af</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_frame</name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>af</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>af</name><operator>-&gt;</operator><name>unused_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>clean_cache</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>async_frame</name></name></type> <name>new_af</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_frame</name> <operator>=</operator> <call><name>obs_source_frame_create</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_af</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <name>new_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_af</name><operator>.</operator><name>used</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_af</name><operator>.</operator><name>unused_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_af</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_frame_data</name><argument_list>(<argument><expr><name>new_frame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>obs_source_output_video_internal</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_output_video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><ternary><condition><expr><operator>!</operator><operator>!</operator><name>frame</name></expr> ?</condition><then> <expr><call><name>cache_video</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_output_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_output_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name></type> <name>new_frame</name> <init>= <expr><operator>*</operator><name>frame</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>full_range</name></name> <operator>=</operator>
<ternary><condition><expr><call><name>format_is_yuv</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>new_frame</name><operator>.</operator><name>full_range</name></name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_output_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_output_video2</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame2</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_output_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name></type> <name>new_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name> <init>=
<expr><call><name>resolve_video_range</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>full_range</name></name> <operator>=</operator> <name>range</name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>flip</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>flip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>.</operator><name>color_matrix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>.</operator><name>color_range_min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>.</operator><name>color_range_max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_output_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_async_rotation</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rotation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_rotation</name></name> <operator>=</operator> <name>rotation</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>preload_frame_changed</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<name><name>in</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>obs_source_preload_video_internal</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_preload_video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_enter_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>preload_frame_changed</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name> <operator>=</operator> <call><name>obs_source_frame_create</name><argument_list>(
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>copy_frame_data</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_async_texture_size</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_async_textures</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_preload_frame</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_textures</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_leave_graphics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_preload_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_preload_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name></type> <name>new_frame</name> <init>= <expr><operator>*</operator><name>frame</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>full_range</name></name> <operator>=</operator>
<ternary><condition><expr><call><name>format_is_yuv</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>new_frame</name><operator>.</operator><name>full_range</name></name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_preload_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_preload_video2</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_frame2</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_preload_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name></type> <name>new_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name> <init>=
<expr><call><name>resolve_video_range</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>full_range</name></name> <operator>=</operator> <name>range</name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_frame</name><operator>.</operator><name>flip</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>flip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>.</operator><name>color_matrix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>.</operator><name>color_range_min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_min</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_frame</name><operator>.</operator><name>color_range_max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range_max</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_preload_video_internal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_show_preloaded_video</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sys_ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_show_preloaded_video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_ts</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>monitoring_type</name></name> <operator>!=</operator> <name>OBS_MONITORING_TYPE_MONITOR_ONLY</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_audio_timing</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr></argument>, <argument><expr><name>sys_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sys_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type>
<name>filter_async_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filter_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>filter</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filter_audio</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_resampler</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>obs_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>output_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obs_info</name> <operator>=</operator> <call><name>audio_output_get_info</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_info</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>obs_info</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_info</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>obs_info</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_info</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <name><name>obs_info</name><operator>-&gt;</operator><name>speakers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>speakers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>resample_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>samples_per_sec</name></name> <operator>==</operator> <name><name>obs_info</name><operator>-&gt;</operator><name>samples_per_sec</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name><name>obs_info</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator>
<name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>speakers</name></name> <operator>==</operator> <name><name>obs_info</name><operator>-&gt;</operator><name>speakers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator>
<call><name>audio_resampler_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>sample_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_failed</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>resampler</name></name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"creation of resampler failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_audio_data</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>data</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>frames</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>planes</name> <init>= <expr><call><name>audio_output_get_planes</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blocksize</name> <init>= <expr><call><name>audio_output_get_block_size</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>frames</name> <operator>*</operator> <name>blocksize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>resize</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_storage_size</name></name> <operator>&lt;</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>resize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>resize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_storage_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>downmix_to_mono_planar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>channels</name> <init>= <expr><call><name>audio_output_get_channels</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>channels_i</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>channels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>channel</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*=</operator> <name>channels_i</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>channel</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_audio_balancing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>frames</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>balance</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>obs_balance_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>audio_data</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBS_BALANCE_TYPE_SINE_LAW</name></expr>:</case>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*</operator>
<call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>balance</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>M_PI</name> <operator>/</operator> <literal type="number">2.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator>
<name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>balance</name> <operator>*</operator> <operator>(</operator><name>M_PI</name> <operator>/</operator> <literal type="number">2.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>OBS_BALANCE_TYPE_SQUARE_LAW</name></expr>:</case>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>OBS_BALANCE_TYPE_LINEAR</name></expr>:</case>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>balance</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>frame</name></expr>]</index></name> <operator>*</operator> <name>balance</name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>process_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frames</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>frames</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mono_output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>samples_per_sec</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>samples_per_sec</name></name> <operator>||</operator>
<name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>format</name></name> <operator>||</operator>
<name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>speakers</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>speakers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reset_resampler</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_failed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>audio_resampler_resample</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>resample_offset</name></name></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name>output</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>,
<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>,
<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mono_output</name> <operator>=</operator> <call><name>audio_output_get_channels</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mono_output</name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>speakers</name></name> <operator>==</operator> <name>SPEAKERS_STEREO</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>balance</name></name> <operator>&gt;</operator> <literal type="number">0.51f</literal> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>balance</name></name> <operator>&lt;</operator> <literal type="number">0.49f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_audio_balancing</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>balance</name></name></expr></argument>,
<argument><expr><name>OBS_BALANCE_TYPE_SINE_LAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mono_output</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_FLAG_FORCE_MONO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>downmix_to_mono_planar</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_output_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_audio</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_audio_data</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_output_audio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><literal type="string">"obs_source_output_audio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>process_audio</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>filter_async_audio</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>source_output_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_async_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>async_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_cache</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>frame</name></name> <operator>==</operator> <name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>ready_async_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>next_frame</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sys_offset</name> <init>= <expr><name>sys_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_sys_timestamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_time</name> <init>= <expr><name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>next_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_frame</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ASYNC_FRAMES</name></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"source-&gt;last_frame_ts: %llu, frame_time: %llu, "</literal>
<literal type="string">"sys_offset: %llu, frame_offset: %llu, "</literal>
<literal type="string">"number of frames: %lu"</literal></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr></argument>, <argument><expr><name>frame_time</name></expr></argument>, <argument><expr><name>sys_offset</name></expr></argument>,
<argument><expr><name>frame_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>frame_out_of_bounds</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame_time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ASYNC_FRAMES</name></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"timing jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>frame_offset</name> <operator>=</operator> <name>frame_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>+=</operator> <name>sys_offset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>&gt;</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>-</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2000000</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ASYNC_FRAMES</name></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"new frame, "</literal>
<literal type="string">"source-&gt;last_frame_ts: %llu, "</literal>
<literal type="string">"next_frame-&gt;timestamp: %llu"</literal></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr></argument>, <argument><expr><name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name>next_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_frame</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name>frame_time</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_TS_VAR</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ASYNC_FRAMES</name></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"timing jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator>
<name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name>frame_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_time</name> <operator>=</operator> <name><name>next_frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_offset</name> <operator>=</operator> <name>frame_time</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ASYNC_FRAMES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"no frame!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>frame</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>get_closest_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>sys_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>||</operator> <call><name>ready_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sys_time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>async_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_frame_ts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>obs_source_get_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_frame"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>cur_async_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_atomic_inc_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_release_frame</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_dec_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_frame_destroy</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_async_frame</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_source_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_name"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_name</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name> <operator>||</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev_name</name> <init>= <expr><call><name>bstrdup</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obs_context_data_setname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"new_name"</literal></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"prev_name"</literal></expr></argument>, <argument><expr><name>prev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"source_rename"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>prev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_source_type</name></name></type> <name>obs_source_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_type"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>
</then><else>: <expr><name>OBS_SOURCE_TYPE_INPUT</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_source_get_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_id"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obs_source_get_unversioned_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_unversioned_id"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>unversioned_id</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_filter_bypass</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>tech_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>passes</name> <operator>=</operator> <call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_filter_tex</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_technique_t</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><call><name>gs_effect_get_technique</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><name>tech_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>passes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passes</name> <operator>=</operator> <call><name>gs_technique_begin</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>passes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gs_technique_begin_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_technique_end_pass</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>gs_technique_end</name><argument_list>(<argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>can_bypass</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>parent_flags</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_allow_direct_render</name></name></type> <name>allow_direct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>target</name> <operator>==</operator> <name>parent</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>allow_direct</name> <operator>==</operator> <name>OBS_ALLOW_DIRECT_RENDERING</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>parent_flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>parent_flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_process_filter_begin</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>gs_color_format</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_allow_direct_render</name></name></type> <name>allow_direct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>parent_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_source_process_filter_begin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>obs_filter_get_target</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>obs_filter_get_parent</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"filter '%s' being processed with no target!"</literal></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"filter '%s' being processed with no parent!"</literal></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>parent_flags</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>get_base_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <call><name>get_base_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>allow_direct</name></name> <operator>=</operator> <name>allow_direct</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>can_bypass</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>parent_flags</name></expr></argument>, <argument><expr><name>allow_direct</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cx</name> <operator>||</operator> <operator>!</operator><name>cy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_skip_video_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_texrender</name></name> <operator>=</operator>
<call><name>gs_texrender_create</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>GS_ZS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gs_blend_state_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_blend_function</name><argument_list>(<argument><expr><name>GS_BLEND_ONE</name></expr></argument>, <argument><expr><name>GS_BLEND_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gs_texrender_begin</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>custom_draw</name> <init>= <expr><operator>(</operator><name>parent_flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>async</name> <init>= <expr><operator>(</operator><name>parent_flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec4</name></name></type> <name>clear_color</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec4_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clear_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_clear</name><argument_list>(<argument><expr><name>GS_CLEAR_COLOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_color</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_ortho</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cx</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>cy</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>parent</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>custom_draw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>async</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_default_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gs_texrender_end</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_blend_state_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_process_filter_tech_end</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>parent_flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>obs_filter_get_target</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>obs_filter_get_parent</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name>parent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent_flags</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tech</name> <init>= <expr><ternary><condition><expr><name>tech_name</name></expr> ?</condition><then> <expr><name>tech_name</name></expr> </then><else>: <expr><literal type="string">"Draw"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_bypass</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>parent_flags</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>allow_direct</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>render_filter_bypass</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>texture</name> <operator>=</operator> <call><name>gs_texrender_get_texture</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_texrender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>texture</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>render_filter_tex</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>tech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_process_filter_end</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_source_process_filter_end"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_process_filter_tech_end</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><literal type="string">"Draw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_skip_video_filter</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>custom_draw</name></decl>, <decl><type ref="prev"/><name>async</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>parent_flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"obs_source_skip_video_filter"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>obs_filter_get_target</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>obs_filter_get_parent</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_flags</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>custom_draw</name> <operator>=</operator> <operator>(</operator><name>parent_flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_CUSTOM_DRAW</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>async</name> <operator>=</operator> <operator>(</operator><name>parent_flags</name> <operator>&amp;</operator> <name>OBS_SOURCE_ASYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>parent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>custom_draw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>async</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_default_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>video_render</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_main_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>deinterlacing_enabled</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterlace_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_render_async_video</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>obs_source_video_render</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>signal_handler_t</name> <modifier>*</modifier></type><name>obs_source_get_signal_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_signal_handler"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>proc_handler_t</name> <modifier>*</modifier></type><name>obs_source_get_proc_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_proc_handler"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>procs</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_volume</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_volume"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_action</name></name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AUDIO_ACTION_VOL</name></expr>,
<expr><operator>.</operator><name>vol</name> <operator>=</operator> <name>volume</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>private</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>obs</name><operator>-&gt;</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"source_volume"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>volume</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>calldata_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>user_volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>obs_source_get_volume</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_volume"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>user_volume</name></name></expr>
</then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_sync_offset</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_sync_offset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"audio_sync"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>sync_offset</name></name> <operator>=</operator> <call><name>calldata_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>obs_source_get_sync_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_sync_offset"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>sync_offset</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>source_enum_data</name> <block>{
<decl_stmt><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enum_source_active_tree_callback</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>source_enum_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_transition</name> <init>= <expr><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_transition</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_enum_sources</name><argument_list>(
<argument><expr><name>child</name></expr></argument>, <argument><expr><name>enum_source_active_tree_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(
<argument><expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_source_active_tree_callback</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>enum_callback</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_enum_active_sources</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_transition</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enum_active_sources"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_transition</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_transition</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_transition</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_enum_sources</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>enum_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_enum_active_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>source_enum_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><name>enum_callback</name></expr>, <expr><name>param</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_transition</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enum_active_tree"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_transition</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_transition</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_enum_sources</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>enum_source_active_tree_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>enum_source_active_tree_callback</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enum_source_full_tree_callback</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>source_enum_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_transition</name> <init>= <expr><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_transition</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_enum_sources</name><argument_list>(
<argument><expr><name>child</name></expr></argument>, <argument><expr><name>enum_source_full_tree_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_all_sources</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(
<argument><expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_source_full_tree_callback</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>child</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(
<argument><expr><name><name>child</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_source_full_tree_callback</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>enum_callback</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>obs_source_enum_full_tree</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>enum_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>source_enum_data</name></name></type> <name>data</name> <init>= <expr><block>{<expr><name>enum_callback</name></expr>, <expr><name>param</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_transition</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enum_active_tree"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_transition</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_transition</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>OBS_SOURCE_TYPE_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_transition_enum_sources</name><argument_list>(
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>enum_source_full_tree_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_all_sources</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_all_sources</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_source_full_tree_callback</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>enum_active_sources</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>enum_source_full_tree_callback</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_release</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>descendant_info</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>exists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_descendant</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>descendant_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>||</operator> <name>parent</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>exists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_add_active_child</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>descendant_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><name>false</name></expr>, <expr><name>parent</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"obs_source_add_active_child"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="string">"obs_source_add_active_child"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs_source_add_active_child: "</literal>
<literal type="string">"parent == child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_enum_full_tree</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>check_descendant</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>show_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>view_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>activate_refs</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>MAIN_VIEW</name></expr> </then><else>: <expr><name>AUX_VIEW</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_activate</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_remove_active_child</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"obs_source_remove_active_child"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="string">"obs_source_remove_active_child"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>show_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>view_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>activate_refs</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>MAIN_VIEW</name></expr> </then><else>: <expr><name>AUX_VIEW</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_deactivate</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_save</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_save"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_save"</literal></expr></argument>, <argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_load</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>data_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_load"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>load</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_load"</literal></expr></argument>, <argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_active"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>activate_refs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_showing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_showing"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>show_refs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>signal_flags_updated</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"update_flags"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_flags</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_flags"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_flags_updated</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_default_flags</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_default_flags"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>default_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_flags"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>flags</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_audio_mixers</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_audio_mixers"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>==</operator> <name>mixers</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"mixers"</literal></expr></argument>, <argument><expr><name>mixers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"audio_mixers"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mixers</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>calldata_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"mixers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>=</operator> <name>mixers</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_audio_mixers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_audio_mixers"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_draw_set_color_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>matrix4</name></name> <modifier>*</modifier></type><name>color_matrix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>color_range_min</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vec3</name></name> <modifier>*</modifier></type><name>color_range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>color_range_min_def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>color_range_max_def</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_range_min_def</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_range_max_def</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>gs_get_effect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>range_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>range_max</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs_source_draw_set_color_matrix: no "</literal>
<literal type="string">"active effect!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>color_matrix</name></expr></argument>, <argument><expr><literal type="string">"obs_source_draw_set_color_matrix"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>color_range_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color_range_min</name> <operator>=</operator> <operator>&amp;</operator><name>color_range_min_def</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>color_range_max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color_range_max</name> <operator>=</operator> <operator>&amp;</operator><name>color_range_max_def</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>matrix</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"color_matrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range_min</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"color_range_min"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range_max</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"color_range_max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gs_effect_set_matrix4</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>color_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_val</name><argument_list>(<argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>color_range_min</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_val</name><argument_list>(<argument><expr><name>range_max</name></expr></argument>, <argument><expr><name>color_range_max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_draw</name><parameter_list>(<parameter><decl><type><name>gs_texture_t</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gs_effect_t</name> <modifier>*</modifier></type><name>effect</name> <init>= <expr><call><name>gs_get_effect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>change_pos</name> <init>= <expr><operator>(</operator><name>x</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gs_eparam_t</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"obs_source_draw: no active effect!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><literal type="string">"obs_source_draw"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>gs_effect_get_param_by_name</name><argument_list>(<argument><expr><name>effect</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_effect_set_texture</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>change_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gs_matrix_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gs_matrix_translate3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gs_draw_sprite</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flip</name></expr> ?</condition><then> <expr><name>GS_FLIP_V</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>change_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gs_matrix_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_inc_showing</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_inc_showing"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_activate</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>AUX_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_inc_active</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_inc_active"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_activate</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>MAIN_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_dec_showing</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_dec_showing"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_deactivate</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>AUX_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_dec_active</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_dec_active"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_deactivate</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>MAIN_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_enum_filters</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_enum_proc_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enum_filters"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enum_filters"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>obs_source_t</name> <modifier>*</modifier></type><name>obs_source_get_filter_by_name</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_filter_by_name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_filter_by_name"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source</name></name> <modifier>*</modifier></type><name>cur_filter</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>filters</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur_filter</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>cur_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obs_source_addref</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>filter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enabled"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_enabled</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_enabled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_muted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_muted"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>user_muted</name></name></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_muted</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_action</name></name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AUDIO_ACTION_MUTE</name></expr>,
<expr><operator>.</operator><name>set</name> <operator>=</operator> <name>muted</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_muted"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>user_muted</name></name> <operator>=</operator> <name>muted</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"muted"</literal></expr></argument>, <argument><expr><name>muted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><literal type="string">"mute"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>source_signal_push_to_changed</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>source_signal_push_to_delay</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>calldata</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calldata_init_fixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calldata_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"delay"</literal></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_handler_signal</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>signals</name></name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_push_to_mute_enabled</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_push_to_mute_enabled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>enabled</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_enable_push_to_mute</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enable_push_to_mute"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name> <operator>!=</operator> <name>enabled</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_get_output_flags</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name> <operator>&amp;&amp;</operator> <name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"source '%s' %s push-to-mute"</literal></expr></argument>,
<argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>source_signal_push_to_changed</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"push_to_mute_changed"</literal></expr></argument>,
<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>obs_source_get_push_to_mute_delay</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>delay</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_push_to_mute_delay"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_delay</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>delay</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_push_to_mute_delay</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_push_to_mute_delay"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>source_signal_push_to_delay</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"push_to_mute_delay"</literal></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_push_to_talk_enabled</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_push_to_talk_enabled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>enabled</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_enable_push_to_talk</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_enable_push_to_talk"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name> <operator>!=</operator> <name>enabled</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>obs_source_get_output_flags</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>OBS_SOURCE_AUDIO</name> <operator>&amp;&amp;</operator> <name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"source '%s' %s push-to-talk"</literal></expr></argument>,
<argument><expr><call><name>obs_source_get_name</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>source_signal_push_to_changed</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"push_to_talk_changed"</literal></expr></argument>,
<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>obs_source_get_push_to_talk_delay</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>delay</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_push_to_talk_delay"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_delay</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>delay</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_push_to_talk_delay</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_push_to_talk_delay"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>source_signal_push_to_delay</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"push_to_talk_delay"</literal></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>obs_source_get_type_data</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_type_data"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type_data</name></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_source_volume</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>os_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_stop_time</name></name> <operator>=</operator>
<name>os_time</name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_delay</name></name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_pressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_stop_time</name></name> <operator>=</operator>
<name>os_time</name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_delay</name></name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>push_to_mute_active</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_pressed</name></name> <operator>||</operator>
<name>os_time</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_mute_stop_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>push_to_talk_active</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_pressed</name></name> <operator>||</operator>
<name>os_time</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>push_to_talk_stop_time</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>muted</name> <init>= <expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>enabled</name></name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>muted</name></name> <operator>||</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_enabled</name></name> <operator>&amp;&amp;</operator> <name>push_to_mute_active</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>push_to_talk_active</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>muted</name> <operator>||</operator> <call><name>close_float</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0001f</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close_float</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0001f</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.0f</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>volume</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>multiply_output_audio</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>out</name> <operator>+</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>out</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <name>vol</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>multiply_vol_data</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vol_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>out</name> <operator>+</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>float</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name>vol_data</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>out</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <operator>*</operator><operator>(</operator><name>vol</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>apply_audio_action</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_action</name></name> <modifier>*</modifier></type><name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>action</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AUDIO_ACTION_VOL</name></expr>:</case>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>action</name><operator>-&gt;</operator><name>vol</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ACTION_MUTE</name></expr>:</case>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>muted</name></name> <operator>=</operator> <name><name>action</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ACTION_PTT</name></expr>:</case>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_talk_pressed</name></name> <operator>=</operator> <name><name>action</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ACTION_PTM</name></expr>:</case>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>push_to_mute_pressed</name></name> <operator>=</operator> <name><name>action</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_audio_actions</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vol_data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cur_vol</name> <init>= <expr><call><name>get_source_volume</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>frame_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_action</name></name></type> <name>action</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><name><name>action</name><operator>.</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_frame_num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_frame_num</name> <operator>=</operator> <call><name>conv_time_to_frames</name><argument_list>(
<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_frame_num</name> <operator>&gt;=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_actions</name></name></expr></argument>, <argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_audio_action</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_frame_num</name> <operator>&gt;</operator> <name>frame_num</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>frame_num</name> <operator>&lt;</operator> <name>new_frame_num</name></expr>;</condition> <incr><expr><name>frame_num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vol_data</name><index>[<expr><name>frame_num</name></expr>]</index></name> <operator>=</operator> <name>cur_vol</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_vol</name> <operator>=</operator> <call><name>get_source_volume</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>frame_num</name> <operator>&lt;</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>;</condition> <incr><expr><name>frame_num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vol_data</name><index>[<expr><name>frame_num</name></expr>]</index></name> <operator>=</operator> <name>cur_vol</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>multiply_vol_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>vol_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vol_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_audio_volume</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_action</name></name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>actions_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>actions_pending</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>actions_pending</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_actions</name><operator>.</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_actions_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actions_pending</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration</name> <init>=
<expr><call><name>conv_frames_to_time</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>AUDIO_OUTPUT_FRAMES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>timestamp</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>+</operator> <name>duration</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apply_audio_actions</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <call><name>get_source_volume</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vol</name> <operator>==</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vol</name> <operator>==</operator> <literal type="number">0.0f</literal> <operator>||</operator> <name>mixers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name>MAX_AUDIO_CHANNELS</name> <operator>*</operator> <name>MAX_AUDIO_MIXES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mix_and_val</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>&amp;</operator> <name>mix_and_val</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>mixers</name> <operator>&amp;</operator> <name>mix_and_val</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>multiply_output_audio</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>custom_audio_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name></type> <name>audio_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>audio_data</name><operator>.</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator>
<name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>&amp;</operator> <name>mixers</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_render</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>audio_data</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>=</operator> <ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>ts</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <operator>!</operator><name>success</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>||</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name> <operator>||</operator> <operator>!</operator><name>mixers</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mix_bit</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mixers</name> <operator>&amp;</operator> <name>mix_bit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>&amp;</operator> <name>mix_bit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>apply_audio_volume</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audio_submix</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output_data</name></name></type> <name>audio_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_audio</name></name></type> <name>audio</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>audio_data</name><operator>.</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>audio_mix_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_mix_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_mix</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio_data</name></expr></argument>,
<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>audio_data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_FORMAT_FLOAT_PLANAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <operator>(</operator>enum <name>speaker_layout</name><operator>)</operator><name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_output_audio</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>process_audio_source_tick</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>audio_submix</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>output_flags</name></name> <operator>&amp;</operator> <name>OBS_SOURCE_SUBMIX</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>circlebuf_peek_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_input_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mix_and_val</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mix</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_submix</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mix</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mixers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mix_and_val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>&amp;</operator> <name>mix_and_val</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>mixers</name> <operator>&amp;</operator> <name>mix_and_val</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>size</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>audio_submix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>audio_mixers</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>mixers</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_audio_volume</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_audio_render</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mixers</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_render</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>custom_audio_render</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>audio_mix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>audio_submix</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>process_audio_source_tick</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>mixers</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_audio_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_audio_pending"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>is_composite_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_audio_source</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>audio_pending</name></name></expr>
</then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>obs_source_get_audio_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_audio_timestamp"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>audio_ts</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_get_audio_mix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>obs_source_audio_mix</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_audio_mix"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>MAX_AUDIO_CHANNELS</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>mix</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator>
<name><name>source</name><operator>-&gt;</operator><name>audio_output_buf</name><index>[<expr><name>mix</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_add_audio_capture_callback</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>obs_source_audio_capture_t</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_cb_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><name>callback</name></expr>, <expr><name>param</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_add_audio_capture_callback"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_cb_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_remove_audio_capture_callback</name><parameter_list>(
<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>obs_source_audio_capture_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_cb_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><name>callback</name></expr>, <expr><name>param</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>,
<argument><expr><literal type="string">"obs_source_remove_audio_capture_callback"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase_item</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>audio_cb_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_cb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_monitoring_type</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>obs_monitoring_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>was_on</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>now_on</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_monitoring_type"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>monitoring_type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>was_on</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>monitoring_type</name></name> <operator>!=</operator> <name>OBS_MONITORING_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>now_on</name> <operator>=</operator> <name>type</name> <operator>!=</operator> <name>OBS_MONITORING_TYPE_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>was_on</name> <operator>!=</operator> <name>now_on</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_on</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <call><name>audio_monitor_create</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>audio_monitor_destroy</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>monitor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>monitoring_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_monitoring_type</name></name></type>
<name>obs_source_get_monitoring_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_monitoring_type"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>monitoring_type</name></name></expr>
</then><else>: <expr><name>OBS_MONITORING_TYPE_NONE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_async_unbuffered</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unbuffered</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_async_unbuffered"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name> <operator>=</operator> <name>unbuffered</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_async_unbuffered</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_async_unbuffered"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>async_unbuffered</name></name></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>obs_data_t</name> <modifier>*</modifier></type><name>obs_source_get_private_settings</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_private_settings"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_data_addref</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>private_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>private_settings</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_async_decoupled</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>decouple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_ptr_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_async_decoupled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>async_decoupled</name></name> <operator>=</operator> <name>decouple</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decouple</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>timing_set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_audio_data</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_buf_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_async_decoupled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_async_decoupled"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>async_decoupled</name></name></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>EXPORT</name> <name>void</name></type> <name>obs_enable_source_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>OBS_SOURCE_CAP_DISABLED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>output_flags</name></name> <operator>|=</operator> <name>OBS_SOURCE_CAP_DISABLED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>speaker_layout</name></name></type> <name>obs_source_get_speaker_layout</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_audio_channels"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SPEAKERS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>source</name><operator>-&gt;</operator><name>sample_info</name><operator>.</operator><name>speakers</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_balance_value</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>balance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_balance_value"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <name>balance</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>obs_source_get_balance_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_balance_value"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>balance</name></name></expr>
</then><else>: <expr><literal type="number">0.5f</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_set_audio_active</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_set_audio_active"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_atomic_set_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_active</name></name></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>active</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_audio_activate"</literal></expr></argument>,
<argument><expr><literal type="string">"audio_activate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"source_audio_deactivate"</literal></expr></argument>,
<argument><expr><literal type="string">"audio_deactivate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>obs_source_audio_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_audio_active"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>os_atomic_load_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>audio_active</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>obs_source_get_last_obs_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_get_last_obs_version"</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>source</name><operator>-&gt;</operator><name>last_obs_ver</name></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_icon_type</name></name></type> <name>obs_source_get_icon_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>obs_source_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>get_source_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>info</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>icon_type</name></name></expr> </then><else>: <expr><name>OBS_ICON_TYPE_UNKNOWN</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_play_pause</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_play_pause"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_play_pause</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_play_pause</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_pause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_play"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_restart</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_restart"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_restart</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_restart</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_restart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_stop</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_stop</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_stop</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_next</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_next"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_next</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_next</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_previous</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_previous"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_previous</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_previous</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_previous"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>obs_source_media_get_duration</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_get_duration"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_get_duration</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_get_duration</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>obs_source_media_get_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_get_time"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_get_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_get_time</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_set_time</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_set_time"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_set_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_set_time</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>obs_media_state</name></name></type> <name>obs_source_media_get_state</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_get_state"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OBS_MEDIA_STATE_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_get_state</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>source</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>media_get_state</name></name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>OBS_MEDIA_STATE_NONE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_started</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_started"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>obs_source_media_ended</name><parameter_list>(<parameter><decl><type><name>obs_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>obs_source_valid</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="string">"obs_source_media_ended"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>obs_source_dosignal</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media_ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
