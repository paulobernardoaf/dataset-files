<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\media-io\video-matrices.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/bmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video-io.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPUTE_MATRICES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graphics/matrix3.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>video_colorspace</name></name> <specifier>const</specifier></type> <name>color_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier></type> <name>Kb</name></decl>, <decl><type ref="prev"/><name>Kr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name><name>range_min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name><name>range_max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name><name>black_levels</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>float_range_min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>float_range_max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>format_info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>VIDEO_CS_601</name></expr>,
<expr><literal type="number">0.114f</literal></expr>,
<expr><literal type="number">0.299f</literal></expr>,
<expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">235</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">240</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>}</block></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPUTE_MATRICES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="number">16.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">16.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">16.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">235.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">240.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">240.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="number">1.164384f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.596027f</literal></expr>, <expr><operator>-</operator><literal type="number">0.874202f</literal></expr>, <expr><literal type="number">1.164384f</literal></expr>, <expr><operator>-</operator><literal type="number">0.391762f</literal></expr>,
<expr><operator>-</operator><literal type="number">0.812968f</literal></expr>, <expr><literal type="number">0.531668f</literal></expr>, <expr><literal type="number">1.164384f</literal></expr>, <expr><literal type="number">2.017232f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><operator>-</operator><literal type="number">1.085631f</literal></expr>,
<expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.407520f</literal></expr>, <expr><operator>-</operator><literal type="number">0.706520f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>, <expr><operator>-</operator><literal type="number">0.345491f</literal></expr>,
<expr><operator>-</operator><literal type="number">0.716948f</literal></expr>, <expr><literal type="number">0.533303f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>, <expr><literal type="number">1.778976f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><operator>-</operator><literal type="number">0.892976f</literal></expr>,
<expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>}</block></expr>}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{<expr><name>VIDEO_CS_709</name></expr>,
<expr><literal type="number">0.0722f</literal></expr>,
<expr><literal type="number">0.2126f</literal></expr>,
<expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">235</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">240</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>}</block></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPUTE_MATRICES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="number">16.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">16.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">16.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">235.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">240.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>, <expr><literal type="number">240.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="number">1.164384f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.792741f</literal></expr>, <expr><operator>-</operator><literal type="number">0.972945f</literal></expr>, <expr><literal type="number">1.164384f</literal></expr>, <expr><operator>-</operator><literal type="number">0.213249f</literal></expr>,
<expr><operator>-</operator><literal type="number">0.532909f</literal></expr>, <expr><literal type="number">0.301483f</literal></expr>, <expr><literal type="number">1.164384f</literal></expr>, <expr><literal type="number">2.112402f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><operator>-</operator><literal type="number">1.133402f</literal></expr>,
<expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.581000f</literal></expr>, <expr><operator>-</operator><literal type="number">0.793600f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>, <expr><operator>-</operator><literal type="number">0.188062f</literal></expr>,
<expr><operator>-</operator><literal type="number">0.469967f</literal></expr>, <expr><literal type="number">0.330305f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>, <expr><literal type="number">1.862906f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><operator>-</operator><literal type="number">0.935106f</literal></expr>,
<expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">0.000000f</literal></expr>, <expr><literal type="number">1.000000f</literal></expr>}</block></expr>}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_FORMATS</name></cpp:macro> <cpp:value>(sizeof(format_info) / sizeof(format_info[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPUTE_MATRICES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_matrix</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"\n% f, % f, % f, % f"</literal>
<literal type="string">"\n% f, % f, % f, % f"</literal>
<literal type="string">"\n% f, % f, % f, % f"</literal>
<literal type="string">"\n% f, % f, % f, % f"</literal></expr></argument>,
<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_matrix</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier></type> <name>Kb</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier></type> <name>Kr</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name><name>range_min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name><name>range_max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name><name>black_levels</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>matrix3</name></name></type> <name>color_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yvals</name> <init>= <expr><name><name>range_max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>range_min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uvals</name> <init>= <expr><operator>(</operator><name><name>range_max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>range_min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vvals</name> <init>= <expr><operator>(</operator><name><name>range_max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>range_min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>color_matrix</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>yvals</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>, <argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>vvals</name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>Kr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>color_matrix</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>yvals</name></expr></argument>,
<argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>uvals</name> <operator>*</operator> <operator>(</operator><name>Kb</name> <operator>-</operator> <literal type="number">1.</literal><operator>)</operator> <operator>*</operator> <name>Kb</name> <operator>/</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>Kb</name> <operator>-</operator> <name>Kr</name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>vvals</name> <operator>*</operator> <operator>(</operator><name>Kr</name> <operator>-</operator> <literal type="number">1.</literal><operator>)</operator> <operator>*</operator> <name>Kr</name> <operator>/</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>Kb</name> <operator>-</operator> <name>Kr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>color_matrix</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>yvals</name></expr></argument>, <argument><expr><literal type="number">255.</literal> <operator>/</operator> <name>uvals</name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>Kb</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vec3</name></name></type> <name>offsets</name></decl>, <decl><type ref="prev"/><name>multiplied</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec3_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offsets</name></expr></argument>, <argument><expr><operator>-</operator><name><name>black_levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>black_levels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></argument>,
<argument><expr><operator>-</operator><name><name>black_levels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec3_rotate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>multiplied</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offsets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>x</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>x</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>x</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>multiplied</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>y</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>y</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>y</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>multiplied</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>z</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>z</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>color_matrix</name><operator>.</operator><name>z</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>multiplied</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_matrix</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_matrices</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>range_min</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>range_max</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_FORMATS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>initialize_matrix</name><argument_list>(<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Kb</name></expr></argument>, <argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Kr</name></expr></argument>,
<argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>,
<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>black_levels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>initialize_matrix</name><argument_list>(<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Kb</name></expr></argument>, <argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Kr</name></expr></argument>,
<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>range_min</name></expr></argument>,
<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>range_max</name></expr></argument>,
<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>black_levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>float_range_min</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>range_min</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>float_range_max</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>range_max</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>matrices_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>full_min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>full_max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>video_format_get_parameters</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>video_colorspace</name></name></type> <name>color_space</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>video_range_type</name></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name><name>range_min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>range_max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPUTE_MATRICES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matrices_initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>initialize_matrices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matrices_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>color_space</name> <operator>==</operator> <name>VIDEO_CS_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color_space</name> <operator>=</operator> <name>VIDEO_CS_601</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_FORMATS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color_space</name> <operator>!=</operator> <name>color_space</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>full_range</name> <init>= <expr><ternary><condition><expr><name>range</name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>matrix</name><index>[<expr><name>full_range</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <name>VIDEO_RANGE_FULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>range_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>full_min</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>range_max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>range_max</name></expr></argument>, <argument><expr><name>full_max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>range_min</name></expr></argument>, <argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>float_range_min</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range_max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>range_max</name></expr></argument>, <argument><expr><name><name>format_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>float_range_max</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
