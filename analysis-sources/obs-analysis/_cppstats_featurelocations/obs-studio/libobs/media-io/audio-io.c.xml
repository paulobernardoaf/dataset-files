<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\obs-analysis\_cppstats_featurelocations\obs-studio\libobs\media-io\audio-io.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/threading.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/darray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/circlebuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/profiler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio-io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio-resampler.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>profiler_name_store_t</name> <modifier>*</modifier></type><name>obs_get_profiler_name_store</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nop</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int invalid = 0; } while (0)</cpp:value></cpp:define>




<struct>struct <name>audio_input</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>audio_convert_info</name></name></type> <name>conversion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_resampler_t</name> <modifier>*</modifier></type><name>resampler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_callback_t</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>audio_input_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>audio_resampler_destroy</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>audio_mix</name> <block>{
<macro><name>DARRAY</name><argument_list>(<argument>struct audio_input</argument>)</argument_list></macro> <expr_stmt><expr><name>inputs</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>buffer</name><index>[<expr><name>MAX_AUDIO_CHANNELS</name></expr>]</index><index>[<expr><name>AUDIO_OUTPUT_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>audio_output</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>os_event_t</name> <modifier>*</modifier></type><name>stop_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_input_callback_t</name></type> <name>input_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>input_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>input_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name></type> <name><name>mixes</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>ts_to_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>audio_offset_d</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>ts</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>audio_offset_d</name> <operator>/=</operator> <literal type="number">1000000000.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>audio_offset_d</name> <operator>*=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>

<return>return <expr><name>audio_offset_d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>positive_round</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>floor</name><argument_list>(<argument><expr><name>val</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>ts_diff_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>diff</name> <init>= <expr><call><name>ts_to_frames</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>ts1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ts_to_frames</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>ts2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>positive_round</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>ts_diff_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ts_diff_frames</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>ts1</name></expr></argument>, <argument><expr><name>ts2</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>audio</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>min_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>min_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLAMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMP</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>minval</name></type></parameter>, <parameter><type><name>maxval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val &gt; maxval) ? maxval : ((val &lt; minval) ? minval : val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>resample_audio_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>audio_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>resampler</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>output</name><index>[<expr><name>MAX_AV_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>audio_resampler_resample</name><argument_list>(
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AV_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_audio_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_output</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>num</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>audio</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>mix</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>resample_audio_output</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>input</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>mix_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clamp_audio_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_output</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>float_size</name> <init>= <expr><name>bytes</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix_idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>audio</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>mix_data</name> <init>= <expr><name><name>mix</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>mix_end</name> <init>= <expr><operator>&amp;</operator><name><name>mix_data</name><index>[<expr><name>float_size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>mix_data</name> <operator>&lt;</operator> <name>mix_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><operator>*</operator><name>mix_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&gt;</operator> <literal type="number">1.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0f</literal></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>mix_data</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_and_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_output</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>audio_time</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>prev_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name><name>audio</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output_data</name></name></type> <name><name>data</name><index>[<expr><name>MAX_AUDIO_MIXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>active_mixes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>new_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_AUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio_time: %llu, prev_time: %llu, bytes: %lu"</literal></expr></argument>,
<argument><expr><name>audio_time</name></expr></argument>, <argument><expr><name>prev_time</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>inputs</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>active_mixes</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix_idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mix</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AUDIO_OUTPUT_FRAMES</name> <operator>*</operator> <name>MAX_AUDIO_CHANNELS</name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>audio</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>mix_idx</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mix</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>audio</name><operator>-&gt;</operator><name>input_cb</name></name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>input_param</name></name></expr></argument>, <argument><expr><name>prev_time</name></expr></argument>, <argument><expr><name>audio_time</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>new_ts</name></expr></argument>, <argument><expr><name>active_mixes</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>clamp_audio_output</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_audio_output</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>new_ts</name></expr></argument>, <argument><expr><name>AUDIO_OUTPUT_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>audio_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output</name></name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rate</name> <init>= <expr><name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_time</name> <init>= <expr><call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_time</name> <init>= <expr><name>start_time</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>audio_time</name> <init>= <expr><name>prev_time</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>audio_wait_time</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>
<call><name>audio_frames_to_ns</name><argument_list>(<argument><expr><name>rate</name></expr></argument>, <argument><expr><name>AUDIO_OUTPUT_FRAMES</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_set_thread_name</name><argument_list>(<argument><expr><literal type="string">"audio-io: audio thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audio_thread_name</name> <init>=
<expr><call><name>profile_store_name</name><argument_list>(<argument><expr><call><name>obs_get_profiler_name_store</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"audio_thread(%s)"</literal></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>os_event_try</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_sleep_ms</name><argument_list>(<argument><expr><name>audio_wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><name>audio_thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <call><name>os_gettime_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>audio_time</name> <operator>&lt;=</operator> <name>cur_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>AUDIO_OUTPUT_FRAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>audio_time</name> <operator>=</operator>
<name>start_time</name> <operator>+</operator> <call><name>audio_frames_to_ns</name><argument_list>(<argument><expr><name>rate</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_and_output</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>audio_time</name></expr></argument>, <argument><expr><name>prev_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_time</name> <operator>=</operator> <name>audio_time</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><name>audio_thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_reenable_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>audio_get_input_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,
<parameter><decl><type><name>audio_output_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>param</name></name> <operator>==</operator> <name>param</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>DARRAY_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>audio_input_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>audio_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>audio_output</name></name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>conversion</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>format</name></name> <operator>||</operator>
<name><name>input</name><operator>-&gt;</operator><name>conversion</name><operator>.</operator><name>samples_per_sec</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name> <operator>||</operator>
<name><name>input</name><operator>-&gt;</operator><name>conversion</name><operator>.</operator><name>speakers</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>speakers</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>from</name> <init>= <expr><block>{
<expr><operator>.</operator><name>format</name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>format</name></name></expr>,
<expr><operator>.</operator><name>samples_per_sec</name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr>,
<expr><operator>.</operator><name>speakers</name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>speakers</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>resample_info</name></name></type> <name>to</name> <init>= <expr><block>{
<expr><operator>.</operator><name>format</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>conversion</name><operator>.</operator><name>format</name></name></expr>,
<expr><operator>.</operator><name>samples_per_sec</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>conversion</name><operator>.</operator><name>samples_per_sec</name></name></expr>,
<expr><operator>.</operator><name>speakers</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>conversion</name><operator>.</operator><name>speakers</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <call><name>audio_resampler_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>resampler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blog</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"audio_input_init: Failed to "</literal>
<literal type="string">"create resampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audio_output_connect</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_convert_info</name></name> <modifier>*</modifier></type><name>conversion</name></decl></parameter>,
<parameter><decl><type><name>audio_output_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio</name> <operator>||</operator> <name>mi</name> <operator>&gt;=</operator> <name>MAX_AUDIO_MIXES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>audio_get_input_idx</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DARRAY_INVALID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_input</name></name></type> <name>input</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>conversion</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name></name> <operator>=</operator> <operator>*</operator><name>conversion</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>speakers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator>
<name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>AUDIO_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>speakers</name></name> <operator>==</operator> <name>SPEAKERS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>speakers</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>speakers</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>samples_per_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>conversion</name><operator>.</operator><name>samples_per_sec</name></name> <operator>=</operator>
<name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>audio_input_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>da_push_back</name><argument_list>(<argument><expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_output_disconnect</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mix_idx</name></decl></parameter>,
<parameter><decl><type><name>audio_output_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio</name> <operator>||</operator> <name>mix_idx</name> <operator>&gt;=</operator> <name>MAX_AUDIO_MIXES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>audio_get_input_idx</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>mix_idx</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>DARRAY_INVALID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>audio_input_free</name><argument_list>(<argument><expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>da_erase</name><argument_list>(<argument><expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>valid_audio_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>samples_per_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>info</name><operator>-&gt;</operator><name>speakers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>audio_output_open</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>audio</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_output</name></name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>planar</name> <init>= <expr><call><name>is_audio_planar</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_audio_params</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AUDIO_OUTPUT_INVALIDPARAM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>bzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>audio_output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>audio_output_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>get_audio_channels</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>speakers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>input_cb</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>input_callback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>input_param</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>input_param</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary><operator>)</operator> <operator>*</operator>
<call><name>get_audio_bytes_per_channel</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>input_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_event_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>, <argument><expr><name>OS_EVENT_TYPE_MANUAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>audio_thread</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>audio</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<return>return <expr><name>AUDIO_OUTPUT_SUCCESS</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>audio_output_close</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUDIO_OUTPUT_FAIL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>audio_output_close</name><parameter_list>(<parameter><decl><type><name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thread_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_event_signal</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thread_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix_idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>audio_input_free</name><argument_list>(<argument><expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>da_free</name><argument_list>(<argument><expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>os_event_destroy</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>stop_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bfree</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>audio_output_info</name></name> <modifier>*</modifier></type><name>audio_output_get_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>audio</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audio_output_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mix_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mix_idx</name> <operator>&lt;</operator> <name>MAX_AUDIO_MIXES</name></expr>;</condition> <incr><expr><name>mix_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>audio_mix</name></name> <modifier>*</modifier></type><name>mix</name> <init>= <expr><operator>&amp;</operator><name><name>audio</name><operator>-&gt;</operator><name>mixes</name><index>[<expr><name>mix_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mix</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>audio_output_get_block_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>audio</name></expr> ?</condition><then> <expr><name><name>audio</name><operator>-&gt;</operator><name>block_size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>audio_output_get_planes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>audio</name></expr> ?</condition><then> <expr><name><name>audio</name><operator>-&gt;</operator><name>planes</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>audio_output_get_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>audio</name></expr> ?</condition><then> <expr><name><name>audio</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>audio_output_get_sample_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>audio</name></expr> ?</condition><then> <expr><name><name>audio</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>samples_per_sec</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
